{"IRxsjPGh1oQ": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"2.73\"></text><text start=\"2.73\" dur=\"3.84\">So we&amp;#39;re going to do one last\nexample in this sequence.</text><text start=\"6.57\" dur=\"2.01\">We&amp;#39;ve been looking at\napproximation algorithms.</text><text start=\"8.58\" dur=\"2.56\">We&amp;#39;ve been looking at guess\nand check, exhaustive</text><text start=\"11.14\" dur=\"1.14\">enumeration.</text><text start=\"12.28\" dur=\"2.22\">We saw when we wanted to move\nto floating point, we needed</text><text start=\"14.5\" dur=\"2.45\">to be a little more clever, and\nthat led us to the idea of</text><text start=\"16.95\" dur=\"3.35\">bisection as a smart way of\nreducing the computation at</text><text start=\"20.3\" dur=\"3.42\">each stage, especially when we\nhave functions or problems</text><text start=\"23.72\" dur=\"3.2\">where there&amp;#39;s a monotonic\nrelationship between the value</text><text start=\"26.92\" dur=\"2.27\">we&amp;#39;re looking for and the\nguesses we&amp;#39;re making.</text><text start=\"29.19\" dur=\"2.23\">There&amp;#39;s one other, very\npowerful, algorithm for doing</text><text start=\"31.42\" dur=\"3.23\">approximations, due to Sir Isaac\nNewton, often called the</text><text start=\"34.65\" dur=\"3.34\">Newton-Raphson algorithm because\nit was found at the</text><text start=\"37.99\" dur=\"2.36\">same time by Newton\nand by Raphson.</text><text start=\"40.35\" dur=\"2.4\">Here&amp;#39;s the basic\nidea behind it.</text><text start=\"42.75\" dur=\"1.92\">We want to find the root\nof a polynomial.</text><text start=\"44.67\" dur=\"3.87\">I&amp;#39;ll remind you a polynomial,\np(x), is some sequence of</text><text start=\"48.54\" dur=\"4.77\">coefficients and powers, so it&amp;#39;s\na_n * x to the n-th power</text><text start=\"53.31\" dur=\"4.5\">+ a_n - 1 * x to the n minus\nfirst power and so on.</text><text start=\"57.81\" dur=\"3.99\">It&amp;#39;s just a sequence of numbers\ntimes powers of x, and</text><text start=\"61.8\" dur=\"3.5\">what we often want to do is find\na value r such that p(r)</text><text start=\"65.3\" dur=\"0.72\">is equal to 0.</text><text start=\"66.02\" dur=\"4.27\">We want to find the root, the\nplace where, on that x-axis,</text><text start=\"70.29\" dur=\"2.58\">that graph crosses 0.</text><text start=\"72.87\" dur=\"1.05\">Now, that sounds like\na lot of math.</text><text start=\"73.92\" dur=\"1.01\">Let&amp;#39;s make it a little\nsimpler.</text><text start=\"74.93\" dur=\"2.31\">A simple way to think about this\nis if we want to define,</text><text start=\"77.24\" dur=\"3.46\">for example, the square root\nof 24, we just need to find</text><text start=\"80.7\" dur=\"3.54\">the root of the polynomial\nx^2 - 24.</text><text start=\"84.24\" dur=\"3\">Makes sense, if we combine the\nvalue of x such that x^2 - 24</text><text start=\"87.24\" dur=\"2.59\">is equal to 0, we&amp;#39;re\ndone because that&amp;#39;s</text><text start=\"89.83\" dur=\"1.6\">the thing we want.</text><text start=\"91.43\" dur=\"3.61\">Now, what Newton showed was\nthat for things like</text><text start=\"95.04\" dur=\"4.14\">polynomials, if g is an\napproximation to the root, the</text><text start=\"99.18\" dur=\"9.4\">place where it&amp;#39;s equal to 0,\nthen g - p(g) / p&amp;#39;(g) is a</text><text start=\"108.58\" dur=\"3.78\">better approximation, where p&amp;#39;\nis just the derivative of p.</text><text start=\"112.36\" dur=\"1.46\">And if you haven&amp;#39;t\ndone calculus,</text><text start=\"113.82\" dur=\"0.6\">don&amp;#39;t worry about it.</text><text start=\"114.42\" dur=\"2.4\">We&amp;#39;ll show you in a second what\nthat means, but this is a</text><text start=\"116.82\" dur=\"0.78\">powerful tool.</text><text start=\"117.6\" dur=\"6.04\">Newton proved this, that given\nan approximation, g - p(g) /</text><text start=\"123.64\" dur=\"3.56\">p&amp;#39;(g) is a much better\napproximation.</text><text start=\"127.2\" dur=\"1.68\">OK, so what does this have\nto do with things?</text><text start=\"128.88\" dur=\"2.98\">Well, let&amp;#39;s look at an example,\na really simple case.</text><text start=\"131.86\" dur=\"4.59\">Suppose our polynomial is just\nsome coefficient c times x^2 +</text><text start=\"136.45\" dur=\"4.48\">k, then its first derivative\nis just 2cx.</text><text start=\"140.93\" dur=\"2.29\">And in particular, if the\npolynomial is just something</text><text start=\"143.22\" dur=\"4.5\">simple, like x^2 + k, then the\nderivative is just 2x.</text><text start=\"147.72\" dur=\"0.79\">Why is that nice?</text><text start=\"148.51\" dur=\"3.31\">Well, Newton-Raphson says that\ngiven a guess g for the root,</text><text start=\"151.82\" dur=\"5.87\">a better guess is just shown\nright here, is g - g^2 - k,</text><text start=\"157.69\" dur=\"1.76\">all divided by 2g.</text><text start=\"159.45\" dur=\"3.23\">And remember, we were using\nthis form to find square</text><text start=\"162.68\" dur=\"5.59\">roots, because it says if k is\nthe value of the square root I</text><text start=\"168.27\" dur=\"2.74\">want to find, then that&amp;#39;s the\npolynomial I want to use.</text><text start=\"171.01\" dur=\"2.86\">So this little formula says\nhere&amp;#39;s a better way of finding</text><text start=\"173.87\" dur=\"4.43\">a guess for the square\nroot of k.</text><text start=\"178.3\" dur=\"2.97\">All right, let&amp;#39;s put\nthat together.</text><text start=\"181.27\" dur=\"2.96\">We can now have another way of\ngenerating guesses, which we</text><text start=\"184.23\" dur=\"3.17\">can check, which turns out to\nbe very efficient, so here&amp;#39;s</text><text start=\"187.4\" dur=\"1.09\">some code that would do it.</text><text start=\"188.49\" dur=\"2.47\">Again, I&amp;#39;ve got a little epsilon\nthat tells me how</text><text start=\"190.96\" dur=\"1.24\">close I want to get.</text><text start=\"192.2\" dur=\"2.17\">Let&amp;#39;s assume I&amp;#39;m looking for\nthe square root of 24.</text><text start=\"194.37\" dur=\"2.26\">We&amp;#39;ll try some other examples\nin a second.</text><text start=\"196.63\" dur=\"1.56\">I&amp;#39;m going to give an initial\nguess, which</text><text start=\"198.19\" dur=\"1.76\">will just be y / 2.</text><text start=\"199.95\" dur=\"1.19\">It&amp;#39;s not a very good\nguess, but it&amp;#39;s</text><text start=\"201.14\" dur=\"1.57\">reasonable place to go.</text><text start=\"202.71\" dur=\"1.4\">And look at the code.</text><text start=\"204.11\" dur=\"3.27\">Very crisp, very clean,\nvery efficient.</text><text start=\"207.38\" dur=\"6.01\">It basically says check to\nsee am I close enough.</text><text start=\"213.39\" dur=\"3.476\">Is the difference between the\nguess^2 and y less than or</text><text start=\"216.866\" dur=\"0.684\">equal to the epsilon.</text><text start=\"217.55\" dur=\"2.56\">If it&amp;#39;s bigger than that,\nI&amp;#39;m not close enough.</text><text start=\"220.11\" dur=\"3.47\">And then Newton says get a new\nguess by taking the old value</text><text start=\"223.58\" dur=\"4.78\">of guess, taking guess^2 - 1,\ndivide it by 2 * guess, which</text><text start=\"228.36\" dur=\"2.46\">is the derivative, and\nuse that to create a</text><text start=\"230.82\" dur=\"1.59\">new binding for guess.</text><text start=\"232.41\" dur=\"1.21\">You just keep updating.</text><text start=\"233.62\" dur=\"2.43\">Do that until I get close\nenough, and when I&amp;#39;m done,</text><text start=\"236.05\" dur=\"2.31\">just print out the result.</text><text start=\"238.36\" dur=\"1.18\">Nice and crisp.</text><text start=\"239.54\" dur=\"1.05\">What&amp;#39;s this doing?</text><text start=\"240.59\" dur=\"1.96\">It&amp;#39;s generating guesses.</text><text start=\"242.55\" dur=\"2.63\">There&amp;#39;s the generation.</text><text start=\"245.18\" dur=\"1.54\">But it&amp;#39;s not doing\nit exhaustively.</text><text start=\"246.72\" dur=\"2.76\">It&amp;#39;s using this property of\nmathematics together, and then</text><text start=\"249.48\" dur=\"3.26\">it&amp;#39;s testing, right here,\nto see if I&amp;#39;m done.</text><text start=\"252.74\" dur=\"2.32\">So it&amp;#39;s another example of a\ngenerate and test kind of</text><text start=\"255.06\" dur=\"3.25\">algorithm, and let&amp;#39;s look at\nwhat happens if we run it.</text><text start=\"258.31\" dur=\"2.11\">So in my IDLE, I&amp;#39;ve got just\na version of that.</text><text start=\"260.42\" dur=\"1.86\">I&amp;#39;m going to do it with\n24 to start with.</text><text start=\"262.28\" dur=\"5.25\">And if I evaluate this, it\nprints out its guesses, starts</text><text start=\"267.53\" dur=\"4.58\">with a value of 14, and\nthen goes to 7, 5.</text><text start=\"272.11\" dur=\"3.07\">And you see, in just\n4 guesses, it gets</text><text start=\"275.18\" dur=\"1.51\">a pretty good answer.</text><text start=\"276.69\" dur=\"1.06\">Let&amp;#39;s try a different example.</text><text start=\"277.75\" dur=\"3.942\">Let&amp;#39;s try our good old\nexample of 25.</text><text start=\"281.692\" dur=\"5.588\">Again, if I evaluate that one,\nyou&amp;#39;ll see again, in basically</text><text start=\"287.28\" dur=\"3.27\">five steps because the first one\nwas using 12 and a half,</text><text start=\"290.55\" dur=\"3.05\">it gets to a quite good\napproximation of it.</text><text start=\"293.6\" dur=\"1.39\">Let&amp;#39;s try something\neven bigger.</text><text start=\"294.99\" dur=\"1.93\">I&amp;#39;ll go back over here.</text><text start=\"296.92\" dur=\"5.75\">Let&amp;#39;s do my example of 12345\nand let&amp;#39;s evaluate that.</text><text start=\"302.67\" dur=\"1.76\">And if we do that--</text><text start=\"304.43\" dur=\"0.77\">huh.</text><text start=\"305.2\" dur=\"0.67\">What did it take me?</text><text start=\"305.87\" dur=\"5.21\">1, 2, 3, 4, 5, 6, 7, 8, 9-- in\n10 steps, it got to a really</text><text start=\"311.08\" dur=\"1.41\">good solution.</text><text start=\"312.49\" dur=\"1.03\">So this is what?</text><text start=\"313.52\" dur=\"3.82\">This is another way of simply\nfiguring out how to generate</text><text start=\"317.34\" dur=\"2.93\">good guesses and then\ntesting them.</text><text start=\"320.27\" dur=\"2.78\">So we&amp;#39;ve now seen several\nexamples.</text><text start=\"323.05\" dur=\"1.78\">We&amp;#39;ve got this idea of\niterative algorithms.</text><text start=\"324.83\" dur=\"2.74\">We&amp;#39;re using the same piece of\ncode over and over again.</text><text start=\"327.57\" dur=\"2.94\">We&amp;#39;re using that to build up\nthis idea of a guess and check</text><text start=\"330.51\" dur=\"3.45\">method where we guess solutions\nand then check them.</text><text start=\"333.96\" dur=\"2.86\">We use a looping construct to\ngenerate the guesses, and then</text><text start=\"336.82\" dur=\"1.95\">we just check and keep going.</text><text start=\"338.77\" dur=\"1.16\">And what have we seen?</text><text start=\"339.93\" dur=\"2.31\">We&amp;#39;ve seen we could do\nexhaustive enumeration, where</text><text start=\"342.24\" dur=\"2.02\">we just do a whole\nbunch of trials.</text><text start=\"344.26\" dur=\"2.64\">We could cut down on the search\nin a clever way by</text><text start=\"346.9\" dur=\"3.31\">simply using bisection,\nbisecting the range of places</text><text start=\"350.21\" dur=\"1.99\">where we&amp;#39;re looking for guesses\nuntil we get to</text><text start=\"352.2\" dur=\"1.29\">something close enough.</text><text start=\"353.49\" dur=\"2.44\">Or for the group finding case,\nwhich it turns out to be a</text><text start=\"355.93\" dur=\"2.97\">very general case, we can be\nreally efficient by taking</text><text start=\"358.9\" dur=\"3.08\">advantage of a mathematical\nproperty to very quickly cut</text><text start=\"361.98\" dur=\"2.26\">down on where the\nsolution lies.</text><text start=\"364.24\" dur=\"2.79\">Those are examples of iterative\nalgorithms, and</text><text start=\"367.03\" dur=\"2.22\">they&amp;#39;re examples, in particular,\nof guess and check</text><text start=\"369.25\" dur=\"2.6\">methods that turned out\nto be really powerful.</text><text start=\"371.85\" dur=\"2.15\">And we&amp;#39;re going to give you a\nchance to explore those as we</text><text start=\"374\" dur=\"1.25\">move through the class.</text><text start=\"375.25\" dur=\"0.9\"></text></transcript>\n", "cHpto4Yc45o": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.76\"></text><text start=\"0.76\" dur=\"3.39\">John Guttag: In the last segment, we\ntalked about simulation models in</text><text start=\"4.15\" dur=\"2.06\">enormous generality.</text><text start=\"6.21\" dur=\"3.77\">Today, I want to get more specific, look\nat an example of how a simulation</text><text start=\"9.98\" dur=\"3.15\">model can be built, and get\nsome practice in designing</text><text start=\"13.13\" dur=\"1.79\">classes along the way.</text><text start=\"14.92\" dur=\"4.14\">So let&amp;#39;s start by looking at the notion\nof Brownian motion, as shown by</text><text start=\"19.06\" dur=\"4.42\">these red and blue dots\nmoving on your screen.</text><text start=\"23.48\" dur=\"5.23\">In 1827, the Scottish botanist Robert\nBrown observed that pollen particles</text><text start=\"28.71\" dur=\"3.909\">suspended in water seemed to\nfloat around at random.</text><text start=\"32.619\" dur=\"4.161\">He had no plausible explanation for this\nso-called Brownian motion, and</text><text start=\"36.78\" dur=\"3.59\">made no attempts to model\nit mathematically.</text><text start=\"40.37\" dur=\"5.27\">A clear mathematical model of the\nphenomenon was first presented in 1900</text><text start=\"45.64\" dur=\"5.82\">in Louis Bachelier&amp;#39;s doctoral thesis,\nthe theory of speculation.</text><text start=\"51.46\" dur=\"4.625\">However, unfortunately for Louis, since\nthis thesis dealt with it the</text><text start=\"56.085\" dur=\"4.435\">then very disreputable problem of\nunderstanding financial markets, it</text><text start=\"60.52\" dur=\"2.94\">was largely ignored by respectable\nacademics.</text><text start=\"63.46\" dur=\"3.36\">And in fact, he struggled\nto even get a job.</text><text start=\"66.82\" dur=\"6.03\">Five years later, however, in 1905,\nAlbert Einstein, then a young man,</text><text start=\"72.85\" dur=\"3.67\">brought this kind of stochastic thinking\nto the world of physics, with</text><text start=\"76.52\" dur=\"4.23\">a mathematical model almost the same\nas Bachelier&amp;#39;s and a description of</text><text start=\"80.75\" dur=\"5.05\">how that model could be used to confirm\nthe existence of atoms.</text><text start=\"85.8\" dur=\"3.72\">For reasons certainly lost on me,\npeople seemed to think that</text><text start=\"89.52\" dur=\"3.24\">understanding physics was more\nimportant than making money.</text><text start=\"92.76\" dur=\"1.79\">I guess the times were different.</text><text start=\"94.55\" dur=\"3.03\">Brownian motion is example of something\nthat has come to be called a</text><text start=\"97.58\" dur=\"1.33\">random walk.</text><text start=\"98.91\" dur=\"4.26\">Random walks are widely used to model\nphysical processes, e.g. heat</text><text start=\"103.17\" dur=\"5.05\">diffusion, biological processes, for\nexample, the kinetic displacement of</text><text start=\"108.22\" dur=\"3\">RNA from heteroduplexes by DNA --</text><text start=\"111.22\" dur=\"4.08\">I hope some of you know what that\nmeans, I&amp;#39;m not sure I do --</text><text start=\"115.3\" dur=\"2.07\">and social processes.</text><text start=\"117.37\" dur=\"2.98\">For example, getting back to\nBachelier, the movements</text><text start=\"120.35\" dur=\"1.81\">of the stock market.</text><text start=\"122.16\" dur=\"3.66\">What I want to do now, though, is look\nat an example of a random walk that&amp;#39;s</text><text start=\"125.82\" dur=\"2.21\">actually a walk.</text><text start=\"128.03\" dur=\"4.24\">Imagine, if you can, a drunken farmer\nstanding in the middle of the field.</text><text start=\"132.27\" dur=\"4.63\">And every second he takes one\nstep in a random direction.</text><text start=\"136.9\" dur=\"4.48\">Now I want you to ponder the question,\nwhat is the expected distance from the</text><text start=\"141.38\" dur=\"3.62\">origin in, say 1,000 seconds.</text><text start=\"145\" dur=\"4.59\">More generally, if the farmer takes many\nsteps, is he likely to move ever</text><text start=\"149.59\" dur=\"3.88\">further from the origin, or is he more\nlikely to wander back to the origin,</text><text start=\"153.47\" dur=\"3.87\">over and over again, and end up\nnot far from where he started?</text><text start=\"157.34\" dur=\"2.2\">Let&amp;#39;s write a simulation to find out.</text><text start=\"159.54\" dur=\"6.9\">Before we do that, before we build any\ncomplicated computation, it&amp;#39;s always a</text><text start=\"166.44\" dur=\"4.48\">good idea to develop some intuition\nabout the situation the program is</text><text start=\"170.92\" dur=\"2.02\">intended to model.</text><text start=\"172.94\" dur=\"4.5\">Let&amp;#39;s start by sketching the simple\nmodel of the situation using Cartesian</text><text start=\"177.44\" dur=\"1.77\">coordinates.</text><text start=\"179.21\" dur=\"3.81\">Assume that the farmer is standing\nin the field where the grass has</text><text start=\"183.02\" dur=\"3.55\">mysteriously been cut to resemble\na piece of graph paper.</text><text start=\"186.57\" dur=\"1.44\">Let&amp;#39;s assume further--</text><text start=\"188.01\" dur=\"2.19\">put the farmer right here\nin the middle--</text><text start=\"190.2\" dur=\"3.92\">assume further that each steps the\nfarmer takes is of length 1, and is</text><text start=\"194.12\" dur=\"2.79\">parallel to either the x or y-axis.</text><text start=\"196.91\" dur=\"2.285\">Clearly this is an oversimplification.</text><text start=\"199.195\" dur=\"3.215\">But it&amp;#39;s a common approach to\nbuilding simulation models.</text><text start=\"202.41\" dur=\"2.96\">We start with something simple,\nand then add complexity a</text><text start=\"205.37\" dur=\"1.77\">little bit at a time.</text><text start=\"207.14\" dur=\"4.68\">All right, after one step the farmer\nwill be either here, or</text><text start=\"211.82\" dur=\"3.84\">here, or here, or here.</text><text start=\"215.66\" dur=\"4.67\">So we see that after one step, the\nfarmer is exactly one unit away from</text><text start=\"220.33\" dur=\"1.42\">where he started.</text><text start=\"221.75\" dur=\"1.83\">Let&amp;#39;s look at the second step.</text><text start=\"223.58\" dur=\"2.98\">Without loss of generality,\nwe&amp;#39;ll assume that he took</text><text start=\"226.56\" dur=\"1.52\">this first step eastward.</text><text start=\"228.08\" dur=\"2.88\">It&amp;#39;ll be symmetric if we went\nin a different direction.</text><text start=\"230.96\" dur=\"4.12\">After the second step, he could be right\nback where you started, that is</text><text start=\"235.08\" dur=\"2.67\">to say zero units away.</text><text start=\"237.75\" dur=\"4.49\">Or he could be another step east,\ntwo units away, each of those a</text><text start=\"242.24\" dur=\"1.67\">quarter of the time.</text><text start=\"243.91\" dur=\"3.45\">And half the time, he&amp;#39;ll\nbe there or there.</text><text start=\"247.36\" dur=\"1.91\">How far away is that?</text><text start=\"249.27\" dur=\"4.55\">Well that&amp;#39;s the square\nroot of 2 units away.</text><text start=\"253.82\" dur=\"1.62\">How do we know that?</text><text start=\"255.44\" dur=\"3.139\">Let&amp;#39;s look at old friend the\nPythagorean theorem.</text><text start=\"258.579\" dur=\"1.931\">We can look at it here.</text><text start=\"260.51\" dur=\"7.39\">And we know that a^2 + b^2 = c^2 .</text><text start=\"267.9\" dur=\"7.22\">Therefore c = sqrt(a^2 + b^2)</text><text start=\"275.12\" dur=\"2.67\">If we go back here, we\nlook at say, that x.</text><text start=\"277.79\" dur=\"3.76\">We see that a = 1 and b=1 .</text><text start=\"281.55\" dur=\"5.95\">And therefore this distance here\nis going to be sqrt(2) .</text><text start=\"287.5\" dur=\"3.93\">All right, I could now look at the third\nstep and keep drawing circles</text><text start=\"291.43\" dur=\"4.84\">all over the place, but it&amp;#39;s starting\nto get pretty complicated.</text><text start=\"296.27\" dur=\"3.49\">And that suggests to me that it&amp;#39;s\ntime to stop drawing pictures--</text><text start=\"299.76\" dur=\"3.35\">and you&amp;#39;ll probably be relieved,\ngiven my drawing ability--</text><text start=\"303.11\" dur=\"3.27\">and instead start writing code.</text><text start=\"306.38\" dur=\"4.03\">Build a simulation that will actually\ngive us the answer we want.</text><text start=\"310.41\" dur=\"2.37\">OK, let&amp;#39;s give it a shot.</text><text start=\"312.78\" dur=\"2.7\">Before we do, what&amp;#39;s your intuition?</text><text start=\"315.48\" dur=\"1.99\">Give it a minute, think about it.</text><text start=\"317.47\" dur=\"7.13\">My intuition is that since more than\nhalf the time here, after two steps</text><text start=\"324.6\" dur=\"6.08\">the farmer is further away from the\norigin than after one step, maybe the</text><text start=\"330.68\" dur=\"2.32\">longer he walks, the further he&amp;#39;ll be.</text><text start=\"333\" dur=\"1.41\">I&amp;#39;m not positive.</text><text start=\"334.41\" dur=\"3.29\">But that&amp;#39;s my guess going\ninto the simulation.</text><text start=\"337.7\" dur=\"1.76\">All right, onto the coding.</text><text start=\"339.46\" dur=\"4.57\">But before we write the simulation, as\nusual, we want to try to invent some</text><text start=\"344.03\" dur=\"4.08\">classes that correspond to the types of\nthings that appear in the situation</text><text start=\"348.11\" dur=\"2.35\">we&amp;#39;re attempting to model.</text><text start=\"350.46\" dur=\"4.37\">Three classes seem potentially useful.</text><text start=\"354.83\" dur=\"3.9\">We probably want a class Location,\nbecause after all, it&amp;#39;s mostly what</text><text start=\"358.73\" dur=\"4.8\">we&amp;#39;ve been talking about is the location\nof the drunken farmer.</text><text start=\"363.53\" dur=\"2.99\">We probably want a class Field,\ncorresponding to the</text><text start=\"366.52\" dur=\"1.96\">graph paper we drew.</text><text start=\"368.48\" dur=\"3.85\">And surely we&amp;#39;re going to need something\ncorresponding to a Drunk,</text><text start=\"372.33\" dur=\"3.32\">because that&amp;#39;s going to have\nto model the movements.</text><text start=\"375.65\" dur=\"2.67\">Now let&amp;#39;s look at each\nof those classes.</text><text start=\"378.32\" dur=\"5.09\">Come over to the code, and\nlook at class location.</text><text start=\"383.41\" dur=\"1.22\">It&amp;#39;s very simple.</text><text start=\"384.63\" dur=\"2.21\">It&amp;#39;s got initialization.</text><text start=\"386.84\" dur=\"5.1\">But even here, we see that a decision\nhas been made, as simple as it is.</text><text start=\"391.94\" dur=\"6.63\">We see that a location is going to\nhave only x and y coordinates.</text><text start=\"398.57\" dur=\"4.16\">That tells us that it&amp;#39;s going to\nbe a two dimensional field.</text><text start=\"402.73\" dur=\"3.34\">We&amp;#39;re modeling a farmer not,\noh, say, a pigeon.</text><text start=\"406.07\" dur=\"5.45\">There is no ability for the farmer\nto fly up into z-coordinate.</text><text start=\"411.52\" dur=\"3.51\">Also, it looks like perhaps we&amp;#39;re ready\nto generalize our notion of</text><text start=\"415.03\" dur=\"5.67\">moving due east, west, north, or south,\nbecause we&amp;#39;re allowing x and y</text><text start=\"420.7\" dur=\"1.99\">to be floats.</text><text start=\"422.69\" dur=\"8.4\">We&amp;#39;ve got move, which takes a self with\ndeltaX and deltaY , and returns a</text><text start=\"431.09\" dur=\"4.49\">new location, in which we&amp;#39;ve implemented\nx and y by the delta.</text><text start=\"435.58\" dur=\"1.85\">Note that deltas could be negative.</text><text start=\"437.43\" dur=\"4.6\">So this isn&amp;#39;t saying that we&amp;#39;re always\nmoving in one or another direction.</text><text start=\"442.03\" dur=\"0.75\">We can get x.</text><text start=\"442.78\" dur=\"1.54\">We can get y.</text><text start=\"444.32\" dur=\"3.4\">And here we&amp;#39;re using the good old\nPythagorean theorem, as we&amp;#39;ve just</text><text start=\"447.72\" dur=\"2.83\">seen, to find the distance.</text><text start=\"450.55\" dur=\"4.87\">And finally we have a way\nto print the location.</text><text start=\"455.42\" dur=\"7.24\">So reviewing, the notable aspects of\nLocation are two dimensions, no x and</text><text start=\"462.66\" dur=\"6.87\">no y, no built in assumptions\nabout directions.</text><text start=\"469.53\" dur=\"4.92\">That&amp;#39;s because our delta x\nand delta y are floats.</text><text start=\"474.45\" dur=\"5.02\">All right, moving on, let&amp;#39;s look\nat our next interesting type.</text><text start=\"479.47\" dur=\"3.19\">That&amp;#39;s going to be Field.</text><text start=\"482.66\" dur=\"4.06\">Fields, like Locations,\nare also quite simple.</text><text start=\"486.72\" dur=\"2\">We can initialize them.</text><text start=\"488.72\" dur=\"2.87\">We can add a Drunk to the field.</text><text start=\"491.59\" dur=\"1.94\">We can move the Drunk.</text><text start=\"493.53\" dur=\"4.28\">This is probably the only really\ninteresting function we have here in</text><text start=\"497.81\" dur=\"2.16\">fields, interesting method.</text><text start=\"499.97\" dur=\"3.46\">So we say if the Drunk is not\nalready there, then we</text><text start=\"503.43\" dur=\"3.34\">will raise an exception.</text><text start=\"506.77\" dur=\"3.77\">Otherwise, we&amp;#39;ll take a step.</text><text start=\"510.54\" dur=\"1.2\">What does that mean?</text><text start=\"511.74\" dur=\"1\">We don&amp;#39;t know yet.</text><text start=\"512.74\" dur=\"3.28\">That depends upon the kind of\nDrunk we&amp;#39;re looking at.</text><text start=\"516.02\" dur=\"2.47\">And that will allow us to take a step.</text><text start=\"518.49\" dur=\"5.24\">And that will return a distance along\nthe x direction and the y direction.</text><text start=\"523.73\" dur=\"2.33\">We&amp;#39;ll get the current Location.</text><text start=\"526.06\" dur=\"4.55\">And then we&amp;#39;ll update the current\nLocation with whatever we got from</text><text start=\"530.61\" dur=\"2.5\">Drunk.takeStep()</text><text start=\"533.11\" dur=\"4.27\">So what are the notable aspects of class\nField that we might look at?</text><text start=\"537.38\" dur=\"4.57\">Well one thing we see about Fields\nis that there can be many Drunks.</text><text start=\"541.95\" dur=\"2.83\">We might or might not\nchoose to use that.</text><text start=\"544.78\" dur=\"2.17\">There can be many Drunks in the Field.</text><text start=\"546.95\" dur=\"4.15\">And furthermore, it seems to\nbe that the Drunks can</text><text start=\"551.1\" dur=\"1.86\">be at the same Location.</text><text start=\"552.96\" dur=\"4.61\">We&amp;#39;ve not put in any restrictions about\nwhere the Drunks are relative to</text><text start=\"557.57\" dur=\"1.8\">each other.</text><text start=\"559.37\" dur=\"4.69\">The final thing we&amp;#39;ll notice is the\nField seems to be unbounded.</text><text start=\"564.06\" dur=\"3.94\">We&amp;#39;ve said nothing about the Drunk\nfalling off the edge of the Field, or</text><text start=\"568\" dur=\"2.16\">running into a fence.</text><text start=\"570.16\" dur=\"4.83\">Again, these are simplifications, which\nwe may choose to remove later.</text><text start=\"574.99\" dur=\"2.75\">The final class is actually\ntwo classes.</text><text start=\"577.74\" dur=\"2.53\">And since it&amp;#39;s a little bit complicated,\nand I want to show you</text><text start=\"580.27\" dur=\"4.04\">things about it, I&amp;#39;m going to look at\nthem over here on the PowerPoint,</text><text start=\"584.31\" dur=\"4.17\">rather than on the IDLE window.</text><text start=\"588.48\" dur=\"2.32\">As we guessed, I had a class Drunk.</text><text start=\"590.8\" dur=\"2.02\">But look how simple it is.</text><text start=\"592.82\" dur=\"5.37\">The only thing the Drunk does is it has\na name, and it can print the name.</text><text start=\"598.19\" dur=\"3.28\">What we see here is really\ndrunk is what we before</text><text start=\"601.47\" dur=\"2.42\">called an abstract class.</text><text start=\"603.89\" dur=\"3.14\">It&amp;#39;s not intended to do anything\nuseful by itself.</text><text start=\"607.03\" dur=\"4.26\">It&amp;#39;s intended to be sub-classed to give\nus different kinds of Drunks.</text><text start=\"611.29\" dur=\"1.25\">And as we&amp;#39;ll see--</text><text start=\"612.54\" dur=\"2.55\">not in this segment, but\nin a future segment--</text><text start=\"615.09\" dur=\"4.89\">we can use it to create some rather\ninteresting and divergent behaviors,</text><text start=\"619.98\" dur=\"3.44\">depending upon the predilection\nof individual Drunks.</text><text start=\"623.42\" dur=\"3.88\">This segment, we&amp;#39;ll look at only\none Drunk, one class of Drunk.</text><text start=\"627.3\" dur=\"2.34\">And I&amp;#39;m going to call\nthat the UsualDrunk.</text><text start=\"629.64\" dur=\"3.18\">That&amp;#39;s the kind of Drunk we&amp;#39;ve\nbeen talking about so far.</text><text start=\"632.82\" dur=\"6.11\">The most important thing to see here\nis that I&amp;#39;m importing class random.</text><text start=\"638.93\" dur=\"5.11\">Most programming languages, including\nPython, include simple ways to write</text><text start=\"644.04\" dur=\"1.74\">programs that use randomness.</text><text start=\"645.78\" dur=\"5.18\">When we need randomness in a Python\nprogram, we import the class random,</text><text start=\"650.96\" dur=\"4.96\">and that supplies us with a whole\nvariety of useful functions.</text><text start=\"655.92\" dur=\"1.48\">Here we&amp;#39;re only using one.</text><text start=\"657.4\" dur=\"3.15\">We are using the function\nrandom.choice() .</text><text start=\"660.55\" dur=\"4.72\">random.choice() has its argument, a\nsequence, and at random chooses a</text><text start=\"665.27\" dur=\"2.58\">single element of that sequence.</text><text start=\"667.85\" dur=\"3.56\">With equal probability, it\nmight choose any element.</text><text start=\"671.41\" dur=\"6.18\">So for example, if I were to look at\nsomething like random.choice(range(3))</text><text start=\"677.59\" dur=\"5.23\">, it would at random return an\ninteger and the range what?</text><text start=\"682.82\" dur=\"4.68\">0 to 3, because we know that&amp;#39;s the\nsequence range(3) generates.</text><text start=\"687.5\" dur=\"6.37\">Here, it will return a random element of\nstepChoices , which we define to be</text><text start=\"693.87\" dur=\"5.18\">a list of tuples corresponding to the\nsteps in the north, south, east, and</text><text start=\"699.05\" dur=\"1.73\">west direction.</text><text start=\"700.78\" dur=\"4.6\">So for example, 0,0 is a step north.</text><text start=\"705.38\" dur=\"6.63\">0, - 1 is a step south, a step\neast, and a step west.</text><text start=\"712.01\" dur=\"1.42\">With that, I&amp;#39;ll stop.</text><text start=\"713.43\" dur=\"3.53\">And in the next segment we&amp;#39;ll use these\nclasses to start building our</text><text start=\"716.96\" dur=\"1.53\">first interesting simulation.</text><text start=\"718.49\" dur=\"1.25\"></text></transcript>\n", "BWBUXxyRILw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.435\"></text><text start=\"0.435\" dur=\"2.255\">PROFESSOR W. ERIC L. GRIMSON:\nWelcome back.</text><text start=\"2.69\" dur=\"3.07\">We&amp;#39;re almost done with this course and,\nif you think about it, you&amp;#39;ve</text><text start=\"5.76\" dur=\"3.22\">seen, actually, a surprising\namount of information--</text><text start=\"8.98\" dur=\"1.84\">knowledge, tools, techniques--</text><text start=\"10.82\" dur=\"3.71\">that really help you not only think\nabout how to program in Python but</text><text start=\"14.53\" dur=\"4.27\">more importantly to think about how to\nattack problems computationally.</text><text start=\"18.8\" dur=\"4.44\">In this penultimate lecture, we&amp;#39;re\ngoing to have a set of cameo</text><text start=\"23.24\" dur=\"4.02\">appearances, because we want to show\nyou how the tools that you&amp;#39;ve been</text><text start=\"27.26\" dur=\"0.53\">developing--</text><text start=\"27.79\" dur=\"1.74\">the tools you&amp;#39;ve been thinking about--</text><text start=\"29.53\" dur=\"4.63\">are the basis for a great variety of\nreally interesting applications.</text><text start=\"34.16\" dur=\"3.72\">Now, in fairness, you&amp;#39;ll need some more\nsophisticated tools in some cases</text><text start=\"37.88\" dur=\"2.7\">to really get to the kinds of\napplications you see here.</text><text start=\"40.58\" dur=\"4.19\">But I hope you see, through these cameo\nappearances, a thread of the</text><text start=\"44.77\" dur=\"2.95\">kinds of ideas you&amp;#39;ve been\nusing showing up.</text><text start=\"47.72\" dur=\"3.86\">We&amp;#39;re going to feature videos from five\ndifferent MIT computer science</text><text start=\"51.58\" dur=\"1.13\">professors--</text><text start=\"52.71\" dur=\"3.41\">Fredo Durand, Sam Madden,\nDana Moshkovitz, Collin</text><text start=\"56.12\" dur=\"2.22\">Stultz, and Russ Tedrake--</text><text start=\"58.34\" dur=\"2.56\">all talking about different\napplications--</text><text start=\"60.9\" dur=\"1.49\">of cutting edge research--</text><text start=\"62.39\" dur=\"2.69\">that use the kinds of tools\nyou&amp;#39;ve been seeing here.</text><text start=\"65.08\" dur=\"1.51\">So you&amp;#39;re going to see examples--</text><text start=\"66.59\" dur=\"5.38\">from graphics, from big data and\ndatabases, from computational theory,</text><text start=\"71.97\" dur=\"3.03\">from medical applications,\nand from robotics--</text><text start=\"75\" dur=\"3.68\">that really demonstrate how\nwhat you&amp;#39;re learning</text><text start=\"78.68\" dur=\"1.77\">is incredibly important.</text><text start=\"80.45\" dur=\"1.25\">Enjoy.</text><text start=\"81.7\" dur=\"0.34\"></text></transcript>\n", "jx0WwCGCh-0": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.65\"></text><text start=\"1.65\" dur=\"3.11\">ERIC GRIMSON: We&amp;#39;ve now added tuples,\ngeneralization of strengths, an</text><text start=\"4.76\" dur=\"3.67\">ordered sequence of elements, where\nthe elements can be any structure.</text><text start=\"8.43\" dur=\"3.2\">And we&amp;#39;ve already seen that a lot of the\noperations we wanted on strings,</text><text start=\"11.63\" dur=\"1.88\">we&amp;#39;re going to have on tuples.</text><text start=\"13.51\" dur=\"4.07\">We&amp;#39;re going to add another kind\nof structure called a list.</text><text start=\"17.58\" dur=\"2.41\">And it looks a lot like tuples.</text><text start=\"19.99\" dur=\"2.8\">And again, lists are ordered\nsequences of values.</text><text start=\"22.79\" dur=\"3.05\">Each one&amp;#39;s identified by an index, so\nit&amp;#39;s going to support all the same</text><text start=\"25.84\" dur=\"2.31\">kinds of operations I saw before.</text><text start=\"28.15\" dur=\"5.02\">The difference here is we&amp;#39;re going to\nuse these square brackets rather than</text><text start=\"33.17\" dur=\"4.61\">the parentheses to distinguish a\nlist or to create a list, as</text><text start=\"37.78\" dur=\"1.26\">opposed to a tuple.</text><text start=\"39.04\" dur=\"2.62\">So they are a little different in terms\nof how they&amp;#39;re going to look.</text><text start=\"41.66\" dur=\"2.75\">And as a consequence, and one nice\nthing, is that singletons are now</text><text start=\"44.41\" dur=\"0.86\">pretty straightforward.</text><text start=\"45.27\" dur=\"3.43\">It&amp;#39;s just a square bracket, the entry,\nand another square bracket.</text><text start=\"48.7\" dur=\"3.11\">I don&amp;#39;t have to put that annoying comma\nin that I had to do with tuples</text><text start=\"51.81\" dur=\"3.85\">in order to distinguish between an\narithmetic expression and a tuple with</text><text start=\"55.66\" dur=\"1.53\">just one element.</text><text start=\"57.19\" dur=\"0.78\">Looks much the same.</text><text start=\"57.97\" dur=\"1.44\">So what&amp;#39;s the big deal?</text><text start=\"59.41\" dur=\"3.86\">Well, there&amp;#39;s one very big difference,\nand it&amp;#39;s a really important one.</text><text start=\"63.27\" dur=\"2.29\">Which is that lists are mutable.</text><text start=\"65.56\" dur=\"0.9\">And what does that mean?</text><text start=\"66.46\" dur=\"1.91\">It means we can change them.</text><text start=\"68.37\" dur=\"1.11\">What does that mean?</text><text start=\"69.48\" dur=\"4.735\">Well, things like ints, floats, strings,\nand tuples are immutable.</text><text start=\"74.215\" dur=\"3.965\">And that means that we can&amp;#39;t go in and\nchange an element inside of them.</text><text start=\"78.18\" dur=\"2.32\">Now for ints and floats,\nthat&amp;#39;s obvious.</text><text start=\"80.5\" dur=\"2.95\">And tuples, we just introduced, so we\nsort of have to accept that on faith.</text><text start=\"83.45\" dur=\"3.38\">But if you think about strings, you can\nget elements of strings out-- you</text><text start=\"86.83\" dur=\"1.13\">can slice into strings--</text><text start=\"87.96\" dur=\"4.56\">but you can&amp;#39;t go in and directly change\none character in a string.</text><text start=\"92.52\" dur=\"1.19\">They&amp;#39;re not mutable.</text><text start=\"93.71\" dur=\"0.69\">They&amp;#39;re immutable.</text><text start=\"94.4\" dur=\"0.985\">They don&amp;#39;t change.</text><text start=\"95.385\" dur=\"3.735\">On the other hand, lists can be modified\nafter they&amp;#39;re created.</text><text start=\"99.12\" dur=\"2.06\">And why would we want to do that?</text><text start=\"101.18\" dur=\"3.23\">Well, in part because there are going\nto be some problems where that&amp;#39;s</text><text start=\"104.41\" dur=\"1.25\">really valuable.</text><text start=\"105.66\" dur=\"1.32\">So what does that mean?</text><text start=\"106.98\" dur=\"2.66\">Some data objects, we really\nwant to treat as if fixed.</text><text start=\"109.64\" dur=\"3.59\">It says we create new versions of them,\nwe combine variables to them,</text><text start=\"113.23\" dur=\"1.92\">but we don&amp;#39;t want to change them.</text><text start=\"115.15\" dur=\"3.21\">And this is usually valuable when those\ndata objects are going to be</text><text start=\"118.36\" dur=\"4.18\">frequently referenced, but where the\npieces inside of them don&amp;#39;t change.</text><text start=\"122.54\" dur=\"2.62\">Why would we want to support having\nability to change them, because that</text><text start=\"125.16\" dur=\"1.64\">could just lead to bugs?</text><text start=\"126.8\" dur=\"3.14\">On the other hand, there&amp;#39;s going to be\nsome instances where the data objects</text><text start=\"129.94\" dur=\"4.27\">may want to support modifications\nto elements inside of them.</text><text start=\"134.21\" dur=\"1.45\">Why might that happen?</text><text start=\"135.66\" dur=\"2.97\">Imagine you&amp;#39;ve got a really large\ndatabase of personnel information and</text><text start=\"138.63\" dur=\"2.18\">you want to do things like\nchange salaries.</text><text start=\"140.81\" dur=\"3.43\">You don&amp;#39;t want to have to make an\nentirely new copy of the database just</text><text start=\"144.24\" dur=\"1.46\">to add in a new salary.</text><text start=\"145.7\" dur=\"3.2\">You&amp;#39;d like to be able to go inside\nand change a piece of that.</text><text start=\"148.9\" dur=\"4.32\">So lists are going to support that kind\nof operation by enabling us to go</text><text start=\"153.22\" dur=\"3.85\">in and mutate, or alter,\nelements of the pieces.</text><text start=\"157.07\" dur=\"3.33\">One issue to keep in mind is that, while\nmutable structures give us more</text><text start=\"160.4\" dur=\"3.99\">flexibility, they also are more\nprone to programming errors.</text><text start=\"164.39\" dur=\"4.52\">If I&amp;#39;ve got two different pieces of code\nboth pointing to the same list,</text><text start=\"168.91\" dur=\"4.38\">and I have one piece of code change or\nmutate a portion of the list, I want</text><text start=\"173.29\" dur=\"2.14\">to make sure that that other piece\nof code is aware of that.</text><text start=\"175.43\" dur=\"3.5\">If not, I can get myself into some\nreally interesting bugs.</text><text start=\"178.93\" dur=\"3.72\">So there&amp;#39;s a cost, but\nthere&amp;#39;s a bonus.</text><text start=\"182.65\" dur=\"2.62\">Let&amp;#39;s look at an example\nof what this means.</text><text start=\"185.27\" dur=\"1.65\">So let&amp;#39;s create a couple of lists.</text><text start=\"186.92\" dur=\"4.11\">And in fact, over here in my IDLE\nshell, I&amp;#39;m going to do that.</text><text start=\"191.03\" dur=\"2.91\">Let me just create a couple of lists.</text><text start=\"193.94\" dur=\"3.69\">And I&amp;#39;m going to call Techs\nas a name for a couple of</text><text start=\"197.63\" dur=\"2.64\">great technical schools.</text><text start=\"200.27\" dur=\"2.67\">And notice the angle braces\nto get them for me.</text><text start=\"202.94\" dur=\"1.59\">And I&amp;#39;m going to create Ivys.</text><text start=\"204.53\" dur=\"3.03\">I&amp;#39;m not going to do all of them,\nbut I will again create a list</text><text start=\"207.56\" dur=\"2.7\">of some great schools.</text><text start=\"210.26\" dur=\"0.9\">We&amp;#39;ll do Harvard.</text><text start=\"211.16\" dur=\"0.89\">We&amp;#39;ll do Yale.</text><text start=\"212.05\" dur=\"2.16\">And we&amp;#39;ll do Brown.</text><text start=\"214.21\" dur=\"2.99\">And if I print them out, I can say,\nwhat is the value of Techs?</text><text start=\"217.2\" dur=\"2.27\">And it just gives me that list.</text><text start=\"219.47\" dur=\"2.61\">On my slide, I&amp;#39;ve given you\na visualization of that.</text><text start=\"222.08\" dur=\"4.29\">So think of this as Techs and Ivys\nsitting up in that global environment.</text><text start=\"226.37\" dur=\"3.29\">After all, I just typed them\ninto the shell for Python.</text><text start=\"229.66\" dur=\"0.67\">And what do they do?</text><text start=\"230.33\" dur=\"4.28\">Well, they point to a structure in\nmemory somewhere that has that</text><text start=\"234.61\" dur=\"3.49\">sequence of elements inside of it.</text><text start=\"238.1\" dur=\"3.42\">As I&amp;#39;ve said, I can treat this as if\nthey were just an order of sequences.</text><text start=\"241.52\" dur=\"3.89\">So I could say something like, what\nis the first element of the Ivys?</text><text start=\"245.41\" dur=\"2.54\">Remember, we start indexing at\n0, so that gives me back</text><text start=\"247.95\" dur=\"1.79\">Yale, which is nice.</text><text start=\"249.74\" dur=\"1.64\">And I could slice if I wanted to.</text><text start=\"251.38\" dur=\"5.899\">I could say give me back the Ivys,\neverything up to the second one.</text><text start=\"257.279\" dur=\"1.921\">And that gives me the zeroth\nand first elements.</text><text start=\"259.2\" dur=\"2.46\">I can do things I&amp;#39;d expect\nto do on that.</text><text start=\"261.66\" dur=\"2.84\">Let&amp;#39;s see what happens when we start\nputting things together.</text><text start=\"264.5\" dur=\"2.38\">So I&amp;#39;ve got two lists-- a\nlist of tech schools.</text><text start=\"266.88\" dur=\"1.59\">I&amp;#39;ve got a list of Ivys.</text><text start=\"268.47\" dur=\"3.52\">Let&amp;#39;s now create what looks like two\ndifferent lists of universities.</text><text start=\"271.99\" dur=\"2.68\">So the first one, I&amp;#39;m going to\ncall Univs, for universities.</text><text start=\"274.67\" dur=\"3.33\">And it&amp;#39;s going to be a list\nof the Techs and the Ivys.</text><text start=\"278\" dur=\"2.27\">And I&amp;#39;m going to create what\nlooks like the same thing.</text><text start=\"280.27\" dur=\"2.71\">I&amp;#39;m going to call it Univs1,\nand I&amp;#39;m simply going to</text><text start=\"282.98\" dur=\"3.01\">re-create that sequence.</text><text start=\"285.99\" dur=\"2.32\">Cal Tech was the first one.</text><text start=\"288.31\" dur=\"3.475\">And since I&amp;#39;m creating a list of these\nlists, I&amp;#39;m going to put a comma in</text><text start=\"291.785\" dur=\"5.965\">there, and then I&amp;#39;m going to do\nHarvard, Yale, and Brown.</text><text start=\"297.75\" dur=\"1.46\">Are these the same thing?</text><text start=\"299.21\" dur=\"1.25\">Well, let&amp;#39;s print them out.</text><text start=\"300.46\" dur=\"3.25\">If I look at Univs, yeah, nice.</text><text start=\"303.71\" dur=\"3.48\">It&amp;#39;s a list of two elements, the first\nof which is a list of two elements.</text><text start=\"307.19\" dur=\"2.12\">Second of which is a list\nof three elements.</text><text start=\"309.31\" dur=\"5\">And if I look at Univs1, it\nlooks exactly the same.</text><text start=\"314.31\" dur=\"1.32\">They certainly print the same.</text><text start=\"315.63\" dur=\"5.11\">So it is easy to think that these might,\nin fact, be the same thing.</text><text start=\"320.74\" dur=\"1.43\">But they&amp;#39;re not.</text><text start=\"322.17\" dur=\"2.67\">And let me show how I can test that.</text><text start=\"324.84\" dur=\"5.64\">Let&amp;#39;s evaluate the following\nlittle command up here.</text><text start=\"330.48\" dur=\"2.52\">An append is a method associated\nwith lists.</text><text start=\"333\" dur=\"1.33\">We&amp;#39;ll come back to methods later on.</text><text start=\"334.33\" dur=\"4.41\">That dot notation basically says,\nif I type in Techs, it&amp;#39;s a list.</text><text start=\"338.74\" dur=\"2.71\">The dot says get the method\nappend associated with it.</text><text start=\"341.45\" dur=\"4.25\">Don&amp;#39;t worry what a method is, but\nbasically think of it as a function</text><text start=\"345.7\" dur=\"2.03\">that is going to take an argument--</text><text start=\"347.73\" dur=\"3.94\">in this case, a single element, RPI--</text><text start=\"351.67\" dur=\"5.67\">and it is going to attach that element\nto the end of the list text.</text><text start=\"357.34\" dur=\"2.69\">So, what does it do?</text><text start=\"360.03\" dur=\"0.85\">It&amp;#39;s an important thing here.</text><text start=\"360.88\" dur=\"1.4\">It doesn&amp;#39;t create a new list.</text><text start=\"362.28\" dur=\"3.14\">It mutates the existing one.</text><text start=\"365.42\" dur=\"2.65\">It takes Techs as a list\nand changes it.</text><text start=\"368.07\" dur=\"4.18\">It mutates it to add a new element to\nthe end, extending the list by one.</text><text start=\"372.25\" dur=\"6.94\">Now, as a consequence, if we print out\nUnivs, notice we now have in that</text><text start=\"379.19\" dur=\"2.54\">first element MIT, Cal Tech, and RPI.</text><text start=\"381.73\" dur=\"1.83\">We have changed what&amp;#39;s\ninside of there.</text><text start=\"383.56\" dur=\"2.8\">We have mutated Techs, not Univs.</text><text start=\"386.36\" dur=\"1.15\">In fact, let&amp;#39;s just check it.</text><text start=\"387.51\" dur=\"3.17\">Let&amp;#39;s go look at Techs,\nand there&amp;#39;s Techs.</text><text start=\"390.68\" dur=\"2.05\">But again, if I go back\nto Univs, there it is.</text><text start=\"392.73\" dur=\"2.83\">And now what happened to Univs1?</text><text start=\"395.56\" dur=\"1.24\">Aha!</text><text start=\"396.8\" dur=\"1.48\">It didn&amp;#39;t change.</text><text start=\"398.28\" dur=\"1.4\">And that&amp;#39;s an important point.</text><text start=\"399.68\" dur=\"1.72\">Look at the form of Univs1.</text><text start=\"401.4\" dur=\"2.96\">It has just the first\ntwo pieces to it.</text><text start=\"404.36\" dur=\"3.69\">And, in fact, if I go to the next\nslide, we&amp;#39;ve captured that.</text><text start=\"408.05\" dur=\"5.04\">If I print out Univs, I get out MIT,\nCal Tech, RPI, followed by Harvard,</text><text start=\"413.09\" dur=\"1.13\">Yale, Brown.</text><text start=\"414.22\" dur=\"5.29\">But for Univs1, I just get MIT, Cal\nTech, and then Harvard, Yale, Brown.</text><text start=\"419.51\" dur=\"0.92\">Why?</text><text start=\"420.43\" dur=\"2.32\">Well, this is where the\nmutability comes in.</text><text start=\"422.75\" dur=\"3.35\">So let&amp;#39;s think carefully\nabout what we had.</text><text start=\"426.1\" dur=\"3.53\">Before I did that append, I&amp;#39;d had\na binding for Techs, and I had</text><text start=\"429.63\" dur=\"0.83\">a binding for Ivys.</text><text start=\"430.46\" dur=\"0.64\">We created those.</text><text start=\"431.1\" dur=\"1.13\">They said we&amp;#39;re lists.</text><text start=\"432.23\" dur=\"0.82\">And then what did I do?</text><text start=\"433.05\" dur=\"1.9\">I said, let Univs equal--</text><text start=\"434.95\" dur=\"1.8\">and in fact, let me just\nwrite it out here--</text><text start=\"436.75\" dur=\"3.38\">I bound Univs to Techs and Ivys.</text><text start=\"440.13\" dur=\"0.91\">And what does that say?</text><text start=\"441.04\" dur=\"3.19\">It says make a list.</text><text start=\"444.23\" dur=\"0.63\">So there&amp;#39;s Univs.</text><text start=\"444.86\" dur=\"1.04\">It&amp;#39;s going to make a list.</text><text start=\"445.9\" dur=\"2.35\">And it says the value of the first\nelement is going to be</text><text start=\"448.25\" dur=\"0.9\">the value of Techs.</text><text start=\"449.15\" dur=\"1.13\">So aha.</text><text start=\"450.28\" dur=\"3.33\">It&amp;#39;s just a pointer to that list.</text><text start=\"453.61\" dur=\"4.3\">And the value of the second argument,\nor the second element, is just the</text><text start=\"457.91\" dur=\"0.91\">value of Ivys.</text><text start=\"458.82\" dur=\"3.43\">So aha, it&amp;#39;s just pointing to there.</text><text start=\"462.25\" dur=\"5.12\">So Univs is a list whose elements are\njust pointers to other lists.</text><text start=\"467.37\" dur=\"3.29\">On the other hand, what did I\ndo when I created Univs1?</text><text start=\"470.66\" dur=\"2.48\">If you look back, you&amp;#39;ll see that,\nin fact, I created it by</text><text start=\"473.14\" dur=\"2.85\">actually typing out lists.</text><text start=\"475.99\" dur=\"1.04\">I said Univs1--</text><text start=\"477.03\" dur=\"1.26\">just to say a little bit of it--</text><text start=\"478.29\" dur=\"4.12\">I said Univs1 was going to be,\nand then I said quote MIT,</text><text start=\"482.41\" dur=\"1.5\">quote Cal Tech, comma.</text><text start=\"483.91\" dur=\"1.4\">And then I did a bunch\nof other things.</text><text start=\"485.31\" dur=\"1.59\">I&amp;#39;m not going to do all of it.</text><text start=\"486.9\" dur=\"5.57\">But this is telling Python, create a\nlist with those strings inside of it.</text><text start=\"492.47\" dur=\"3.442\">So in fact, that&amp;#39;s exactly\nwhat it did.</text><text start=\"495.912\" dur=\"6.648\">Univs1 is going to create a list, but\nit creates it with a new version.</text><text start=\"502.56\" dur=\"1.28\">Right there.</text><text start=\"503.84\" dur=\"2.26\">Notice Techs is not pointing to this.</text><text start=\"506.1\" dur=\"1.58\">There&amp;#39;s a new version right there.</text><text start=\"507.68\" dur=\"3.58\">Ivys is not pointing to this because I\ncreated them and inserted them inside</text><text start=\"511.26\" dur=\"1.19\">of this larger list.</text><text start=\"512.45\" dur=\"3.12\">That&amp;#39;s important, because now\nwhen I did that append on</text><text start=\"515.57\" dur=\"1.05\">Techs, what did it do?</text><text start=\"516.62\" dur=\"2.5\">It went over here and changed that.</text><text start=\"519.12\" dur=\"2.21\">It added that into the end of it.</text><text start=\"521.33\" dur=\"4.48\">That means that Univs changes\nbecause it sees that.</text><text start=\"525.81\" dur=\"1.84\">But what about Univs1?</text><text start=\"527.65\" dur=\"1.88\">This is a completely different list.</text><text start=\"529.53\" dur=\"1.68\">Nothing changed there.</text><text start=\"531.21\" dur=\"3.62\">Let&amp;#39;s make some observations\nout of this.</text><text start=\"534.83\" dur=\"4\">The elements of Univs are not copies\nof the list to which Ivys and Techs</text><text start=\"538.83\" dur=\"2.63\">are bound, but are the\nlists themselves.</text><text start=\"541.46\" dur=\"3.7\">I got the value of Techs, which\npointed to the list.</text><text start=\"545.16\" dur=\"3.31\">And this effect is something\nwe call aliasing.</text><text start=\"548.47\" dur=\"1.45\">Basically what does aliasing says?</text><text start=\"549.92\" dur=\"4.02\">It says we have two distinct\npaths to a data object.</text><text start=\"553.94\" dur=\"1.87\">One is through the variable\nTechs, in this case.</text><text start=\"555.81\" dur=\"3.19\">There&amp;#39;s a second one through the first\nelement of the list object to which</text><text start=\"559\" dur=\"1.64\">Univs is bound.</text><text start=\"560.64\" dur=\"3.56\">And one of the effects of that is that\nI can mutate an object through either</text><text start=\"564.2\" dur=\"2.97\">path, but the effect will\nbe visible to both.</text><text start=\"567.17\" dur=\"5.67\">And I just saw that back here when I\nmutated Techs, but Univs changed.</text><text start=\"572.84\" dur=\"2.52\">That sharing of data is\nreally important.</text><text start=\"575.36\" dur=\"3.48\">And that mutation, that ability to\nchange things, is really important.</text><text start=\"578.84\" dur=\"3.68\">This is very convenient, but it\nalso can be really dangerous.</text><text start=\"582.52\" dur=\"1.29\">It can be treacherous.</text><text start=\"583.81\" dur=\"3.53\">Because if I had something that was\nchanging Techs and I didn&amp;#39;t realize</text><text start=\"587.34\" dur=\"4.21\">that Univs inherited the Techs\nstructure, I&amp;#39;ve now changed something</text><text start=\"591.55\" dur=\"1.22\">inside of Univs.</text><text start=\"592.77\" dur=\"2.83\">And if you think back to the code I just\ntyped in there, you saw nothing</text><text start=\"595.6\" dur=\"2.21\">that said make a change to Univs.</text><text start=\"597.81\" dur=\"2.85\">But changing a part of\nit had that effect.</text><text start=\"600.66\" dur=\"5.73\">So aliasing is a valuable tool, but it\nis going to occasionally lead to some</text><text start=\"606.39\" dur=\"2.66\">problems, and we have to\nbe careful about it.</text><text start=\"609.05\" dur=\"1.19\">Now what else can we do?</text><text start=\"610.24\" dur=\"2.56\">Well, we can certainly change\nelements directly.</text><text start=\"612.8\" dur=\"3.59\">So if I go back, for example,\nand I look at Techs.</text><text start=\"616.39\" dur=\"2.59\">Here&amp;#39;s my list of tech schools,\nMIT, Cal Tech, RPI.</text><text start=\"618.98\" dur=\"2.52\">I might decide I want\nto change the list.</text><text start=\"621.5\" dur=\"5.41\">So I can literally say, change\nthe second element of Techs.</text><text start=\"626.91\" dur=\"2.52\">And I do it just with an\nassignment statement.</text><text start=\"629.43\" dur=\"1.93\">I&amp;#39;m going to pick up WPI.</text><text start=\"631.36\" dur=\"5.49\">And now if I look at Techs,\nthat element is changed.</text><text start=\"636.85\" dur=\"1.27\">I&amp;#39;ve mutated it.</text><text start=\"638.12\" dur=\"3.56\">By the way, if I go back and look\nat Univs, it has also changed.</text><text start=\"641.68\" dur=\"4.14\">I&amp;#39;ve now got WPI in the first\nportion of that element.</text><text start=\"645.82\" dur=\"3.6\">Just to remind you, it says I\ncan mutate elements of this.</text><text start=\"649.42\" dur=\"1.65\">I cannot do the same\nthings with tuples.</text><text start=\"651.07\" dur=\"3.32\">So if I do an example where\nI create a tuple--</text><text start=\"654.39\" dur=\"1.72\">we can look at temp.</text><text start=\"656.11\" dur=\"3.31\">But if I now say, and I could certainly\nget out, for example, the</text><text start=\"659.42\" dur=\"1.07\">first element of temp.</text><text start=\"660.49\" dur=\"5.23\">But if I attempt to change that, as I\njust did above here by putting in</text><text start=\"665.72\" dur=\"2.1\">something new, it&amp;#39;s going to complain.</text><text start=\"667.82\" dur=\"3.586\">And it says you can&amp;#39;t do it because\nthese things are not things that can</text><text start=\"671.406\" dur=\"1.324\">be mutated.</text><text start=\"672.73\" dur=\"2.01\">So now we&amp;#39;ve got lists.</text><text start=\"674.74\" dur=\"2.02\">Let&amp;#39;s see what we can do with them.</text><text start=\"676.76\" dur=\"2.2\">As I just said, stressing it,\nI can&amp;#39;t do that with tuples.</text><text start=\"678.96\" dur=\"1.25\"></text></transcript>\n", "ADB7EXNTVqs": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"4.019\"></text><text start=\"4.019\" dur=\"4.001\">This coin just came up\ntails twice in a row.</text><text start=\"8.02\" dur=\"4\">How many more tails in a row would it\ntake for me to convince you that the</text><text start=\"12.02\" dur=\"2.6\">coin has tails on both sides?</text><text start=\"14.62\" dur=\"5.01\">If I were to flip it 12 times and got\neight tails and four heads, would you</text><text start=\"19.63\" dur=\"3.54\">be convinced that is was weighted, so\nthat tails would typically come up</text><text start=\"23.17\" dur=\"2.07\">twice as often as heads?</text><text start=\"25.24\" dur=\"6.12\">Suppose I flipped it 1,200 times and\ngot 800 tails and 400 heads.</text><text start=\"31.36\" dur=\"2.72\">In the next sequence of lecture segments\nwe&amp;#39;ll look at this and</text><text start=\"34.08\" dur=\"1.55\">related questions.</text><text start=\"35.63\" dur=\"4.17\">We&amp;#39;ll cover the law of large numbers\nand the gambler&amp;#39;s fallacy.</text><text start=\"39.8\" dur=\"3.9\">More generally, we&amp;#39;ll talk about what\nhappens when we draw samples from</text><text start=\"43.7\" dur=\"2.42\">different kinds of distributions.</text><text start=\"46.12\" dur=\"3.04\">We&amp;#39;ll conclude by looking\nat normal distributions.</text><text start=\"49.16\" dur=\"4.18\">And how one can use the standard\ndeviation of a normal distribution to</text><text start=\"53.34\" dur=\"3.06\">understand how confident one should\nbe in the accuracy of</text><text start=\"56.4\" dur=\"1.86\">inferences based on sampling.</text><text start=\"58.26\" dur=\"1.392\"></text></transcript>\n", "Rjk7yfFQCPI": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.78\"></text><text start=\"1.78\" dur=\"2.13\">ERIC GRIMSON: So far, in this\ncourse, we&amp;#39;ve been building up</text><text start=\"3.91\" dur=\"1.98\">a lot of really powerful\ntools.</text><text start=\"5.89\" dur=\"1.87\">We&amp;#39;ve seen different kinds\nof data structures.</text><text start=\"7.76\" dur=\"2.17\">We&amp;#39;ve seen different classes\nof algorithms.</text><text start=\"9.93\" dur=\"2.3\">We&amp;#39;ve seen ways of putting\nthose together to do</text><text start=\"12.23\" dur=\"2.62\">interesting things,\nsolving problems.</text><text start=\"14.85\" dur=\"1.98\">And one of the things we might\nwant to do now is just step</text><text start=\"16.83\" dur=\"2.24\">back for second and ask, so\nwhat are we trying to</text><text start=\"19.07\" dur=\"3.95\">accomplish when we design\nprogram, a piece of code?</text><text start=\"23.02\" dur=\"1.59\">What are our goals?</text><text start=\"24.61\" dur=\"1.51\">And typically, there are 2.</text><text start=\"26.12\" dur=\"2.95\">The first and most important one\nis we want our program to</text><text start=\"29.07\" dur=\"2.935\">return correct answers\non all legal</text><text start=\"32.005\" dur=\"1.995\">inputs, all legal inputs.</text><text start=\"34\" dur=\"2.21\">So if we&amp;#39;re defining a function\nthat is to apply to</text><text start=\"36.21\" dur=\"2.65\">integers, we want to work on\nall values of integers.</text><text start=\"38.86\" dur=\"2.21\">Or if there&amp;#39;s a particular\nrange, we want to specify that</text><text start=\"41.07\" dur=\"1.56\">as part of the specs.</text><text start=\"42.63\" dur=\"1.78\">So our first goal is\nto have code that</text><text start=\"44.41\" dur=\"0.61\">does the right thing.</text><text start=\"45.02\" dur=\"1.9\">It computes the right answer.</text><text start=\"46.92\" dur=\"2.97\">Second goal can often also be,\nthough, that we want it to</text><text start=\"49.89\" dur=\"2.45\">perform its computation\nefficiently.</text><text start=\"52.34\" dur=\"2.67\">Typically, 1 is more important,\nbut there are times</text><text start=\"55.01\" dur=\"1.76\">when that second point\nis also critical.</text><text start=\"56.77\" dur=\"3.09\">For example, we&amp;#39;ve got a program\nto detect collisions</text><text start=\"59.86\" dur=\"2.29\">in aircraft, or to do real time</text><text start=\"62.15\" dur=\"1.62\">control of traffic signals.</text><text start=\"63.77\" dur=\"1.96\">We need it to be very efficient\nto ensure that it</text><text start=\"65.73\" dur=\"3.69\">can respond before something\nhappens in the world.</text><text start=\"69.42\" dur=\"3.08\">As a consequence, sometimes\n2 is really crucial.</text><text start=\"72.5\" dur=\"2.93\">But even in cases when 1 is most\nimportant, it is still</text><text start=\"75.43\" dur=\"3.03\">valuable to understand and\noptimize efficiency.</text><text start=\"78.46\" dur=\"3.68\">So even if we&amp;#39;ve got code that\ncomputes the right answer, if</text><text start=\"82.14\" dur=\"2.3\">we&amp;#39;ve got alternatives that\nare going to give the same</text><text start=\"84.44\" dur=\"2.44\">answer, but one&amp;#39;s more efficient\nthan another, we&amp;#39;d</text><text start=\"86.88\" dur=\"2.02\">like to know about that.</text><text start=\"88.9\" dur=\"3.07\">So that leads us to this\nquestion of what we call</text><text start=\"91.97\" dur=\"1.2\">computational complexity.</text><text start=\"93.17\" dur=\"2.3\">And here we&amp;#39;re going to do a\nsomewhat informal version of</text><text start=\"95.47\" dur=\"2.27\">this, but to give you a sense\nof how you begin thinking</text><text start=\"97.74\" dur=\"2.43\">about computational\ncomplexity.</text><text start=\"100.17\" dur=\"2.63\">So what does it mean to say, how\nefficient is an algorithm?</text><text start=\"102.8\" dur=\"1.77\">There are 2 questions\nwe can ask.</text><text start=\"104.57\" dur=\"1.91\">We can ask how much time is it\ngoing to take for the program</text><text start=\"106.48\" dur=\"2.84\">to run, and we can ask how much\nmemory is it going to</text><text start=\"109.32\" dur=\"2.38\">need, inside of the machine, in\norder to do the computation</text><text start=\"111.7\" dur=\"1.85\">it wants to do.</text><text start=\"113.55\" dur=\"2.79\">Again, typically, we&amp;#39;re going to\nbe most interested in this</text><text start=\"116.34\" dur=\"2.17\">one, the amount of time.</text><text start=\"118.51\" dur=\"2.25\">We&amp;#39;ll see that we can also worry\nabout memory, and for</text><text start=\"120.76\" dur=\"2.1\">some really big problems,\nmemory&amp;#39;s crucial.</text><text start=\"122.86\" dur=\"1.97\">But in general, we&amp;#39;re going\nto worry about time.</text><text start=\"124.83\" dur=\"2.39\">How long does it take for\nthe program to run?</text><text start=\"127.22\" dur=\"2.31\">Even there, when we start\nthinking about that, we want</text><text start=\"129.53\" dur=\"0.609\">to be careful.</text><text start=\"130.139\" dur=\"4.601\">We want to balance minimizing\ncomputational complexity with</text><text start=\"134.74\" dur=\"0.955\">conceptual complexity.</text><text start=\"135.695\" dur=\"2.095\">And what do I mean by that?</text><text start=\"137.79\" dur=\"3.5\">I&amp;#39;d like to keep my code\nclean, simple, easy to</text><text start=\"141.29\" dur=\"0.99\">understand.</text><text start=\"142.28\" dur=\"2.47\">So if I come back to it a month\nfrom now, a year from</text><text start=\"144.75\" dur=\"2.41\">now, I still understand what\nthe code was written to do.</text><text start=\"147.16\" dur=\"2.02\">If somebody else looks at it,\nthey can understand what the</text><text start=\"149.18\" dur=\"1.6\">code was intending to do.</text><text start=\"150.78\" dur=\"2.41\">And I say that because sometimes\none can find</text><text start=\"153.19\" dur=\"2.43\">interesting tricks one can play\nto get a little bit more</text><text start=\"155.62\" dur=\"3.18\">efficiency in the code, but it\nmakes the code much harder to</text><text start=\"158.8\" dur=\"1.33\">understand.</text><text start=\"160.13\" dur=\"1.45\">And we need to balance that.</text><text start=\"161.58\" dur=\"2.53\">There&amp;#39;s no perfect balance, but\nin general, I&amp;#39;d prefer to</text><text start=\"164.11\" dur=\"2.99\">have code that&amp;#39;s still\neasy to understand.</text><text start=\"167.1\" dur=\"3.16\">And, having done that, have it\nbe as efficient as possible</text><text start=\"170.26\" dur=\"2.53\">than to jeopardize the code just\nto give a little bit of</text><text start=\"172.79\" dur=\"1.23\">efficiency.</text><text start=\"174.02\" dur=\"2.97\">I want to make sure that our\ncode is still clean, but we do</text><text start=\"176.99\" dur=\"3.27\">want to worry about how do\nwe minimize complexity?</text><text start=\"180.26\" dur=\"2.09\">And that complexity is typically\ngoing to be in terms</text><text start=\"182.35\" dur=\"3.33\">of how long does it take\nsomething to run?</text><text start=\"185.68\" dur=\"2.5\">OK, so now we could say, given\na function, we&amp;#39;d like to</text><text start=\"188.18\" dur=\"3.15\">answer the question, how long\nwill this take to run?</text><text start=\"191.33\" dur=\"1.28\">So what are our choices?</text><text start=\"192.61\" dur=\"3.38\">Well, a simple choice would just\nbe run it on some input</text><text start=\"195.99\" dur=\"1.41\">and time it.</text><text start=\"197.4\" dur=\"2.08\">That, of course, has\nseveral problems.</text><text start=\"199.48\" dur=\"3.08\">The first one is, it depends on\nthe speed of the computer.</text><text start=\"202.56\" dur=\"2.77\">The second one is, it actually\ndepends on the specifics of</text><text start=\"205.33\" dur=\"1.27\">the Python implementation.</text><text start=\"206.6\" dur=\"1.76\">Depending on which version\nyou&amp;#39;re using, you may get</text><text start=\"208.36\" dur=\"2.24\">slightly different answers.</text><text start=\"210.6\" dur=\"1.59\">Both those aren&amp;#39;t great.</text><text start=\"212.19\" dur=\"1.58\">And the third one is, of course,\nit will depend on the</text><text start=\"213.77\" dur=\"1.37\">value of the input.</text><text start=\"215.14\" dur=\"2.43\">Now if I&amp;#39;ve got something that&amp;#39;s\na recursive function,</text><text start=\"217.57\" dur=\"3.35\">changing the input will lead to\ndifferent amounts of time.</text><text start=\"220.92\" dur=\"1.29\">So how do I get rid\nof these factors?</text><text start=\"222.21\" dur=\"1.8\">I want to be able to make\ngeneral statements about</text><text start=\"224.01\" dur=\"1.31\">complexity.</text><text start=\"225.32\" dur=\"3.46\">Well, for points 1 and 2, I can\navoid those by measuring</text><text start=\"228.78\" dur=\"3.47\">time, not in terms of actual\nelapsed time, but in terms of</text><text start=\"232.25\" dur=\"3.83\">the number of basic steps that\nthe computer executes.</text><text start=\"236.08\" dur=\"1.99\">We&amp;#39;ll come back to 3 in a\nsecond, but we&amp;#39;re going to</text><text start=\"238.07\" dur=\"2.2\">start with thinking about\nhow do we avoid 1 and 2?</text><text start=\"240.27\" dur=\"3.84\">And for that, we use what&amp;#39;s\ncalled a random</text><text start=\"244.11\" dur=\"1.79\">access machine model.</text><text start=\"245.9\" dur=\"2.36\">We&amp;#39;re going to use that as\nour model of computation.</text><text start=\"248.26\" dur=\"0.54\">What does that say?</text><text start=\"248.8\" dur=\"2.25\">It says the steps are executed\nsequentially.</text><text start=\"251.05\" dur=\"1.94\">We&amp;#39;re not running in parallel.</text><text start=\"252.99\" dur=\"3.13\">And the second assumption that\nmodel makes is that a step is</text><text start=\"256.12\" dur=\"2.27\">an operation that takes a\nconstant amount of time.</text><text start=\"258.39\" dur=\"4\">And for that, we&amp;#39;re going to\nassume assignment, comparison,</text><text start=\"262.39\" dur=\"3.34\">arithmetic operations, and\naccessing an object in memory,</text><text start=\"265.73\" dur=\"2.85\">all take a constant\namount of time.</text><text start=\"268.58\" dur=\"1.03\">You might quibble\na little bit.</text><text start=\"269.61\" dur=\"2.54\">You say, well, maybe\nmultiplication&amp;#39;s a little bit</text><text start=\"272.15\" dur=\"1.76\">more expensive than addition.</text><text start=\"273.91\" dur=\"2.47\">But as a first pass, this is a\npretty good approximation,</text><text start=\"276.38\" dur=\"2.55\">that all arithmetic operations\nare roughly the same amount of</text><text start=\"278.93\" dur=\"2.39\">time, comparisons,\nassignments.</text><text start=\"281.32\" dur=\"2.52\">This last one here might\nsurprise, and we&amp;#39;ll come back</text><text start=\"283.84\" dur=\"0.56\">to that later.</text><text start=\"284.4\" dur=\"3.38\">But in fact, we can set up our\nsystem so that, indeed,</text><text start=\"287.78\" dur=\"2.4\">getting any point in memory is\ngoing to take a constant</text><text start=\"290.18\" dur=\"1.5\">amount of time.</text><text start=\"291.68\" dur=\"3.38\">The advantage of this model is\nit says, I&amp;#39;m removing the</text><text start=\"295.06\" dur=\"1.27\">aspects of the machine.</text><text start=\"296.33\" dur=\"1.65\">How fast is my machine?</text><text start=\"297.98\" dur=\"1.51\">What kind of Python\nam I running?</text><text start=\"299.49\" dur=\"3.15\">And I&amp;#39;m able to just focus on\ncounting the number of basic</text><text start=\"302.64\" dur=\"2.32\">steps that I have to\nexecute in order</text><text start=\"304.96\" dur=\"1.58\">to compute a function.</text><text start=\"306.54\" dur=\"1.79\">So that removes the\nfirst two points</text><text start=\"308.33\" dur=\"1.71\">where I had some concerns.</text><text start=\"310.04\" dur=\"3.22\">For the third point, the third\npoint, I&amp;#39;ll remind you, is it</text><text start=\"313.26\" dur=\"1.84\">depends on the value\nof the input.</text><text start=\"315.1\" dur=\"2.09\">Here we&amp;#39;re going to measure\ntime, not in terms of a</text><text start=\"317.19\" dur=\"4.41\">specific input, but in terms\nof the size of the input.</text><text start=\"321.6\" dur=\"3.99\">And that&amp;#39;ll make sense in a\nsecond as we walk through it.</text><text start=\"325.59\" dur=\"3.13\">Now, you first say, well, OK,\neven if I&amp;#39;m talking about the</text><text start=\"328.72\" dur=\"2.81\">size of the input, might the\ncomplexity not still</text><text start=\"331.53\" dur=\"1.84\">depend on the value?</text><text start=\"333.37\" dur=\"1.38\">Let&amp;#39;s take a little example.</text><text start=\"334.75\" dur=\"2.33\">Here&amp;#39;s a piece of code to\nlinearly search a list.</text><text start=\"337.08\" dur=\"1.42\">This is trying to see\nif a particular</text><text start=\"338.5\" dur=\"1.64\">element is in a list.</text><text start=\"340.14\" dur=\"0.68\">So what does it do?</text><text start=\"340.82\" dur=\"2.97\">It iterates over the list,\nfor e in the list.</text><text start=\"343.79\" dur=\"1.58\">And for each one of those\nelements of the list, it</text><text start=\"345.37\" dur=\"2.98\">checks to see is it equal to\nthe thing I&amp;#39;m looking for?</text><text start=\"348.35\" dur=\"2.4\">If it is, I&amp;#39;ll return True.</text><text start=\"350.75\" dur=\"2.2\">If it isn&amp;#39;t, I&amp;#39;ll\nreturn False.</text><text start=\"352.95\" dur=\"0.38\">All right.</text><text start=\"353.33\" dur=\"1.41\">Nice simple piece of code.</text><text start=\"354.74\" dur=\"1.46\">Here&amp;#39;s the problem.</text><text start=\"356.2\" dur=\"2.98\">And the problem is that I could\ntry and measure the</text><text start=\"359.18\" dur=\"3.31\">complexity of this code in terms\nof the size of the list</text><text start=\"362.49\" dur=\"1.24\">L, which makes sense.</text><text start=\"363.73\" dur=\"2.46\">That&amp;#39;s the thing that&amp;#39;s\nmost likely change.</text><text start=\"366.19\" dur=\"3.41\">But the problem is that if x\nhappens to be near the front</text><text start=\"369.6\" dur=\"3.34\">of L, it&amp;#39;s going to return\nTrue almost immediately.</text><text start=\"372.94\" dur=\"2.05\">On the other hand, if x is not\nin L, then the code is going</text><text start=\"374.99\" dur=\"2.56\">to have to go through all the\nelements of L before it can</text><text start=\"377.55\" dur=\"1.21\">return False.</text><text start=\"378.76\" dur=\"2.16\">And so it&amp;#39;s going to give us\ndense, different answers</text><text start=\"380.92\" dur=\"1.94\">depending on the specific\nchoice.</text><text start=\"382.86\" dur=\"1.06\">And that&amp;#39;s not what we want.</text><text start=\"383.92\" dur=\"3.75\">We need a general way of\nmeasuring complexity.</text><text start=\"387.67\" dur=\"3.25\">So what we&amp;#39;re going to do, as a\nconsequence, is, we&amp;#39;re going</text><text start=\"390.92\" dur=\"2.97\">to think about what are the\ndifferent cases under which we</text><text start=\"393.89\" dur=\"2.01\">can measure complexity?</text><text start=\"395.9\" dur=\"2.95\">Well the first one will be what\nwe could call best case.</text><text start=\"398.85\" dur=\"2.8\">It&amp;#39;s the minimum running time\nover all possible inputs of a</text><text start=\"401.65\" dur=\"1\">given size.</text><text start=\"402.65\" dur=\"4.22\">So for all possible lists of\nsome length, for example,</text><text start=\"406.87\" dur=\"1.98\">what&amp;#39;s the best case\nI could see?</text><text start=\"408.85\" dur=\"2.36\">Well, for linear search, the\nanswer will be constant.</text><text start=\"411.21\" dur=\"2.06\">It would be independent of the\nsize of the inputs, in the</text><text start=\"413.27\" dur=\"2.44\">best case, because to be the\nfirst thing I&amp;#39;d look at.</text><text start=\"415.71\" dur=\"1.42\">That&amp;#39;s not very helpful.</text><text start=\"417.13\" dur=\"2.95\">An alternative is to look\nat the worst case.</text><text start=\"420.08\" dur=\"2.93\">What&amp;#39;s the maximum running time\nover all possible inputs</text><text start=\"423.01\" dur=\"1.42\">of a given list?</text><text start=\"424.43\" dur=\"2.49\">And there, what we see for\nlinear search is this going to</text><text start=\"426.92\" dur=\"2.18\">be linear in the size\nof the list.</text><text start=\"429.1\" dur=\"2.09\">So it&amp;#39;s going to take some\nnumber of steps that depends</text><text start=\"431.19\" dur=\"1.5\">on how long the list is.</text><text start=\"432.69\" dur=\"2.25\">If I double the list, the\nworst case is going</text><text start=\"434.94\" dur=\"1.84\">to double as well.</text><text start=\"436.78\" dur=\"2.3\">That may be more useful to me.</text><text start=\"439.08\" dur=\"2.23\">There&amp;#39;s a third possibility\nwhich is to use the average</text><text start=\"441.31\" dur=\"2.64\">case or expected case, that is,\njust average the running</text><text start=\"443.95\" dur=\"3.35\">time over all possible inputs\nof a given size.</text><text start=\"447.3\" dur=\"1.69\">And that might be more\neffective in terms of</text><text start=\"448.99\" dur=\"2.28\">thinking, on average, what\ndo I expect to see?</text><text start=\"451.27\" dur=\"1.27\">I could even be clever.</text><text start=\"452.54\" dur=\"3.55\">If I know that my inputs don&amp;#39;t\ncome uniformly distributed,</text><text start=\"456.09\" dur=\"2.69\">they&amp;#39;re not all equally\nlikely, if I have some</text><text start=\"458.78\" dur=\"3\">knowledge about how likely an\ninput is, I could even take</text><text start=\"461.78\" dur=\"2.45\">advantage of that to\ndo my averaging.</text><text start=\"464.23\" dur=\"3.24\">So an average case, some sense\nfor practical purposes, is</text><text start=\"467.47\" dur=\"1.05\">kind of nice.</text><text start=\"468.52\" dur=\"3.33\">But in fact, what we&amp;#39;re going to\nfocus on is the worst case,</text><text start=\"471.85\" dur=\"1.76\">sort of an upper bound\non the running time.</text><text start=\"473.61\" dur=\"2.39\">And it gives us a sense of\nwhat happens in the worst</text><text start=\"476\" dur=\"2.89\">possible case for different\nkinds of algorithms.</text><text start=\"478.89\" dur=\"2.21\">And in particular, it&amp;#39;s going\nto allow us to compare</text><text start=\"481.1\" dur=\"1.9\">different classes of\nalgorithms in a</text><text start=\"483\" dur=\"1.45\">kind of nice way.</text><text start=\"484.45\" dur=\"3.265\">OK, so now I&amp;#39;m saying I want to\nmeasure basic steps and I&amp;#39;m</text><text start=\"487.715\" dur=\"1.235\">going to do it in\nthe worst case.</text><text start=\"488.95\" dur=\"2.96\">Let&amp;#39;s see how we might\ntry and do that.</text><text start=\"491.91\" dur=\"2.4\">And let&amp;#39;s look at an example.</text><text start=\"494.31\" dur=\"3.03\">Here&amp;#39;s our old friend factorial,\na little procedure</text><text start=\"497.34\" dur=\"2.35\">that&amp;#39;s going to compute\nfactorial of n.</text><text start=\"499.69\" dur=\"3.09\">It&amp;#39;s a little iterative loop,\nsets answer initially to 1,</text><text start=\"502.78\" dur=\"1.44\">and then it runs through\na while loop.</text><text start=\"504.22\" dur=\"4.55\">As long as n is bigger than 1,\nit multiplies n by answer and</text><text start=\"508.77\" dur=\"1.6\">binds answer to that\nnew value.</text><text start=\"510.37\" dur=\"1.5\">It decreases n by 1.</text><text start=\"511.87\" dur=\"2.01\">And it keeps going through the\nloop until it&amp;#39;s done and then</text><text start=\"513.88\" dur=\"1.27\">it returns an answer.</text><text start=\"515.15\" dur=\"1.49\">You&amp;#39;ve seen this before.</text><text start=\"516.64\" dur=\"2.98\">Let&amp;#39;s think about how do we\nmeasure the complexity here.</text><text start=\"519.62\" dur=\"2.66\">So we want to count the number\nof steps, right?</text><text start=\"522.28\" dur=\"0.649\">So what have we got?</text><text start=\"522.929\" dur=\"4.271\">Well here&amp;#39;s the first one and\nthat&amp;#39;s basically one step,</text><text start=\"527.2\" dur=\"2.49\">that assignment statement we\nsaid that was one of our</text><text start=\"529.69\" dur=\"0.97\">pieces of our model.</text><text start=\"530.66\" dur=\"2.75\">Now inside the loop,\nwhat do we have?</text><text start=\"533.41\" dur=\"5.61\">Well, for each time in the loop,\nI&amp;#39;ve got to do a test.</text><text start=\"539.02\" dur=\"3.02\">And this *= = is actually\n2 operations.</text><text start=\"542.04\" dur=\"1.91\">It&amp;#39;s a multiplication\nand an assignment.</text><text start=\"543.95\" dur=\"2.51\">And this -= is actually\n2 operations.</text><text start=\"546.46\" dur=\"2.32\">It&amp;#39;s subtraction and\nan assignment.</text><text start=\"548.78\" dur=\"3.09\">So inside of the loop I\ngo through 5 steps.</text><text start=\"551.87\" dur=\"0.86\">And then what do I do?</text><text start=\"552.73\" dur=\"2.57\">Well, I go through that\nloop multiple times.</text><text start=\"555.3\" dur=\"4.2\">So I do it 5 steps and then I do\n5 steps, then I do 5 steps.</text><text start=\"559.5\" dur=\"3.04\">And in fact, we know we&amp;#39;ll go\nthrough that loop n times,</text><text start=\"562.54\" dur=\"1.39\">whatever the value of n is.</text><text start=\"563.93\" dur=\"2.39\">So there are 5n steps.</text><text start=\"566.32\" dur=\"1.77\">Go through the loop, and\nthen, finally, I&amp;#39;ve</text><text start=\"568.09\" dur=\"1.84\">got one for the return.</text><text start=\"569.93\" dur=\"1.61\">So I could write a little\nexpression for this.</text><text start=\"571.54\" dur=\"3.03\">It says that the number\nof basic steps execute</text><text start=\"574.57\" dur=\"2.45\">here is 5n + 2.</text><text start=\"577.02\" dur=\"2.2\">Do we really care about the 2?</text><text start=\"579.22\" dur=\"3.44\">Well, clearly not because,\nas n gets large, it gets</text><text start=\"582.66\" dur=\"0.52\">irrelevant.</text><text start=\"583.18\" dur=\"2.01\">This really turns into\nan expression that</text><text start=\"585.19\" dur=\"2.6\">says it&amp;#39;s 5n steps.</text><text start=\"587.79\" dur=\"2.38\">And again, I&amp;#39;m not worried\nabout tiny differences in</text><text start=\"590.17\" dur=\"1.3\">terms of milliseconds\nof something.</text><text start=\"591.47\" dur=\"3.2\">I want to know how does this\nalgorithm behave I make my</text><text start=\"594.67\" dur=\"1.59\">argument arbitrarily large.</text><text start=\"596.26\" dur=\"4.14\">And so basically, this has 5n\nsteps that we need to execute.</text><text start=\"600.4\" dur=\"0.29\">All right.</text><text start=\"600.69\" dur=\"3.45\">I got rid of the 2, but\nwhat about the 5?</text><text start=\"604.14\" dur=\"2.48\">Do I really care about the 5?</text><text start=\"606.62\" dur=\"2.06\">And I&amp;#39;m going to argue that,\nin general, we don&amp;#39;t, that</text><text start=\"608.68\" dur=\"2.59\">those multiplicative constants\nare not relevant when</text><text start=\"611.27\" dur=\"1.98\">comparing algorithms.</text><text start=\"613.25\" dur=\"2.88\">To see that let&amp;#39;s look at\na different example.</text><text start=\"616.13\" dur=\"1.79\">Here&amp;#39;s something\nwe saw before.</text><text start=\"617.92\" dur=\"2.36\">This is trying to find square\nroots, the square root of x</text><text start=\"620.28\" dur=\"2.68\">within some accuracy epsilon.</text><text start=\"622.96\" dur=\"1.45\">I&amp;#39;m not going to go through\nthe code in detail.</text><text start=\"624.41\" dur=\"1.42\">We simply set up a step size.</text><text start=\"625.83\" dur=\"3\">We get an answer and we&amp;#39;ve got\na little while loop that runs</text><text start=\"628.83\" dur=\"2.81\">through, looking at different\nvalues of answers.</text><text start=\"631.64\" dur=\"3.31\">So it starts at 0, increases\nby a small amount, a small</text><text start=\"634.95\" dur=\"2.36\">amount, a small amount and it\nkeeps trying until it finds an</text><text start=\"637.31\" dur=\"2.78\">answer that&amp;#39;s close enough, in\nwhich case it returns it.</text><text start=\"640.09\" dur=\"4.16\">If we were to call this\nprocedure with x equal to 100</text><text start=\"644.25\" dur=\"3.3\">and an epsilon of 0.0001,\nit&amp;#39;s going to take about</text><text start=\"647.55\" dur=\"2.61\">1,000,000,000 iterations to\nget through the loop.</text><text start=\"650.16\" dur=\"2.71\">Now inside the loop, there are\nactually about 8 steps if we</text><text start=\"652.87\" dur=\"0.88\">count them carefully.</text><text start=\"653.75\" dur=\"2.26\">So you could say it&amp;#39;s about\n8,000,000,000 operations.</text><text start=\"656.01\" dur=\"3.41\">But it&amp;#39;s 8 times the number\nof times through the loop.</text><text start=\"659.42\" dur=\"1.63\">In this case, the number of\ntimes through the loop is</text><text start=\"661.05\" dur=\"1.45\">about 1,000,000,000 .</text><text start=\"662.5\" dur=\"3.49\">Now let&amp;#39;s compare that\nto bisection search.</text><text start=\"665.99\" dur=\"0.83\">We saw this before.</text><text start=\"666.82\" dur=\"1.45\">This is a bisection\nway of trying to</text><text start=\"668.27\" dur=\"1.31\">find the square root.</text><text start=\"669.58\" dur=\"1.01\">Remember what it said we do.</text><text start=\"670.59\" dur=\"3.6\">Given a number, we look at a\nlow value of 0 and a high</text><text start=\"674.19\" dur=\"2.2\">value, let&amp;#39;s assume it&amp;#39;s\nbig enough, of x.</text><text start=\"676.39\" dur=\"1.84\">We pick the middle point,\nwe check it.</text><text start=\"678.23\" dur=\"1.96\">If it&amp;#39;s close enough to the\nanswer, we&amp;#39;re done.</text><text start=\"680.19\" dur=\"3.88\">If not, we decide whether the\nreal answer lies between that</text><text start=\"684.07\" dur=\"2.375\">midpoint and the high number, or\nbetween the low number and</text><text start=\"686.445\" dur=\"2.215\">that midpoint, and then\nwe do the same thing.</text><text start=\"688.66\" dur=\"1.88\">And we keep chopping it down.</text><text start=\"690.54\" dur=\"3.43\">If we call this procedure on\nthe same argument, 100, and</text><text start=\"693.97\" dur=\"3.57\">that same epsilon 0.0001, it&amp;#39;s\nonly going to take 30</text><text start=\"697.54\" dur=\"2.17\">iterations through the loop.</text><text start=\"699.71\" dur=\"1.9\">Now it turns out, in this case,\nthere are about 10 steps</text><text start=\"701.61\" dur=\"2.36\">within each iteration as opposed\nto what I had the</text><text start=\"703.97\" dur=\"2.78\">previous case, which was eight,\nso a few more steps in</text><text start=\"706.75\" dur=\"0.95\">the iteration.</text><text start=\"707.7\" dur=\"2.34\">But it&amp;#39;s really the number of\niterations that matter,</text><text start=\"710.04\" dur=\"1.95\">1,000,000,000 versus 30.</text><text start=\"711.99\" dur=\"1.77\">Hey, I&amp;#39;ll take 30 any day.</text><text start=\"713.76\" dur=\"2.21\">So what we&amp;#39;re really saying\nis do we care whether it&amp;#39;s</text><text start=\"715.97\" dur=\"2.91\">1,000,000,000 or 8,000,000,000\nwhen we&amp;#39;re comparing it to</text><text start=\"718.88\" dur=\"3.19\">whether it&amp;#39;s 30 or 300,\nand the answer is no.</text><text start=\"722.07\" dur=\"2.4\">What we really care about\nis the growth in</text><text start=\"724.47\" dur=\"1.35\">the size of the problem.</text><text start=\"725.82\" dur=\"2.61\">It&amp;#39;s the size that matters and\nso those multiplicative</text><text start=\"728.43\" dur=\"3.19\">factors don&amp;#39;t concern\nus very much.</text><text start=\"731.62\" dur=\"3.38\">And what that, then, says is,\ngiven that it&amp;#39;s the difference</text><text start=\"735\" dur=\"2.29\">in the iterations through the\nloop that matter, we&amp;#39;re going</text><text start=\"737.29\" dur=\"1.56\">to drop the multiplication\nfactor.</text><text start=\"738.85\" dur=\"2.21\">It&amp;#39;s probably not particularly\nrelevant.</text><text start=\"741.06\" dur=\"2.52\">And so we&amp;#39;re going to focus on\nmeasuring complexity as a</text><text start=\"743.58\" dur=\"2.43\">function of the input size.</text><text start=\"746.01\" dur=\"2.98\">We&amp;#39;ll focus on the largest\nfactor in whatever expression</text><text start=\"748.99\" dur=\"2.45\">we write that captures the\nnumber of basic steps, and</text><text start=\"751.44\" dur=\"1.75\">we&amp;#39;re going to be mostly\nconcerned with</text><text start=\"753.19\" dur=\"1.25\">the worst case scenario.</text><text start=\"754.44\" dur=\"2.437\"></text></transcript>\n", "LxI8Mko_MKs": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.27\"></text><text start=\"0.27\" dur=\"4.87\">In this seventh lecture, we&amp;#39;re going to\ntalk about testing and debugging.</text><text start=\"5.14\" dur=\"3.78\">While it would be great if we could\nalways write correct code that ran the</text><text start=\"8.92\" dur=\"4.27\">first time we tested it, things usually\ndon&amp;#39;t work out that well.</text><text start=\"13.19\" dur=\"4.29\">So we&amp;#39;re going to talk about how to\ntests code to determine if it might</text><text start=\"17.48\" dur=\"1.27\">have a bug.</text><text start=\"18.75\" dur=\"4.16\">Focusing on black box testing, where\nwe exercise paths through the</text><text start=\"22.91\" dur=\"4.11\">specification, and glass box\ntesting where we exercise</text><text start=\"27.02\" dur=\"2.33\">paths through the code.</text><text start=\"29.35\" dur=\"2.73\">We will also talk about techniques\nfor debugging.</text><text start=\"32.08\" dur=\"3.96\">That is, isolating the location\nof bugs in our code.</text><text start=\"36.04\" dur=\"3.33\">In particular we will talk about\ntreating debugging as a search</text><text start=\"39.37\" dur=\"4.08\">process, and use the ideas of binary\nsearch to help isolate</text><text start=\"43.45\" dur=\"1.51\">and detect bug sources.</text><text start=\"44.96\" dur=\"1.25\"></text></transcript>\n", "-VjpRFaz5f4": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.07\"></text><text start=\"1.07\" dur=\"3.09\">Eric Grimson: I want to show you a\nvisualization that gives you an idea</text><text start=\"4.16\" dur=\"1.54\">of bisection search.</text><text start=\"5.7\" dur=\"2.68\">Just to give you a way of thinking\nabout how this actually works.</text><text start=\"8.38\" dur=\"4.69\">So imagine I have a sequence of sorted\nitems, like these right here.</text><text start=\"13.07\" dur=\"1.3\">What does bisection search say?</text><text start=\"14.37\" dur=\"2.71\">It says I&amp;#39;m going to start by looking\nat the middle element.</text><text start=\"17.08\" dur=\"2.47\">If I&amp;#39;m lucky, it&amp;#39;s the thing\nI&amp;#39;m looking for.</text><text start=\"19.55\" dur=\"3.78\">If not, I can use the difference between\nwhat I&amp;#39;m looking for and that</text><text start=\"23.33\" dur=\"3.07\">element to decide that it has\nto be in the lower half.</text><text start=\"26.4\" dur=\"4.96\">And so I can instantly take these\nthings and ignore them.</text><text start=\"31.36\" dur=\"2.57\">Having done that, I&amp;#39;m now going to look\nat the middle element of what&amp;#39;s</text><text start=\"33.93\" dur=\"2.82\">left, and say is the thing\nI&amp;#39;m looking for there?</text><text start=\"36.75\" dur=\"0.92\">If I&amp;#39;m lucky, it is.</text><text start=\"37.67\" dur=\"3.46\">If not, I&amp;#39;ll use again the difference\nbetween what I&amp;#39;m looking for and that</text><text start=\"41.13\" dur=\"2.66\">element to decide which\nhalf I can throw away.</text><text start=\"43.79\" dur=\"4.63\">For example, might be able\nto toss those away.</text><text start=\"48.42\" dur=\"4.21\">And then I can look here and eventually\ndecide whether I&amp;#39;ve got the</text><text start=\"52.63\" dur=\"1.67\">thing I&amp;#39;m looking for or not.</text><text start=\"54.3\" dur=\"4.87\">The idea is that on each stage, I can\ntake half of the remaining things and</text><text start=\"59.17\" dur=\"0.75\">ignore them.</text><text start=\"59.92\" dur=\"2.99\">Throw them away, which makes\nthis a very efficient way</text><text start=\"62.91\" dur=\"1.34\">of doing the search.</text><text start=\"64.25\" dur=\"1.25\"></text></transcript>\n", "j9as5xwUwA8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.33\"></text><text start=\"0.33\" dur=\"3.26\">In this eighth lecture we&amp;#39;re going\nto talk about how to measure the</text><text start=\"3.59\" dur=\"3.16\">complexity of different algorithms.</text><text start=\"6.75\" dur=\"4.14\">We&amp;#39;ll give you a model of what we mean\nby complexity, how to estimate how</text><text start=\"10.89\" dur=\"4.79\">much time a computation will take for\nan arbitrarily large input argument.</text><text start=\"15.68\" dur=\"4.38\">Our goal is not to estimate actual\ntime, but rather to reason about</text><text start=\"20.06\" dur=\"4.87\">different classes of algorithms\nand their inherent complexity.</text><text start=\"24.93\" dur=\"4.36\">We&amp;#39;ll use this idea to introduce a range\nof classes of algorithms from</text><text start=\"29.29\" dur=\"5.18\">constant to linear, to more complex\nclasses, such as polynomial and</text><text start=\"34.47\" dur=\"1.87\">exponential.</text><text start=\"36.34\" dur=\"3.82\">At the end of this lecture, you will be\nable to categorize the complexity</text><text start=\"40.16\" dur=\"3.98\">of algorithms, and especially to compare\nthe costs of decisions you</text><text start=\"44.14\" dur=\"1.71\">make in designing an algorithm.</text><text start=\"45.85\" dur=\"1.25\"></text></transcript>\n", "SQUNkr4bQyQ": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.85\"></text><text start=\"0.85\" dur=\"4\">Well, what we have is a bunch of\nobservations that we made with our</text><text start=\"4.85\" dur=\"0.54\">experiment.</text><text start=\"5.39\" dur=\"2.83\">You can see them here plotted\nas the blue points.</text><text start=\"8.22\" dur=\"6.57\">And what we&amp;#39;d like to do is to somehow\ndiscover the most likely line that</text><text start=\"14.79\" dur=\"4.87\">represents the theory that we\nhypothesized that explains how the</text><text start=\"19.66\" dur=\"4.01\">spring works given the observations\nthat we have.</text><text start=\"23.67\" dur=\"5.49\">So what we did is that, for a particular\nforce that&amp;#39;s being applied,</text><text start=\"29.16\" dur=\"4.06\">we have the notion of adjusting the\nparameters of our prediction to come</text><text start=\"33.22\" dur=\"1.87\">up with a particular prediction.</text><text start=\"35.09\" dur=\"7.62\">And what we&amp;#39;d like to do is to adjust\nthose parameters so that the</text><text start=\"42.71\" dur=\"5.17\">prediction is the most likely one given\nthe observation that we made.</text><text start=\"47.88\" dur=\"3.75\">And we discover that the difference\nbetween the two of those observations</text><text start=\"51.63\" dur=\"2.88\">and the prediction we described\nas the error.</text><text start=\"54.51\" dur=\"6.1\">So the likelihood that the prediction is\nthe right one is sort of determined</text><text start=\"60.61\" dur=\"1.94\">by the size of the error.</text><text start=\"62.55\" dur=\"5.14\">So we take the i-th observation and we\ncompute the error by subtracting off</text><text start=\"67.69\" dur=\"1.41\">the i-th prediction.</text><text start=\"69.1\" dur=\"4.15\">And so this is the likelihood here\nof such an error occurring.</text><text start=\"73.25\" dur=\"4.61\">And the likelihood gets bigger\nthe smaller the error is.</text><text start=\"77.86\" dur=\"4.47\">And we saw that on the previous slide,\nthat small errors are much more likely</text><text start=\"82.33\" dur=\"2\">than large errors.</text><text start=\"84.33\" dur=\"4.61\">And what we&amp;#39;d like to do is to now\nsay, OK, well, I have many such</text><text start=\"88.94\" dur=\"1.83\">observations that I&amp;#39;ve made.</text><text start=\"90.77\" dur=\"5.33\">And the likelihood of making all those\nobservations will be, like with</text><text start=\"96.1\" dur=\"4.79\">probabilities, the product of all\nthe individual likelihoods.</text><text start=\"100.89\" dur=\"6.1\">So if I&amp;#39;m going to go off and look at\nthe likelihood of each observation,</text><text start=\"106.99\" dur=\"4.4\">what I&amp;#39;m going to do is to then\nmultiply all those together.</text><text start=\"111.39\" dur=\"1.45\">And here&amp;#39;s what my job is going to be.</text><text start=\"112.84\" dur=\"6.39\">I want to choose the parameters\nof my prediction.</text><text start=\"119.23\" dur=\"3.73\">So in this case, it would be\nthe constant 1 over k.</text><text start=\"122.96\" dur=\"2.19\">That&amp;#39;s the slope of the line.</text><text start=\"125.15\" dur=\"5.519\">I want to choose the slope and then the\nintercept at the line such that</text><text start=\"130.669\" dur=\"4.351\">that particular choice of parameters\nmaximizes the likelihood.</text><text start=\"135.02\" dur=\"3.69\">So I want to maximize this product.</text><text start=\"138.71\" dur=\"4.79\">So we want to maximize the product\nof the likelihoods of the errors.</text><text start=\"143.5\" dur=\"5.74\">So that will actually be the same as\nminimizing 1 over the product.</text><text start=\"149.24\" dur=\"7.95\">So if we want to minimize this product\nof the likelihood of the error, so 1</text><text start=\"157.19\" dur=\"1.49\">over the product.</text><text start=\"158.68\" dur=\"1.7\">So let&amp;#39;s work on that a little bit.</text><text start=\"160.38\" dur=\"3.74\">Let&amp;#39;s actually start\nby taking the log.</text><text start=\"164.12\" dur=\"6.7\">It turns out that whatever parameters\nwill minimize the 1 over the product</text><text start=\"170.82\" dur=\"3.51\">will also minimize the log\nof that expression.</text><text start=\"174.33\" dur=\"5.56\">So let&amp;#39;s take the natural\nlog, natural log Ln.</text><text start=\"179.89\" dur=\"7.6\">And so the natural log of\n1 over this product of--</text><text start=\"187.49\" dur=\"0.76\">well, let&amp;#39;s see.</text><text start=\"188.25\" dur=\"3.97\">So the natural log of 1 over\nsomething is minus the</text><text start=\"192.22\" dur=\"2.93\">natural log of the product.</text><text start=\"195.15\" dur=\"3.52\">And the log of the product\nis the sum of the log.</text><text start=\"198.67\" dur=\"3.9\">So we basically all do the\nsame summation here.</text><text start=\"202.57\" dur=\"6.82\">And now what we want is the\nnatural log of this error.</text><text start=\"209.39\" dur=\"2.51\">And I&amp;#39;ll write it out this time.</text><text start=\"211.9\" dur=\"2.51\">Observations minus the predictions.</text><text start=\"214.41\" dur=\"0.26\">OK.</text><text start=\"214.67\" dur=\"3.29\">So the likelihood of the error.</text><text start=\"217.96\" dur=\"2.785\">So we&amp;#39;re still trying\nto minimize this.</text><text start=\"220.745\" dur=\"1.615\">That&amp;#39;s our goal.</text><text start=\"222.36\" dur=\"5.17\">And now what we&amp;#39;re going to do is take\nadvantage of our knowledge about what</text><text start=\"227.53\" dur=\"3.9\">this error, the likelihood looks like.</text><text start=\"231.43\" dur=\"7.32\">So we&amp;#39;re going to use our knowledge to\nexpand this further on the next slide.</text><text start=\"238.75\" dur=\"6.02\">So just carrying on from the previous\nslide, we&amp;#39;re going to want to minimize</text><text start=\"244.77\" dur=\"3.66\">this sum, which is the natural log.</text><text start=\"248.43\" dur=\"5.18\">And now I&amp;#39;m going to go off and write\nit in the likelihood of the error.</text><text start=\"253.61\" dur=\"4.289\">So it&amp;#39;s, 1 over 2 pi sigma squared.</text><text start=\"257.899\" dur=\"4.021\">And I&amp;#39;m just using the formula here\nfor the normal distribution.</text><text start=\"261.92\" dur=\"3.78\">So this will be e and\nthis will be minus.</text><text start=\"265.7\" dur=\"5.14\">And now the error itself here was the\nobserved value minus the predicted</text><text start=\"270.84\" dur=\"6.93\">value squared, all over the\nvariance of the errors.</text><text start=\"277.77\" dur=\"0.77\">OK.</text><text start=\"278.54\" dur=\"3.45\">So that seems pretty straightforward.</text><text start=\"281.99\" dur=\"1.75\">Let&amp;#39;s go ahead and simplify that.</text><text start=\"283.74\" dur=\"4.87\">So I&amp;#39;m going to take care of the minus\nsign here as I do the simplification.</text><text start=\"288.61\" dur=\"1.3\">So let&amp;#39;s see.</text><text start=\"289.91\" dur=\"6.3\">The natural log of a product is the same\nas the sum of the natural logs.</text><text start=\"296.21\" dur=\"4.65\">And the natural log of 1 over something\nis minus the natural log of</text><text start=\"300.86\" dur=\"0.88\">the something.</text><text start=\"301.74\" dur=\"3.09\">So we&amp;#39;ll use that minus to\ncancel out some of this.</text><text start=\"304.83\" dur=\"6.24\">So this will be the same as the natural\nlog of the square root of 2 pi</text><text start=\"311.07\" dur=\"4.66\">sigma squared, plus--</text><text start=\"315.73\" dur=\"2.34\">I&amp;#39;m going to move this\nminus sign again in--</text><text start=\"318.07\" dur=\"5.38\">minus the natural log of this guy,\nwhich the natural log of e to the</text><text start=\"323.45\" dur=\"1.92\">something is something.</text><text start=\"325.37\" dur=\"2.02\">I&amp;#39;ll take care of that minus sign.</text><text start=\"327.39\" dur=\"6.11\">And so this will be observation\nminus the prediction squared,</text><text start=\"333.5\" dur=\"2.42\">all over sigma squared.</text><text start=\"335.92\" dur=\"0.67\">OK.</text><text start=\"336.59\" dur=\"4.01\">And we&amp;#39;re going to be wanting\nto sum all those up.</text><text start=\"340.6\" dur=\"2.41\">So this is the same sum as before.</text><text start=\"343.01\" dur=\"4.84\">And we&amp;#39;ve just used the minus sign and\nexpanded out the log a little bit.</text><text start=\"347.85\" dur=\"2.53\">Now let&amp;#39;s observe that some of\nthese terms are constant.</text><text start=\"350.38\" dur=\"2.36\">This is a constant, as is this guy.</text><text start=\"352.74\" dur=\"2.02\">He doesn&amp;#39;t change.</text><text start=\"354.76\" dur=\"4.93\">The error processes are sort of stable\nand their statistics are stable as</text><text start=\"359.69\" dur=\"1.74\">we&amp;#39;re making our measurements.</text><text start=\"361.43\" dur=\"3.34\">And so what we discover is that this guy\nhere, particularly if we&amp;#39;re doing</text><text start=\"364.77\" dur=\"2.89\">a minimization problem, this\nis all proportional.</text><text start=\"367.66\" dur=\"1.58\">And I can just get rid\nof the constants.</text><text start=\"369.24\" dur=\"1.92\">They won&amp;#39;t affect the\nminimization at all.</text><text start=\"371.16\" dur=\"5.8\">The same choices for the parameters of\nthe prediction that minimize this</text><text start=\"376.96\" dur=\"2.76\">equation will also minimize\nthis equation.</text><text start=\"379.72\" dur=\"3.09\">So I&amp;#39;m just taking out\nall the constants.</text><text start=\"382.81\" dur=\"3.51\">We don&amp;#39;t need them here to help us\nwith our minimization problem.</text><text start=\"386.32\" dur=\"6.48\">And I end up with that, which is sort\nof a magic result in the business of</text><text start=\"392.8\" dur=\"2.68\">processing data points.</text><text start=\"395.48\" dur=\"9.03\">This is what&amp;#39;s called the Sum of the\nSquare of the Errors, or SSE for</text><text start=\"404.51\" dur=\"3.79\">short, Sum of the Square\nof the Errors.</text><text start=\"408.3\" dur=\"6.16\">And if we minimize that, then we&amp;#39;ll have\nmade the most likely choice of</text><text start=\"414.46\" dur=\"0.82\">the parameters.</text><text start=\"415.28\" dur=\"6.41\">If we choose parameters such that we\nminimize the sum of the square of the</text><text start=\"421.69\" dur=\"5.76\">observed errors, then that will be\nthe most likely predictor for the</text><text start=\"427.45\" dur=\"1.9\">observations that we have.</text><text start=\"429.35\" dur=\"2.43\">And we actually have sort of\na nickname for this guy.</text><text start=\"431.78\" dur=\"5.97\">We often call this sort of as shorthand,\nthe least squares.</text><text start=\"437.75\" dur=\"4.63\">Finding the values of the parameters for\nthe prediction that minimize the</text><text start=\"442.38\" dur=\"3.85\">sum of the square of the errors is a\nvery common thing to want to do to</text><text start=\"446.23\" dur=\"1.1\">data points.</text><text start=\"447.33\" dur=\"5.12\">And in fact, pylab has a built-in\nprocedure that will do that for us.</text><text start=\"452.45\" dur=\"2.11\">It&amp;#39;s called polyfit.</text><text start=\"454.56\" dur=\"2.18\">Let me show you how to use it.</text><text start=\"456.74\" dur=\"5.78\">The first example here is finding the\nparameters for a linear predictor.</text><text start=\"462.52\" dur=\"5.23\">So we&amp;#39;re making the assumption that\nthe prediction in this case of the</text><text start=\"467.75\" dur=\"5.6\">extension of the spring is based on a\nlinear relationship between the mass</text><text start=\"473.35\" dur=\"1.86\">and the observation that we make.</text><text start=\"475.21\" dur=\"4.5\">So we&amp;#39;re asking polyfit to find\nus the parameters a and b.</text><text start=\"479.71\" dur=\"5.29\">So it&amp;#39;s going to find us those given in\nour case a bunch of forces that we</text><text start=\"485\" dur=\"3.57\">applied to the spring and a bunch\nof observations that we made.</text><text start=\"488.57\" dur=\"4.41\">And its job is to find the best such set\nof parameters that minimizes the</text><text start=\"492.98\" dur=\"2.32\">sum of the square of the errors.</text><text start=\"495.3\" dur=\"5.13\">We can also asked for fits with\nhigher degree polynomials.</text><text start=\"500.43\" dur=\"2.64\">Here&amp;#39;s one that does a parabolic fit.</text><text start=\"503.07\" dur=\"2.91\">So this would be a second-degree\nequation.</text><text start=\"505.98\" dur=\"5.12\">Here we&amp;#39;re assuming that the\nrelationship between the prediction</text><text start=\"511.1\" dur=\"5.66\">and the observation, or the basic\nparameters and the observation is</text><text start=\"516.76\" dur=\"5.919\">governed by a second-order equation,\nso ax squared plus bx plus c.</text><text start=\"522.679\" dur=\"5.631\">So given, again, the forces that we&amp;#39;ve\napplied and the observations we made</text><text start=\"528.31\" dur=\"3.83\">of the extensions, we could\nget a second-order fit.</text><text start=\"532.14\" dur=\"4.7\">And in fact, if we set this parameter\nto 3, we would be fitting a cubic</text><text start=\"536.84\" dur=\"2.52\">equation, so forth and so on.</text><text start=\"539.36\" dur=\"4.8\">So our next step is to actually use\nthese routines and try to find those</text><text start=\"544.16\" dur=\"2.84\">parameters given the observations\nthat we made.</text><text start=\"547\" dur=\"1.25\"></text></transcript>\n", "2e6pE07JJ8M": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.78\"></text><text start=\"0.78\" dur=\"3.58\">ERIC GRIMSON: We&amp;#39;ve now seen a bunch\nof examples of recursive functions.</text><text start=\"4.36\" dur=\"1.41\">Seen some of the power of them.</text><text start=\"5.77\" dur=\"2.95\">We keep coming back to this idea of\nbreak a problem down into smaller</text><text start=\"8.72\" dur=\"1.67\">versions of the same problem.</text><text start=\"10.39\" dur=\"2.51\">Really great way of trying\nto tackle a problem.</text><text start=\"12.9\" dur=\"1.645\">We&amp;#39;re going to do one last thing.</text><text start=\"14.545\" dur=\"2.965\">And that goes back to when we ran fib.</text><text start=\"17.51\" dur=\"4.75\">When we ran Fibonacci, we might have\nnoticed that as we made the arguments</text><text start=\"22.26\" dur=\"1.52\">larger and larger, it slowed down.</text><text start=\"23.78\" dur=\"0.78\">Which is not surprising.</text><text start=\"24.56\" dur=\"2.74\">It&amp;#39;s calling itself multiple times.</text><text start=\"27.3\" dur=\"2.68\">But suppose we wanted to actually count\nthe number of times that fib</text><text start=\"29.98\" dur=\"2.24\">called itself recursively.</text><text start=\"32.22\" dur=\"3.07\">Multiple ways of doing it, but one of\nthe ways in which we can do this is to</text><text start=\"35.29\" dur=\"3.035\">use what&amp;#39;s called a global variable.</text><text start=\"38.325\" dur=\"0.545\">What does that mean?</text><text start=\"38.87\" dur=\"4.54\">Well, so far, all the functions have\ncommunicated with their environment</text><text start=\"43.41\" dur=\"2.8\">strictly through their parameters\nand their return values.</text><text start=\"46.21\" dur=\"2.85\">If it&amp;#39;s when we call a new function,\nit creates an environment with some</text><text start=\"49.06\" dur=\"1.19\">parameters passed in.</text><text start=\"50.25\" dur=\"2.76\">It does some work internally, and\nit returns a value as the</text><text start=\"53.01\" dur=\"2.01\">value of its response.</text><text start=\"55.02\" dur=\"4.73\">We can make a variable or declare\na variable to be global.</text><text start=\"59.75\" dur=\"4.37\">And what this means is that the name is\ndefined at the outermost scope of</text><text start=\"64.12\" dur=\"4.82\">the program, rather than the scope of\nthe function within which it appears.</text><text start=\"68.94\" dur=\"2.23\">It&amp;#39;s global because it&amp;#39;s going to\nappear up at the top level.</text><text start=\"71.17\" dur=\"3.25\">It&amp;#39;s going to be part of what we want\nto deal with when we&amp;#39;re interacting</text><text start=\"74.42\" dur=\"4.2\">with, for example, the Python shell.</text><text start=\"78.62\" dur=\"2.36\">As it notes here, this can\nbe a bit dangerous.</text><text start=\"80.98\" dur=\"1.27\">And we&amp;#39;ll talk about that in a second.</text><text start=\"82.25\" dur=\"2.52\">But let&amp;#39;s just look at\nhow we might do this.</text><text start=\"84.77\" dur=\"2.01\">So, here&amp;#39;s the idea.</text><text start=\"86.78\" dur=\"2.9\">We&amp;#39;re going to call this a metered\nversion of Fibonacci.</text><text start=\"89.68\" dur=\"1.94\">It has much the same form as before.</text><text start=\"91.62\" dur=\"3.41\">There is the recursive call, just\nas we had before, using a</text><text start=\"95.03\" dur=\"1.16\">different name, of course.</text><text start=\"96.19\" dur=\"1.82\">But we do two things.</text><text start=\"98.01\" dur=\"6.23\">Right here, we make a declaration that\nsays the variable numCalls is global.</text><text start=\"104.24\" dur=\"4.2\">That means it&amp;#39;s going to be bound way\nup at the top, at the highest-level</text><text start=\"108.44\" dur=\"1.32\">environment.</text><text start=\"109.76\" dur=\"4.21\">Inside of fibMetered, we&amp;#39;re going\nto actually change numCalls.</text><text start=\"113.97\" dur=\"4.42\">This says every time we call fibMetered,\nwe&amp;#39;re going to increase</text><text start=\"118.39\" dur=\"1.9\">that global variable by one.</text><text start=\"120.29\" dur=\"0.79\">Great.</text><text start=\"121.08\" dur=\"2.48\">So that&amp;#39;s going to count how\nmany times it&amp;#39;s called.</text><text start=\"123.56\" dur=\"2.9\">We can test this with a little\ntest script here.</text><text start=\"126.46\" dur=\"1.72\">I&amp;#39;m going to run fib for some number.</text><text start=\"128.18\" dur=\"3.66\">I&amp;#39;m going to have i roll\nover from 0 up to n.</text><text start=\"131.84\" dur=\"1.15\">And notice what I&amp;#39;m going to do.</text><text start=\"132.99\" dur=\"4.49\">Each time I go through the loop, I&amp;#39;m\ngoing to again say numCalls is a</text><text start=\"137.48\" dur=\"1.03\">global variable.</text><text start=\"138.51\" dur=\"2.41\">It&amp;#39;s defined up in that\ntop-level place.</text><text start=\"140.92\" dur=\"2.9\">And I&amp;#39;m going to set it to zero.</text><text start=\"143.82\" dur=\"3.45\">That is going to have the effect of\nin the global environment changing</text><text start=\"147.27\" dur=\"1\">numCalls to zero.</text><text start=\"148.27\" dur=\"4.42\">And then I&amp;#39;m going to actually do some\nwork and print up some results.</text><text start=\"152.69\" dur=\"2.62\">I&amp;#39;m going to do the work of figuring\nout what Fibonacci is.</text><text start=\"155.31\" dur=\"5.34\">The call to fibMeter will, every time\nit calls it, change numCalls by one.</text><text start=\"160.65\" dur=\"3.86\">And when I&amp;#39;m done and when it returns,\nI can print out how many times was</text><text start=\"164.51\" dur=\"2\">that actually called.</text><text start=\"166.51\" dur=\"0.56\">OK.</text><text start=\"167.07\" dur=\"1.38\">Let&amp;#39;s see what happens if we do this.</text><text start=\"168.45\" dur=\"4.92\">I&amp;#39;m going to go over and start up over\nhere inside of my IDLE environment.</text><text start=\"173.37\" dur=\"5.614\">And if I load that in, let&amp;#39;s\nactually do a test on fib.</text><text start=\"178.984\" dur=\"3.836\">And this put means we&amp;#39;re\ngoing to do up to five.</text><text start=\"182.82\" dur=\"2.34\">And it now tells us, oh cool.</text><text start=\"185.16\" dur=\"2.98\">When I call a fib on zero,\nthe answer is one.</text><text start=\"188.14\" dur=\"0.95\">It was called one time.</text><text start=\"189.09\" dur=\"0.64\">Makes sense.</text><text start=\"189.73\" dur=\"2.3\">When I call fib on one,\nthe answer is one.</text><text start=\"192.03\" dur=\"1.08\">It was also called one time.</text><text start=\"193.11\" dur=\"1.57\">We knew those were the base cases.</text><text start=\"194.68\" dur=\"2.15\">And then you can see the responses\nas we move up.</text><text start=\"196.83\" dur=\"1.81\">So let&amp;#39;s make this a\nlittle bit bigger.</text><text start=\"198.64\" dur=\"3.72\">Let&amp;#39;s do testFib--</text><text start=\"202.36\" dur=\"4.19\">oh, let&amp;#39;s make it up to 20.</text><text start=\"206.55\" dur=\"2.99\">Then we&amp;#39;ll see what it does here.</text><text start=\"209.54\" dur=\"1.33\">You see it&amp;#39;s moving pretty quickly.</text><text start=\"210.87\" dur=\"1.57\">It&amp;#39;s starting to slow\ndown a little bit.</text><text start=\"212.44\" dur=\"4.29\">But we&amp;#39;re actually now calling\ntestFib in that metered form.</text><text start=\"216.73\" dur=\"2.61\">And it&amp;#39;s showing us how many\ntimes it&amp;#39;s called.</text><text start=\"219.34\" dur=\"2.42\">Also notice, if you look at the\nnumbers, it&amp;#39;s clear that we&amp;#39;re</text><text start=\"221.76\" dur=\"1.93\">resetting numCalls each time around.</text><text start=\"223.69\" dur=\"3.18\">And that, if we go back to our\nslides, came from right here.</text><text start=\"226.87\" dur=\"3.72\">Each time through the loop and testFib,\nwe reset numCalls to zero up</text><text start=\"230.59\" dur=\"1.45\">in that top environment.</text><text start=\"232.04\" dur=\"5.13\">So that when we go ahead and call\nfibMetered, it is starting from zero</text><text start=\"237.17\" dur=\"4.41\">and doing a count for each time it\ncalls recursively within itself.</text><text start=\"241.58\" dur=\"0.82\">A nice tool.</text><text start=\"242.4\" dur=\"2.43\">A tool that&amp;#39;s really kind of handy, and\nsomething that we&amp;#39;ll come back to,</text><text start=\"244.83\" dur=\"3.035\">because it is a way of being able\nto keep track of some things.</text><text start=\"247.865\" dur=\"3.795\">But I want to finish with\na couple of comments.</text><text start=\"251.66\" dur=\"2.87\">First one is use it with care.</text><text start=\"254.53\" dur=\"3.01\">Putting a variable as a global\nvariable is destroying the</text><text start=\"257.54\" dur=\"0.979\">locality of the code.</text><text start=\"258.519\" dur=\"4.601\">One of the beautiful pieces about\nrecursive code is all of the function</text><text start=\"263.12\" dur=\"3.43\">call contains within it all\nthe information it needs.</text><text start=\"266.55\" dur=\"3.24\">The parameter&amp;#39;s passed in, it does all\nthe work internally, locally, and it</text><text start=\"269.79\" dur=\"2.26\">simply returns a value back out.</text><text start=\"272.05\" dur=\"3.31\">That is an elegant way of being able to\nnot only think about what&amp;#39;s going</text><text start=\"275.36\" dur=\"2.37\">on, but to be able to\ndeal with the code.</text><text start=\"277.73\" dur=\"4.83\">Once we have global variables, they\ncan be modified or read in a wide</text><text start=\"282.56\" dur=\"0.92\">range of places.</text><text start=\"283.48\" dur=\"4.1\">And that&amp;#39;s going to make it really easy\nto break the locality, especially</text><text start=\"287.58\" dur=\"4.22\">if someplace outside of the function\nwe&amp;#39;re dealing with makes a change for</text><text start=\"291.8\" dur=\"4.41\">global variable and that affects the\ncomputation inside that local call to</text><text start=\"296.21\" dur=\"1.21\">a procedure.</text><text start=\"297.42\" dur=\"3.81\">This is going to allow the potential\nfor introducing bugs.</text><text start=\"301.23\" dur=\"3.58\">And most computer scientists will be\nvery strong about arguing that one</text><text start=\"304.81\" dur=\"3.02\">should not use global variables\nif at all possible.</text><text start=\"307.83\" dur=\"3.31\">It is much better to encapsulate\nthe computation locally.</text><text start=\"311.14\" dur=\"3.34\">But here&amp;#39;s an example where we&amp;#39;re\nmetering things, where having a global</text><text start=\"314.48\" dur=\"1.38\">variable can be really handy.</text><text start=\"315.86\" dur=\"1.25\"></text></transcript>\n", "CJh-mscFZgU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.46\"></text><text start=\"1.46\" dur=\"1.44\">ERIC GRIMSON: So now we have lists--</text><text start=\"2.9\" dur=\"3.49\">ordered sequences of arbitrary elements,\nbut they can be mutable.</text><text start=\"6.39\" dur=\"1.94\">We&amp;#39;ve already seen some\noperations on them.</text><text start=\"8.33\" dur=\"2.32\">But there&amp;#39;s a lot of other operations\nthat we&amp;#39;d like to have and</text><text start=\"10.65\" dur=\"1.23\">we do have on lists.</text><text start=\"11.88\" dur=\"2.77\">So for example, we can\niterate over them.</text><text start=\"14.65\" dur=\"0.66\">What does that mean?</text><text start=\"15.31\" dur=\"2.88\">It says inside of a for loop or a while\nloop, but certainly inside of a</text><text start=\"18.19\" dur=\"4.38\">for loop, I can have a call with a loop\nvariable that&amp;#39;s iterating over</text><text start=\"22.57\" dur=\"1.13\">that structure.</text><text start=\"23.7\" dur=\"1.73\">And let&amp;#39;s look at an example of it.</text><text start=\"25.43\" dur=\"2.49\">So I&amp;#39;ve already bound\nthat variable Univs.</text><text start=\"27.92\" dur=\"4.489\">And so this says I&amp;#39;m going to let e,\nin turn, be each element in Univs.</text><text start=\"32.409\" dur=\"3.171\">And I can do things like print up\nsome information about them.</text><text start=\"35.58\" dur=\"2.71\">And since each of those elements is\nitself a list, I can have another</text><text start=\"38.29\" dur=\"3.86\">loop, where I loop over e, letting u\nbe each element inside of there.</text><text start=\"42.15\" dur=\"1.54\">Then I print something out.</text><text start=\"43.69\" dur=\"5.45\">And if we just go over to my idle screen\nhere, I&amp;#39;m just printing out--</text><text start=\"49.14\" dur=\"3.21\">so what&amp;#39;s the value of Univs,\nwhat&amp;#39;s the value of Univs 1.</text><text start=\"52.35\" dur=\"4.11\">And then, at the bottom, you can see\nthat loop, where, in fact, I print</text><text start=\"56.46\" dur=\"2.74\">some information and I loop\nthrough each of the pieces</text><text start=\"59.2\" dur=\"1.75\">inside of that structure.</text><text start=\"60.95\" dur=\"4.06\">As with tuples, what that iteration is\ndoing is it&amp;#39;s setting up an internal</text><text start=\"65.01\" dur=\"4.75\">index, starting at 0, and walking down\neach element of the list till it gets</text><text start=\"69.76\" dur=\"3.55\">to the end of the list, with the index\npointing to each element in turn,</text><text start=\"73.31\" dur=\"1.99\">letting me extract and\ndo something with it.</text><text start=\"75.3\" dur=\"2.62\">And that something might be, in\nfact, printing or looping over</text><text start=\"77.92\" dur=\"1.29\">that interior structure.</text><text start=\"79.21\" dur=\"0.96\">So I&amp;#39;ve got iteration.</text><text start=\"80.17\" dur=\"2.71\">This sounds pretty nice.</text><text start=\"82.88\" dur=\"1.83\">What else do I have?</text><text start=\"84.71\" dur=\"2.89\">Well, we&amp;#39;ve already seen that\nI can add things to lists.</text><text start=\"87.6\" dur=\"1.45\">And I did that with append.</text><text start=\"89.05\" dur=\"4.27\">Now again, if I go over to my idle\nshell, I can do Techs.append.</text><text start=\"93.32\" dur=\"2.17\">In fact, before I do that,\nlet&amp;#39;s just remind you.</text><text start=\"95.49\" dur=\"3.62\">Techs is a list of MIT,\nCaltech, and RPI.</text><text start=\"99.11\" dur=\"2.26\">And suppose I say I&amp;#39;m going to\ndo Techs, and I&amp;#39;m going to</text><text start=\"101.37\" dur=\"2.72\">append to it the Ivys.</text><text start=\"104.09\" dur=\"3.29\">If I now look at the value of Techs--</text><text start=\"107.38\" dur=\"1.15\">a-ha--</text><text start=\"108.53\" dur=\"1.23\">as I would have expected.</text><text start=\"109.76\" dur=\"1.44\">Remember what we said about append.</text><text start=\"111.2\" dur=\"3.42\">It&amp;#39;s a method, which is why we&amp;#39;ve got\nthat funky little period there.</text><text start=\"114.62\" dur=\"3.07\">And it&amp;#39;s a method that, in\nfact, has a side effect.</text><text start=\"117.69\" dur=\"2.26\">It mutates.</text><text start=\"119.95\" dur=\"5.7\">It causes a side effect in which, in\nparticular, I&amp;#39;m going to take Techs as</text><text start=\"125.65\" dur=\"3.59\">a list, and I&amp;#39;m going to change the\nend of it to add a new element in.</text><text start=\"129.24\" dur=\"2.58\">And this new element, in this\ncase, was itself a list.</text><text start=\"131.82\" dur=\"4.06\">So the structure is now a list\nfour-long, the first three elements of</text><text start=\"135.88\" dur=\"4.34\">which are just strings, the fourth\nelement of which is a list.</text><text start=\"140.22\" dur=\"2.13\">And that&amp;#39;s what got printed out there.</text><text start=\"142.35\" dur=\"5.09\">Now, suppose I said, that&amp;#39;s nice, but\nI don&amp;#39;t want to have a whole list</text><text start=\"147.44\" dur=\"1.21\">hanging off as appendage.</text><text start=\"148.65\" dur=\"2.45\">I&amp;#39;d like to have a list with everything\nat the same element.</text><text start=\"151.1\" dur=\"1.39\">I&amp;#39;d like to flatten them.</text><text start=\"152.49\" dur=\"2.44\">In that case, what I&amp;#39;d really like\nto do is to take two lists and</text><text start=\"154.93\" dur=\"1.58\">concatenate them together.</text><text start=\"156.51\" dur=\"1.24\">It&amp;#39;s called flattening.</text><text start=\"157.75\" dur=\"2.3\">And we can do that using\nthe plus operator.</text><text start=\"160.05\" dur=\"2.91\">So I&amp;#39;m going to reevaluate\nthese pieces again.</text><text start=\"162.96\" dur=\"3.72\">Let me just bring them back\ninto my environment.</text><text start=\"166.68\" dur=\"2.66\">And I&amp;#39;m running through that loop,\nbecause now what I&amp;#39;d like to do is</text><text start=\"169.34\" dur=\"2.03\">just go back to where I have\nwith Techs before.</text><text start=\"171.37\" dur=\"1.15\">There&amp;#39;s Techs.</text><text start=\"172.52\" dur=\"5.58\">And I&amp;#39;m now going to ask flat to be a\nname for what I get by concatenating</text><text start=\"178.1\" dur=\"1.83\">Techs and Ivys together.</text><text start=\"179.93\" dur=\"2.62\">The plus sign&amp;#39;s saying just\ndo a concatenation.</text><text start=\"182.55\" dur=\"2.02\">And if I look at flat--</text><text start=\"184.57\" dur=\"1.08\">ah, nice--</text><text start=\"185.65\" dur=\"4.03\">it is a sequence, a list of elements,\nall at the same level.</text><text start=\"189.68\" dur=\"3.59\">So append sticks something in\nat the end of the list.</text><text start=\"193.27\" dur=\"4.45\">Addition or concatenation puts\ncopies of two lists together.</text><text start=\"197.72\" dur=\"1.96\">And notice it creates a new list.</text><text start=\"199.68\" dur=\"3.075\">And to see that, let&amp;#39;s see\nwhat happened with Techs.</text><text start=\"202.755\" dur=\"0.785\">Ah, yes.</text><text start=\"203.54\" dur=\"3.26\">It has not changed, and\nneither has Ivys.</text><text start=\"206.8\" dur=\"1.76\">That&amp;#39;s actually important.</text><text start=\"208.56\" dur=\"5.55\">And so to look at that, what that&amp;#39;s\nreally saying is that in the case of</text><text start=\"214.11\" dur=\"1.92\">append, I am mutating.</text><text start=\"216.03\" dur=\"2.61\">I&amp;#39;m changing one of the lists.</text><text start=\"218.64\" dur=\"4.64\">In the case of concatenation, I&amp;#39;m\ncreating a new version of those lists.</text><text start=\"223.28\" dur=\"4.98\">I&amp;#39;m literally creating a copy of it and\nthen adding a copy, if you like,</text><text start=\"228.26\" dur=\"3.75\">of the second list to it, as well,\nwhich allows me to separate out</text><text start=\"232.01\" dur=\"3.55\">different ways of thinking about how\nI might want to manipulate lists.</text><text start=\"235.56\" dur=\"3.02\">So I can mutate when I need to,\nbut I might want to just make</text><text start=\"238.58\" dur=\"1.1\">copies when I need to.</text><text start=\"239.68\" dur=\"1.64\">And I can do that.</text><text start=\"241.32\" dur=\"1.84\">Let&amp;#39;s look at one last example.</text><text start=\"243.16\" dur=\"3.78\">And this is going to look at an example\nof both where things go wrong</text><text start=\"246.94\" dur=\"2.88\">when I&amp;#39;m iterating over lists\nand how I get around that.</text><text start=\"249.82\" dur=\"4.18\">And for that, I&amp;#39;m going to bring\nup a new piece of code.</text><text start=\"254\" dur=\"4.07\">And the piece of code here is going to\nbe something that&amp;#39;s going to look at</text><text start=\"258.07\" dur=\"2.03\">removing duplicates in a list.</text><text start=\"260.1\" dur=\"2.71\">So the idea is I want\nto have two lists.</text><text start=\"262.81\" dur=\"3.28\">And I&amp;#39;d like to get back a list with\njust those elements that only appear</text><text start=\"266.09\" dur=\"1.84\">once inside of the list.</text><text start=\"267.93\" dur=\"2.3\">So I could write a little\nloop to do it.</text><text start=\"270.23\" dur=\"0.34\">Here it is.</text><text start=\"270.57\" dur=\"1.37\">I&amp;#39;m going to remove duplicates.</text><text start=\"271.94\" dur=\"1.19\">Now I have two lists, L1 and L2.</text><text start=\"273.13\" dur=\"1.97\">I&amp;#39;m going to loop over L1.</text><text start=\"275.1\" dur=\"3.69\">And I&amp;#39;m going to say, for each element\nin L1, if it&amp;#39;s in L2, let&amp;#39;s just</text><text start=\"278.79\" dur=\"1.23\">remove it from L1.</text><text start=\"280.02\" dur=\"1.86\">And again, remove is a method.</text><text start=\"281.88\" dur=\"1.03\">There&amp;#39;s the dot.</text><text start=\"282.91\" dur=\"1.17\">Don&amp;#39;t worry about the details of it.</text><text start=\"284.08\" dur=\"3.76\">But it basically takes the list L1,\ntakes the first instance of that</text><text start=\"287.84\" dur=\"3.52\">element e1, and takes it out\nof the list by mutating.</text><text start=\"291.36\" dur=\"2.43\">So let&amp;#39;s look at what happens\nif we do this.</text><text start=\"293.79\" dur=\"4.86\">And in fact, we can load this\nup into our idle shell.</text><text start=\"298.65\" dur=\"3.4\">And if I do that, let&amp;#39;s look\nat what happened here.</text><text start=\"302.05\" dur=\"3.07\">In fact, let&amp;#39;s look at it in\na little bit more detail.</text><text start=\"305.12\" dur=\"1.97\">L1 I&amp;#39;m going to start off\nas the list 1,2,3,4.</text><text start=\"307.09\" dur=\"0.832\">3, 4.</text><text start=\"307.922\" dur=\"2.508\">L2 is the list 1,2,5,6.</text><text start=\"310.43\" dur=\"3.44\">And I&amp;#39;m going to remove the duplicates\nbetween L1 and L2.</text><text start=\"313.87\" dur=\"7.86\">Ideally, I would like that to be just\nhaving the list L1 be those elements</text><text start=\"321.73\" dur=\"2.26\">that are not duplicated in L2.</text><text start=\"323.99\" dur=\"4.63\">But if I, in fact, look at what\nL1 is, printing it out, I get</text><text start=\"328.62\" dur=\"2.31\">the list 2, 3, 4.</text><text start=\"330.93\" dur=\"1.54\">So why does that happen?</text><text start=\"332.47\" dur=\"4.48\">Well, let&amp;#39;s look at that in a little\nbit more detail, as well.</text><text start=\"336.95\" dur=\"2.94\">The problem is that inside of the loop,\nPython is keeping track of where</text><text start=\"339.89\" dur=\"1.95\">it is in the list using\nthis internal counter.</text><text start=\"341.84\" dur=\"3.655\">We already said, as it iterates over L1,\nit&amp;#39;s keeping a little index that</text><text start=\"345.495\" dur=\"0.865\">says where it is.</text><text start=\"346.36\" dur=\"3.82\">When I decide to remove something\nfrom L1, I&amp;#39;m going in and</text><text start=\"350.18\" dur=\"1.61\">changing the list.</text><text start=\"351.79\" dur=\"1.67\">But I don&amp;#39;t adapt the counter.</text><text start=\"353.46\" dur=\"3.97\">So I can literally change the list by\none, which means the counter is now</text><text start=\"357.43\" dur=\"3.52\">pointing to a different place in the\nlist, because if I shorten the list by</text><text start=\"360.95\" dur=\"2.71\">one by removing something from the\nfront, the counter, if it was</text><text start=\"363.66\" dur=\"2.8\">pointing, for example, at a second point\nin the list, is now pointing at</text><text start=\"366.46\" dur=\"1.29\">the third point in the list.</text><text start=\"367.75\" dur=\"2.75\">So when we mutate a list,\nwe change its length.</text><text start=\"370.5\" dur=\"2.15\">But Python cannot adapt to that.</text><text start=\"372.65\" dur=\"2.48\">And obviously, that&amp;#39;s a problem, because\nit doesn&amp;#39;t do what we&amp;#39;d like.</text><text start=\"375.13\" dur=\"3.73\">So when we are doing mutation on lists\nwhile iterating over them, that&amp;#39;s</text><text start=\"378.86\" dur=\"3.54\">probably not a good idea, at least\nnot on the list we started with.</text><text start=\"382.4\" dur=\"2.08\">So how could we do this better?</text><text start=\"384.48\" dur=\"2.13\">Well, let&amp;#39;s clone.</text><text start=\"386.61\" dur=\"1.02\">And what does clone say?</text><text start=\"387.63\" dur=\"3.05\">It says, let&amp;#39;s make a\ncopy of the list.</text><text start=\"390.68\" dur=\"1.86\">And I can do that with this\nvery simple form here.</text><text start=\"392.54\" dur=\"4.28\">If I take the list L1 and I say, in\nsquare brackets, just a simple colon,</text><text start=\"396.82\" dur=\"2.74\">it says, give me all the elements\nfrom the first to the last,</text><text start=\"399.56\" dur=\"1.92\">but make me a copy.</text><text start=\"401.48\" dur=\"4.13\">And now I can loop over L1Start,\nbut mutate L1.</text><text start=\"405.61\" dur=\"4.69\">So this is changing L1, but this\nis looping over a copy of L1.</text><text start=\"410.3\" dur=\"4.07\">And if I do that, which was the second\npiece of code I had there, that&amp;#39;s why,</text><text start=\"414.37\" dur=\"2.05\">in fact, it will print out just 3, 4.</text><text start=\"416.42\" dur=\"4.92\">It removes the 1 and 2 from L1 because\nthose are duplicates, but it does it</text><text start=\"421.34\" dur=\"3.17\">without getting confused about\nwhere it is inside of pieces.</text><text start=\"424.51\" dur=\"6.76\">And so what this says is that we want\nto use a copy of L1 as L1Start.</text><text start=\"431.27\" dur=\"2.26\">And notice, by the way, I actually\nhave to make a copy.</text><text start=\"433.53\" dur=\"4.12\">If I were simply up here to have said\ninstead, let&amp;#39;s use L1Start just to be</text><text start=\"437.65\" dur=\"3.13\">L1 rather than L1 with that\nfunky thing at the end, it</text><text start=\"440.78\" dur=\"1.13\">would not have worked.</text><text start=\"441.91\" dur=\"0.96\">Why?</text><text start=\"442.87\" dur=\"6.01\">Because if I say this form, L1Start\npoints to the value pointed to by L1,</text><text start=\"448.88\" dur=\"1.38\">which is the list itself.</text><text start=\"450.26\" dur=\"1.56\">And I&amp;#39;m back to the first state.</text><text start=\"451.82\" dur=\"4.99\">By using L1 with the colons,\nI literally make a copy.</text><text start=\"456.81\" dur=\"4.36\">And now I can walk down a copy checking\nfor duplicates while changing</text><text start=\"461.17\" dur=\"2.42\">the original list itself.</text><text start=\"463.59\" dur=\"1.72\">So now we&amp;#39;ve seen properties on lists.</text><text start=\"465.31\" dur=\"1.08\">We can iterate over them.</text><text start=\"466.39\" dur=\"1.74\">And we can do it while mutating them.</text><text start=\"468.13\" dur=\"3.81\">And when we need to, we&amp;#39;ll want to use\nclones to make copies of lists so that</text><text start=\"471.94\" dur=\"3.1\">we make sure that we keep track of where\nwe are inside of that structure.</text><text start=\"475.04\" dur=\"1.34\"></text></transcript>\n", "ftu1cc1A8q8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.78\"></text><text start=\"0.78\" dur=\"2.39\">ERIC GRIMSON: I want to look now at\none last example on doing some</text><text start=\"3.17\" dur=\"1.8\">interesting things with graphs.</text><text start=\"4.97\" dur=\"2.87\">Part of what we&amp;#39;ve been trying to show\nyou is how graphs capture a range of</text><text start=\"7.84\" dur=\"2.61\">problems and some ways in which\nwe can explore them.</text><text start=\"10.45\" dur=\"1.2\">We&amp;#39;re doing it quickly.</text><text start=\"11.65\" dur=\"2.91\">We don&amp;#39;t expect you to fully grasp\neverything about graph theory, but we</text><text start=\"14.56\" dur=\"3.05\">wanted to give you a flavor of how\ngraphs can be really valuable in</text><text start=\"17.61\" dur=\"3.12\">solving certain kinds of\noptimization problems.</text><text start=\"20.73\" dur=\"3.66\">The last example I want to look at\nis something called a clique.</text><text start=\"24.39\" dur=\"2.66\">And you may remember this\nfrom middle school.</text><text start=\"27.05\" dur=\"2.11\">It has some of the same flavors.</text><text start=\"29.16\" dur=\"3.9\">There are some problems for which\nfinding subgraphs or subsections of a</text><text start=\"33.06\" dur=\"4.23\">graph can be important, especially\nsubgraphs that are complete.</text><text start=\"37.29\" dur=\"1.64\">And what does complete mean?</text><text start=\"38.93\" dur=\"5.17\">Complete means that for every node in\nthat subgraph, it has an edge to every</text><text start=\"44.1\" dur=\"2.19\">other node in that subgraph.</text><text start=\"46.29\" dur=\"2.58\">It&amp;#39;s called complete because it\nhas a complete set of edges.</text><text start=\"48.87\" dur=\"2\">Now that doesn&amp;#39;t say the whole\ngraph is complete.</text><text start=\"50.87\" dur=\"3.68\">It says, given a graph with some edges\nin it, we&amp;#39;d like to find what are the</text><text start=\"54.55\" dur=\"5.07\">places in it that have portions\nthat are complete.</text><text start=\"59.62\" dur=\"3.21\">Now there are lots of places\nwhere this is valuable.</text><text start=\"62.83\" dur=\"3.25\">Finding, for example, sets of people in\na social network that all know each</text><text start=\"66.08\" dur=\"2.32\">other is a simple example of this.</text><text start=\"68.4\" dur=\"4.01\">Finding subjects in an infected\npopulation that all have had contact</text><text start=\"72.41\" dur=\"3.54\">with one another can also be really\nimportant-- for example, in disease</text><text start=\"75.95\" dur=\"3.02\">control or in checking the\nspread of a disease.</text><text start=\"78.97\" dur=\"3.42\">Network traffic, network flow,\ncan often be analyzed by</text><text start=\"82.39\" dur=\"1.67\">using clique problems.</text><text start=\"84.06\" dur=\"3.72\">So this idea of finding a clique\ncan be really valuable.</text><text start=\"87.78\" dur=\"1.98\">Just to show you an example.</text><text start=\"89.76\" dur=\"4.05\">Let&amp;#39;s think about users\nin a social network.</text><text start=\"93.81\" dur=\"3.49\">For a given user, we&amp;#39;d like\nto say things like--</text><text start=\"97.3\" dur=\"3.8\">can I find the set of all other users\nthat know this person and that also</text><text start=\"101.1\" dur=\"2.17\">know everyone else in the group?</text><text start=\"103.27\" dur=\"3.21\">What&amp;#39;s the largest set\nof users like that?</text><text start=\"106.48\" dur=\"4.86\">Or, having found the largest set, can\nI pull that maximal clique out and</text><text start=\"111.34\" dur=\"1.43\">then find the next largest set?</text><text start=\"112.77\" dur=\"4.77\">And in essence, partition the graph up\ninto clusters or components of people</text><text start=\"117.54\" dur=\"1.91\">that all know one another.</text><text start=\"119.45\" dur=\"0.93\">How might I do that?</text><text start=\"120.38\" dur=\"2.4\">Well, we&amp;#39;re going to get\nto that in a second.</text><text start=\"122.78\" dur=\"2.49\">But I want to stress this\nidea of using cliques</text><text start=\"125.27\" dur=\"1.88\">actually is very valuable.</text><text start=\"127.15\" dur=\"3.2\">It&amp;#39;s used, for example, in analyzing\ncommunications networks.</text><text start=\"130.35\" dur=\"3.34\">It&amp;#39;s used to design circuits,\ndoing layout.</text><text start=\"133.69\" dur=\"4.2\">It&amp;#39;s used in computational biology\nto analyze gene expression data.</text><text start=\"137.89\" dur=\"3.8\">It&amp;#39;s used by places like Google and\nothers to analyze social networks.</text><text start=\"141.69\" dur=\"3.79\">And it&amp;#39;s used by the Centers for Disease\nControl and other such places</text><text start=\"145.48\" dur=\"4.27\">to do things like analyzing disease\nnetworks among infected populations.</text><text start=\"149.75\" dur=\"4.01\">So all of these are examples of places\nwere cliques are of value.</text><text start=\"153.76\" dur=\"4.15\">And as I said, or hinted, already, for\ncliques we&amp;#39;re particularly going to be</text><text start=\"157.91\" dur=\"2.97\">interested in finding a maximum\nclique or a max clique.</text><text start=\"160.88\" dur=\"0.93\">A clique--</text><text start=\"161.81\" dur=\"3.57\">set of nodes in a graph that has\na complete set of edges.</text><text start=\"165.38\" dur=\"2.13\">Every node is connected\nto every other one.</text><text start=\"167.51\" dur=\"3.52\">And I want to find the largest\nsuch subgraph.</text><text start=\"171.03\" dur=\"3.22\">Now there are some wonderful algorithms\nfor doing this, some very</text><text start=\"174.25\" dur=\"2.445\">efficient ones, but they&amp;#39;re\nfairly complex.</text><text start=\"176.695\" dur=\"3.425\">And so for our purposes, we&amp;#39;re just\ngoing to use the brute force method--</text><text start=\"180.12\" dur=\"3.1\">going way back to the beginning of\nthis class where we talked about</text><text start=\"183.22\" dur=\"2.56\">straightforward methods for generate\nand test if you like</text><text start=\"185.78\" dur=\"1.48\">methods for doing that.</text><text start=\"187.26\" dur=\"2.85\">And what we can do here\nis the following.</text><text start=\"190.11\" dur=\"3.61\">We&amp;#39;re going to first find all the\nsubgraphs of a graph, all the</text><text start=\"193.72\" dur=\"3.67\">different partial collections of\nnodes, if you like, in a graph.</text><text start=\"197.39\" dur=\"4.03\">For each one, we&amp;#39;re going to test to see\nif it&amp;#39;s complete, and then we&amp;#39;ll</text><text start=\"201.42\" dur=\"1.9\">just keep track of the largest one.</text><text start=\"203.32\" dur=\"1.96\">That will give us the maximum clique.</text><text start=\"205.28\" dur=\"2.09\">And we could then, of course,\nextend that recursively.</text><text start=\"207.37\" dur=\"3.11\">Once we&amp;#39;ve done that, we could pull\nthose nodes out of the graph, remove</text><text start=\"210.48\" dur=\"2.98\">them from the graph, and go ahead to\nfind the next largest clique and keep</text><text start=\"213.46\" dur=\"1.44\">on doing it.</text><text start=\"214.9\" dur=\"1.25\">Let&amp;#39;s do that in the next segment.</text><text start=\"216.15\" dur=\"1.142\"></text></transcript>\n", "pflzzK47wEo": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.31\"></text><text start=\"0.31\" dur=\"2.85\">While the meat of the course is\nin this Courseware section,</text><text start=\"3.16\" dur=\"2.82\">we have some other resources\nfor you to access in the</text><text start=\"5.98\" dur=\"2.33\">header at the very\ntop of the page.</text><text start=\"8.31\" dur=\"2.8\">You are currently in the\nCourseware section, where most</text><text start=\"11.11\" dur=\"2.97\">of the instructions and\nassignments will be located.</text><text start=\"14.08\" dur=\"3.07\">The Course Info section contains\nany announcements</text><text start=\"17.15\" dur=\"2.33\">that the course staff would\nlike you to see.</text><text start=\"19.48\" dur=\"2.22\">It also has all of the handouts\nassociated with the</text><text start=\"21.7\" dur=\"3.24\">course, including the syllabus\nand calendar.</text><text start=\"24.94\" dur=\"2.44\">If your course uses a textbook,\nyou should be able</text><text start=\"27.38\" dur=\"2.48\">to find an online version\nof the textbook in</text><text start=\"29.86\" dur=\"1.28\">the Textbook section.</text><text start=\"31.14\" dur=\"2.63\">The Discussion section has a\nquestion and answer forum,</text><text start=\"33.77\" dur=\"2.6\">where you can ask questions\nhave them answered by the</text><text start=\"36.37\" dur=\"2.74\">course staff or your\nfellow students.</text><text start=\"39.11\" dur=\"3.12\">The Wiki section is where all of\nthe students in the course</text><text start=\"42.23\" dur=\"2.32\">can keep their collective\ncourse notes.</text><text start=\"44.55\" dur=\"3.41\">Finally, you can see how you&amp;#39;re\ndoing in the course in</text><text start=\"47.96\" dur=\"2.06\">the Progress section.</text><text start=\"50.02\" dur=\"3.08\">You can see your overall edX\nprofile, including your</text><text start=\"53.1\" dur=\"2.94\">current enrollment if you click\non your username in the</text><text start=\"56.04\" dur=\"1.83\">top right corner of the page.</text><text start=\"57.87\" dur=\"1.83\">You should also be able to\nchange your personal</text><text start=\"59.7\" dur=\"1.85\">information from\nthis dashboard.</text><text start=\"61.55\" dur=\"2.84\">The next several videos will\ngo into more depth on</text><text start=\"64.39\" dur=\"4.26\">Discussion Forum usage, Wiki\nusage, and any course-specific</text><text start=\"68.65\" dur=\"1.27\">features that you may need.</text><text start=\"69.92\" dur=\"1.25\"></text></transcript>\n", "fwEyyCo5dxo": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.16\"></text><text start=\"1.16\" dur=\"3.05\">JOHN GUTTAG: Hello, and\nwelcome back to 600.</text><text start=\"4.21\" dur=\"3.58\">We&amp;#39;re about to move away from\nprobability, but before I do, I can&amp;#39;t</text><text start=\"7.79\" dur=\"3.23\">resist looking at a probability\nquestion that has stumped many</text><text start=\"11.02\" dur=\"5.199\">supposedly clever people, the so-called\nMonty Hall problem.</text><text start=\"16.219\" dur=\"4.351\">The problem is based on a television\ngame show called Let&amp;#39;s Make A Deal.</text><text start=\"20.57\" dur=\"3.79\">The show was popular in\nthe 1960s and &amp;#39;70s.</text><text start=\"24.36\" dur=\"4.2\">Imagine that you&amp;#39;re on that show, and\nyou&amp;#39;re given the choice of three</text><text start=\"28.56\" dur=\"4.95\">doors, one, two, or three.</text><text start=\"33.51\" dur=\"4.09\">By the way, the people who were on the\nshow dressed up in silly costumes in</text><text start=\"37.6\" dur=\"3.98\">the hope it would attract the idea of\nthe host, Monty Hall, who would invite</text><text start=\"41.58\" dur=\"2.32\">them up front to play.</text><text start=\"43.9\" dur=\"2.53\">Behind one of the doors is a car.</text><text start=\"46.43\" dur=\"3.38\">Now, OK, maybe it wasn&amp;#39;t\nthis car in the 1960s.</text><text start=\"49.81\" dur=\"3.42\">And behind the other two\ndoors are goats.</text><text start=\"53.23\" dur=\"2.79\">The contestant is asked\nto choose a door.</text><text start=\"56.02\" dur=\"0.56\">After--</text><text start=\"56.58\" dur=\"1.89\">let&amp;#39;s assume you&amp;#39;re the contestant--</text><text start=\"58.47\" dur=\"3.41\">after you have chosen a door,\nthe door remains closed.</text><text start=\"61.88\" dur=\"4.35\">Monty Hall, who knows what is behind the\ndoor, now has to open one of the</text><text start=\"66.23\" dur=\"5.12\">two remaining doors, and the door he\nopens must have a goat behind it.</text><text start=\"71.35\" dur=\"4.73\">After Monty opens a door with a goat,\nhe will ask you, the contestant, to</text><text start=\"76.08\" dur=\"4.26\">decide whether you want to stay with\nyour first choice, say door number</text><text start=\"80.34\" dur=\"5.71\">one, or switch to the last remaining\ndoor, in this case, door number two.</text><text start=\"86.05\" dur=\"1.77\">What should you do?</text><text start=\"87.82\" dur=\"3.56\">Well, the audience will shout all sorts\nof advice, but you should ignore</text><text start=\"91.38\" dur=\"2.04\">it and figure it out yourself.</text><text start=\"93.42\" dur=\"3.51\">The problem has been around for quite\na time, and the literature suggests</text><text start=\"96.93\" dur=\"2.8\">that most people get it\nwrong the first time.</text><text start=\"99.73\" dur=\"4.78\">In 1991, Parade Magazine published a\ncorrect solution to the problem, and</text><text start=\"104.51\" dur=\"5.41\">approximately 10,000 readers wrote to\nclaim that the magazine got it wrong.</text><text start=\"109.92\" dur=\"4.62\">By the way, among those 10,000 readers,\n1,000 claimed to have PhDs.</text><text start=\"114.54\" dur=\"2.26\">I hope none of them were from MIT.</text><text start=\"116.8\" dur=\"3.32\">If you were taking this class at MIT,\nyou would now have the opportunity to</text><text start=\"120.12\" dur=\"2.55\">play the game for fabulous prizes.</text><text start=\"122.67\" dur=\"2.36\">Since you&amp;#39;re not, you&amp;#39;ll have\nto settle for my working the</text><text start=\"125.03\" dur=\"1.33\">probabilities.</text><text start=\"126.36\" dur=\"3.2\">I&amp;#39;m going to do that in\ntwo different ways.</text><text start=\"129.56\" dur=\"2.13\">So let&amp;#39;s look at the first way.</text><text start=\"131.69\" dur=\"4.92\">Assume that without loss of generality,\nyou choose door one.</text><text start=\"136.61\" dur=\"4.56\">Now, Monty will open another door, and\nagain, let&amp;#39;s assume without loss of</text><text start=\"141.17\" dur=\"3.15\">generality, he opens three.</text><text start=\"144.32\" dur=\"3.57\">And there stands the goat.</text><text start=\"147.89\" dur=\"5.6\">When the game started, it was equally\nlikely that the car was behind door</text><text start=\"153.49\" dur=\"2.175\">one or two.</text><text start=\"155.665\" dur=\"2.495\">Because we know it wasn&amp;#39;t\nbehind three.</text><text start=\"158.16\" dur=\"1.9\">It was placed at random.</text><text start=\"160.06\" dur=\"2.38\">So, one and two are equally likely.</text><text start=\"162.44\" dur=\"4.02\">Therefore, it doesn&amp;#39;t matter.</text><text start=\"166.46\" dur=\"4.8\">You can switch or not switch, and\nthe odds will be the same, 0.5.</text><text start=\"171.26\" dur=\"2.08\">Sound plausible to you?</text><text start=\"173.34\" dur=\"5.52\">It does to most people, but in\nfact, the argument is flawed.</text><text start=\"178.86\" dur=\"3.18\">Let&amp;#39;s look at the problem\na different way.</text><text start=\"182.04\" dur=\"2.5\">Again, you&amp;#39;re the player\nand you make a choice.</text><text start=\"184.54\" dur=\"4.93\">With the probability of 1/3,\nthe choice is correct.</text><text start=\"189.47\" dur=\"4.83\">That means that if you could choose the\nother doors, the probability of</text><text start=\"194.3\" dur=\"5.3\">the goat or the probability of the car\nbeing behind doors two or three, the</text><text start=\"199.6\" dur=\"3.35\">remaining one is 2/3.</text><text start=\"202.95\" dur=\"4.64\">So with probability a third, you are\ncorrect, and the car is indeed behind</text><text start=\"207.59\" dur=\"1.14\">the door you chose.</text><text start=\"208.73\" dur=\"5.85\">But with probability 2/3, you were\nwrong, and the car was behind one of</text><text start=\"214.58\" dur=\"1.6\">the other doors.</text><text start=\"216.18\" dur=\"2.06\">Now comes the key moment.</text><text start=\"218.24\" dur=\"7.4\">Monty opens the door that he knows\ndoes not contain the car.</text><text start=\"225.64\" dur=\"3.23\">Note that this choice is\nnot independent of the</text><text start=\"228.87\" dur=\"2.08\">choice made by the player.</text><text start=\"230.95\" dur=\"4.65\">The player has made a choice, say\ndoor one, forcing Monty to</text><text start=\"235.6\" dur=\"2.08\">choose two or three.</text><text start=\"237.68\" dur=\"3.27\">He does not want to open the door with\nthe car, because then the game would</text><text start=\"240.95\" dur=\"2.52\">be over, so he opens the other door.</text><text start=\"243.47\" dur=\"4.85\">So in fact, by switching,\nthe contestant has a 2/3</text><text start=\"248.32\" dur=\"2.24\">probability of winning.</text><text start=\"250.56\" dur=\"2.11\">It&amp;#39;s tricky.</text><text start=\"252.67\" dur=\"5.62\">When we work probabilities, we always\nhave to think about whether or not we</text><text start=\"258.29\" dur=\"4.77\">are looking at independent\nevents or related events.</text><text start=\"263.06\" dur=\"3.69\">To drive this point home, I want\nto look at some code that</text><text start=\"266.75\" dur=\"2.3\">simulates the game.</text><text start=\"269.05\" dur=\"1.26\">So, here&amp;#39;s the game.</text><text start=\"270.31\" dur=\"3.3\">I&amp;#39;m going to simulate\nit for 100 trials.</text><text start=\"273.61\" dur=\"3.78\">And I&amp;#39;m going to pass in this choose\nfunction, and we&amp;#39;re going to look at</text><text start=\"277.39\" dur=\"4.06\">two different ways that we might choose\nwhich door to open after the</text><text start=\"281.45\" dur=\"2.5\">contestant has made a choice.</text><text start=\"283.95\" dur=\"4.01\">We&amp;#39;ll look at the number of times\nthe contestant wins--</text><text start=\"287.96\" dur=\"3.83\">the number of wins by not switching--\nwe&amp;#39;ll look at the number of times a</text><text start=\"291.79\" dur=\"4.48\">contestant wins by switching, and the\nnumber of times a contestant doesn&amp;#39;t</text><text start=\"296.27\" dur=\"1.2\">win it all.</text><text start=\"297.47\" dur=\"4.85\">The door will be behind one, two, or\nthree, and the guests will have to be</text><text start=\"302.32\" dur=\"1.36\">one, two, or three.</text><text start=\"303.68\" dur=\"4.23\">So for t in range numTrials,\nwe first choose a place to</text><text start=\"307.91\" dur=\"1.83\">put the car at random.</text><text start=\"309.74\" dur=\"3.09\">The contestant then makes\na guess at random.</text><text start=\"312.83\" dur=\"5\">We then call the choose function, this\none, which takes as an argument the</text><text start=\"317.83\" dur=\"5.57\">guess and the door behind which the\nprize exists, because remember Monty</text><text start=\"323.4\" dur=\"2.73\">knows that, and it makes a choice.</text><text start=\"326.13\" dur=\"3.54\">If two open is a prize door,\nthen there&amp;#39;s no win.</text><text start=\"329.67\" dur=\"4.1\">Of course, if we play the game according\nto Monty Hall rules, this</text><text start=\"333.77\" dur=\"3.56\">will never happen, because he\nwon&amp;#39;t open the prize door.</text><text start=\"337.33\" dur=\"3.56\">But we&amp;#39;re going to explore the other\noption where he chooses at random.</text><text start=\"340.89\" dur=\"5.24\">Otherwise, if the guess is the prize\ndoor, the contestant wins by sticking.</text><text start=\"346.13\" dur=\"2.53\">Otherwise, by switching.</text><text start=\"348.66\" dur=\"2.35\">And then, we&amp;#39;ll return the number\nof stick wins and the</text><text start=\"351.01\" dur=\"1.9\">number of switch wins.</text><text start=\"352.91\" dur=\"2.36\">Here are two possible\nchoose functions.</text><text start=\"355.27\" dur=\"3.91\">The first one is the one that is\nused on Let&amp;#39;s Make A Deal.</text><text start=\"359.18\" dur=\"3.92\">Essentially, Monty is just choosing the\ndoor that the contestant didn&amp;#39;t</text><text start=\"363.1\" dur=\"2.43\">choose and that has a goat.</text><text start=\"365.53\" dur=\"5.12\">The other possibility is a random\nchoice, where Monty will say, if the</text><text start=\"370.65\" dur=\"3.11\">guest door is one, we&amp;#39;ll open\neither two or three.</text><text start=\"373.76\" dur=\"2.37\">So perhaps, it might be the car.</text><text start=\"376.13\" dur=\"2.73\">Otherwise, one or three,\nelse one or two.</text><text start=\"378.86\" dur=\"2.97\">Finally, we&amp;#39;ll have a function\nthat displays the results.</text><text start=\"381.83\" dur=\"3.6\">I&amp;#39;m showing you this, because it&amp;#39;s\nusing yet another pylab plotting</text><text start=\"385.43\" dur=\"4.29\">function, pylab.pie, which\nproduces a pie chart.</text><text start=\"389.72\" dur=\"0.51\">OK.</text><text start=\"390.23\" dur=\"2.89\">Let&amp;#39;s go over to the code\nwindow and run it.</text><text start=\"393.12\" dur=\"5.55\">So, we&amp;#39;ll first run it the way the\ngame works calling it with Monty</text><text start=\"398.67\" dur=\"3.11\">choose, and we&amp;#39;ll display it.</text><text start=\"401.78\" dur=\"3.61\">And we&amp;#39;ll produce another figure in\nwhich we make the random choice, and</text><text start=\"405.39\" dur=\"1.57\">we&amp;#39;ll display it.</text><text start=\"406.96\" dur=\"4.24\">Well, notice that if we play by the game\nrules, indeed, it&amp;#39;s the case that</text><text start=\"411.2\" dur=\"4.1\">you double your odds by switching,\nshown by this pie chart.</text><text start=\"415.3\" dur=\"2.79\">Course since there&amp;#39;s randomness,\nit&amp;#39;s not exactly 1/3,</text><text start=\"418.09\" dur=\"2.6\">2/3, but pretty close.</text><text start=\"420.69\" dur=\"4.84\">On the other hand, if we play the game\nrandomly, then in fact, it doesn&amp;#39;t</text><text start=\"425.53\" dur=\"4.03\">matter, because an independent decision\nis being made, and indeed,</text><text start=\"429.56\" dur=\"2.02\">the odds are unchanged by switching.</text><text start=\"431.58\" dur=\"1.402\"></text></transcript>\n", "yGAPgGgodyo": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.2\"></text><text start=\"0.2\" dur=\"3.56\">In this fifth lecture we&amp;#39;re going to\nfirst talk about the functions we&amp;#39;ve</text><text start=\"3.76\" dur=\"3.49\">been writing, especially about how\nwe can think of them as iterative</text><text start=\"7.25\" dur=\"4.11\">computations that capture the heart\nof a computation as a set of state</text><text start=\"11.36\" dur=\"4.34\">variables that update with each\niteration through a loop.</text><text start=\"15.7\" dur=\"3.7\">We will then build on that to talk\nabout the wonderful concept of</text><text start=\"19.4\" dur=\"3.85\">recursion, where we reduce a computation\nto a simpler version of</text><text start=\"23.25\" dur=\"4.67\">the same problem, and then use that\nidea to very crisply and cleanly</text><text start=\"27.92\" dur=\"3.33\">capture computational processes.</text><text start=\"31.25\" dur=\"2.77\">We will show how this idea\nof recursion builds on</text><text start=\"34.02\" dur=\"2.15\">the concept of induction.</text><text start=\"36.17\" dur=\"2.92\">And we will in particular use\nthis to reason about why</text><text start=\"39.09\" dur=\"2.18\">recursive algorithms work.</text><text start=\"41.27\" dur=\"4.39\">And, we&amp;#39;ll use that idea to guide\ngeneral principles in designing</text><text start=\"45.66\" dur=\"2.25\">recursive algorithms.</text><text start=\"47.91\" dur=\"4.46\">To demonstrate this, we will show you a\nnumber of classic and fun recursive</text><text start=\"52.37\" dur=\"4.52\">algorithms, especially algorithms we\ncall divide and conquer methods.</text><text start=\"56.89\" dur=\"1.25\"></text></transcript>\n", "VAAia4PpxZc": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.12\"></text><text start=\"0.12\" dur=\"2.09\">LARRY RUDOLPH: My name&amp;#39;s Larry Rudolph,\nand I&amp;#39;ll be your instructor</text><text start=\"2.21\" dur=\"3.41\">for this course, Introduction to\nComputer Science and Programming.</text><text start=\"5.62\" dur=\"2.66\">From MITX on edX.</text><text start=\"8.28\" dur=\"2.04\">This course will teach you\nhow to use computation to</text><text start=\"10.32\" dur=\"1.66\">solve real world problems.</text><text start=\"11.98\" dur=\"4.03\">It&amp;#39;s aimed at students with little, or\nno, prior experience in programming,</text><text start=\"16.01\" dur=\"5.22\">but with a desire to learn how to use\ncomputation to solve problems.</text><text start=\"21.23\" dur=\"3.89\">It is aimed at students who have no,\nor little, prior experience in</text><text start=\"25.12\" dur=\"3.99\">programming, but do have a desire\nin how to solve problems using</text><text start=\"29.11\" dur=\"0.9\">computation.</text><text start=\"30.01\" dur=\"1.35\">It&amp;#39;s not a programming course.</text><text start=\"31.36\" dur=\"1.58\">Although you will learn\nhow to program.</text><text start=\"32.94\" dur=\"1.51\">It&amp;#39;s not a mathematics course.</text><text start=\"34.45\" dur=\"2.11\">Although you will use mathematics.</text><text start=\"36.56\" dur=\"2.91\">And it&amp;#39;s not a theory of\nalgorithms course.</text><text start=\"39.47\" dur=\"3.38\">Although you will learn how to\nappreciate really clever algorithms.</text><text start=\"42.85\" dur=\"3.05\">600x is a challenging\nand rigorous course.</text><text start=\"45.9\" dur=\"1.34\">It&amp;#39;s an MIT course.</text><text start=\"47.24\" dur=\"5.4\">As such, the lectures and text will\nappear clear, logical, orderly and</text><text start=\"52.64\" dur=\"1.03\">understandable.</text><text start=\"53.67\" dur=\"3.74\">When you do the finger exercises and\nproblem sets, you may find that they</text><text start=\"57.41\" dur=\"0.71\">are challenging.</text><text start=\"58.12\" dur=\"1.5\">Why?</text><text start=\"59.62\" dur=\"3.39\">Because there&amp;#39;s a lot of material, and\nit&amp;#39;s going to take a while for it to</text><text start=\"63.01\" dur=\"4.46\">become clear, logical, orderly and\nunderstandable in your brain.</text><text start=\"67.47\" dur=\"3.59\">I&amp;#39;ve been doing research in high\nperformance parallel processing for</text><text start=\"71.06\" dur=\"1.28\">many years.</text><text start=\"72.34\" dur=\"3.98\">I started programming over 40 years\nago when I was in ninth grade.</text><text start=\"76.32\" dur=\"4.25\">Recently, I founded a company called\nReDigi, which is a marketplace for</text><text start=\"80.57\" dur=\"1.71\">used digital goods.</text><text start=\"82.28\" dur=\"3.45\">It&amp;#39;s taught me how to communicate\nwith a large customer base</text><text start=\"85.73\" dur=\"1.71\">that&amp;#39;s mostly silent.</text><text start=\"87.44\" dur=\"2.76\">This is all in addition to the fact\nthat I&amp;#39;ve been teaching computer</text><text start=\"90.2\" dur=\"4.82\">science courses for the past 30 years,\nboth at MIT and at other universities.</text><text start=\"95.02\" dur=\"2.92\">Halfway through the semester, we&amp;#39;ll\nhave a town hall meeting.</text><text start=\"97.94\" dur=\"4.83\">It&amp;#39;ll be your opportunity to interact\nlive with an MIT faculty member.</text><text start=\"102.77\" dur=\"2.84\">By that point, you should know\na lot about programming</text><text start=\"105.61\" dur=\"1.09\">and computer science.</text><text start=\"106.7\" dur=\"2.65\">And I look forward to very\ninteresting interactions.</text><text start=\"109.35\" dur=\"4.947\">Most, if not all of the lectures, are\nby professors Grimson, Guttag and</text><text start=\"114.297\" dur=\"4.093\">Terman, and are the result of years\nof refining this material while</text><text start=\"118.39\" dur=\"1.88\">teaching it at MIT.</text><text start=\"120.27\" dur=\"4.97\">I, however, will remain behind the\ncurtain along with my great staff</text><text start=\"125.24\" dur=\"3.94\">ensuring that everything runs smoothly,\nand the course is a success</text><text start=\"129.18\" dur=\"1.39\">for all participants.</text><text start=\"130.57\" dur=\"4.38\">We want to make sure you have all the\ntools to succeed in this class.</text><text start=\"134.95\" dur=\"4.56\">Our staff will be in the forums everyday\nto answer your questions.</text><text start=\"139.51\" dur=\"2.92\">But you, too, can answer\neach other&amp;#39;s questions.</text><text start=\"142.43\" dur=\"5.6\">The moment that you understand a\ndifficult concept, you are the perfect</text><text start=\"148.03\" dur=\"4.85\">person to answer other people who have\nyet to understand that concept.</text><text start=\"152.88\" dur=\"4\">Remember, the best way of learning\nsomething is by teaching.</text><text start=\"156.88\" dur=\"1.7\">Here are some tips for your success.</text><text start=\"158.58\" dur=\"2.45\">600x is fast-paced.</text><text start=\"161.03\" dur=\"2.42\">Please try not to fall behind.</text><text start=\"163.45\" dur=\"2.82\">As soon as the videos are\nreleased, watch them.</text><text start=\"166.27\" dur=\"4.16\">As soon as you&amp;#39;re finished watching your\nvideo, do the finger exercises.</text><text start=\"170.43\" dur=\"3.14\">Get started on the problem\nsets as soon as possible.</text><text start=\"173.57\" dur=\"2.59\">We try to keep things into\nbite-sized chunks.</text><text start=\"176.16\" dur=\"2\">So there&amp;#39;s no reason to postpone them.</text><text start=\"178.16\" dur=\"2.84\">We practice the philosophy\nof learn by doing.</text><text start=\"181\" dur=\"2.84\">The finger exercises\nmay not be trivial.</text><text start=\"183.84\" dur=\"2.91\">The problem sets may be challenging.</text><text start=\"186.75\" dur=\"3.39\">Not everything is in the\npreceding video.</text><text start=\"190.14\" dur=\"2.1\">You are going to have to\nfind the solution.</text><text start=\"192.24\" dur=\"1.31\">How do you do that?</text><text start=\"193.55\" dur=\"1.06\">Read the text.</text><text start=\"194.61\" dur=\"1.17\">Re-watch the video.</text><text start=\"195.78\" dur=\"2.22\">But mostly, experiment.</text><text start=\"198\" dur=\"1.64\">Play with the interpreter.</text><text start=\"199.64\" dur=\"1.75\">Type different examples.</text><text start=\"201.39\" dur=\"3.93\">Computers don&amp;#39;t care about how many\ntimes you make the same mistake.</text><text start=\"205.32\" dur=\"1.82\">Computers do not get bored.</text><text start=\"207.14\" dur=\"2.14\">Computers do not yet have feelings.</text><text start=\"209.28\" dur=\"2.76\">And most of all, computers\nare not judgmental.</text><text start=\"212.04\" dur=\"3.53\">Please complete problem set one as soon\nas possible, even before watching</text><text start=\"215.57\" dur=\"1.75\">the first set of videos.</text><text start=\"217.32\" dur=\"3.13\">You&amp;#39;ll find the interpreter\nis your friend.</text><text start=\"220.45\" dur=\"1.67\">Use it as much as possible.</text><text start=\"222.12\" dur=\"1.38\">Type whatever you want into it.</text><text start=\"223.5\" dur=\"1.87\">And don&amp;#39;t worry about making mistakes.</text><text start=\"225.37\" dur=\"1.5\">You&amp;#39;ll learn by doing.</text><text start=\"226.87\" dur=\"3.03\">Again, this is a course\nin experiments.</text><text start=\"229.9\" dur=\"3.78\">The more you type in and the more\nmistakes you make, the more you learn.</text><text start=\"233.68\" dur=\"2.73\">If you&amp;#39;re still confused after\nconsulting the textbook and trying the</text><text start=\"236.41\" dur=\"3.98\">experiments, then search the\nweb or search the forums.</text><text start=\"240.39\" dur=\"2.8\">Try not to move on until you\nunderstand the solution.</text><text start=\"243.19\" dur=\"4.04\">If you don&amp;#39;t understand the solution,\npost to the forum again.</text><text start=\"247.23\" dur=\"2.98\">Now stop listening to me, and go\nlearn some computer science.</text><text start=\"250.21\" dur=\"1.25\"></text></transcript>\n", "j-d7-5lWcT4": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.2\"></text><text start=\"1.2\" dur=\"0.62\">Eric Grimson: OK.</text><text start=\"1.82\" dur=\"2.72\">We&amp;#39;ve talked about designing\na test suite.</text><text start=\"4.54\" dur=\"4.02\">That is finding a set of samples of\ninputs and expected outputs, that we</text><text start=\"8.56\" dur=\"3.73\">can use to test whether our code&amp;#39;s doing\nwhat we expect it to or not.</text><text start=\"12.29\" dur=\"4.01\">And we talked about both black-box\ntesting, and glass-box testing as ways</text><text start=\"16.3\" dur=\"2.16\">of designing test suites.</text><text start=\"18.46\" dur=\"3.03\">What happens when we&amp;#39;re ready to\nactually start doing the test?</text><text start=\"21.49\" dur=\"1.46\">What should we do?</text><text start=\"22.95\" dur=\"3\">Here, and we&amp;#39;re going to do an example a\nlittle bit later on in this lecture,</text><text start=\"25.95\" dur=\"4.03\">here what we&amp;#39;re going to do is alternate\nbetween two important parts</text><text start=\"29.98\" dur=\"1.1\">of testing.</text><text start=\"31.08\" dur=\"2.99\">We&amp;#39;re going to start with what\nwe call unit testing.</text><text start=\"34.07\" dur=\"5.01\">That says take a module, a function\nfor example, and check it.</text><text start=\"39.08\" dur=\"4.5\">Check it on input values whose results\nwe know what to expect.</text><text start=\"43.58\" dur=\"2.82\">Run the suite basically on the\nmodule to make sure that</text><text start=\"46.4\" dur=\"1.54\">the module runs well.</text><text start=\"47.94\" dur=\"6.415\">This will catch algorithm bugs, that is\nplaces where I got a bug, either in</text><text start=\"54.355\" dur=\"2.005\">how I encoded the algorithm\nor in terms of how I</text><text start=\"56.36\" dur=\"1.66\">thought about the algorithm.</text><text start=\"58.02\" dur=\"3.62\">Once I&amp;#39;ve checked the modules, I&amp;#39;m\ngoing to move on to what we call</text><text start=\"61.64\" dur=\"3.36\">integration testing, which is\nto check that the system as</text><text start=\"65\" dur=\"1.81\">a whole works correctly.</text><text start=\"66.81\" dur=\"3.21\">If I&amp;#39;ve got multiple functions that are\ninteracting with one another, I</text><text start=\"70.02\" dur=\"3.41\">want to make sure that even if the\nmodules do the right thing, that the</text><text start=\"73.43\" dur=\"1.05\">whole system does well.</text><text start=\"74.48\" dur=\"4.465\">And this will typically catch, what\nwe might call interaction bugs.</text><text start=\"78.945\" dur=\"4.265\">And by that I mean places where an\nincorrect value is being communicated</text><text start=\"83.21\" dur=\"0.99\">to another function.</text><text start=\"84.2\" dur=\"4.12\">Or an assumption about input is being\nbroken as I move back and forth.</text><text start=\"88.32\" dur=\"2.28\">And once I&amp;#39;ve done that,\nI want to cycle.</text><text start=\"90.6\" dur=\"3.91\">I want to go back around, and having\ndone integration testing and fixing</text><text start=\"94.51\" dur=\"3.5\">things, go back and check the modules\nas unit testing, and then check</text><text start=\"98.01\" dur=\"0.87\">integration testing.</text><text start=\"98.88\" dur=\"3.06\">And cycle until I&amp;#39;m convinced that\nI&amp;#39;ve caught all the bugs that I&amp;#39;m</text><text start=\"101.94\" dur=\"1.94\">likely to find.</text><text start=\"103.88\" dur=\"4.02\">So we&amp;#39;re going to think about how we\ndeal with doing unit testing and</text><text start=\"107.9\" dur=\"2.02\">integration testing.</text><text start=\"109.92\" dur=\"3.96\">Now there&amp;#39;s another piece of testing\nthat&amp;#39;s really useful to do.</text><text start=\"113.88\" dur=\"2.9\">And that&amp;#39;s to build a test driver.</text><text start=\"116.78\" dur=\"1.18\">What does that mean?</text><text start=\"117.96\" dur=\"3.58\">Well, drivers are code that actually\nset up to do the testing for us.</text><text start=\"121.54\" dur=\"3.3\">So I&amp;#39;m not just typing\nthings in by hand.</text><text start=\"124.84\" dur=\"2.91\">The idea is that in a driver we&amp;#39;re going\nto set up an environment, and</text><text start=\"127.75\" dur=\"4.27\">what we mean by that is we&amp;#39;re going to\nset up a piece of code that creates</text><text start=\"132.02\" dur=\"4.04\">bindings for global variables , data\nstructures, other pieces that I need</text><text start=\"136.06\" dur=\"4.15\">to do the testing, is then going\nto take that test suite--</text><text start=\"140.21\" dur=\"1.36\">that sequence of inputs--</text><text start=\"141.57\" dur=\"4.28\">and run the code in each one, and save\nthe results and report back out.</text><text start=\"145.85\" dur=\"4.31\">So a test driver is basically a piece of\ncode that does the testing for us.</text><text start=\"150.16\" dur=\"2.37\">Builds the environment, takes\nand implements the test</text><text start=\"152.53\" dur=\"2.42\">suite, and runs it.</text><text start=\"154.95\" dur=\"2.88\">Nice thing about drivers are that they\nbasically simulate parts of the</text><text start=\"157.83\" dur=\"3.36\">program that use the\nunit being tested.</text><text start=\"161.19\" dur=\"2.03\">So they&amp;#39;re going to do the\nactual simulation of the</text><text start=\"163.22\" dur=\"1.74\">testing that we want.</text><text start=\"164.96\" dur=\"4.06\">Now if there are interactions with other\npieces of code, what happens if</text><text start=\"169.02\" dur=\"1.23\">we haven&amp;#39;t already debugged those?</text><text start=\"170.25\" dur=\"2.87\">And there we can often use\nwhat&amp;#39;s called a stub.</text><text start=\"173.12\" dur=\"4.97\">A stub simply simulates parts of the\nprogram that are used by the unit</text><text start=\"178.09\" dur=\"1.08\">being tested.</text><text start=\"179.17\" dur=\"2.11\">And when I say simulate, if I&amp;#39;ve\nalready built the code</text><text start=\"181.28\" dur=\"1.2\">and it runs, great.</text><text start=\"182.48\" dur=\"2.49\">But even if I haven&amp;#39;t, I can\nstill get the same effect.</text><text start=\"184.97\" dur=\"6.73\">For example, by building a table of\ninput-output pairs, and using that to</text><text start=\"191.7\" dur=\"3.29\">simulate the behavior of that\nparticular piece of code.</text><text start=\"194.99\" dur=\"2.84\">The advantage of a stub is that it&amp;#39;s\ngoing to allow you to test units that</text><text start=\"197.83\" dur=\"3.09\">depend on software even if you\nhaven&amp;#39;t written it yet.</text><text start=\"200.92\" dur=\"1.63\">Maybe not be able to test everything.</text><text start=\"202.55\" dur=\"3.95\">But remember since I&amp;#39;m building a test\nsuite with particular set of cases, I</text><text start=\"206.5\" dur=\"3.83\">can basically say if this code was\nthere, here&amp;#39;s what it should do.</text><text start=\"210.33\" dur=\"3.65\">And that stub will let me go back and\nactually fix, or test rather, the</text><text start=\"213.98\" dur=\"3.18\">piece of code I&amp;#39;m testing\ninside of the driver.</text><text start=\"217.16\" dur=\"4.65\">So when I get to testing in a second,\nbut what does it say then.</text><text start=\"221.81\" dur=\"4.88\">It says, having built a test suite\nI start with unit testing.</text><text start=\"226.69\" dur=\"2.41\">Having tested all the units I&amp;#39;m going\nto go to integration testing.</text><text start=\"229.1\" dur=\"2.15\">And I&amp;#39;m going to cycle back and forth.</text><text start=\"231.25\" dur=\"3.85\">But one of the key things to remember\nis, when I&amp;#39;m done debugging and I</text><text start=\"235.1\" dur=\"3.95\">think my code has been corrected, it&amp;#39;s\nreally important to do what we call</text><text start=\"239.05\" dur=\"1.5\">regression testing.</text><text start=\"240.55\" dur=\"4.15\">That is go back, and check that the\nprogram still passes all the tests it</text><text start=\"244.7\" dur=\"1.53\">used to pass.</text><text start=\"246.23\" dur=\"3.42\">Even though a piece of code may have\nrun correctly before, because I&amp;#39;ve</text><text start=\"249.65\" dur=\"2.75\">changed things there&amp;#39;s no guarantee\nI haven&amp;#39;t accidentally</text><text start=\"252.4\" dur=\"1.1\">messed something up.</text><text start=\"253.5\" dur=\"4.29\">And so a really good practice is to go\nback and re-run the tests I&amp;#39;ve run</text><text start=\"257.79\" dur=\"2.47\">before to make sure that\nthey still work.</text><text start=\"260.26\" dur=\"4.14\">And that regression testing will ensure,\nin a sort of principled way,</text><text start=\"264.4\" dur=\"2.17\">that the tests I&amp;#39;m running are\nactually running correctly.</text><text start=\"266.57\" dur=\"1.387\"></text></transcript>\n", "FP4Hw1IEWCA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.476\"></text><text start=\"1.476\" dur=\"3.764\">PROFESSOR: Hmm, it looks like every time\nwe do a calculation involving a</text><text start=\"5.24\" dur=\"3.51\">new mass and its corresponding\ndisplacement, we&amp;#39;re computing a</text><text start=\"8.75\" dur=\"2.14\">slightly different value for k.</text><text start=\"10.89\" dur=\"2.8\">Does that mean that the spring constant\nis actually changing a little</text><text start=\"13.69\" dur=\"3.28\">bit every time that we hang\na weight on the spring?</text><text start=\"16.97\" dur=\"2.05\">Well, probably not.</text><text start=\"19.02\" dur=\"3.3\">It looks like there&amp;#39;s a process at work\nthat&amp;#39;s causing our measurements</text><text start=\"22.32\" dur=\"3.22\">to be slightly off every\ntime we make one.</text><text start=\"25.54\" dur=\"2.92\">A good first step whenever we&amp;#39;re trying\nto figure out what&amp;#39;s up with</text><text start=\"28.46\" dur=\"4.53\">our data is to plot it, to look at it\nvisually, and to see if we can spot</text><text start=\"32.99\" dur=\"2.02\">what&amp;#39;s going on.</text><text start=\"35.01\" dur=\"2\">In order to figure out what&amp;#39;s going\non, we&amp;#39;re going to have</text><text start=\"37.01\" dur=\"1\">to look at the data.</text><text start=\"38.01\" dur=\"3.01\">And here&amp;#39;s a couple Python procedures\nto help us do that.</text><text start=\"41.02\" dur=\"4.85\">The first procedure here, getData, its\njob is to read the data in from a text</text><text start=\"45.87\" dur=\"1.74\">file where we&amp;#39;ve entered the data.</text><text start=\"47.61\" dur=\"5.19\">So it opens the file, and the first line\nof the file is just a header line</text><text start=\"52.8\" dur=\"3.25\">that describes the format of the\ndata in the rest of the file.</text><text start=\"56.05\" dur=\"3.98\">We don&amp;#39;t need that here, so we&amp;#39;ll read\nin that line and discard it.</text><text start=\"60.03\" dur=\"3.3\">And then, for all the other lines\nin the data file, we&amp;#39;ll read</text><text start=\"63.33\" dur=\"1.47\">each of them in.</text><text start=\"64.8\" dur=\"1.95\">Each line comes in as a string.</text><text start=\"66.75\" dur=\"3.77\">And then we&amp;#39;re going to take that string\nand split it into substrings</text><text start=\"70.52\" dur=\"3.45\">that correspond to the non blank\nportions of the line.</text><text start=\"73.97\" dur=\"5.15\">So the first substring is the first non\nblank portion of the line, which</text><text start=\"79.12\" dur=\"1.73\">will be the data measurement.</text><text start=\"80.85\" dur=\"4.91\">And the second substring is the second\nnon blank portion of the line, which</text><text start=\"85.76\" dur=\"2.57\">is the mass measurement.</text><text start=\"88.33\" dur=\"4.72\">We then go off and convert those two\nstrings into floating point numbers,</text><text start=\"93.05\" dur=\"3.57\">and append them to the appropriate list\nthat we&amp;#39;re using to accumulate</text><text start=\"96.62\" dur=\"1.09\">the results.</text><text start=\"97.71\" dur=\"4.55\">And when we&amp;#39;re all done, we return the\nmasses and the distances in two</text><text start=\"102.26\" dur=\"1.32\">separate lists.</text><text start=\"103.58\" dur=\"4.57\">The plot data routine is now takeover,\nand its job is to plot the data.</text><text start=\"108.15\" dur=\"3.4\">So it goes off and first\nreads in the data.</text><text start=\"111.55\" dur=\"3.63\">And the reason that we&amp;#39;ve separated the\nreading in of the data, the I/O,</text><text start=\"115.18\" dur=\"4.51\">from the analysis, or, in this case, the\nplotting, is in case the format of</text><text start=\"119.69\" dur=\"5.11\">the data file changes in the future,\nwe&amp;#39;ll only need to rewrite the getData</text><text start=\"124.8\" dur=\"2.76\">portion of the Python procedures.</text><text start=\"127.56\" dur=\"5.23\">The first thing we do once we get the\ndata is to go off and convert it into</text><text start=\"132.79\" dur=\"4.49\">the pylab array data type, a very handy\ndata type for doing numerical</text><text start=\"137.28\" dur=\"1.46\">manipulation.</text><text start=\"138.74\" dur=\"2.21\">And here we see an example\nof how handy it is.</text><text start=\"140.95\" dur=\"5.17\">On the next line we want to multiply\neach element of the xVals array by the</text><text start=\"146.12\" dur=\"1.36\">gravitational constant.</text><text start=\"147.48\" dur=\"2.9\">In other words, what we&amp;#39;re doing is,\nwe&amp;#39;re busy converting the masses that</text><text start=\"150.38\" dur=\"4.47\">we measured into the forces that\nthey applied to the spring.</text><text start=\"154.85\" dur=\"5.46\">And this statement here, an array times\na constant, will multiply each</text><text start=\"160.31\" dur=\"3.77\">element of the array times whatever\nthat constant is.</text><text start=\"164.08\" dur=\"5.27\">The rest of the procedure goes off and\nthen creates a plot, plotting the</text><text start=\"169.35\" dur=\"3.82\">forces applied against the\ndistances measured.</text><text start=\"173.17\" dur=\"3.89\">The data points will appear as little\nblue circles, so the b means please</text><text start=\"177.06\" dur=\"4.01\">make it blue, and the o is please\nmake them a circle.</text><text start=\"181.07\" dur=\"2.93\">Let&amp;#39;s run it and see what\nthe data looks like.</text><text start=\"184\" dur=\"5.24\">Here&amp;#39;s the results, we can see we get\nthe sort of plot that we might expect.</text><text start=\"189.24\" dur=\"3.11\">The x-axis is the force that\nwas applied to the spring.</text><text start=\"192.35\" dur=\"4.47\">The y-axis is the displacement we\nmeasured, and here are all the data</text><text start=\"196.82\" dur=\"5.015\">points that we measured from applying\neverything from the 10th kilogram up</text><text start=\"201.835\" dur=\"2.035\">to the full kilogram weight.</text><text start=\"203.87\" dur=\"2.53\">Let&amp;#39;s see what we can make of that.</text><text start=\"206.4\" dur=\"2.19\">So is this what we were expecting?</text><text start=\"208.59\" dur=\"4.81\">Well, our hypothesis tells us that\nthis should be the relationship</text><text start=\"213.4\" dur=\"4\">between the weight and the extension\nthat we measured.</text><text start=\"217.4\" dur=\"4.55\">That implies that if we sort of solve\nthis for the extension, that we expect</text><text start=\"221.95\" dur=\"6.35\">it to be mg, so this guy here\nis the force, divided by the</text><text start=\"228.3\" dur=\"1.76\">spring constant k.</text><text start=\"230.06\" dur=\"5.2\">So that means that what we expect, also\nall the measured points to fall</text><text start=\"235.26\" dur=\"3.59\">on a line with slope 1/k.</text><text start=\"238.85\" dur=\"4.82\">Graphically, what that would mean is\nthat we&amp;#39;d expect to find some line</text><text start=\"243.67\" dur=\"4.05\">that had all the data points on it, and\nthe slope of this line should be</text><text start=\"247.72\" dur=\"2.26\">the inverse of the spring constant.</text><text start=\"249.98\" dur=\"3.15\">At least that&amp;#39;s what this equation\nhere is telling us.</text><text start=\"253.13\" dur=\"1.81\">Well, that&amp;#39;s not quite what we got.</text><text start=\"254.94\" dur=\"3.82\">Let&amp;#39;s see if we can figure\nout what went wrong.</text><text start=\"258.76\" dur=\"2.639\">So what did we expect\nwas going to happen?</text><text start=\"261.399\" dur=\"1.271\">Well, we have this theory.</text><text start=\"262.67\" dur=\"5.34\">So we have this notion that there&amp;#39;s a\nlinear relationship between the force</text><text start=\"268.01\" dur=\"4.27\">that we apply, so here&amp;#39;s a particular\nforce, F sub i, and</text><text start=\"272.28\" dur=\"1.45\">the observed extension.</text><text start=\"273.73\" dur=\"1.36\">So we have this prediction.</text><text start=\"275.09\" dur=\"5.61\">So this will be our prediction for the\ni-th force and our prediction for what</text><text start=\"280.7\" dur=\"4.35\">the offset that should be is\nequal to the force divided</text><text start=\"285.05\" dur=\"1.32\">by the spring constant.</text><text start=\"286.37\" dur=\"4.02\">So this is a line of slope 1/k.</text><text start=\"290.39\" dur=\"3.88\">Well, what actually happened is, we\nhave some measurement up here.</text><text start=\"294.27\" dur=\"3.75\">And that measurement differs from the\nprediction by a certain amount.</text><text start=\"298.02\" dur=\"2.96\">So here&amp;#39;s my i-th observation.</text><text start=\"300.98\" dur=\"4.15\">And there was clearly some sort of error\nthat crept in and so we have the</text><text start=\"305.13\" dur=\"3.58\">sort of model that what really\nhappened was here.</text><text start=\"308.71\" dur=\"4.69\">But because of some error in our\nprocess, we actually made a slightly</text><text start=\"313.4\" dur=\"2.35\">different observation.</text><text start=\"315.75\" dur=\"2.7\">Maybe we&amp;#39;ll make some progress\nif we think of it that way.</text><text start=\"318.45\" dur=\"3.68\">So here&amp;#39;s the error, and that&amp;#39;s\na difference between the i-th</text><text start=\"322.13\" dur=\"3.18\">observation and the i-th prediction.</text><text start=\"325.31\" dur=\"5.58\">So the question is, what can we say\nabout what our expectation is for</text><text start=\"330.89\" dur=\"3.43\">those errors that are creeping\ninto our measurements?</text><text start=\"334.32\" dur=\"4.07\">In many experiments in the real world\nthe errors that we&amp;#39;re seeing are</text><text start=\"338.39\" dur=\"4.25\">actually the accumulation of many,\nmany, many small random effects.</text><text start=\"342.64\" dur=\"4.13\">For instance, a position measurement,\nsuch as the one we&amp;#39;re taking, might be</text><text start=\"346.77\" dur=\"3.98\">affected by the sums of all sorts of\nlittle vibrations, the footsteps in</text><text start=\"350.75\" dur=\"4.19\">the room, machinery across the room,\nmachinery down the hall, that&amp;#39;s</text><text start=\"354.94\" dur=\"3.48\">causing a small vibration\nwhich causes our error</text><text start=\"358.42\" dur=\"2.2\">measurement to be off somewhat.</text><text start=\"360.62\" dur=\"3\">Let&amp;#39;s sort of see how that might\naffect our experiment.</text><text start=\"363.62\" dur=\"4.45\">So what I want to do\nis to model errors.</text><text start=\"368.07\" dur=\"3.69\">So we&amp;#39;re going to model the errors\nthat we&amp;#39;re going to measure,</text><text start=\"371.76\" dur=\"2.25\">basically, as random numbers.</text><text start=\"374.01\" dur=\"4.71\">So this is the assumption that the\nerrors aren&amp;#39;t really related directly</text><text start=\"378.72\" dur=\"1.55\">to the experiment we&amp;#39;re making.</text><text start=\"380.27\" dur=\"5.27\">They&amp;#39;re effects that are added on to\nthe results of the experiment.</text><text start=\"385.54\" dur=\"3.53\">And just to sort of see what&amp;#39;s going\non, I&amp;#39;m going to show you a</text><text start=\"389.07\" dur=\"6.54\">probability density function here for a\nparticular class of errors which are</text><text start=\"395.61\" dur=\"4.77\">distributed between-- so the errors,\nbasically, will lie in the range</text><text start=\"400.38\" dur=\"2\">between +1 and -1.</text><text start=\"402.38\" dur=\"4.07\">So this is basically between -1 and 1.</text><text start=\"406.45\" dur=\"4.33\">And the idea is that, with this\nparticular probability density</text><text start=\"410.78\" dur=\"5.38\">function, that the errors are much more\nlikely to be small than they are</text><text start=\"416.16\" dur=\"2.19\">to be large and close to one.</text><text start=\"418.35\" dur=\"3.16\">So let&amp;#39;s run a little experiment,\nand here&amp;#39;s our experiment.</text><text start=\"421.51\" dur=\"7.75\">First thing we&amp;#39;re going to do is to draw\n100 numbers from that probability</text><text start=\"429.26\" dur=\"0.7\">distribution.</text><text start=\"429.96\" dur=\"4.69\">So we can write some Python code that\nsays, using this probability density</text><text start=\"434.65\" dur=\"4.89\">function, please give me a random\nnumber between -1 and 1.</text><text start=\"439.54\" dur=\"3.24\">And it will choose 100 such numbers.</text><text start=\"442.78\" dur=\"1.59\">Then we&amp;#39;re going to sum them up.</text><text start=\"444.37\" dur=\"5.8\">So each one of those numbers that we\ndraw will represent a small error from</text><text start=\"450.17\" dur=\"1.18\">some random source.</text><text start=\"451.35\" dur=\"3.5\">And it&amp;#39;s really the cumulative effect\nof all those errors that</text><text start=\"454.85\" dur=\"0.92\">we&amp;#39;ll want to do.</text><text start=\"455.77\" dur=\"4.92\">So we&amp;#39;re going to sum them, and\nobviously sort of the smallest value</text><text start=\"460.69\" dur=\"1.99\">we should get should be like -100.</text><text start=\"462.68\" dur=\"5.69\">And at the other extreme, we might get\nsomething as big as +100 as the sum.</text><text start=\"468.37\" dur=\"2.98\">We&amp;#39;re actually going to see what\nthe distribution looks like.</text><text start=\"471.35\" dur=\"5.36\">Having done that particular sum, we&amp;#39;ll\nsave it away in a histogram and repeat</text><text start=\"476.71\" dur=\"0.83\">10,000 times.</text><text start=\"477.54\" dur=\"4.04\">So we&amp;#39;re going to build a histogram\nof what all the sums look like.</text><text start=\"481.58\" dur=\"5.07\">And we&amp;#39;re going to do it for\n10,000 such experiments.</text><text start=\"486.65\" dur=\"4.53\">Let&amp;#39;s write a little program and\nsee what the results look like.</text><text start=\"491.18\" dur=\"3.6\">Here&amp;#39;s a Python procedure, testErrors,\nthat will let us run our little</text><text start=\"494.78\" dur=\"1.12\">experiment.</text><text start=\"495.9\" dur=\"5.03\">What testErrors does is, for the number\nof trials that we&amp;#39;ve asked for,</text><text start=\"500.93\" dur=\"4.95\">in this case the default value for\ntrials is 10,000, it will go off and</text><text start=\"505.88\" dur=\"5.12\">select a certain number of points, in\nthis case 100, from a particular</text><text start=\"511\" dur=\"4.919\">probability distribution, in this case\na triangular distribution that goes</text><text start=\"515.919\" dur=\"1.791\">between -1 and 1.</text><text start=\"517.71\" dur=\"4.44\">So that&amp;#39;s exactly the distribution\nthat we graphed on the slide.</text><text start=\"522.15\" dur=\"6.77\">It will then sum up the results of each\nof those random selections, and</text><text start=\"528.92\" dur=\"4.75\">then it will keep a list of all the sums\nthat it creates for all 10,000</text><text start=\"533.67\" dur=\"1.33\">trials that we&amp;#39;re doing.</text><text start=\"535\" dur=\"3.99\">When we&amp;#39;re done, we&amp;#39;re going to plot the\nresults in a histogram using the</text><text start=\"538.99\" dur=\"2.25\">handy hist function from pylab.</text><text start=\"541.24\" dur=\"2.43\">And let&amp;#39;s see what we\nget when we do it.</text><text start=\"543.67\" dur=\"3.66\">So I&amp;#39;m going to save this\nout and run it.</text><text start=\"547.33\" dur=\"3.21\">Of course, with 10,000 trials of\n100 points each, it can take a</text><text start=\"550.54\" dur=\"1.5\">little time to run.</text><text start=\"552.04\" dur=\"1.61\">And here we see the results.</text><text start=\"553.65\" dur=\"1.99\">What we have--</text><text start=\"555.64\" dur=\"6.58\">what this little graph is telling me\nthat, of the 10,000 trials, some 650</text><text start=\"562.22\" dur=\"4.66\">of them resulted in a sum\nwhich was exactly 0.</text><text start=\"566.88\" dur=\"2.33\">That&amp;#39;s a little surprising, but\nmaybe not too surprising.</text><text start=\"569.21\" dur=\"3.69\">We had pretty much an equal chance of\nhaving a negative error and a positive</text><text start=\"572.9\" dur=\"2.69\">error, and we expect many\nof the errors to end up</text><text start=\"575.59\" dur=\"1.45\">canceling each other out.</text><text start=\"577.04\" dur=\"2.52\">And that sort of what we\nsee in this diagram.</text><text start=\"579.56\" dur=\"4.6\">The highest probability of the sums\nare grouped right around 0.</text><text start=\"584.16\" dur=\"6.56\">And then that probability drops off\ndramatically as we get into situations</text><text start=\"590.72\" dur=\"3.89\">where many errors would have had\nto have been on one side of the</text><text start=\"594.61\" dur=\"5.31\">distribution, which becomes increasingly\nunlikely as the number of</text><text start=\"599.92\" dur=\"0.83\">trials grows.</text><text start=\"600.75\" dur=\"2.8\">So what we&amp;#39;re going to do now\nis to think a little bit</text><text start=\"603.55\" dur=\"2.24\">about what we see here.</text><text start=\"605.79\" dur=\"5.22\">So what we saw from our little\nexperiment looking at the accumulation</text><text start=\"611.01\" dur=\"5.25\">of many small errors is that the net\neffect of all the errors being added</text><text start=\"616.26\" dur=\"3.58\">together has a probability distribution\nthat looks like so.</text><text start=\"619.84\" dur=\"2.98\">And that&amp;#39;s a curve that\nwe&amp;#39;ve seen many times.</text><text start=\"622.82\" dur=\"6.6\">So the result is that the probability of\nall of our sum of the errors, that</text><text start=\"629.42\" dur=\"4.96\">probability distribution converges on\nthe normal distribution as the number</text><text start=\"634.38\" dur=\"3.14\">of trials in our experiment increases.</text><text start=\"637.52\" dur=\"3.77\">So if we, instead of doing 10,000\ntrials, we had done 100,000 or a</text><text start=\"641.29\" dur=\"5.75\">million trials, we would start to see\nthat the histogram would trace out</text><text start=\"647.04\" dur=\"3.1\">very precisely a normal distribution.</text><text start=\"650.14\" dur=\"1.65\">Sort of amazing.</text><text start=\"651.79\" dur=\"5.52\">Another observation that comes to us\ncourtesy of the central limit theorem.</text><text start=\"657.31\" dur=\"5.42\">And that basically tell us that we get\nthe same result no matter what error</text><text start=\"662.73\" dur=\"1.11\">distribution that we choose.</text><text start=\"663.84\" dur=\"4.16\">We chose a triangular distribution,\nbut we could have chosen a uniform</text><text start=\"668\" dur=\"3.76\">distribution, or a Gaussian\ndistribution, or, in fact, any</text><text start=\"671.76\" dur=\"3.08\">distribution that has a finite\nmean and variance.</text><text start=\"674.84\" dur=\"4.46\">So the only requirement is that\nwe the distribution have a</text><text start=\"679.3\" dur=\"1.88\">finite mean and variance.</text><text start=\"681.18\" dur=\"4.04\">And if so we&amp;#39;ll get the same conversion\nto a normal distribution,</text><text start=\"685.22\" dur=\"4.53\">if we look at the accumulated sum of\nmany small errors, and in fact, they</text><text start=\"689.75\" dur=\"1.99\">don&amp;#39;t even have to be identically\ndistributed.</text><text start=\"691.74\" dur=\"6\">So what&amp;#39;s sort of amazing is that if\nour errors that we&amp;#39;re seeing in our</text><text start=\"697.74\" dur=\"3.96\">experiment are the result of the\naccumulation of many small random</text><text start=\"701.7\" dur=\"4.12\">processes, we can actually say something\nabout the probability</text><text start=\"705.82\" dur=\"2.52\">distribution of those errors.</text><text start=\"708.34\" dur=\"2.1\">Let&amp;#39;s just quickly remind ourselves\nwhat the normal</text><text start=\"710.44\" dur=\"1.76\">distribution looks like.</text><text start=\"712.2\" dur=\"5.03\">Here it is over here, plotted for a\nbunch of different values of the</text><text start=\"717.23\" dur=\"1.88\">variance sigma squared.</text><text start=\"719.11\" dur=\"2.96\">The distribution is completely\ncharacterized by two parameters.</text><text start=\"722.07\" dur=\"2.29\">One of the parameters is the mean.</text><text start=\"724.36\" dur=\"4.26\">And that&amp;#39;s the central axis of the\ndistribution, in this case, we&amp;#39;re</text><text start=\"728.62\" dur=\"4.98\">plotting normal distributions\nwith a mean of 0.</text><text start=\"733.6\" dur=\"4.61\">The other measurement is the variance,\nwhich is a measure of the width of</text><text start=\"738.21\" dur=\"1.37\">this curve.</text><text start=\"739.58\" dur=\"3.19\">With those two factors in hand, we can\nactually write a little equation that</text><text start=\"742.77\" dur=\"4.76\">describes the PDF, the Probability\nDensity Function, for a normal</text><text start=\"747.53\" dur=\"1.01\">distribution.</text><text start=\"748.54\" dur=\"5.91\">So that&amp;#39;s f(x) and we have a\nnormalization constant, which is 1</text><text start=\"754.45\" dur=\"4.71\">over the square root of 2 pi sigma\nsquared, and then we get the</text><text start=\"759.16\" dur=\"1.04\">exponential part.</text><text start=\"760.2\" dur=\"7.76\">So it&amp;#39;s E and it&amp;#39;s x minus x minus the\nmean squared all over sigma squared.</text><text start=\"767.96\" dur=\"5.63\">You can see what that means, that is\nthe argument x gets bigger, the</text><text start=\"773.59\" dur=\"4.02\">probability associated with that\nbecomes exponentially smaller.</text><text start=\"777.61\" dur=\"1.98\">There&amp;#39;s some special names we apply.</text><text start=\"779.59\" dur=\"5.71\">If mu is equal to 0 and the variance is\nequal to 1, we call that the unit</text><text start=\"785.3\" dur=\"5.86\">normal or maybe the standard\nnormal distribution.</text><text start=\"791.16\" dur=\"1.94\">So let&amp;#39;s put it all of it together.</text><text start=\"793.1\" dur=\"3.81\">So when our observation errors are due\nto the accumulation of many small</text><text start=\"796.91\" dur=\"4.41\">random processes perturbing the\nmeasurements ever so slightly, we can</text><text start=\"801.32\" dur=\"3.65\">say something about the likelihood\nthat the error will be</text><text start=\"804.97\" dur=\"1.39\">of a certain size.</text><text start=\"806.36\" dur=\"4.09\">And we&amp;#39;ll just use our information\nabout the errors being normally</text><text start=\"810.45\" dur=\"2.88\">distributed to write the\nfollowing formula.</text><text start=\"813.33\" dur=\"4.39\">So this is really just the information\nfrom the previous page, except here</text><text start=\"817.72\" dur=\"6.41\">I&amp;#39;ve made the assumption that the mean\nof 0, which implies that the errors</text><text start=\"824.13\" dur=\"1.73\">balance out over time.</text><text start=\"825.86\" dur=\"3.53\">And that&amp;#39;s typically true with\nmany error processes.</text><text start=\"829.39\" dur=\"4.28\">Now this is actually a really neat fact,\nit basically tells that large</text><text start=\"833.67\" dur=\"6.81\">errors are basically much less likely,\nI mean, exponentially less likely,</text><text start=\"840.48\" dur=\"1.44\">than small errors.</text><text start=\"841.92\" dur=\"8.08\">And we&amp;#39;re going to use that fact, now,\nto go back and finish the analysis of</text><text start=\"850\" dur=\"0.97\">the data points.</text><text start=\"850.97\" dur=\"4.63\">But it was really important to sort of\nestablish how the measurements we&amp;#39;re</text><text start=\"855.6\" dur=\"2.87\">taking are differing from our\nexpected predictions.</text><text start=\"858.47\" dur=\"2.73\">And now, we&amp;#39;re going to use this\ninformation about this probability</text><text start=\"861.2\" dur=\"4.57\">distribution, this likelihood\ndistribution, to help us figure out</text><text start=\"865.77\" dur=\"6.5\">the best way to sort out the actual\ndata, or the actual predictions, from</text><text start=\"872.27\" dur=\"1.55\">the observations that we made.</text><text start=\"873.82\" dur=\"1.502\"></text></transcript>\n", "kpa7QyOtIHI": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.56\"></text><text start=\"0.56\" dur=\"0.42\">TA: Hi.</text><text start=\"0.98\" dur=\"2.58\">Today I&amp;#39;m going to be talking to you\nabout default values and keyword</text><text start=\"3.56\" dur=\"1.25\">assignment.</text><text start=\"4.81\" dur=\"4.97\">So what you see on the right here is a\nfairly silly complex function that</text><text start=\"9.78\" dur=\"3.81\">I&amp;#39;ve concocted just for this\nparticular exercise.</text><text start=\"13.59\" dur=\"4.44\">So we call it complex function because\nit has so many of these variables that</text><text start=\"18.03\" dur=\"2.25\">it needs in order to function.</text><text start=\"20.28\" dur=\"2.79\">Something, another thing, number\nof silly walks, and so on.</text><text start=\"23.07\" dur=\"3.49\">It&amp;#39;s a whole lot of variables, and\nbelieve me, if you do a whole lot more</text><text start=\"26.56\" dur=\"3.99\">programming, either in this class, or\nwhen you go out in the world of</text><text start=\"30.55\" dur=\"3.25\">wonderful programming stuff, you&amp;#39;ll\nprobably have to come up with your own</text><text start=\"33.8\" dur=\"2.76\">versions of complex functions that\nare taking a whole lot of</text><text start=\"36.56\" dur=\"1.23\">variables as well.</text><text start=\"37.79\" dur=\"4.02\">So the problem with complex functions is\nthat when you call it, you have to</text><text start=\"41.81\" dur=\"1.54\">specify a whole lot of things.</text><text start=\"43.35\" dur=\"1.88\">And sometimes it can get confusing.</text><text start=\"45.23\" dur=\"2.89\">Let&amp;#39;s say that something, I want\nsomething to be a cat, and another</text><text start=\"48.12\" dur=\"1.8\">thing to be a dragon.</text><text start=\"49.92\" dur=\"4.93\">And number silly walks will be 100,\nand the cans of spam to be 20.</text><text start=\"54.85\" dur=\"3.46\">And that thing should be random, sort\nof random indicator is true.</text><text start=\"58.31\" dur=\"3.57\">And I love furry things, so\nfurry should be true.</text><text start=\"61.88\" dur=\"3.109\">And frogs found, let&amp;#39;s say\nwe found just one frog.</text><text start=\"64.989\" dur=\"3.221\">And unfortunately, the doomsday\ndevice is not complete.</text><text start=\"68.21\" dur=\"1.66\">So that&amp;#39;s false.</text><text start=\"69.87\" dur=\"3.15\">So you call that, it responds with\nthe output of the function.</text><text start=\"73.02\" dur=\"3.57\">If you give it all those variables,\nand that looks all nice and good.</text><text start=\"76.59\" dur=\"3.74\">But the problem is what happens when\nyou want to change something?</text><text start=\"80.33\" dur=\"2.43\">You have to type in the whole\nthing in over again.</text><text start=\"82.76\" dur=\"7.5\">Complex function, and\nlet&amp;#39;s say t and dog.</text><text start=\"90.26\" dur=\"1.24\">10 silly walks.</text><text start=\"91.5\" dur=\"0.86\">Let&amp;#39;s see.</text><text start=\"92.36\" dur=\"4.66\">20 cans of spam, let&amp;#39;s say that\neverything else is the same.</text><text start=\"97.02\" dur=\"4.47\">So that was a whole lot of work, and a\nlot of painful stuff to try to change</text><text start=\"101.49\" dur=\"1.78\">those three first things.</text><text start=\"103.27\" dur=\"4.25\">And that&amp;#39;s kind of painful,\nbut what can you do?</text><text start=\"107.52\" dur=\"2.88\">Well, I guess we could try to\nsimplify things a little.</text><text start=\"110.4\" dur=\"5.21\">If all we&amp;#39;re going to change is just\nthese first three things, we could</text><text start=\"115.61\" dur=\"2.71\">make a new function, like\nthe one below over here.</text><text start=\"118.32\" dur=\"5.53\">Where the user is only required to\nspecify the first three things, and</text><text start=\"123.85\" dur=\"4.26\">everything else is pre-specified\nfor the user.</text><text start=\"128.11\" dur=\"0.529\">Wonderful.</text><text start=\"128.639\" dur=\"2.991\">You&amp;#39;ve made life simpler by making\na simple looking function.</text><text start=\"131.63\" dur=\"0.7\">Let&amp;#39;s try it out.</text><text start=\"132.33\" dur=\"1.41\">Simple function.</text><text start=\"133.74\" dur=\"4.14\">This time I&amp;#39;m just going to\nsay t and a dog, and 10.</text><text start=\"137.88\" dur=\"2.13\">And things look better.</text><text start=\"140.01\" dur=\"1.11\">You don&amp;#39;t have to type so many things.</text><text start=\"141.12\" dur=\"2.07\">You just have to type three things,\ninstead of, I don&amp;#39;t how</text><text start=\"143.19\" dur=\"0.67\">many things that was.</text><text start=\"143.86\" dur=\"1.27\">But it was a whole lot of things.</text><text start=\"145.13\" dur=\"4.03\">So that was nice, but it comes\nup with a problem.</text><text start=\"149.16\" dur=\"2.4\">What if you needed to change\none of these things?</text><text start=\"151.56\" dur=\"2.64\">Like, let&amp;#39;s say you wanted to\nchange the cans of spam.</text><text start=\"154.2\" dur=\"4.78\">Instead of always being 30, you needed\njust this one particular time, you</text><text start=\"158.98\" dur=\"2.64\">needed cans of spam to be two.</text><text start=\"161.62\" dur=\"4.37\">Then I guess you could just change it\nin the function definition, save it,</text><text start=\"165.99\" dur=\"1.66\">reload it in Python.</text><text start=\"167.65\" dur=\"2.28\">And this, I&amp;#39;m just going\nto copy and paste it.</text><text start=\"169.93\" dur=\"5.91\">And then you&amp;#39;ll find that indeed,\nthe cans of spam is two now.</text><text start=\"175.84\" dur=\"3.93\">Well, that&amp;#39;s a whole lot of work\nfor your users of the function.</text><text start=\"179.77\" dur=\"4.75\">And fairly bad programming practice to\nhave to change the definition of your</text><text start=\"184.52\" dur=\"2.91\">function every time you needed\nto change a variable.</text><text start=\"187.43\" dur=\"2.1\">You ought to make it a variable again.</text><text start=\"189.53\" dur=\"3.74\">But then, if you keep on doing that by\nadding it to its list of variables,</text><text start=\"193.27\" dur=\"4.39\">cans of spam, you&amp;#39;re\nback to square one.</text><text start=\"197.66\" dur=\"4.29\">If each of these things you only\noccasionally need to change, and you</text><text start=\"201.95\" dur=\"3.89\">have to add it to the function\ndefinition every time, you end up with</text><text start=\"205.84\" dur=\"2.68\">your complex function all over again.</text><text start=\"208.52\" dur=\"2.42\">So that&amp;#39;s not good.</text><text start=\"210.94\" dur=\"1.41\">Can we come up with something better?</text><text start=\"212.35\" dur=\"3.69\">Well luckily, Python thought about this\nproblem and came up with the idea</text><text start=\"216.04\" dur=\"1.44\">of default values.</text><text start=\"217.48\" dur=\"5.51\">So over here we have this function\nagain, and it&amp;#39;s the exact same as</text><text start=\"222.99\" dur=\"5.97\">before, except now we&amp;#39;ve set this equal\nsign and some numbers after a</text><text start=\"228.96\" dur=\"1.26\">few of these variable names.</text><text start=\"230.22\" dur=\"2.8\">For example, cans of spam equals\n10, and this indicator equals</text><text start=\"233.02\" dur=\"1.14\">true, and so on.</text><text start=\"234.16\" dur=\"5.47\">So what this does, if the user doesn&amp;#39;t\nspecify a value for cans of spam, it</text><text start=\"239.63\" dur=\"3.87\">sets the value of cans of spam equal to\n10 and runs the function as usual.</text><text start=\"243.5\" dur=\"1.97\">Same thing with all these\nother variables.</text><text start=\"245.47\" dur=\"4.67\">So now I can call this function,\ncomplex with defaults.</text><text start=\"250.14\" dur=\"4.3\">Complex with defaults.</text><text start=\"254.44\" dur=\"7.399\">With a cat, a werewolf,\nand 1,000 silly walks.</text><text start=\"261.839\" dur=\"1.831\">And it&amp;#39;ll run just fine.</text><text start=\"263.67\" dur=\"4.18\">So it had set can of spam equals 10\nand all the other variables to its</text><text start=\"267.85\" dur=\"1.5\">default values.</text><text start=\"269.35\" dur=\"0.82\">Wonderful.</text><text start=\"270.17\" dur=\"5.57\">And this time if I needed to change the\ncan of spam to 20, all I had to do</text><text start=\"275.74\" dur=\"5.16\">is just add number 20 for cans of spam,\nand everything else is just the</text><text start=\"280.9\" dur=\"0.69\">default value.</text><text start=\"281.59\" dur=\"2.29\">So I don&amp;#39;t have to change\nanything else.</text><text start=\"283.88\" dur=\"2.97\">And now we have 20 cans of spam.</text><text start=\"286.85\" dur=\"0.37\">Great.</text><text start=\"287.22\" dur=\"2.02\">That saves us a whole lot of time.</text><text start=\"289.24\" dur=\"2.65\">But it&amp;#39;s still not quite there.</text><text start=\"291.89\" dur=\"4.12\">Well, what if we needed to change\nthe number of frogs found?</text><text start=\"296.01\" dur=\"4.69\">Its kind of really far out in our list\nof variables, so if we did that, we</text><text start=\"300.7\" dur=\"2.54\">kind of had to type it all out again.</text><text start=\"303.24\" dur=\"4.33\">So 20 was cans of spam, say true for\nrandomness in the indicator, and</text><text start=\"307.57\" dur=\"2.69\">unfortunately, it&amp;#39;s a non furry thing.</text><text start=\"310.26\" dur=\"3.25\">And let&amp;#39;s say, I forget how many\nfrogs I said I wanted.</text><text start=\"313.51\" dur=\"1.67\">Let&amp;#39;s just say 10.</text><text start=\"315.18\" dur=\"3.87\">And we didn&amp;#39;t have to specify the\nis doomsday device complete.</text><text start=\"319.05\" dur=\"4.08\">So we can write all of this out,\nhit Enter, and now we do</text><text start=\"323.13\" dur=\"3.82\">have 10 scary frogs.</text><text start=\"326.95\" dur=\"0.97\">Oh, yeah.</text><text start=\"327.92\" dur=\"1.05\">I didn&amp;#39;t need to do that.</text><text start=\"328.97\" dur=\"2.95\">But 10 scary frogs are very scary,\nand they deserve their own</text><text start=\"331.92\" dur=\"1.75\">line and syntax error.</text><text start=\"333.67\" dur=\"3.8\">Anyway, so that was, I guess slightly\nbetter, since you didn&amp;#39;t have to type</text><text start=\"337.47\" dur=\"1.49\">is doomsday device complete.</text><text start=\"338.96\" dur=\"1.91\">But it was still kind of problematic.</text><text start=\"340.87\" dur=\"2.89\">You had to type all those other things\nthat you didn&amp;#39;t really need to,</text><text start=\"343.76\" dur=\"1.99\">because those were the default values.</text><text start=\"345.75\" dur=\"3.96\">Luckily, Python comes up with another\ncool solution for this problem.</text><text start=\"349.71\" dur=\"2.47\">So now complex with defaults.</text><text start=\"352.18\" dur=\"4.44\">I can just say something is cat, and I\ndo have to say a value for cat, and</text><text start=\"356.62\" dur=\"4.6\">another thing for number of silly walks,\nsince those do not have any</text><text start=\"361.22\" dur=\"1.18\">default values.</text><text start=\"362.4\" dur=\"0.32\">So let&amp;#39;s see.</text><text start=\"362.72\" dur=\"6.19\">Another thing is werewolf again, and\nthat number of silly walks is 40.</text><text start=\"368.91\" dur=\"3.71\">And this time, if I just want to change\nthe value of frogs found from</text><text start=\"372.62\" dur=\"4.67\">the default value, I can just specify\nit by using a keyword</text><text start=\"377.29\" dur=\"1.46\">assignment like this.</text><text start=\"378.75\" dur=\"1.64\">Frogs found.</text><text start=\"380.39\" dur=\"2.05\">Let&amp;#39;s see if frogs found is 80.</text><text start=\"382.44\" dur=\"4.28\">So when I do that, it sets the frogs\nfound variable to 80, and everything</text><text start=\"386.72\" dur=\"2.18\">else to its default values.</text><text start=\"388.9\" dur=\"2.01\">That is really cool and powerful.</text><text start=\"390.91\" dur=\"4.68\">Now, it does come up with some, just use\na little bit of caution when using</text><text start=\"395.59\" dur=\"1.38\">keyword assignments.</text><text start=\"396.97\" dur=\"3.12\">You can&amp;#39;t, for example, do\nsomething like this.</text><text start=\"400.09\" dur=\"4.25\">You have to put the keyword assignments\nafter list of variables,</text><text start=\"404.34\" dur=\"3.6\">because if you do keyword assignment\nbefore then, you&amp;#39;ll come up with a</text><text start=\"407.94\" dur=\"1.51\">syntax error.</text><text start=\"409.45\" dur=\"5.53\">And also, you can even specify the\nthings that do not have default values</text><text start=\"414.98\" dur=\"2.83\">with the keyword assignments,\nlike this.</text><text start=\"417.81\" dur=\"5.31\">So complex with defaults.</text><text start=\"423.12\" dur=\"4.24\">You can say something equals cat.</text><text start=\"427.36\" dur=\"3.32\">And let&amp;#39;s say that I don&amp;#39;t want\nto specify another thing yet.</text><text start=\"430.68\" dur=\"3.23\">Let&amp;#39;s just say I want to specify the\nnumber of silly walks this time.</text><text start=\"433.91\" dur=\"2.07\">And number of silly walks.</text><text start=\"435.98\" dur=\"2.08\">Let&amp;#39;s say that&amp;#39;s 100.</text><text start=\"438.06\" dur=\"6.92\">And let&amp;#39;s say that another thing\nis, oh, let&amp;#39;s say a vampire.</text><text start=\"444.98\" dur=\"4.28\">So it just sets something to cats,\neven though another thing is the</text><text start=\"449.26\" dur=\"3.28\">second variable in the\nfunction definition.</text><text start=\"452.54\" dur=\"4\">I can specify another thing as the third\nthing as long as I use keyword</text><text start=\"456.54\" dur=\"0.89\">assignments.</text><text start=\"457.43\" dur=\"3.34\">Same thing with number of silly walks,\neven though in the function it&amp;#39;s the</text><text start=\"460.77\" dur=\"2.1\">third number, or the third variable.</text><text start=\"462.87\" dur=\"3.87\">I can make it the second thing by\nusing these keyword assignments.</text><text start=\"466.74\" dur=\"6.59\">This kind of notation makes it easier\nfor you to keep track of what values</text><text start=\"473.33\" dur=\"1.83\">you&amp;#39;re passing into your function.</text><text start=\"475.16\" dur=\"3.84\">Sometimes when you&amp;#39;re working on a long\nproject, you can easily forget</text><text start=\"479\" dur=\"2.84\">what the order of variables are.</text><text start=\"481.84\" dur=\"4.36\">So writing it this way will help make\nit more obvious when you&amp;#39;re reading</text><text start=\"486.2\" dur=\"3.03\">back and saying, hm, what\nwas this 5 over here?</text><text start=\"489.23\" dur=\"1.75\">What did it correspond to?</text><text start=\"490.98\" dur=\"4.27\">Using keyword assignment lets you make\nthe code a whole lot more readable.</text><text start=\"495.25\" dur=\"2.55\">So that&amp;#39;s it for today.</text><text start=\"497.8\" dur=\"3.82\">I hope you found this feature of\nPython as useful as I did.</text><text start=\"501.62\" dur=\"3.65\">Have a good day, and don&amp;#39;t let the\nfrogs be too scary at you.</text><text start=\"505.27\" dur=\"1.25\"></text></transcript>\n", "o8tmvzs6F4Q": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.85\"></text><text start=\"1.85\" dur=\"4.16\">OK, we&amp;#39;ve now seen a mechanical\ndescription of the evaluation of</text><text start=\"6.01\" dur=\"3.83\">procedures, both what happens when we\ndefine them, and what happens when we</text><text start=\"9.84\" dur=\"2.84\">actually use them, when we do a\ncomputation where we use the body of</text><text start=\"12.68\" dur=\"1.14\">the procedure.</text><text start=\"13.82\" dur=\"3.27\">We described a mechanical way of using\nenvironments, let&amp;#39;s look at a couple</text><text start=\"17.09\" dur=\"3.22\">of examples to really drive\nhome that process.</text><text start=\"20.31\" dur=\"1.05\">Here&amp;#39;s a simple example.</text><text start=\"21.36\" dur=\"3.71\">Let&amp;#39;s suppose I want to compute the\npower of some number to some other</text><text start=\"25.07\" dur=\"2.44\">power, a to the power of p.</text><text start=\"27.51\" dur=\"2.63\">I&amp;#39;m going to do it with just\nsuccessive multiplication.</text><text start=\"30.14\" dur=\"2.51\">I know that Python provides a\nbuilt-in version of this.</text><text start=\"32.65\" dur=\"2.82\">But I would, say, for example, wanted\nto take a to the p-th power.</text><text start=\"35.47\" dur=\"4.52\">And I do it by multiplying a by itself,\nstoring that result away, then</text><text start=\"39.99\" dur=\"3.16\">multiplying that by a, then\nmultiplying that by a.</text><text start=\"43.15\" dur=\"3.05\">And then just keeping track of how many\nmultiplications do I need to do</text><text start=\"46.2\" dur=\"3.477\">until I&amp;#39;ve done p of them, and keep\ntrack of the result, and return it</text><text start=\"49.677\" dur=\"1.513\">when I&amp;#39;m done.</text><text start=\"51.19\" dur=\"2.12\">So here&amp;#39;s some code to do it.</text><text start=\"53.31\" dur=\"0.86\">And it&amp;#39;s pretty straightforward.</text><text start=\"54.17\" dur=\"2.05\">In fact, we just saw it earlier.</text><text start=\"56.22\" dur=\"1.32\">It was in my earlier example.</text><text start=\"57.54\" dur=\"1.69\">I&amp;#39;m going to input some number for x.</text><text start=\"59.23\" dur=\"4.36\">I&amp;#39;m going to input some number for p.</text><text start=\"63.59\" dur=\"3.63\">And I&amp;#39;m going to make sure it&amp;#39;s an int\nby doing a type casting there.</text><text start=\"67.22\" dur=\"3.47\">I&amp;#39;m going to set up an intermediate\nvariable, or a place</text><text start=\"70.69\" dur=\"1.4\">to store the result.</text><text start=\"72.09\" dur=\"3.07\">And I&amp;#39;m just going to run through that\nloop, where I&amp;#39;ll print something up to</text><text start=\"75.16\" dur=\"3.77\">tell me where I am, and I&amp;#39;ll\nchange the value in result.</text><text start=\"78.93\" dur=\"2.38\">Let&amp;#39;s look at an example\nto see if this does it.</text><text start=\"81.31\" dur=\"5.665\">So if I go over to Python, I\ncan load that computation.</text><text start=\"86.975\" dur=\"3.325\">It is now saying give me a\nnumber, let&amp;#39;s give it 3.</text><text start=\"90.3\" dur=\"3.29\">It says give me an integer,\nlet&amp;#39;s give it 5.</text><text start=\"93.59\" dur=\"2.79\">Oh, and it prints through the stages,\ntelling me at each iteration what the</text><text start=\"96.38\" dur=\"0.79\">current result is.</text><text start=\"97.17\" dur=\"3.4\">It starts as 1, and then it&amp;#39;s 3 and then\nit&amp;#39;s 3 squared, and then it&amp;#39;s 3</text><text start=\"100.57\" dur=\"2.26\">cubed, and then it&amp;#39;s 3 to the fourth.</text><text start=\"102.83\" dur=\"3.56\">Wait a minute, didn&amp;#39;t I want to\ntake it to the fifth power?</text><text start=\"106.39\" dur=\"2.69\">Well, notice that my print statement\nis just printing before I</text><text start=\"109.08\" dur=\"1.02\">actually do the work.</text><text start=\"110.1\" dur=\"3.325\">And in fact, when I&amp;#39;m done, what\nI&amp;#39;ve done is, I&amp;#39;ll return</text><text start=\"113.425\" dur=\"2.545\">the value in result.</text><text start=\"115.97\" dur=\"3.4\">And there it is, it&amp;#39;s 243.</text><text start=\"119.37\" dur=\"3.66\">OK, we saw how that computation\nwould take place previously.</text><text start=\"123.03\" dur=\"4.42\">Now, let&amp;#39;s capture it in a procedure.</text><text start=\"127.45\" dur=\"2.2\">So I&amp;#39;m going to define a procedure\ncalled iterative</text><text start=\"129.65\" dur=\"3\">power, there&amp;#39;s the name.</text><text start=\"132.65\" dur=\"3.92\">I&amp;#39;m going to give it two formal\nparameters, x and p.</text><text start=\"136.57\" dur=\"3.14\">And then the body of the procedure\nis much like what I have for my</text><text start=\"139.71\" dur=\"1.05\">computation before.</text><text start=\"140.76\" dur=\"4.84\">I&amp;#39;ve got an internal definition of\nresult, which I&amp;#39;m going to use.</text><text start=\"145.6\" dur=\"3.64\">And the only big difference is, when I&amp;#39;m\ndone with the computation of that</text><text start=\"149.24\" dur=\"2.89\">for loop, I&amp;#39;ve got that special\nkeyword return.</text><text start=\"152.13\" dur=\"4.24\">That says return the value of this\nexpression, which is just the value of</text><text start=\"156.37\" dur=\"2.21\">result, when I&amp;#39;m done.</text><text start=\"158.58\" dur=\"1.98\">Let&amp;#39;s try it to see if\nit works or not.</text><text start=\"160.56\" dur=\"0.67\">I&amp;#39;ve already loaded this over here.</text><text start=\"161.23\" dur=\"4.503\">So if I say I&amp;#39;m going to int-- yeah,\nyeah, iterative power, I&amp;#39;m going to</text><text start=\"165.733\" dur=\"1.387\">compute that.</text><text start=\"167.12\" dur=\"3.46\">Let&amp;#39;s do 3 to the 5.</text><text start=\"170.58\" dur=\"3.03\">It runs through exactly the same stages,\nand notice what it printed out</text><text start=\"173.61\" dur=\"0.231\">at the end.</text><text start=\"173.841\" dur=\"2.969\">It printed out the value\nof the computation.</text><text start=\"176.81\" dur=\"3.27\">And in fact, if I were to bind this and\nsay z is equal to IterativePower</text><text start=\"180.08\" dur=\"4.3\">of 3 and 5, it runs through\nthe computation.</text><text start=\"184.38\" dur=\"4.78\">And if I ask for the value\nof z, there it is, 243.</text><text start=\"189.16\" dur=\"3.2\">So it does the computation I want, now\nlet&amp;#39;s think about what happens inside</text><text start=\"192.36\" dur=\"3.26\">of the environments, how it does\nthe scoping of the variables.</text><text start=\"195.62\" dur=\"4.21\">So if I were to evaluate that\ndefinition, which I did, by loading it</text><text start=\"199.83\" dur=\"3.79\">into my Python environment, what it does\nis, it creates a binding for the</text><text start=\"203.62\" dur=\"4.28\">name IterativePower to\na procedure object.</text><text start=\"207.9\" dur=\"3.24\">And inside there, I have a list\nof formal parameters,</text><text start=\"211.14\" dur=\"2.11\">and I have the body.</text><text start=\"213.25\" dur=\"3.86\">I also have an environment pointer that\npoints back to the environment in</text><text start=\"217.11\" dur=\"1.32\">which I did the definition.</text><text start=\"218.43\" dur=\"2.3\">In fact, we know we&amp;#39;re\ngoing to use it.</text><text start=\"220.73\" dur=\"7.01\">If I now call iterativePower with\n2 and 5, what do we say happens?</text><text start=\"227.74\" dur=\"3.7\">We get, first of all, the value of this\nexpression, iterativePower, it</text><text start=\"231.44\" dur=\"2.57\">points to that, it&amp;#39;s\na procedure object.</text><text start=\"234.01\" dur=\"3.67\">I get the values of each of these\nexpressions with respect to this</text><text start=\"237.68\" dur=\"1.53\">environment.</text><text start=\"239.21\" dur=\"1.91\">Numbers are always numbers,\nso it&amp;#39;s just 2 and 5.</text><text start=\"241.12\" dur=\"2.85\">And then I create a new environment,\nwhich I&amp;#39;m calling E2.</text><text start=\"243.97\" dur=\"2.25\">This new environment here.</text><text start=\"246.22\" dur=\"3.88\">It has as a parent the environment\nthat the procedure</text><text start=\"250.1\" dur=\"2.57\">object has as a parent.</text><text start=\"252.67\" dur=\"5.18\">And then, inside of that environment I\nbind these formal parameters to the</text><text start=\"257.85\" dur=\"4.21\">values of the expressions passed in.</text><text start=\"262.06\" dur=\"4.6\">And then relative to this environment,\nI now evaluate the body of the</text><text start=\"266.66\" dur=\"0.987\">expression.</text><text start=\"267.647\" dur=\"3.383\">Ah, that&amp;#39;s really cool.</text><text start=\"271.03\" dur=\"3.38\">Because now, I&amp;#39;ve basically reduced a\ncomputation to a simpler computation.</text><text start=\"274.41\" dur=\"4.78\">I&amp;#39;m now evaluating this expression or\nsequence of expressions relative to</text><text start=\"279.19\" dur=\"0.95\">this environment.</text><text start=\"280.14\" dur=\"2.52\">And that environment contains\nthe bindings I want.</text><text start=\"282.66\" dur=\"3.21\">So in fact, if I evaluate that\nbody, what does it do?</text><text start=\"285.87\" dur=\"3.73\">Well, the first expression it evaluates\nsays bind result to 1.</text><text start=\"289.6\" dur=\"4.91\">And notice where that happens, it\nhappens down here in this environment.</text><text start=\"294.51\" dur=\"4.22\">Not up in the global environment where I\nwant to have some value that I might</text><text start=\"298.73\" dur=\"0.71\">want to think about.</text><text start=\"299.44\" dur=\"2.68\">It&amp;#39;s happening inside of this\nenvironment created</text><text start=\"302.12\" dur=\"1.75\">by a procedure call.</text><text start=\"303.87\" dur=\"2.45\">Having done that definition,\nI run through the for loop.</text><text start=\"306.32\" dur=\"3.03\">And that says look up the value\nof x, which is right there.</text><text start=\"309.35\" dur=\"1.91\">Look up the value of result,\nwhich is right there.</text><text start=\"311.26\" dur=\"2.68\">Multiply them together and change\nthe binding for result.</text><text start=\"313.94\" dur=\"5.06\">And then do it again and again,\nyou get the idea.</text><text start=\"319\" dur=\"4.46\">All of this computation takes place\nin this environment, E2.</text><text start=\"323.46\" dur=\"5.59\">What that says, then, is that the loop\nrebinds that local variable until we</text><text start=\"329.05\" dur=\"4.33\">get to the exit, until when we&amp;#39;re done\nand we hit that return expression.</text><text start=\"333.38\" dur=\"3.57\">And return says look up the value\nof result in this environment.</text><text start=\"336.95\" dur=\"2.6\">Because that&amp;#39;s where I&amp;#39;m doing the\ncomputation for the procedure.</text><text start=\"339.55\" dur=\"1.07\">There it is.</text><text start=\"340.62\" dur=\"3.58\">That&amp;#39;s what&amp;#39;s actually returned.</text><text start=\"344.2\" dur=\"3.17\">Cool, that&amp;#39;s exactly what\nit said we should do.</text><text start=\"347.37\" dur=\"2.1\">Now, let&amp;#39;s drive home a point.</text><text start=\"349.47\" dur=\"3.26\">Imagine that we had actually done\nsome bindings for x and p</text><text start=\"352.73\" dur=\"0.81\">before we called it.</text><text start=\"353.54\" dur=\"1.75\">In fact, let me go back\nover here to Python.</text><text start=\"355.29\" dur=\"3.28\">And I want to say, let&amp;#39;s\nset x equal to 3.</text><text start=\"358.57\" dur=\"2.795\">Let&amp;#39;s set p equal to 4.</text><text start=\"361.365\" dur=\"3.265\">Let&amp;#39;s set result equal to 5.</text><text start=\"364.63\" dur=\"9.09\">And now let&amp;#39;s call z as iterativePower\n6 and 7.</text><text start=\"373.72\" dur=\"1.28\">It runs through the computation.</text><text start=\"375\" dur=\"1.74\">And notice what&amp;#39;s happening.</text><text start=\"376.74\" dur=\"0.75\">What&amp;#39;s the value of z?</text><text start=\"377.49\" dur=\"2.43\">Well, that is 6 to the seventh power.</text><text start=\"379.92\" dur=\"1.955\">But more importantly, what&amp;#39;s\nthe value of x?</text><text start=\"381.875\" dur=\"1.83\">Still 3.</text><text start=\"383.705\" dur=\"0.845\">The value of p?</text><text start=\"384.55\" dur=\"0.705\">Still 4.</text><text start=\"385.255\" dur=\"1.39\">The value of result?</text><text start=\"386.645\" dur=\"1.585\">Still 5.</text><text start=\"388.23\" dur=\"2.596\">Those were bindings in\na global environment.</text><text start=\"390.826\" dur=\"3.694\">When I called the procedure, it\ncreated its own frame, its own</text><text start=\"394.52\" dur=\"2.19\">context, did all the computation.</text><text start=\"396.71\" dur=\"3.8\">And that local environment had separate\nbindings for x and p, which</text><text start=\"400.51\" dur=\"3.57\">are not visible to the environment\nwhere we did the function call.</text><text start=\"404.08\" dur=\"4.766\">So this point captures that notion\nof encapsulating the computation.</text><text start=\"408.846\" dur=\"4.204\">And what that then says is, to say it\nin a little more detail, we have</text><text start=\"413.05\" dur=\"2.31\">bindings for x and p up here.</text><text start=\"415.36\" dur=\"2.96\">When we call the procedure, we do local\nbindings to the values passed</text><text start=\"418.32\" dur=\"3.4\">in, we do local bindings for result.</text><text start=\"421.72\" dur=\"4.74\">And when we do that computation, the\nevaluation of the body only sees the</text><text start=\"426.46\" dur=\"2.23\">bindings down here in E2.</text><text start=\"428.69\" dur=\"2.19\">So we created a black box.</text><text start=\"430.88\" dur=\"1.5\">Details don&amp;#39;t matter.</text><text start=\"432.38\" dur=\"4.57\">I can re-use this procedure anywhere\nby simply using its name.</text><text start=\"436.95\" dur=\"4.045\">If I decide to change, for example, the\nnames of the parameters in here,</text><text start=\"440.995\" dur=\"2.085\">I&amp;#39;m free to do that.</text><text start=\"443.08\" dur=\"3.53\">And it doesn&amp;#39;t change any computation\nthat relies on just using</text><text start=\"446.61\" dur=\"1.33\">iterativePower.</text><text start=\"447.94\" dur=\"2.99\">So procedures give us this wonderful\nnotion of abstraction.</text><text start=\"450.93\" dur=\"1.557\"></text></transcript>\n", "B03dhB-YmMM": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.82\"></text><text start=\"0.82\" dur=\"2.39\">JOHN GUTTAG: Hello, it&amp;#39;s me again.</text><text start=\"3.21\" dur=\"3.4\">In the last segment, we looked at\nhashing and hash tables by drawing a</text><text start=\"6.61\" dur=\"1.65\">bunch of pictures.</text><text start=\"8.26\" dur=\"2.79\">Now it&amp;#39;s time to look at some code.</text><text start=\"11.05\" dur=\"3.8\">The class intDict uses a simple hash\nfunction, the same we looked at</text><text start=\"14.85\" dur=\"5.11\">before, modulus, to implement a\ndictionary with integers as keys.</text><text start=\"19.96\" dur=\"3.83\">I know that&amp;#39;s boring because we could\njust use a list, but it&amp;#39;s at least</text><text start=\"23.79\" dur=\"1.94\">easy to understand.</text><text start=\"25.73\" dur=\"3.85\">The basic idea is the same when we\nlooked at in the last segment.</text><text start=\"29.58\" dur=\"4.51\">You represent instances of class intDict\nby a list of buckets where</text><text start=\"34.09\" dur=\"3.71\">each bucket is a list\nof key value tuples.</text><text start=\"37.8\" dur=\"4.14\">By making each bucket a list, you will\nrecall, we handle collisions by</text><text start=\"41.94\" dur=\"4.39\">storing all the values that\nhash to that bucket.</text><text start=\"46.33\" dur=\"3.44\">By the way, there are many other\nways to handle collisions, some</text><text start=\"49.77\" dur=\"2.205\">considerably better than using lists.</text><text start=\"51.975\" dur=\"2.405\">But this is probably the\nsimplest mechanism.</text><text start=\"54.38\" dur=\"3.62\">And it works fine if the hash table is\nbig enough, and the hash function</text><text start=\"58\" dur=\"4.39\">provides a good enough approximation\nto a uniform distribution.</text><text start=\"62.39\" dur=\"3.29\">All right, to the code.</text><text start=\"65.68\" dur=\"2.64\">So we&amp;#39;ve got class intDict.</text><text start=\"68.32\" dur=\"3.5\">Init does exactly what we looked\nat in the last segment.</text><text start=\"71.82\" dur=\"3.98\">It takes the number of buckets as an\nargument, and then creates an empty</text><text start=\"75.8\" dur=\"5.24\">dictionary, and then goes through and\nadds to each dictionary a bucket,</text><text start=\"81.04\" dur=\"4.09\">which is initialized to\nbe the empty list.</text><text start=\"85.13\" dur=\"3.97\">Exactly what we saw in the picture\nin the last segment.</text><text start=\"89.1\" dur=\"3.31\">addEntry entry, takes the\nkey and the value.</text><text start=\"92.41\" dur=\"2.87\">It starts by finding\nthe correct bucket.</text><text start=\"95.28\" dur=\"4.16\">It does that by taking the key and\nthen hashing using modulus.</text><text start=\"99.44\" dur=\"4.48\">And it gets the number to take\nit from self.numBuckets.</text><text start=\"103.92\" dur=\"6.7\">If we go back, we&amp;#39;ll see that we saved\nnumBuckets as an attribute of the hash</text><text start=\"110.62\" dur=\"1.84\">table being created.</text><text start=\"112.46\" dur=\"3.95\">Consequently, we can retrieve\nit here and use it.</text><text start=\"116.41\" dur=\"4.05\">It&amp;#39;s then going to go look at the hash\nbucket, as we did in the last segment,</text><text start=\"120.46\" dur=\"2.49\">until it finds the dictionary key.</text><text start=\"122.95\" dur=\"3.71\">If it does, it updates\nit and then returns.</text><text start=\"126.66\" dur=\"2.17\">Notice that once it&amp;#39;s\nreturned, it&amp;#39;s done.</text><text start=\"128.83\" dur=\"2.63\">It never gets to this statement\nif it returns.</text><text start=\"131.46\" dur=\"5.19\">On the other hand, if it finishes this\nloop without finding the key, then it</text><text start=\"136.65\" dur=\"6.44\">just adds a new tuple dictKey,\ndictVal to the dictionary.</text><text start=\"143.09\" dur=\"4.44\">getValue is very similar to addEntry\n, a little bit simpler.</text><text start=\"147.53\" dur=\"2.91\">Once again, it has to start by\nfinding the bucket, which it</text><text start=\"150.44\" dur=\"1.36\">does the same way.</text><text start=\"151.8\" dur=\"4.27\">Once again, it has to search through the\nbucket, looking at each element,</text><text start=\"156.07\" dur=\"2.47\">to see if it can match the key.</text><text start=\"158.54\" dur=\"4.73\">If it finds a match, it returns the\nvalue associated with that key.</text><text start=\"163.27\" dur=\"3.65\">Otherwise, it didn&amp;#39;t find the\nmatch, then it returns None.</text><text start=\"166.92\" dur=\"3.79\">I suppose it would have been perhaps\nbetter to raise an exception, but I&amp;#39;m</text><text start=\"170.71\" dur=\"2.21\">sure you get the idea.</text><text start=\"172.92\" dur=\"2.99\">Let&amp;#39;s now go look at the code window.</text><text start=\"175.91\" dur=\"4.57\">Way down at the bottom I&amp;#39;ve got one\nextra method we didn&amp;#39;t look at.</text><text start=\"180.48\" dur=\"1.61\">That&amp;#39;s the string method.</text><text start=\"182.09\" dur=\"4.48\">And it does nothing interesting, it\njust provides a way to print it.</text><text start=\"186.57\" dur=\"3.182\">Now let&amp;#39;s see what happens\nif we use it.</text><text start=\"189.752\" dur=\"1.818\">It does nothing very interesting.</text><text start=\"191.57\" dur=\"3.72\">It creates a dictionary\nwith 29 entries.</text><text start=\"195.29\" dur=\"4.52\">And then I&amp;#39;m going to, for i in range\n20, that&amp;#39;s going to be a number of</text><text start=\"199.81\" dur=\"6.27\">inserts, I&amp;#39;m going to choose a random\ninteger in the range up to 10^5 --</text><text start=\"206.08\" dur=\"2.33\">so quite a large range of numbers.</text><text start=\"208.41\" dur=\"4.71\">That will be my key, and then I&amp;#39;ll\nadd that key with i, the i-th</text><text start=\"213.12\" dur=\"2.16\">insertion as the entry.</text><text start=\"215.28\" dur=\"2.85\">Then after we&amp;#39;ve built it, we want\nto look at what&amp;#39;s in there.</text><text start=\"218.13\" dur=\"3.66\">In order to make it a little easier to\nsee, I&amp;#39;m going to print it bucket by</text><text start=\"221.79\" dur=\"2.61\">bucket so that we can see the buckets.</text><text start=\"224.4\" dur=\"2.61\">But of course, that violates\nthe abstraction barrier.</text><text start=\"227.01\" dur=\"4.14\">I really shouldn&amp;#39;t be doing\nthat, in a good program.</text><text start=\"231.15\" dur=\"3.2\">But for pedagogical reasons,\nit&amp;#39;s worth doing.</text><text start=\"234.35\" dur=\"4.8\">So let&amp;#39;s run it and see what we get.</text><text start=\"239.15\" dur=\"4.09\">Well, we get 29 buckets which,\nconveniently, just happens to fit on</text><text start=\"243.24\" dur=\"1.27\">our screen.</text><text start=\"244.51\" dur=\"4.37\">If we look at it, we&amp;#39;ll see that some\nbuckets, like the first one here, have</text><text start=\"248.88\" dur=\"1.91\">just one element in them.</text><text start=\"250.79\" dur=\"4.93\">Other buckets have multiple elements\nbecause there&amp;#39;s been a collision.</text><text start=\"255.72\" dur=\"2.559\">And a lot of the buckets are empty.</text><text start=\"258.279\" dur=\"4.311\">But again, observe, even though the keys\ncan get very large, I don&amp;#39;t have</text><text start=\"262.59\" dur=\"5.57\">very many collisions as we&amp;#39;re inserting\n20 elements into 29 buckets.</text><text start=\"268.16\" dur=\"4.13\">Now let&amp;#39;s return to the\ncode for getValue.</text><text start=\"272.29\" dur=\"2.54\">What is it&amp;#39;s algorithmic complexity?</text><text start=\"274.83\" dur=\"1.54\">Well, let&amp;#39;s look at the simple case.</text><text start=\"276.37\" dur=\"2.64\">If there were no collisions,\nwhat would happen?</text><text start=\"279.01\" dur=\"2.71\">We&amp;#39;d go through this\nloop exactly once.</text><text start=\"281.72\" dur=\"2.73\">And so it would be order one.</text><text start=\"284.45\" dur=\"2.05\">Suppose there&amp;#39;s a collision.</text><text start=\"286.5\" dur=\"4.23\">Well, as we saw last time, if there&amp;#39;s\na collision, it has to go down the</text><text start=\"290.73\" dur=\"3.76\">entire length of the\nlist in the bucket.</text><text start=\"294.49\" dur=\"4.42\">Let&amp;#39;s think of the simple case where\nwe got very unlucky, and everything</text><text start=\"298.91\" dur=\"2.17\">hashed to the same bucket.</text><text start=\"301.08\" dur=\"5.91\">Well, if we inserted n elements and each\nhashed to the same bucket, then</text><text start=\"306.99\" dur=\"4.76\">we would have to do order n trips\nthrough this loop to see whether or</text><text start=\"311.75\" dur=\"1.84\">not we had an entry.</text><text start=\"313.59\" dur=\"4.15\">But remember, we decided that our hash\nfunction was uniform, or we would</text><text start=\"317.74\" dur=\"4.46\">design it to be uniform, and therefore\nit&amp;#39;s unlikely that everything would</text><text start=\"322.2\" dur=\"1.9\">hash to the same bucket.</text><text start=\"324.1\" dur=\"4.58\">In fact, let&amp;#39;s think about what the\nactual predicted time should be.</text><text start=\"328.68\" dur=\"6.79\">Let&amp;#39;s assume that we have k\nbuckets and n insertions.</text><text start=\"335.47\" dur=\"2.89\">And again, let&amp;#39;s assume\nthe hash is uniform.</text><text start=\"338.36\" dur=\"2.91\">What is the average length\nof a bucket?</text><text start=\"341.27\" dur=\"5.28\">It&amp;#39;s simply the number of insertions\ndivided by the number of buckets</text><text start=\"346.55\" dur=\"3.26\">This wraps up our brief excursion\ninto hashing.</text><text start=\"349.81\" dur=\"3.36\">There are a small number\nof things to take away.</text><text start=\"353.17\" dur=\"5.4\">One, and this is probably the most\nimportant thing to remember, hash</text><text start=\"358.57\" dur=\"6.69\">tables are really useful, especially\nif you want to optimize the time</text><text start=\"365.26\" dur=\"3.04\">required to look up keys\nother than integers.</text><text start=\"368.3\" dur=\"4.78\">If the key is an integer,\na list works just fine.</text><text start=\"373.08\" dur=\"6.79\">Two, it&amp;#39;s very important, as we&amp;#39;ve said\nperhaps too many times for your</text><text start=\"379.87\" dur=\"6.81\">taste, for the hash function to provide\na uniform distribution.</text><text start=\"386.68\" dur=\"2.85\">Otherwise, we get too many collisions.</text><text start=\"389.53\" dur=\"4.2\">And finally, a hash table is an example\nof a data structure that</text><text start=\"393.73\" dur=\"4.1\">allows us to trade time for space.</text><text start=\"397.83\" dur=\"3.08\">By using more space, we\ncan use less time.</text><text start=\"400.91\" dur=\"1.25\"></text></transcript>\n", "WdFrWzyYoQg": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.32\"></text><text start=\"0.32\" dur=\"2.09\">Eric Grimson: Welcome to 600x.</text><text start=\"2.41\" dur=\"3.37\">In this first lecture, we&amp;#39;re going to\ntalk about some of the fundamental</text><text start=\"5.78\" dur=\"3.81\">principles of computation and\ncomputational thinking.</text><text start=\"9.59\" dur=\"3.2\">For example, what does a\ncomputer actually do?</text><text start=\"12.79\" dur=\"3.449\">What are its fundamental operations?</text><text start=\"16.239\" dur=\"3.641\">How do those fundamental operations\nsupport what we call imperative</text><text start=\"19.88\" dur=\"3.4\">knowledge or how-to methods?</text><text start=\"23.28\" dur=\"2.99\">What are the basic elements of a\ncomputer that enable it to compute</text><text start=\"26.27\" dur=\"4.8\">things, described by algorithms,\nor how-to recipes?</text><text start=\"31.07\" dur=\"3.87\">And finally, how can we use a language,\na programming language in</text><text start=\"34.94\" dur=\"2.16\">our case, to describe those recipes?</text><text start=\"37.1\" dur=\"1.25\"></text></transcript>\n", "9rVsdCMxeiA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.38\"></text><text start=\"0.38\" dur=\"2.39\">Eric Grimson: Welcome back to 600x.</text><text start=\"2.77\" dur=\"3.15\">In this second lecture we are going\nto start developing knowledge of</text><text start=\"5.92\" dur=\"1.86\">programming languages.</text><text start=\"7.78\" dur=\"3.34\">We&amp;#39;ll talk about how a computer converts\na description of a how-to</text><text start=\"11.12\" dur=\"4.09\">method that we write in a high level,\nalthough a semantically constrained</text><text start=\"15.21\" dur=\"3.24\">manner, into a set of instructions\nthat its internal</text><text start=\"18.45\" dur=\"2.59\">circuitry can execute.</text><text start=\"21.04\" dur=\"3.11\">To do this, we&amp;#39;re going to begin to\nintroduce the basic elements of</text><text start=\"24.15\" dur=\"4.09\">Python, the language we&amp;#39;re going\nto use in this course.</text><text start=\"28.24\" dur=\"2.54\">We will introduce a bunch of things.</text><text start=\"30.78\" dur=\"5.56\">Numbers, expressions that combine\nnumbers arithmetically, ways to</text><text start=\"36.34\" dur=\"6.49\">compare objects like numbers, Boolean\noperations on logical expressions,</text><text start=\"42.83\" dur=\"4.18\">ways to abstract expressions\nby giving them names,</text><text start=\"47.01\" dur=\"5.27\">strings or collections of characters\nand words and operations on them,</text><text start=\"52.28\" dur=\"4.7\">combining expressions in a linear\nmanner, and simple ways to make</text><text start=\"56.98\" dur=\"2.81\">decisions and to take different\noptions or branches</text><text start=\"59.79\" dur=\"2.7\">based on those decisions.</text><text start=\"62.49\" dur=\"3.49\">At the end of this lecture, you should\nbe able to write simple programs that</text><text start=\"65.98\" dur=\"4.17\">manipulate numbers or strings, make\ndecisions, and print out results.</text><text start=\"70.15\" dur=\"1.25\"></text></transcript>\n", "mixmc-woOF8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.38\"></text><text start=\"1.38\" dur=\"3.84\">ERIC GRIMSON: We&amp;#39;ve now added tuples,\nwe&amp;#39;ve added lists, we&amp;#39;ve started to</text><text start=\"5.22\" dur=\"2.64\">see the kinds of things we can do with\nthem, all the sorts of things we&amp;#39;d</text><text start=\"7.86\" dur=\"0.58\">like to do.</text><text start=\"8.44\" dur=\"4.17\">We can slice, we can index, we mutate\nthe list, we can apply functions to</text><text start=\"12.61\" dur=\"1.43\">all of those pieces.</text><text start=\"14.04\" dur=\"3.28\">We&amp;#39;re going to add in one last data\nstructure that is a further</text><text start=\"17.32\" dur=\"2.44\">generalization of the kinds of\nthings we&amp;#39;ve been building.</text><text start=\"19.76\" dur=\"1.9\">And that data structure\nis a dictionary.</text><text start=\"21.66\" dur=\"3.74\">So a dictionary&amp;#39;s a generalization of a\nlist, but now the indices, the ways</text><text start=\"25.4\" dur=\"3.2\">to get to elements of the dictionary,\ndon&amp;#39;t have to be integers.</text><text start=\"28.6\" dur=\"3.03\">If you think about it, a list is a\nlinear sequence of things, and its</text><text start=\"31.63\" dur=\"3.64\">indexed starting at 0, 1, 2, 3,\nall the way up to the end.</text><text start=\"35.27\" dur=\"4.37\">Now, with dictionaries, the places or\nthe ways to get to elements of the</text><text start=\"39.64\" dur=\"3.79\">dictionary can be any value\nthat&amp;#39;s immutable.</text><text start=\"43.43\" dur=\"2.37\">Hm, what does that mean?</text><text start=\"45.8\" dur=\"2.51\">First of all, we&amp;#39;re going to start\nreferring to these indices not as</text><text start=\"48.31\" dur=\"2.7\">indices, because that implies integers,\nbut as keys, because the</text><text start=\"51.01\" dur=\"1.99\">keys can be arbitrary in form.</text><text start=\"53\" dur=\"4.43\">And a dictionary then is simply a\ncollection of key value pairs.</text><text start=\"57.43\" dur=\"4.18\">That is, a pairing up some key\nand an associated value.</text><text start=\"61.61\" dur=\"2.57\">The syntax for this is shown here.</text><text start=\"64.18\" dur=\"4.15\">We use curly braces to indicate that\nthis is a dictionary, and each of the</text><text start=\"68.33\" dur=\"5.48\">pairings is a combination of some\nkey, a colon, and some value.</text><text start=\"73.81\" dur=\"3.61\">They&amp;#39;re separated by commas, so the\ncommas tell me where the ends of each</text><text start=\"77.42\" dur=\"1.28\">one of those are.</text><text start=\"78.7\" dur=\"6.18\">So I&amp;#39;m giving the name monthNumbers to\na collection of Jan 1, Feb 2, Mar 3,</text><text start=\"84.88\" dur=\"1.84\">and 1 Jan, 2 Feb, and 3 Mar.</text><text start=\"86.72\" dur=\"1.86\">So I&amp;#39;ve got pairings both ways.</text><text start=\"88.58\" dur=\"4.32\">Each pairing has both a\nkey and a value in it.</text><text start=\"92.9\" dur=\"1.4\">OK.</text><text start=\"94.3\" dur=\"3.12\">If I&amp;#39;ve got that-- and in fact, I&amp;#39;m just\ngoing to show you over here, I&amp;#39;ve</text><text start=\"97.42\" dur=\"5.29\">got monthNumbers defined, and it is\nthat pairing of these pieces.</text><text start=\"102.71\" dur=\"4.97\">Now, what I can do is, I can\nstart doing things on this.</text><text start=\"107.68\" dur=\"2.88\">So the first one is, if that&amp;#39;s\nmonthNumbers, one of the first things</text><text start=\"110.56\" dur=\"2.45\">I can do is I can get\nout elements of it.</text><text start=\"113.01\" dur=\"3.85\">So I could say, for example, if I wanted\nto get the value associated</text><text start=\"116.86\" dur=\"7.28\">with a key, I simply give it that value\nof the key as an index, and it</text><text start=\"124.14\" dur=\"2.21\">gives me back the thing I&amp;#39;d like.</text><text start=\"126.35\" dur=\"4.99\">Or I can say, if I want monthNumbers of\nthe value associated with the key</text><text start=\"131.34\" dur=\"2.9\">too, I can get back that as well.</text><text start=\"134.24\" dur=\"3.67\">So we get things by giving it a key.</text><text start=\"137.91\" dur=\"3.26\">So it&amp;#39;s a lot like a list, except that\nnow the things that go in are</text><text start=\"141.17\" dur=\"1.14\">arbitrary expressions.</text><text start=\"142.31\" dur=\"1.9\">They don&amp;#39;t have to be integers.</text><text start=\"144.21\" dur=\"2.31\">It&amp;#39;s also important to notice--</text><text start=\"146.52\" dur=\"1.91\">and here&amp;#39;s what we can do if\nwe give it a second one.</text><text start=\"148.43\" dur=\"3.94\">It&amp;#39;s important to notice that the\nentries in a dictionary are unordered,</text><text start=\"152.37\" dur=\"3.71\">and they can only be accessed\nby a key, not an index.</text><text start=\"156.08\" dur=\"2.43\">And in fact, if you look back on my\nidle screen, you can see when I</text><text start=\"158.51\" dur=\"2\">printed out monthNumbers, it\ngave me the dictionary.</text><text start=\"160.51\" dur=\"3.91\">And notice they weren&amp;#39;t in the\nform that I typed them in.</text><text start=\"164.42\" dur=\"3.42\">I type them in with Jan and 1, and yet\nit has 1 and Jan as being the first</text><text start=\"167.84\" dur=\"0.93\">element of it.</text><text start=\"168.77\" dur=\"6.335\">And so if I somehow say gee, I&amp;#39;d like\nto get what I think is the 0th entry</text><text start=\"175.105\" dur=\"4.485\">of monthNumbers, which would be that 1\nJan pairing, it&amp;#39;s going to complain,</text><text start=\"179.59\" dur=\"2.61\">because in fact, I can&amp;#39;t\nindex by number.</text><text start=\"182.2\" dur=\"2.52\">I have to index by key.</text><text start=\"184.72\" dur=\"3.55\">OK, so what can we do\nwith dictionaries?</text><text start=\"188.27\" dur=\"1.95\">Well, we can do insertion.</text><text start=\"190.22\" dur=\"2.54\">So for example, I can go over\nto monthNumbers, and I can</text><text start=\"192.76\" dur=\"0.76\">add something new.</text><text start=\"193.52\" dur=\"1.8\">And I would do that as\nyou might expect.</text><text start=\"195.32\" dur=\"3.44\">I&amp;#39;m going to give it as an assignment\nstatement saying, associated with the</text><text start=\"198.76\" dur=\"4.21\">key Apr as a string,\nI want the value 4.</text><text start=\"202.97\" dur=\"4.51\">And that has now added to the dictionary\nmonthNumbers so that if I</text><text start=\"207.48\" dur=\"4.15\">ask for the value associated with\nkey Apr, it gives me back 4.</text><text start=\"211.63\" dur=\"2.54\">So I&amp;#39;ve just inserted something\ninto there.</text><text start=\"214.17\" dur=\"2.75\">I can also iterate over a dictionary,\nand I want to show you</text><text start=\"216.92\" dur=\"0.71\">an example of this.</text><text start=\"217.63\" dur=\"1.29\">I&amp;#39;m going to bring this up here,\nand I&amp;#39;m actually going to</text><text start=\"218.92\" dur=\"0.78\">type it in over here.</text><text start=\"219.7\" dur=\"2.96\">I&amp;#39;m going to create a variable called\ncollect, which is going to be</text><text start=\"222.66\" dur=\"1.78\">initially an empty list.</text><text start=\"224.44\" dur=\"4.94\">And then I&amp;#39;m going to loop over this\ndictionary I created, monthNumbers.</text><text start=\"229.38\" dur=\"2.89\">So I&amp;#39;m creating an generator iterator.\ne is going to vary over each of the</text><text start=\"232.27\" dur=\"0.79\">elements of that.</text><text start=\"233.06\" dur=\"5.04\">And I&amp;#39;m just going to append to the\nend of collect, that entry.</text><text start=\"238.1\" dur=\"4.7\">And if I now look at what\ncollect is, ha, cool.</text><text start=\"242.8\" dur=\"1.37\">Its a list.</text><text start=\"244.17\" dur=\"0.99\">Oh, and notice what it put in.</text><text start=\"245.16\" dur=\"3.66\">It looks like it has put in the keys\nassociated with each one of these</text><text start=\"248.82\" dur=\"2.46\">things, and that&amp;#39;s actually very good.</text><text start=\"251.28\" dur=\"2.74\">OK, so I&amp;#39;ve got the keys associated\nwith each one.</text><text start=\"254.02\" dur=\"5.22\">And indeed, if I want to look at\nthis, I can compare that to</text><text start=\"259.24\" dur=\"4.24\">monthNumbers of keys.</text><text start=\"263.48\" dur=\"1.39\">And that&amp;#39;s just a method.</text><text start=\"264.87\" dur=\"2.38\">And we&amp;#39;ll come back to methods later\non, but basically it&amp;#39;s a method</text><text start=\"267.25\" dur=\"2.81\">associated with the dictionaries, which\nis going to give back to me the</text><text start=\"270.06\" dur=\"4.06\">list of all of the keys, and it turns\nout to be in exactly the same order.</text><text start=\"274.12\" dur=\"0.6\">Not a big deal.</text><text start=\"274.72\" dur=\"3.28\">All I wanted you to see was the idea\nthat we can iterate over a dictionary</text><text start=\"278\" dur=\"3.17\">doing things to the elements if\nwe want to, and that&amp;#39;s great.</text><text start=\"281.17\" dur=\"4.86\">The final thing that we can do is stress\nthat the keys can be complex.</text><text start=\"286.03\" dur=\"2.45\">I can create a new dictionary where\nmy keys now are tuples.</text><text start=\"288.48\" dur=\"4.79\">The tuple 1,2, or the tuple 1,3 have\nvalues associated with them.</text><text start=\"293.27\" dur=\"3.46\">I can ask for the value\nby giving it that key.</text><text start=\"296.73\" dur=\"1.17\">And notice the form.</text><text start=\"297.9\" dur=\"1.21\">I have to actually give it the key.</text><text start=\"299.11\" dur=\"4.09\">Open paren, 1 comma 2, close paren, and\nit will get back for me the value</text><text start=\"303.2\" dur=\"1.5\">in the dictionary.</text><text start=\"304.7\" dur=\"4.14\">It&amp;#39;s also important to stress that\nthese keys must be immutable.</text><text start=\"308.84\" dur=\"3.92\">So I can use a tuple as\na key, but not a list.</text><text start=\"312.76\" dur=\"2.53\">And that makes sense because if I&amp;#39;m\nstoring something with a key in a</text><text start=\"315.29\" dur=\"3.55\">value, and I can somehow go along and\nchange the key, that&amp;#39;s going to really</text><text start=\"318.84\" dur=\"0.71\">mess things up.</text><text start=\"319.55\" dur=\"1.77\">I can&amp;#39;t have mutable keys.</text><text start=\"321.32\" dur=\"1.19\">They need to be immutable.</text><text start=\"322.51\" dur=\"3.41\">And this is one place where it&amp;#39;s\nadvantageous to have both a tuple that</text><text start=\"325.92\" dur=\"3.48\">can&amp;#39;t change, and a list\nwhich we can change.</text><text start=\"329.4\" dur=\"2.89\">This is intended to be just a brief\nintroduction to dictionaries.</text><text start=\"332.29\" dur=\"2.26\">We&amp;#39;ll come back to them and\ntheir methods later on.</text><text start=\"334.55\" dur=\"2.87\">But now, what you&amp;#39;ve seen is we can\nhave arbitrary collections of</text><text start=\"337.42\" dur=\"5.42\">elements, ordered collections like\ntuples and lists, and collections like</text><text start=\"342.84\" dur=\"3.43\">dictionaries that are simply indexed\nby arbitrary kinds of things, and</text><text start=\"346.27\" dur=\"2.99\">we&amp;#39;ve got functions that can start\noperating on those kinds of data</text><text start=\"349.26\" dur=\"0.73\">structures.</text><text start=\"349.99\" dur=\"3.12\">And that&amp;#39;s going to add a lot of power\nto the kinds of things we can do.</text><text start=\"353.11\" dur=\"1.62\"></text></transcript>\n", "LYbCruklFEQ": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.13\"></text><text start=\"0.13\" dur=\"1.46\">PROFESSOR: So congratulations.</text><text start=\"1.59\" dur=\"3.11\">You&amp;#39;ve made it almost all the\nway through this course.</text><text start=\"4.7\" dur=\"2.95\">In this last lecture, we&amp;#39;re going to\ntry and wrap up what we&amp;#39;ve been</text><text start=\"7.65\" dur=\"1.46\">talking about.</text><text start=\"9.11\" dur=\"2.99\">So in fact we want to do two things.</text><text start=\"12.1\" dur=\"2.85\">We want to first talk about\nwhat have you done?</text><text start=\"14.95\" dur=\"1.4\">Where have you been?</text><text start=\"16.35\" dur=\"2.61\">What are the key things that you learned\nin this course? what are the</text><text start=\"18.96\" dur=\"2.91\">key lessons we want you to take\naway from this course?</text><text start=\"21.87\" dur=\"3.64\">And the second thing we want to\ndo is we want to talk about</text><text start=\"25.51\" dur=\"1.27\">where you&amp;#39;re headed.</text><text start=\"26.78\" dur=\"2.95\">What have you learned, and more\nimportantly, how might you use the</text><text start=\"29.73\" dur=\"3.02\">knowledge that you gained in this class\nto think about new things as you</text><text start=\"32.75\" dur=\"1.54\">move forward?</text><text start=\"34.29\" dur=\"3.44\">So let&amp;#39;s start by talking about what&amp;#39;s\nactually going on this course.</text><text start=\"37.73\" dur=\"3.53\">And we&amp;#39;re going to start with\na strange question.</text><text start=\"41.26\" dur=\"2.36\">What do computer scientists\nactually do?</text><text start=\"43.62\" dur=\"2.06\">In some sense, why might you\nhave taken this course?</text><text start=\"45.68\" dur=\"2.78\">Well, we hope you&amp;#39;ve taken this course\nbecause you want to learn to think</text><text start=\"48.46\" dur=\"2.92\">like a computer scientist, at\nleast some of the time.</text><text start=\"51.38\" dur=\"3.08\">So what&amp;#39;s a computer scientist\nactually do?</text><text start=\"54.46\" dur=\"2.73\">Well, they think computationally.</text><text start=\"57.19\" dur=\"1.11\">Well, duh.</text><text start=\"58.3\" dur=\"1.57\">That&amp;#39;s kind of an obvious statement.</text><text start=\"59.87\" dur=\"2.25\">What does it really mean to say that?</text><text start=\"62.12\" dur=\"1.38\">A little more carefully--</text><text start=\"63.5\" dur=\"4.03\">a little less of a trivial answer, if\nyou like, is that computer scientists</text><text start=\"67.53\" dur=\"1.78\">use a set of tools.</text><text start=\"69.31\" dur=\"1.74\">They use abstractions.</text><text start=\"71.05\" dur=\"1.04\">They use algorithms.</text><text start=\"72.09\" dur=\"4.21\">And they use automated execution\nin order to solve problems.</text><text start=\"76.3\" dur=\"4.64\">So a better response is that you don&amp;#39;t\nneed to think about all of the details</text><text start=\"80.94\" dur=\"2.26\">of something in order to\nbuild a model of it.</text><text start=\"83.2\" dur=\"0.645\">That&amp;#39;s an abstraction.</text><text start=\"83.845\" dur=\"3.955\">You know what details to suppress\nso you can focus on key things.</text><text start=\"87.8\" dur=\"2.21\">You know how to think in\na mechanical way--</text><text start=\"90.01\" dur=\"1.64\">a sequence of instructions.</text><text start=\"91.65\" dur=\"4.13\">That word &amp;quot;recipe&amp;quot; we used way back at\nthe beginning of the class as a way of</text><text start=\"95.78\" dur=\"4.59\">structuring how to execute a set of\noperations that let you deduce new</text><text start=\"100.37\" dur=\"3.31\">information from initial information.</text><text start=\"103.68\" dur=\"3.62\">And we see ways in which you can capture\nall of that in a language that</text><text start=\"107.3\" dur=\"3.44\">describes methods that can be automated\nto actually solve all of</text><text start=\"110.74\" dur=\"1.41\">those problems.</text><text start=\"112.15\" dur=\"4.38\">One of the things we want to argue is\nthat computational thinking is really</text><text start=\"116.53\" dur=\"1.72\">a fundamental skill.</text><text start=\"118.25\" dur=\"3.91\">Every well-educated person ought to\nknow how to think computationally.</text><text start=\"122.16\" dur=\"3.98\">And indeed, this is a skill that is\ngoing to be used by everybody in the</text><text start=\"126.14\" dur=\"0.62\">very near future.</text><text start=\"126.76\" dur=\"2.42\">Certainly by the mid 21st century.</text><text start=\"129.18\" dur=\"4.04\">So that notion of computational\nthinking is really valuable.</text><text start=\"133.22\" dur=\"1.28\">And what does that say?</text><text start=\"134.5\" dur=\"3.74\">Well, just like the old days, one\ntalked about the three Rs.</text><text start=\"138.24\" dur=\"4.38\">And yes, I know it&amp;#39;s a bad pun--\nreading, arithmetic, and writing.</text><text start=\"142.62\" dur=\"3.23\">We would like to argue that the\nubiquitousness of computing and</text><text start=\"145.85\" dur=\"2.7\">computational thinking and computers,\nthe fact that they&amp;#39;re embedded</text><text start=\"148.55\" dur=\"3.73\">everywhere, is going to enable the\nspread of computational thinking as a</text><text start=\"152.28\" dur=\"4.24\">fundamental skill for every\nwell-educated person.</text><text start=\"156.52\" dur=\"3.64\">With that in mind, let&amp;#39;s say a little\nbit more about what does that</text><text start=\"160.16\" dur=\"1.99\">computational thinking mean?</text><text start=\"162.15\" dur=\"2.05\">What&amp;#39;s the actual process?</text><text start=\"164.2\" dur=\"5.81\">And here, this is just reminding you of\nthe kinds of tools you&amp;#39;ve gathered.</text><text start=\"170.01\" dur=\"1.97\">If we approach a problem\nfrom a computational</text><text start=\"171.98\" dur=\"2.4\">perspective, what do we say?</text><text start=\"174.38\" dur=\"4.5\">We start by trying to identify or\ninvent useful abstractions.</text><text start=\"178.88\" dur=\"1.11\">What does that mean?</text><text start=\"179.99\" dur=\"4.99\">We want to take elements of a problem\nand capture them in objects--</text><text start=\"184.98\" dur=\"0.86\">abstractions--</text><text start=\"185.84\" dur=\"2.22\">where we were suppress some details.</text><text start=\"188.06\" dur=\"1.46\">They&amp;#39;re internal to the abstraction.</text><text start=\"189.52\" dur=\"2.45\">They matter only to the implementer\nof that abstraction.</text><text start=\"191.97\" dur=\"3.7\">But to the user of the abstraction,\nthose details are not relevant.</text><text start=\"195.67\" dur=\"3.73\">What is relevant is the contract\none has with that abstraction.</text><text start=\"199.4\" dur=\"3.45\">If you give that abstraction certain\ninputs, it will give you back a</text><text start=\"202.85\" dur=\"0.99\">particular output.</text><text start=\"203.84\" dur=\"4.26\">If you deal with an abstraction in a\nparticular way, it will act in a</text><text start=\"208.1\" dur=\"1.99\">well-designed and specified way.</text><text start=\"210.09\" dur=\"3.66\">So we suppress details and\nwe formulate interfaces.</text><text start=\"213.75\" dur=\"2.16\">And those are our abstractions.</text><text start=\"215.91\" dur=\"5.39\">Those are the elements on top of which\nwe then build a computational process.</text><text start=\"221.3\" dur=\"4\">And then what we say when we talk about\nhow to think computationally?</text><text start=\"225.3\" dur=\"3.41\">We said given those abstractions, given\nthose elements of a problem, we</text><text start=\"228.71\" dur=\"4.89\">want to formulate a solution to the\nproblem by using experiments.</text><text start=\"233.6\" dur=\"3.38\">Building those abstractions, we want\nto formulate what are the steps one</text><text start=\"236.98\" dur=\"3.15\">should use to execute those instructions\nor to use those</text><text start=\"240.13\" dur=\"2.12\">abstractions to compute something new.</text><text start=\"242.25\" dur=\"4.3\">And having formulated a problem as a\ncomputational experiment, we then</text><text start=\"246.55\" dur=\"4.02\">design and construct a sufficiently\nefficient implementation.</text><text start=\"250.57\" dur=\"3.03\">So we start up here with abstractions.</text><text start=\"253.6\" dur=\"3.32\">We then formulate a solution\nas an experiment.</text><text start=\"256.92\" dur=\"1.84\">We&amp;#39;re going to do some\ncomputation on it.</text><text start=\"258.76\" dur=\"3.56\">And we then design and construct an\nefficient implementation of the</text><text start=\"262.32\" dur=\"1.23\">experiment.</text><text start=\"263.55\" dur=\"2.05\">That&amp;#39;s where our algorithms come in.</text><text start=\"265.6\" dur=\"4.35\">And having designed that, we then\nvalidate the experiment, or the setup</text><text start=\"269.95\" dur=\"1.1\">of it, rather.</text><text start=\"271.05\" dur=\"0.9\">That is, we debug it.</text><text start=\"271.95\" dur=\"3.38\">We make sure that it actually is going\nto do what we expect it to.</text><text start=\"275.33\" dur=\"4.22\">And having done that, we then go\nahead and run the experiment.</text><text start=\"279.55\" dur=\"2.82\">Now, running the experiment\nisn&amp;#39;t the only stage.</text><text start=\"282.37\" dur=\"3.27\">We also want to make sure that the\nthings that we set up-- the model we</text><text start=\"285.64\" dur=\"1.8\">built actually makes sense.</text><text start=\"287.44\" dur=\"3.93\">And so when we run the experiment, we\nneed to also evaluate the results.</text><text start=\"291.37\" dur=\"2.02\">Do these results make sense?</text><text start=\"293.39\" dur=\"3.51\">Do they satisfy preconditions?</text><text start=\"296.9\" dur=\"2.39\">Do they pass the laugh\ntest, if you like?</text><text start=\"299.29\" dur=\"3.11\">Do they actually satisfy all the\nthings that we would like?</text><text start=\"302.4\" dur=\"3.03\">And that says if, in fact,\nthey do, great.</text><text start=\"305.43\" dur=\"2.38\">We&amp;#39;ve computed what we want,\nand we can move on.</text><text start=\"307.81\" dur=\"2.27\">But if they don&amp;#39;t, then\nwe need to repeat.</text><text start=\"310.08\" dur=\"4.16\">We need to go back around through\nthis loop and refine our</text><text start=\"314.24\" dur=\"2.46\">experiment and continue.</text><text start=\"316.7\" dur=\"3.03\">But that computational thinking, that\ndesigning the experiment then we can</text><text start=\"319.73\" dur=\"4.03\">actually use computationally, is\na key element of what we do.</text><text start=\"323.76\" dur=\"4.89\">Now, with that in mind, we can then\nspecify three elements that you&amp;#39;ve now</text><text start=\"328.65\" dur=\"3.17\">learned about how to think\ncomputationally.</text><text start=\"331.82\" dur=\"0.91\">The three As.</text><text start=\"332.73\" dur=\"3.28\">So the first one is that\nnotion of abstraction.</text><text start=\"336.01\" dur=\"2.49\">Key elements here are how do you\npick the right abstraction?</text><text start=\"338.5\" dur=\"3.93\">How do you decide how to break a problem\ndown into modules or chunks</text><text start=\"342.43\" dur=\"3.82\">that have well-defined interfaces\nbetween them and that capture elements</text><text start=\"346.25\" dur=\"4.64\">of the computation in a matter where we\ncan suppress the details and just</text><text start=\"350.89\" dur=\"1.86\">use the attraction?</text><text start=\"352.75\" dur=\"2.67\">We want to do that using multiple\nlayers of abstraction.</text><text start=\"355.42\" dur=\"3.17\">We certainly saw that, for example, when\nwe talked about object oriented</text><text start=\"358.59\" dur=\"1.41\">programming in classes.</text><text start=\"360\" dur=\"2.94\">We also saw that with algorithms, where\nwe might build one algorithmic</text><text start=\"362.94\" dur=\"3.5\">module, suppress those details, and\nbuild on top of that another</text><text start=\"366.44\" dur=\"3.91\">algorithmic module, suppressing details\nwithin that, and so on.</text><text start=\"370.35\" dur=\"3.75\">So we want to think about different\nlayers of abstraction and using those</text><text start=\"374.1\" dur=\"1.48\">simultaneously.</text><text start=\"375.58\" dur=\"2.99\">And of course, once we&amp;#39;ve defined those\nlayers, we need to define the</text><text start=\"378.57\" dur=\"1.67\">relationships between them.</text><text start=\"380.24\" dur=\"4.31\">And that really is a key element of\nhow we think about abstraction.</text><text start=\"384.55\" dur=\"3.23\">Second element is automation.</text><text start=\"387.78\" dur=\"2.89\">It&amp;#39;s really important when we build\nabstractions to build them in a way in</text><text start=\"390.67\" dur=\"3.13\">which we can mechanize the use\nof those abstractions.</text><text start=\"393.8\" dur=\"5.29\">We can specify a set of well-defined\nstages or operations that access or</text><text start=\"399.09\" dur=\"2.73\">manipulate elements of\nthe abstractions.</text><text start=\"401.82\" dur=\"3.08\">And one of the things that we saw that&amp;#39;s\nvery central to computational</text><text start=\"404.9\" dur=\"3.22\">thinking is the fact that mechanization,\nthat building a</text><text start=\"408.12\" dur=\"3.53\">computer algorithm that does everything,\nis possible because we</text><text start=\"411.65\" dur=\"4.39\">have very precise and exact notations\nand models for things.</text><text start=\"416.04\" dur=\"3.35\">That was the elements, if you like, of\nour syntax and our semantics of our</text><text start=\"419.39\" dur=\"1.87\">language, as we talked about.</text><text start=\"421.26\" dur=\"3.27\">And the second key element is that there\nis a machine that can interpret</text><text start=\"424.53\" dur=\"1.27\">those notations.</text><text start=\"425.8\" dur=\"1.13\">That is our interpreter.</text><text start=\"426.93\" dur=\"4.49\">That is our evaluator, underlying all\nof the evaluation that we do.</text><text start=\"431.42\" dur=\"2.76\">And then the third A\nare the algorithms.</text><text start=\"434.18\" dur=\"4.58\">These are the specifications, the\nrecipes, the ways in which we detail</text><text start=\"438.76\" dur=\"1.86\">the things that we&amp;#39;re\ngoing to deal with.</text><text start=\"440.62\" dur=\"2.41\">And again, the key element with\nour algorithms is that they</text><text start=\"443.03\" dur=\"1.2\">follow certain patterns.</text><text start=\"444.23\" dur=\"1.37\">They obey certain rules.</text><text start=\"445.6\" dur=\"1.52\">And we&amp;#39;ve learned those rules.</text><text start=\"447.12\" dur=\"2.74\">And those rules are, by and large,\nindependent of the programming</text><text start=\"449.86\" dur=\"4.2\">language in which we described\nthose algorithms.</text><text start=\"454.06\" dur=\"3.68\">With that idea of computational\nthinking, one of the things that we</text><text start=\"457.74\" dur=\"5.69\">can then say is we&amp;#39;ve got a language,\nwe&amp;#39;ve got abstractions to details.</text><text start=\"463.43\" dur=\"3.37\">With that, we can also then\nthink about some examples.</text><text start=\"466.8\" dur=\"2.19\">And I want to give you two of them.</text><text start=\"468.99\" dur=\"3.52\">The first one is when we think\nabout a problem computation.</text><text start=\"472.51\" dur=\"4.97\">The kinds of questions we can now ask\nare how difficult is this problem, and</text><text start=\"477.48\" dur=\"2.14\">how best can I solve it?</text><text start=\"479.62\" dur=\"3.55\">We&amp;#39;ve already seen that the theory of\ncomputer science gives the precise</text><text start=\"483.17\" dur=\"2.73\">meaning to these questions\nand to their answers.</text><text start=\"485.9\" dur=\"3.71\">We saw that certain problems\nhave more complexity.</text><text start=\"489.61\" dur=\"3.41\">That solutions to them inherently\ninvolve some minimum amount of</text><text start=\"493.02\" dur=\"1.005\">computation.</text><text start=\"494.025\" dur=\"2.695\">And that some classes of problems\nare much more efficient</text><text start=\"496.72\" dur=\"1.26\">to solve than others.</text><text start=\"497.98\" dur=\"2.6\">And it gives us a sense of where we want\nto be when we think about how to</text><text start=\"500.58\" dur=\"2.11\">tackle a particular problem.</text><text start=\"502.69\" dur=\"3.87\">We also saw that different kinds of\nalgorithms tackle different kinds of</text><text start=\"506.56\" dur=\"1.14\">problems better.</text><text start=\"507.7\" dur=\"2.87\">And those tools we&amp;#39;re going to come back\nto when we think about how to use</text><text start=\"510.57\" dur=\"2.53\">them to best solve a problem.</text><text start=\"513.1\" dur=\"4.65\">One of the key things we saw with\ncomputational thinking is that we can</text><text start=\"517.75\" dur=\"1.73\">think recursively.</text><text start=\"519.48\" dur=\"3.52\">And this means not just that we use a\nrecursive program to solve something.</text><text start=\"523\" dur=\"2.73\">It also talks about how\nwe solve a problem.</text><text start=\"525.73\" dur=\"4.16\">That if we&amp;#39;re given what seems like a\nvery difficult problem, often we could</text><text start=\"529.89\" dur=\"4.25\">reduce it to a simpler version of\nanother problem, or to a simpler</text><text start=\"534.14\" dur=\"1.64\">version of the same problem.</text><text start=\"535.78\" dur=\"2.59\">The latter one, of course, is the\nstandard recursive version.</text><text start=\"538.37\" dur=\"4.31\">But this idea of reducing or embedding\nor transforming problems into other</text><text start=\"542.68\" dur=\"2.57\">solutions is really handy.</text><text start=\"545.25\" dur=\"4.34\">So part of your goal as a computational\nscientist is to create</text><text start=\"549.59\" dur=\"3.74\">and store away a set of standard\nmethods for solving problems.</text><text start=\"553.33\" dur=\"3.69\">So that when you get a new problem,\nyou can use it to say, is this a</text><text start=\"557.02\" dur=\"4.55\">problem I can reduce to a problem that\nI already know how to solve?</text><text start=\"561.57\" dur=\"3.47\">And if I do, how do I do that\ntransformation in a way that lets me</text><text start=\"565.04\" dur=\"3.19\">solve the original, more\ndifficult problem?</text><text start=\"568.23\" dur=\"4.07\">That idea of recursive thinking,\nwe&amp;#39;ve seen many times.</text><text start=\"572.3\" dur=\"2.6\">And just to show you a favorite example\nof it, you can obviously</text><text start=\"574.9\" dur=\"3.87\">create things that recursively unwind\ninto simpler or smaller versions of</text><text start=\"578.77\" dur=\"1.19\">the same problem.</text><text start=\"579.96\" dur=\"3.61\">But of course, somewhere way down here\nin the middle, you do need to have a</text><text start=\"583.57\" dur=\"4.15\">base case to stop the unwinding\nof the computation.</text><text start=\"587.72\" dur=\"4.69\">But that&amp;#39;s basically what we&amp;#39;ve\nbeen doing in this course.</text><text start=\"592.41\" dur=\"3.7\">We&amp;#39;ve been thinking about how to\napproach problems computationally.</text><text start=\"596.11\" dur=\"2.49\">In the next section, we&amp;#39;re going to\nmove on to talk about what actual</text><text start=\"598.6\" dur=\"1.43\">tools have you learned.</text><text start=\"600.03\" dur=\"1.25\"></text></transcript>\n", "mExCdX2EPyY": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.08\"></text><text start=\"1.08\" dur=\"2.58\">PROFESSOR: In the modern world, we\noften have to search through many</text><text start=\"3.66\" dur=\"2.22\">alternatives to find out\nwhich combination will</text><text start=\"5.88\" dur=\"1.67\">give us the best result.</text><text start=\"7.55\" dur=\"4.28\">For example, what stock portfolio will\ngive us the greatest return at</text><text start=\"11.83\" dur=\"1.5\">acceptable risk?</text><text start=\"13.33\" dur=\"4.79\">Or what combination of trams and buses\nwill get me across town in time for</text><text start=\"18.12\" dur=\"1.41\">the concert tonight?</text><text start=\"19.53\" dur=\"3.79\">Or we might want to know what choice of\nrocket booster and trajectory will</text><text start=\"23.32\" dur=\"5.41\">provide the minimum transit time\nfor a space capsule to Mars.</text><text start=\"28.73\" dur=\"2.94\">These problems, called optimization\nproblems, have been studied for many</text><text start=\"31.67\" dur=\"4.71\">years and good computational solutions\nexist for many of them.</text><text start=\"36.38\" dur=\"3.58\">If you have your own optimization\nproblem, you&amp;#39;ll probably find it can</text><text start=\"39.96\" dur=\"4.57\">be reduced to one of the classic\noptimization problems, and you&amp;#39;ll be</text><text start=\"44.53\" dur=\"3.3\">able to adopt one of the\nexisting solutions.</text><text start=\"47.83\" dur=\"3.11\">Over the next few lectures, we&amp;#39;re going\nto be looking at some of the</text><text start=\"50.94\" dur=\"1.47\">classic optimizations.</text><text start=\"52.41\" dur=\"2.57\">And of course, you&amp;#39;ll get to\nexperiment with some of the</text><text start=\"54.98\" dur=\"3.23\">solutions in Python.</text><text start=\"58.21\" dur=\"3.15\">As we tackle each of the problems, spend\nsome time thinking about how you</text><text start=\"61.36\" dur=\"1.46\">would approach the problem.</text><text start=\"62.82\" dur=\"2.68\">It can be a lot of fun.</text><text start=\"65.5\" dur=\"1.55\">Let&amp;#39;s get started.</text><text start=\"67.05\" dur=\"3.53\">Optimization problems share some\ncommon characteristics.</text><text start=\"70.58\" dur=\"4.76\">Suppose we wanted to find the minimum\nairfare from Boston to San Francisco</text><text start=\"75.34\" dur=\"2\">on a Monday or Tuesday.</text><text start=\"77.34\" dur=\"4.42\">Well the first thing we notice is that\nthe statement of the problem has an</text><text start=\"81.76\" dur=\"2.08\">implicit objective function.</text><text start=\"83.84\" dur=\"2.48\">So there&amp;#39;s our objective function--\nthe minimum airfare.</text><text start=\"86.32\" dur=\"5.05\">So often the objective function involves\nmins or maxes or biggest or</text><text start=\"91.37\" dur=\"2.12\">smallest or something like that.</text><text start=\"93.49\" dur=\"3.46\">Notice that some objective functions\nactually require us to look at all</text><text start=\"96.95\" dur=\"5.12\">possible solutions so that we can choose\nthe one that is the minimum or</text><text start=\"102.07\" dur=\"0.65\">the maximum.</text><text start=\"102.72\" dur=\"2.98\">After all, how would we know that we\nhad found the minimum unless we</text><text start=\"105.7\" dur=\"3.67\">examined all the other ones to\nsee that they were bigger.</text><text start=\"109.37\" dur=\"3.56\">The second thing that we notice\nis a set of constraints this</text><text start=\"112.93\" dur=\"1.99\">solution must satisfy.</text><text start=\"114.92\" dur=\"2.91\">In this case, we&amp;#39;re interested\nin flights that happen</text><text start=\"117.83\" dur=\"1.8\">on Monday or Tuesday.</text><text start=\"119.63\" dur=\"1.14\">That seems pretty straightforward.</text><text start=\"120.77\" dur=\"3.99\">We could obviously generate solutions\nand check to see if they satisfy the</text><text start=\"124.76\" dur=\"0.8\">constraints.</text><text start=\"125.56\" dur=\"3.62\">And then if they do, we can apply the\nobjective function and decide if this</text><text start=\"129.18\" dur=\"2.14\">is the one that we are looking for.</text><text start=\"131.32\" dur=\"3.41\">Sometimes a set of constraints can\nhelp constrain the search.</text><text start=\"134.73\" dur=\"2.86\">That&amp;#39;s why they&amp;#39;re called constraints.</text><text start=\"137.59\" dur=\"3.86\">For example, with the airfare, we might\nonly consider flights that were</text><text start=\"141.45\" dur=\"4.52\">flying on Monday or Tuesday, and from\nthe set of all possible flights, that</text><text start=\"145.97\" dur=\"4.63\">would be a considerable reduction in the\namount of work we would have to do</text><text start=\"150.6\" dur=\"1.94\">to come up with a final answer.</text><text start=\"152.54\" dur=\"3.49\">Before we look into how to write\ncomputer programs to solve</text><text start=\"156.03\" dur=\"3.57\">optimization problems, let&amp;#39;s take a\nmoment and look at some of the more</text><text start=\"159.6\" dur=\"1.45\">interesting ones.</text><text start=\"161.05\" dur=\"3.81\">Here&amp;#39;s a classic optimization problem\nfrom the world of chess.</text><text start=\"164.86\" dur=\"5.06\">The goal is to place, in this case, 8\nqueens on an 8 by 8 board such that</text><text start=\"169.92\" dur=\"2.47\">none of the queens is attacking\neach other.</text><text start=\"172.39\" dur=\"3.01\">That would mean that no 2\nqueens occupy the same</text><text start=\"175.4\" dur=\"1.91\">row, column, or diagonal.</text><text start=\"177.31\" dur=\"2.95\">Well if we&amp;#39;re going to program a\ncomputer to solve this problem, we</text><text start=\"180.26\" dur=\"3.4\">might try a simple brute force approach\nwhere we would start by</text><text start=\"183.66\" dur=\"4.99\">placing the first queen on a square and\nthen think about where we could</text><text start=\"188.65\" dur=\"1.48\">place the second queen.</text><text start=\"190.13\" dur=\"6.07\">And we wouldn&amp;#39;t be able to place it\nanywhere in the first column, nor in</text><text start=\"196.2\" dur=\"3.49\">the first row, the second column, or in\nthe second row, the second column.</text><text start=\"199.69\" dur=\"2.82\">But we could place the\nsecond queen here.</text><text start=\"202.51\" dur=\"3.42\">And then we could go on and think about\nhow to place the third queen and</text><text start=\"205.93\" dur=\"2.59\">the fourth queen, so forth and so on.</text><text start=\"208.52\" dur=\"3.68\">We might eventually come to a situation\nwhere it would be impossible</text><text start=\"212.2\" dur=\"4.22\">to place some queen, because there would\nbe no remaining position on the</text><text start=\"216.42\" dur=\"2.11\">board where that queen could go.</text><text start=\"218.53\" dur=\"5.2\">And that might mean that we&amp;#39;d have to\nback up and reconsider one of our</text><text start=\"223.73\" dur=\"0.82\">earlier choices.</text><text start=\"224.55\" dur=\"5.34\">For example, the final solution might\ninvolve having the second queen</text><text start=\"229.89\" dur=\"1.71\">actually be in this square.</text><text start=\"231.6\" dur=\"2.15\">And then we&amp;#39;d have to redo\nthe placement of all</text><text start=\"233.75\" dur=\"1.88\">the subsequent queens.</text><text start=\"235.63\" dur=\"6.27\">So this is an example that we&amp;#39;re sort of\nstep by step slowly enumerating all</text><text start=\"241.9\" dur=\"1.32\">possible solutions.</text><text start=\"243.22\" dur=\"5.09\">Well in this case, there are 64 squares\non 8 by 8 board, and we&amp;#39;re</text><text start=\"248.31\" dur=\"3.19\">trying to choose 8 of the locations.</text><text start=\"251.5\" dur=\"6.399\">So 64 choose 8 is about 4 billion\npossibilities, so the enumeration</text><text start=\"257.899\" dur=\"2.44\">would take a long time.</text><text start=\"260.339\" dur=\"4.131\">However, we will eventually come to an\nanswer, and one of the characteristics</text><text start=\"264.47\" dur=\"4.82\">of optimization problems is that there&amp;#39;s\nalmost always a brute force</text><text start=\"269.29\" dur=\"5.05\">approach that involves an exhaustive\nenumeration of all the possibilities.</text><text start=\"274.34\" dur=\"2.76\">Another classic problem\nis bin packing.</text><text start=\"277.1\" dur=\"4.64\">In this problem, we&amp;#39;re given many\nobjects of different sizes, and our</text><text start=\"281.74\" dur=\"3.38\">goal is to pack them into bins\nof a fixed capacity.</text><text start=\"285.12\" dur=\"4.82\">And so in this case, our capacity\nof each bin is 80.</text><text start=\"289.94\" dur=\"6.3\">So we can see here that if we stack up\nobjects of size 26, and 8, and 45,</text><text start=\"296.24\" dur=\"3.31\">we&amp;#39;ve basically almost filled\nup the first bin.</text><text start=\"299.55\" dur=\"5.62\">The goal of the problem is to pack all\nthe objects in the bin, but if we can,</text><text start=\"305.17\" dur=\"4.12\">is to minimize the number of bins.</text><text start=\"309.29\" dur=\"3.12\">You can imagine there&amp;#39;s many different\nways to think about how to go about</text><text start=\"312.41\" dur=\"1.04\">this problem.</text><text start=\"313.45\" dur=\"3.75\">For example, you could just simply\ntake the objects as they came and</text><text start=\"317.2\" dur=\"3.81\">stack them up one at a time in a bin,\nand when the next object wouldn&amp;#39;t fit,</text><text start=\"321.01\" dur=\"3.78\">you simply move to the next bin and keep\ngoing until you&amp;#39;ve used up all</text><text start=\"324.79\" dur=\"1.3\">the objects.</text><text start=\"326.09\" dur=\"3.38\">Of course that would leave a bunch\nof bins with room at the top, and</text><text start=\"329.47\" dur=\"2.59\">perhaps, some small object\nwould fit there.</text><text start=\"332.06\" dur=\"5.76\">So another alternative would be to\nsimply leave bins open all the time,</text><text start=\"337.82\" dur=\"3.14\">and every time you have an object,\nyou look for the first bin</text><text start=\"340.96\" dur=\"1.46\">that will it fit in.</text><text start=\"342.42\" dur=\"3.27\">Or maybe you look for the bin that has\nthe most room and put it in there.</text><text start=\"345.69\" dur=\"4.53\">Or maybe you&amp;#39;ll look for the bin that\nhas the least amount of room remaining</text><text start=\"350.22\" dur=\"1.67\">but which the object would fit in.</text><text start=\"351.89\" dur=\"1.22\">So forth and so on.</text><text start=\"353.11\" dur=\"3.25\">It&amp;#39;s actually fascinating to think\nthrough all the different ways you</text><text start=\"356.36\" dur=\"1.82\">could tackle this problem.</text><text start=\"358.18\" dur=\"3.88\">You can see that if we tried to\nenumerate all the possible solutions,</text><text start=\"362.06\" dur=\"3.91\">however, particularly when there&amp;#39;s many,\nmany, many choices to be made,</text><text start=\"365.97\" dur=\"2.59\">it would be almost computationally\nimpossible.</text><text start=\"368.56\" dur=\"5.33\">It would take years of computer time\nto figure out what we&amp;#39;re doing, to</text><text start=\"373.89\" dur=\"2.49\">figure out all the possible\ncombinations.</text><text start=\"376.38\" dur=\"3.16\">So this is an example of a problem where\nalmost certainly we&amp;#39;ll have to</text><text start=\"379.54\" dur=\"3.93\">figure out a heuristic or approximate\nsolution that will let us make some</text><text start=\"383.47\" dur=\"4.48\">progress and hope that it produces,\nas best we can, the</text><text start=\"387.95\" dur=\"2.34\">smallest number of bins.</text><text start=\"390.29\" dur=\"4.41\">For our next example, suppose you worked\nat a cabinet shop and your job</text><text start=\"394.7\" dur=\"5.15\">was to cut doors and cabinet sides\nout of large sheets of plywoods.</text><text start=\"399.85\" dur=\"3.05\">The objective function is\nto minimize the waste.</text><text start=\"402.9\" dur=\"3.48\">What you&amp;#39;d like to do is to take any\nlumber that ends up getting thrown</text><text start=\"406.38\" dur=\"4.11\">away and make sure that&amp;#39;s the least\namount of lumber possible.</text><text start=\"410.49\" dur=\"3.8\">The constraint that you have to satisfy\nis that you can only do</text><text start=\"414.29\" dur=\"1.35\">guillotine cuts.</text><text start=\"415.64\" dur=\"5.73\">Now, in a cabinet shop, you have to use\na table saw to make a cut, and the</text><text start=\"421.37\" dur=\"4.56\">table saws really want to cut all the\nway across a piece of stock, like so.</text><text start=\"425.93\" dur=\"3.91\">So that would be a guillotine cut,\nthe first one you would make.</text><text start=\"429.84\" dur=\"6.54\">So the goal is to figure out a plan for\nlaying out the pattern and then</text><text start=\"436.38\" dur=\"5.12\">the sequence of cuts to minimize the\nwaste and only do guillotine cuts.</text><text start=\"441.5\" dur=\"3.33\">What&amp;#39;s interesting about this particular\nproblem is you notice that</text><text start=\"444.83\" dur=\"3.86\">once we&amp;#39;ve made our first cut,\nwe have a similar subproblem.</text><text start=\"448.69\" dur=\"3.58\">So in other words, now we have a smaller\nproblem that&amp;#39;s exactly the</text><text start=\"452.27\" dur=\"3.78\">same of taking these 3 pieces and laying\nthem out on a smaller piece of</text><text start=\"456.05\" dur=\"2.82\">plywood and solving the\nproblem once again.</text><text start=\"458.87\" dur=\"4.15\">So this is often a structure you find in\noptimization problems, where you&amp;#39;re</text><text start=\"463.02\" dur=\"4.08\">sort of have to think a little bit about\nhow maybe solving the problem</text><text start=\"467.1\" dur=\"5.01\">involves really solving 2 subproblems\nand then looking to see if the</text><text start=\"472.11\" dur=\"5.36\">solution produces a minimum cost.</text><text start=\"477.47\" dur=\"2.65\">Here&amp;#39;s an example with a different\nkind of cutting.</text><text start=\"480.12\" dur=\"3.48\">Imagine that this is a description of\nan electrical grid, and we have a</text><text start=\"483.6\" dur=\"5.73\">generating station at this end, and a\ncity down here at this end, and the</text><text start=\"489.33\" dur=\"3.04\">intermediate points are\nall substations.</text><text start=\"492.37\" dur=\"5.36\">And the arrows represent the capacity\nand the numbers represent transmission</text><text start=\"497.73\" dur=\"1.94\">lines and their capacity.</text><text start=\"499.67\" dur=\"4.6\">And what we&amp;#39;re interested in doing is\ncomputing the maximum flow from the</text><text start=\"504.27\" dur=\"2.88\">starting point down to\nthe ending point.</text><text start=\"507.15\" dur=\"2.8\">How much current can flow\nthrough this network?</text><text start=\"509.95\" dur=\"5.14\">Well, the answer to this problem is\nrelated to the following observation.</text><text start=\"515.09\" dur=\"4.5\">Suppose we make a cut through the\nnetwork, and we realize that--</text><text start=\"519.59\" dur=\"4.52\">so a cut would divide the network in\nhalf so that s is in one half and t is</text><text start=\"524.11\" dur=\"1.28\">in the other half.</text><text start=\"525.39\" dur=\"4.3\">And we realize that all the current\nflowing from s to t would have to</text><text start=\"529.69\" dur=\"1.4\">cross that cut.</text><text start=\"531.09\" dur=\"5.18\">What we would like to do is to find the\ncut, that so-called min cut, the</text><text start=\"536.27\" dur=\"1.24\">minimum cut.</text><text start=\"537.51\" dur=\"2.58\">And what we&amp;#39;d like to\ndo is to minimize--</text><text start=\"540.09\" dur=\"6.66\">OK, if we look at the capacity of all\nthe cut edges, what we&amp;#39;d like to do is</text><text start=\"546.75\" dur=\"5.73\">to sum up that capacity, and we&amp;#39;d\nlike to minimize that sum.</text><text start=\"552.48\" dur=\"4.66\">So if we find the min cut through the\nnetwork, that will actually tell us</text><text start=\"557.14\" dur=\"4.2\">the maximum flow that\ncan go from s to t.</text><text start=\"561.34\" dur=\"3.65\">As you can see, there&amp;#39;s a lot of\npossible ways to make cuts in this</text><text start=\"564.99\" dur=\"4.92\">network, and to do so without examining\nevery possible cut is sort</text><text start=\"569.91\" dur=\"1.992\">of a tricky business.</text><text start=\"571.902\" dur=\"4.688\">As a final example, consider the problem\na traveling salesman faces.</text><text start=\"576.59\" dur=\"3.92\">He has a territory with cities with\nrail lines connecting the cities.</text><text start=\"580.51\" dur=\"4.14\">He would like to find the minimum cost\ntrip that&amp;#39;s subject to the following</text><text start=\"584.65\" dur=\"1.28\">constraints.</text><text start=\"585.93\" dur=\"5.04\">He&amp;#39;d like to visit each city exactly\nonce, and at the end of the journey,</text><text start=\"590.97\" dur=\"3.24\">he would like to return home.</text><text start=\"594.21\" dur=\"2.41\">So this is one of the classic\ngraph problems.</text><text start=\"596.62\" dur=\"6.43\">So the vertices represent cities, the\nlines represent the opportunities to</text><text start=\"603.05\" dur=\"5.77\">travel from one city to another, and\nthe goal here is to find a path now</text><text start=\"608.82\" dur=\"5.54\">through this graph of cities that visits\neach city exactly once and</text><text start=\"614.36\" dur=\"1.86\">returns to the start.</text><text start=\"616.22\" dur=\"3.24\">Now the question is is that the\nminimum cost, such trip.</text><text start=\"619.46\" dur=\"3.54\">Can we figure out a way to do this that\ndoesn&amp;#39;t involve enumerating every</text><text start=\"623\" dur=\"1.58\">possible trip?</text><text start=\"624.58\" dur=\"4.7\">The challenge of optimization problems\nis that they are hard to solve.</text><text start=\"629.28\" dur=\"3.55\">Hard in the sense that finding the\nsolution you&amp;#39;re looking for, the</text><text start=\"632.83\" dur=\"3.8\">optimal solution, requires examining\nall the possible</text><text start=\"636.63\" dur=\"2.25\">combinations of items.</text><text start=\"638.88\" dur=\"5.69\">So that&amp;#39;s why this field is often\ngiven the name combinatorial, so</text><text start=\"644.57\" dur=\"3.91\">studying of all the different\ncombinations, optimization, because</text><text start=\"648.48\" dur=\"4\">we&amp;#39;re going to then look through each\nof the possible combinations and see</text><text start=\"652.48\" dur=\"4.62\">if it&amp;#39;s the one that is the best\nsolution to the problem that we have.</text><text start=\"657.1\" dur=\"4.11\">The reason it&amp;#39;s hard is that the time\nto examine all the combinations of a</text><text start=\"661.21\" dur=\"3.8\">set of items grows exponentially\nwith the number of items.</text><text start=\"665.01\" dur=\"4.02\">And what I mean by that is if I go ahead\nand add a single item to the</text><text start=\"669.03\" dur=\"3.93\">collection, if I think about now all\nthe possible combinations of items,</text><text start=\"672.96\" dur=\"4.22\">what I will discover is that I will\nhave a doubled the number of</text><text start=\"677.18\" dur=\"1.18\">combinations.</text><text start=\"678.36\" dur=\"5.51\">And so as I go from 1 to 2 to 4, the\nproblem is getting exponentially</text><text start=\"683.87\" dur=\"3.78\">harder, twice as hard each time.</text><text start=\"687.65\" dur=\"4.22\">And the reason that&amp;#39;s a problem is that\nreal world challenges often have</text><text start=\"691.87\" dur=\"2.93\">a very large number of items\nthat you need to consider.</text><text start=\"694.8\" dur=\"4.19\">So as the problem is growing\nexponentially more difficult with each</text><text start=\"698.99\" dur=\"5.78\">item, we can see that if we have 50\nitems that the problem may, in fact,</text><text start=\"704.77\" dur=\"4.19\">take us too long to solve using the\nexhaustive techniques of looking at</text><text start=\"708.96\" dur=\"1.79\">each possible combination.</text><text start=\"710.75\" dur=\"5.12\">So instead, we&amp;#39;re going to have to look\naround for approximate solutions</text><text start=\"715.87\" dur=\"1.54\">to these problems.</text><text start=\"717.41\" dur=\"4.96\">We give that the fancy computer science\nterm of heuristics, something</text><text start=\"722.37\" dur=\"4.21\">that will let us not examine all the\nsolutions but come up with a solution</text><text start=\"726.58\" dur=\"1.25\">more quickly.</text><text start=\"727.83\" dur=\"0.56\"></text></transcript>\n", "-8T8AXxVFZg": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.71\"></text><text start=\"0.71\" dur=\"2.81\">Eric Grimson: OK, so we want to\nthink about computational</text><text start=\"3.52\" dur=\"1.1\">problem solving.</text><text start=\"4.62\" dur=\"1.79\">We want to understand, what\ndoes it mean to think</text><text start=\"6.41\" dur=\"1.452\">computationally?</text><text start=\"7.862\" dur=\"2.358\">That leads to the philosophical\nquestion, so</text><text start=\"10.22\" dur=\"1.3\">what&amp;#39;s computation?</text><text start=\"11.52\" dur=\"2.37\">And like a good philosophical\nquestion, that leads to</text><text start=\"13.89\" dur=\"2.375\">another, deeper philosophical\nquestion.</text><text start=\"16.265\" dur=\"2.675\">To answer that question of\nwhat&amp;#39;s computation, let&amp;#39;s</text><text start=\"18.94\" dur=\"3.33\">start by asking the question,\nwhat is knowledge?</text><text start=\"22.27\" dur=\"1.54\">And, as we&amp;#39;re going to\nsee, we can divide</text><text start=\"23.81\" dur=\"1.68\">knowledge up into 2 parts.</text><text start=\"25.49\" dur=\"2.4\">There&amp;#39;s declarative knowledge,\nwhich we can think of the</text><text start=\"27.89\" dur=\"1.52\">statements of fact.</text><text start=\"29.41\" dur=\"0.91\">And there&amp;#39;s imperative</text><text start=\"30.32\" dur=\"2.81\">knowledge, or how to&amp;#39;s methods.</text><text start=\"33.13\" dur=\"3.61\">Statements of facts give us\ntrue, but, as we&amp;#39;ll see, they</text><text start=\"36.74\" dur=\"2.27\">don&amp;#39;t necessarily help us think\nabout how to find new</text><text start=\"39.01\" dur=\"1.24\">information.</text><text start=\"40.25\" dur=\"3.2\">Imperative knowledge, how to\nmethods or recipes, give us</text><text start=\"43.45\" dur=\"2.4\">ways of finding new information,\nand that&amp;#39;s going</text><text start=\"45.85\" dur=\"2.11\">to be really valuable to us.</text><text start=\"47.96\" dur=\"3.69\">Now, to look at this, let&amp;#39;s\nlook at an example.</text><text start=\"51.65\" dur=\"1.86\">So, what do we mean by\ndeclarative knowledge?</text><text start=\"53.51\" dur=\"2.722\">Well, here&amp;#39;s a piece of\ndeclarative knowledge.</text><text start=\"56.232\" dur=\"4.308\">That first statement says, the\nsquare root of a number x is a</text><text start=\"60.54\" dur=\"3.21\">number y such that y * y = x .</text><text start=\"63.75\" dur=\"3.03\">You know that&amp;#39;s true from\nhigh school algebra.</text><text start=\"66.78\" dur=\"2.04\">It&amp;#39;s a statement of truth.</text><text start=\"68.82\" dur=\"4.31\">It tells us something about\nhow to decide whether a</text><text start=\"73.13\" dur=\"3.27\">particular number is a square\nroot or not, but can we use</text><text start=\"76.4\" dur=\"2.37\">this to actually find\na square root?</text><text start=\"78.77\" dur=\"1.37\">And the answer is no.</text><text start=\"80.14\" dur=\"3.99\">If we have a number x equal to\n25 and we&amp;#39;re trying to find</text><text start=\"84.13\" dur=\"3.05\">the square root of that, and\nsomebody gives us a guess y =</text><text start=\"87.18\" dur=\"5.09\">5, we can use this statement to\ntest to see if 5 * 5 = 25 ,</text><text start=\"92.27\" dur=\"1.08\">which it does.</text><text start=\"93.35\" dur=\"2.33\">But it doesn&amp;#39;t tell us how\nto find the guess.</text><text start=\"95.68\" dur=\"2.24\">So declarative knowledge,\nwhich is what much of</text><text start=\"97.92\" dur=\"2.56\">knowledge is based on,\nisn&amp;#39;t what we need.</text><text start=\"100.48\" dur=\"3.84\">We want a different kind of\nknowledge, and for that,</text><text start=\"104.32\" dur=\"3.27\">fortunately, we have imperative\nknowledge.</text><text start=\"107.59\" dur=\"2.56\">As we said, imperative knowledge\nis how to kinds of</text><text start=\"110.15\" dur=\"4.02\">knowledge, or methods or recipes\nfor finding something,</text><text start=\"114.17\" dur=\"3.015\">and here&amp;#39;s a recipe for\ndeducing square root.</text><text start=\"117.185\" dur=\"2.565\">It&amp;#39;s actually attributed to\nHeron of Alexandria, although</text><text start=\"119.75\" dur=\"2.7\">there&amp;#39;s some debate as to\nwhether he was the original</text><text start=\"122.45\" dur=\"2.5\">creator of this algorithm, but\nit dates from the first</text><text start=\"124.95\" dur=\"1.58\">century AD.</text><text start=\"126.53\" dur=\"2.03\">And you can see the\ndescription here.</text><text start=\"128.56\" dur=\"2.329\">Description says if I want to\nfind the square root of some</text><text start=\"130.889\" dur=\"1.961\">number x, I&amp;#39;m going to\nstart with a guess.</text><text start=\"132.85\" dur=\"1.39\">I&amp;#39;ll call it g.</text><text start=\"134.24\" dur=\"2.65\">I&amp;#39;m going to take g and multiply\nit by itself and look</text><text start=\"136.89\" dur=\"2.48\">if that result is close\nenough to x.</text><text start=\"139.37\" dur=\"3.82\">If it is, I&amp;#39;m going to stop, and\nsay that g is the answer.</text><text start=\"143.19\" dur=\"3.77\">Otherwise, I&amp;#39;m going to make a\nnew guess by averaging g and</text><text start=\"146.96\" dur=\"3.94\">x/g , and using this new guess,\nwhich I will call g</text><text start=\"150.9\" dur=\"2.89\">again, I&amp;#39;m going to repeat the\nprocess until we get something</text><text start=\"153.79\" dur=\"2.08\">that&amp;#39;s close enough.</text><text start=\"155.87\" dur=\"3.3\">Notice, this is a mechanical set\nof steps and it has some</text><text start=\"159.17\" dur=\"1.31\">basic forms.</text><text start=\"160.48\" dur=\"2.4\">Right here there&amp;#39;s a test.</text><text start=\"162.88\" dur=\"2.6\">It&amp;#39;s going to let us know\nwhen we&amp;#39;re done,</text><text start=\"165.48\" dur=\"1.712\">when we&amp;#39;re close enough.</text><text start=\"167.192\" dur=\"3.278\">If that test isn&amp;#39;t satisfied,\nthen there&amp;#39;s some simple</text><text start=\"170.47\" dur=\"4.913\">calculations, like here, that\ntells us what to do.</text><text start=\"175.383\" dur=\"4.877\">And then, finally, there&amp;#39;s a\nflow of control, or a loop,</text><text start=\"180.26\" dur=\"4.18\">that tells us how to keep\nexecuting the same sequence of</text><text start=\"184.44\" dur=\"2.25\">operations until we\nget, in fact, to a</text><text start=\"186.69\" dur=\"1.59\">place where we&amp;#39;re done.</text><text start=\"188.28\" dur=\"3.89\">This is something that tells us\nhow to find a square root.</text><text start=\"192.17\" dur=\"3.33\">This is imperative knowledge\nand this is what we want.</text><text start=\"195.5\" dur=\"1.15\">OK, let&amp;#39;s try it out.</text><text start=\"196.65\" dur=\"1.43\">Here&amp;#39;s a little description\nof that.</text><text start=\"198.08\" dur=\"2.56\">Let&amp;#39;s see what happens if we\nwere actually to do it.</text><text start=\"200.64\" dur=\"2.25\">So I&amp;#39;m going to do a simple\nlittle simulation.</text><text start=\"202.89\" dur=\"1.45\">I want to find the square\nroot of 25.</text><text start=\"204.34\" dur=\"2.94\">And, yeah, I know the answer\nis 5, but let&amp;#39;s think about</text><text start=\"207.28\" dur=\"0.66\">what might happen here.</text><text start=\"207.94\" dur=\"1.75\">I&amp;#39;m going to start with a guess\nand I&amp;#39;m just going to</text><text start=\"209.69\" dur=\"2.61\">initially guess 3.</text><text start=\"212.3\" dur=\"1.74\">Heron of Alexandria&amp;#39;s\nalgorithm says</text><text start=\"214.04\" dur=\"2.04\">multiply 3 by itself.</text><text start=\"216.08\" dur=\"1.804\">That, of course, gives me 9.</text><text start=\"217.884\" dur=\"2.706\">Is 9 close enough to 25?</text><text start=\"220.59\" dur=\"7.03\">I don&amp;#39;t think so, so let&amp;#39;s get\nx/g , which is about 8.33.</text><text start=\"227.62\" dur=\"3.86\">And now, let&amp;#39;s take the\naverage of x/g and g.</text><text start=\"231.48\" dur=\"3.08\">So we add g and x/g ,\ntake the average of</text><text start=\"234.56\" dur=\"3.85\">that, and we get 5.67.</text><text start=\"238.41\" dur=\"2.26\">And then our little\nrecipe says take</text><text start=\"240.67\" dur=\"1.42\">that and do it again.</text><text start=\"242.09\" dur=\"5.83\">So this now becomes my\nnew guess, 5.67.</text><text start=\"247.92\" dur=\"1.43\">I multiply those together.</text><text start=\"249.35\" dur=\"3.013\">I happen to know that comes\nout to be about 32.5.</text><text start=\"252.363\" dur=\"3.347\">I&amp;#39;ve gotten closer to 25, but it\nain&amp;#39;t there yet, so that&amp;#39;s</text><text start=\"255.71\" dur=\"1.14\">not close enough.</text><text start=\"256.85\" dur=\"3.979\">Again, let&amp;#39;s take x divided by\nthis g which turns out to be</text><text start=\"260.829\" dur=\"6.841\">about 4.41, and then I take g\nand x/g and I average them,</text><text start=\"267.67\" dur=\"3.31\">and I get 5.04.</text><text start=\"270.98\" dur=\"3.48\">And my algorithm says,\nmy recipe says, take</text><text start=\"274.46\" dur=\"3.16\">this and do it again.</text><text start=\"277.62\" dur=\"5.04\">5.04 multiplied by itself is\nabout 25.4, and I&amp;#39;m going to</text><text start=\"282.66\" dur=\"2.45\">say, you know what, that&amp;#39;s close\nenough, so my little</text><text start=\"285.11\" dur=\"2.81\">recipe says there&amp;#39;s\nthe answer.</text><text start=\"287.92\" dur=\"2.8\">Not perfect, but close enough.</text><text start=\"290.72\" dur=\"1.77\">So, Heron had it right.</text><text start=\"292.49\" dur=\"1.49\">This looks like a pretty\ngood algorithm.</text><text start=\"293.98\" dur=\"3.14\">This is a way of describing a\nmethod for doing something,</text><text start=\"297.12\" dur=\"3.29\">and that idea, that notion of\na recipe, is something we&amp;#39;re</text><text start=\"300.41\" dur=\"1.4\">going to use a lot.</text><text start=\"301.81\" dur=\"3.29\">So we can think of algorithms as\nbeing recipes, sequences of</text><text start=\"305.1\" dur=\"2.85\">mechanical steps for\ndoing something.</text><text start=\"307.95\" dur=\"2.05\">We put that analogy to a little\nbit more use, we can</text><text start=\"310\" dur=\"3.19\">see that recipes have much of\nthe same form, real recipes.</text><text start=\"313.19\" dur=\"2.11\">Imagine I want to make\nsome custard.</text><text start=\"315.3\" dur=\"0.81\">Here&amp;#39;s my recipe.</text><text start=\"316.11\" dur=\"1.59\">I&amp;#39;m going to take all the\ningredients of the custard,</text><text start=\"317.7\" dur=\"3.02\">that mixture, put it into a pot\nover some heat, and I&amp;#39;m</text><text start=\"320.72\" dur=\"1.76\">going to stir it.</text><text start=\"322.48\" dur=\"2.36\">As I stir it, every once in a\nwhile, I&amp;#39;ll dip a spoon into</text><text start=\"324.84\" dur=\"2.91\">the custard, pull it out, and\nrun my finger across the back</text><text start=\"327.75\" dur=\"1.29\">of the spoon.</text><text start=\"329.04\" dur=\"2.58\">If the spoon is clear, then\nI&amp;#39;m done and I&amp;#39;m going to</text><text start=\"331.62\" dur=\"2.86\">remove the custard from the\nheat and let it cool.</text><text start=\"334.48\" dur=\"1.82\">If not, I&amp;#39;m going to repeat.</text><text start=\"336.3\" dur=\"1.38\">And notice what we have here.</text><text start=\"337.68\" dur=\"4.37\">Again, we&amp;#39;ve got a test,\nright there.</text><text start=\"342.05\" dur=\"1.97\">And we&amp;#39;ve got a way\nof, in fact,</text><text start=\"344.02\" dur=\"1.37\">changing the flow of control.</text><text start=\"345.39\" dur=\"4.98\">So, normally, the flow runs this\nway, but based on that</text><text start=\"350.37\" dur=\"3.08\">test, we have a way of\ngoing back up and</text><text start=\"353.45\" dur=\"1.43\">continuing the path.</text><text start=\"354.88\" dur=\"2.82\">And this pattern is something\nwe&amp;#39;re going to repeat a lot.</text><text start=\"357.7\" dur=\"3.68\">So, you want to capture recipes\nand we need to figure</text><text start=\"361.38\" dur=\"2.44\">out how to get the computer to\ndo that for us, which is what</text><text start=\"363.82\" dur=\"1.25\">we&amp;#39;re going to talk about next.</text><text start=\"365.07\" dur=\"1.1\"></text></transcript>\n", "3nWlFHGKNAk": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.92\"></text><text start=\"0.92\" dur=\"2.74\">ERIC GRIMSON: We&amp;#39;ve been looking\nat optimization problems.</text><text start=\"3.66\" dur=\"3.82\">These are problems where we want to find\na solution that satisfies some</text><text start=\"7.48\" dur=\"3.63\">function, some measure, some\nestimate of performance.</text><text start=\"11.11\" dur=\"3.27\">And we&amp;#39;ve seen that often those\noptimization problems can be thought</text><text start=\"14.38\" dur=\"1.54\">of as search problems.</text><text start=\"15.92\" dur=\"2.9\">We write an algorithm that looks\nthrough the space of possible</text><text start=\"18.82\" dur=\"4.17\">solutions, trying to find a solution\nthat maximizes or minimizes some</text><text start=\"22.99\" dur=\"1.4\">measure of success.</text><text start=\"24.39\" dur=\"4.02\">And, ideally, we&amp;#39;ve seen that those\nsolutions, or those search solutions,</text><text start=\"28.41\" dur=\"0.83\">will be efficient.</text><text start=\"29.24\" dur=\"1.88\">They may not look at the entire space.</text><text start=\"31.12\" dur=\"2.78\">They&amp;#39;ll take advantage of the structure\nof the problem to find</text><text start=\"33.9\" dur=\"4.31\">efficient ways to maximize\nsome measure.</text><text start=\"38.21\" dur=\"3.2\">We want to generalize that idea to take\nit in a different direction, and</text><text start=\"41.41\" dur=\"2.86\">we&amp;#39;re going to take it in a different\ndirection by looking at optimization</text><text start=\"44.27\" dur=\"2.4\">problems over graphs.</text><text start=\"46.67\" dur=\"1.54\">So what&amp;#39;s a graph?</text><text start=\"48.21\" dur=\"2.3\">Well, let me give you an example.</text><text start=\"50.51\" dur=\"3.58\">Imagine you are a college student, which\nyou may well be, and you want to</text><text start=\"54.09\" dur=\"1.34\">go home for the holidays.</text><text start=\"55.43\" dur=\"2.99\">So you&amp;#39;d like to plan a flight\nthat gets you there.</text><text start=\"58.42\" dur=\"3.33\">Imagine you had data on all the flights\nbetween cities in the US, or</text><text start=\"61.75\" dur=\"5.22\">major cities within the US, including\ninformation about the prices.</text><text start=\"66.97\" dur=\"5.17\">Let&amp;#39;s also assume that for any pair of\ncities, A and C, if I want to fly from</text><text start=\"72.14\" dur=\"4.96\">A to C through B, that is, A to B to C,\nthe cost of that flight A to C is</text><text start=\"77.1\" dur=\"5.79\">the same as the cost from A to B and the\ncost from B to C. If I have that,</text><text start=\"82.89\" dur=\"0.92\">what might I like to know?</text><text start=\"83.81\" dur=\"3.07\">Well, I might like to know what&amp;#39;s the\nbest set of flights that has the</text><text start=\"86.88\" dur=\"2.31\">fewest stops between two cities.</text><text start=\"89.19\" dur=\"4.56\">I might like to know what&amp;#39;s the least\nexpensive airfare between two cities.</text><text start=\"93.75\" dur=\"3.94\">Or, even constrained things like what&amp;#39;s\nthe cheapest flight from A to C</text><text start=\"97.69\" dur=\"4.11\">that doesn&amp;#39;t go through more than one\nother stop along the way or no more</text><text start=\"101.8\" dur=\"3.01\">than two other stops along the way.</text><text start=\"104.81\" dur=\"2.71\">All right, so you can imagine\nI might like to do this.</text><text start=\"107.52\" dur=\"2.24\">What does a graph have\nto do with this?</text><text start=\"109.76\" dur=\"3.71\">Well, let&amp;#39;s think about how\nto capture this problem.</text><text start=\"113.47\" dur=\"2.72\">Here&amp;#39;s a map of the United States,\nwhere I&amp;#39;ve marked off some of the</text><text start=\"116.19\" dur=\"4.76\">major hubs, that is, airports through\nwhich airlines fly with a large number</text><text start=\"120.95\" dur=\"6.75\">of flights, so San Francisco,\nLA, Chicago, for example.</text><text start=\"127.7\" dur=\"3.07\">Each one of these cities I&amp;#39;ve marked\nhere I can think of as an</text><text start=\"130.77\" dur=\"1.04\">element of the graph.</text><text start=\"131.81\" dur=\"3.08\">It&amp;#39;s a piece of information, an object,\nif you want to think of this</text><text start=\"134.89\" dur=\"3.65\">in terms of our object-oriented system,\nwith some information on it.</text><text start=\"138.54\" dur=\"1.51\">What else would I like to know?</text><text start=\"140.05\" dur=\"2.9\">Well, I&amp;#39;d like to know where\nare the flights.</text><text start=\"142.95\" dur=\"4.75\">So I could mark in all the connections\nbetween these hubs, that is, places</text><text start=\"147.7\" dur=\"3.11\">where there is a flight, a direct flight\nfrom one point to another.</text><text start=\"150.81\" dur=\"6.12\">So for example, from San Francisco\nto Denver, there&amp;#39;s a flight.</text><text start=\"156.93\" dur=\"4.075\">Now having marked those in, let&amp;#39;s\nabstract away this problem.</text><text start=\"161.005\" dur=\"3.625\">Let&amp;#39;s throw away the map and just\ncapture an abstraction.</text><text start=\"164.63\" dur=\"2.17\">And now I have a graph.</text><text start=\"166.8\" dur=\"1.18\">And what&amp;#39;s the graph?</text><text start=\"167.98\" dur=\"3.96\">Well, it&amp;#39;s got some nodes, or\nelements, with information</text><text start=\"171.94\" dur=\"1.33\">associated with them.</text><text start=\"173.27\" dur=\"5.83\">And it has some edges, or connections,\nthings that link those nodes.</text><text start=\"179.1\" dur=\"2.95\">Let me describe that a little\nmore carefully.</text><text start=\"182.05\" dur=\"2.38\">A graph is two things.</text><text start=\"184.43\" dur=\"5.42\">It&amp;#39;s a set of nodes or vertices, my blue\ndots in that previous diagram.</text><text start=\"189.85\" dur=\"5.51\">And those nodes or vertices are\nconnected by a set of edges or arcs,</text><text start=\"195.36\" dur=\"1.97\">arrows in this case.</text><text start=\"197.33\" dur=\"3.17\">Those edges indicate relationships\nbetween the nodes, and we&amp;#39;re going to</text><text start=\"200.5\" dur=\"3.72\">use that in a second to actually\nthink about doing optimization.</text><text start=\"204.22\" dur=\"2.46\">Now, if the edges are\nuni-directional--</text><text start=\"206.68\" dur=\"2.91\">they only go one way, you can only\nfly from San Francisco to</text><text start=\"209.59\" dur=\"2.06\">Chicago but not back--</text><text start=\"211.65\" dur=\"4.33\">then we say the graph is a directed\ngraph or a digraph, and the arrows</text><text start=\"215.98\" dur=\"2.86\">here would be one directional.</text><text start=\"218.84\" dur=\"3.75\">If they go both ways, we\njust say it&amp;#39;s a graph.</text><text start=\"222.59\" dur=\"3.87\">If we think about my example, I could\nimagine finding paths through that</text><text start=\"226.46\" dur=\"4.54\">graph from one airport to another\nthat minimizes the number of</text><text start=\"231\" dur=\"1.44\">stops along the way.</text><text start=\"232.44\" dur=\"2.91\">That would just be the fewest number\nof edges I have to pass through in</text><text start=\"235.35\" dur=\"1.38\">order to get there.</text><text start=\"236.73\" dur=\"2.99\">But if I want to know about cost,\nI need additional information.</text><text start=\"239.72\" dur=\"3.37\">And so often with a graph, I&amp;#39;m going\nto have other information.</text><text start=\"243.09\" dur=\"5.31\">If we add a weight, or a cost, to each\nedge, then we say the graph is a</text><text start=\"248.4\" dur=\"4.01\">weighted graph and that says I can\nsolve other kinds of problems.</text><text start=\"252.41\" dur=\"4.84\">So for example, here I&amp;#39;ve added in, for\neach edge, the cost, the cost of a</text><text start=\"257.25\" dur=\"1.99\">flight between those two cities.</text><text start=\"259.24\" dur=\"4.43\">And now I can actually start answering\nquestions like, what would be the best</text><text start=\"263.67\" dur=\"5.76\">flight from San Francisco all the way\nout here, for example, to Boston that</text><text start=\"269.43\" dur=\"5.22\">minimizes, for example, the total cost,\nor it minimizes the total cost</text><text start=\"274.65\" dur=\"2.97\">subject only going through one\nor two additional cities.</text><text start=\"277.62\" dur=\"1.94\">Now I can start thinking\nabout optimization</text><text start=\"279.56\" dur=\"2.39\">problems over these graphs.</text><text start=\"281.95\" dur=\"2.15\">This is actually going to\nbe really powerful.</text><text start=\"284.1\" dur=\"1.85\">Now why are these actually useful?</text><text start=\"285.95\" dur=\"6.13\">Well, graphs let us represent a wide\nrange of different kinds of problems.</text><text start=\"292.08\" dur=\"3.64\">And they lead, naturally, to questions\nthat could be answered by a particular</text><text start=\"295.72\" dur=\"1.8\">kind of search problem, something\nwe&amp;#39;re going to deal</text><text start=\"297.52\" dur=\"2.02\">with in this lecture.</text><text start=\"299.54\" dur=\"3.09\">We&amp;#39;ve talked about it in terms of\ntransportation networks, that&amp;#39;s kind</text><text start=\"302.63\" dur=\"0.47\">of obvious.</text><text start=\"303.1\" dur=\"3.33\">But there are lots of other places where\na graph is a very natural way of</text><text start=\"306.43\" dur=\"1.79\">capturing a problem.</text><text start=\"308.22\" dur=\"1.5\">Web traffic--</text><text start=\"309.72\" dur=\"1.63\">imagine I&amp;#39;ve got a set of web pages.</text><text start=\"311.35\" dur=\"1.86\">Those could be the nodes in my graph.</text><text start=\"313.21\" dur=\"1.5\">The edges would be the links.</text><text start=\"314.71\" dur=\"4.07\">A page links to another page, and note\nthey may be one directional.</text><text start=\"318.78\" dur=\"3.18\">And then, the weights could be how\noften are those links used, and I</text><text start=\"321.96\" dur=\"3.33\">could ask questions about traffic\nin a particular collection of</text><text start=\"325.29\" dur=\"1.82\">pages on the web.</text><text start=\"327.11\" dur=\"4.29\">Another nice example is epidemiology,\ndealing with diseases.</text><text start=\"331.4\" dur=\"3.73\">If I want to track the spread of a\ndisease, I might gather information</text><text start=\"335.13\" dur=\"3.29\">where the nodes are people with\ninformation about the disease.</text><text start=\"338.42\" dur=\"1.05\">They have the disease.</text><text start=\"339.47\" dur=\"1.46\">They&amp;#39;ve been exposed to the disease.</text><text start=\"340.93\" dur=\"1.6\">They&amp;#39;re immune to the disease.</text><text start=\"342.53\" dur=\"3.33\">The edges would indicate interactions\nbetween those people.</text><text start=\"345.86\" dur=\"0.93\">They know each other.</text><text start=\"346.79\" dur=\"1.48\">They know each other well.</text><text start=\"348.27\" dur=\"3.58\">And the weights, in fact, would capture\nexactly that, the level of</text><text start=\"351.85\" dur=\"1.17\">interaction.</text><text start=\"353.02\" dur=\"3.47\">And using that, I could track the\nspread of a disease to try and</text><text start=\"356.49\" dur=\"4.12\">identify the sources, to try and\nidentify populations that are isolated</text><text start=\"360.61\" dur=\"1.57\">from other populations.</text><text start=\"362.18\" dur=\"3.8\">We&amp;#39;ll see lots of examples of using\ngraphs, and especially solving</text><text start=\"365.98\" dur=\"1.95\">optimization problems,\nover those graphs.</text><text start=\"367.93\" dur=\"1.25\"></text></transcript>\n", "8iQAhz7rzVs": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.16\"></text><text start=\"1.16\" dur=\"2.46\">PROFESSOR: As scientists and engineers,\nthe way we understand the</text><text start=\"3.62\" dur=\"4.31\">world around us is design experiments\nand take measurements.</text><text start=\"7.93\" dur=\"5.34\">The world&amp;#39;s a complex place, however,\nand those complexities often conspire</text><text start=\"13.27\" dur=\"3.33\">to make the measurement process\nsomewhat problematic.</text><text start=\"16.6\" dur=\"4.23\">Vibration, temperature, electrical\ninterference can all have subtle</text><text start=\"20.83\" dur=\"3.33\">influences on the measurements\nthat we&amp;#39;re taking.</text><text start=\"24.16\" dur=\"4.6\">Our goal in this lecture is to study how\ncomputation can help us understand</text><text start=\"28.76\" dur=\"6.87\">our experimental data and process it to\nhelp reveal the underlying truths.</text><text start=\"35.63\" dur=\"3.65\">As a first step in understanding\nexperimental data, let&amp;#39;s remind</text><text start=\"39.28\" dur=\"2.49\">ourselves what we&amp;#39;re about.</text><text start=\"41.77\" dur=\"5.39\">So usually one of the first things we do\nis to develop an hypothesis of how</text><text start=\"47.16\" dur=\"1.41\">things work.</text><text start=\"48.57\" dur=\"4.59\">So this is a simple statement that\nsays if I do x, y will happen or</text><text start=\"53.16\" dur=\"1.42\">something equivalent to that.</text><text start=\"54.58\" dur=\"6.31\">If we have a hypothesis, we&amp;#39;ll quickly\nwant to design an experiment and then</text><text start=\"60.89\" dur=\"1.32\">take some measurements.</text><text start=\"62.21\" dur=\"4.17\">And it&amp;#39;s really these measurements that\nwill tell us what the results of</text><text start=\"66.38\" dur=\"1.69\">the experiment were.</text><text start=\"68.07\" dur=\"3.55\">And in fact, we often will interchange\nthe order of these two things.</text><text start=\"71.62\" dur=\"3.76\">Sometimes, we&amp;#39;ve measured, done some\nexperiments, and we&amp;#39;re interested in</text><text start=\"75.38\" dur=\"2.75\">making a hypothesis that\nexplains the results.</text><text start=\"78.13\" dur=\"3.93\">Other times, we have a theory about how\nsomething works, and we&amp;#39;re trying</text><text start=\"82.06\" dur=\"2.94\">to design an experiment\nto prove the theory.</text><text start=\"85\" dur=\"3.73\">In either case, once we have the\nmeasurements, then we&amp;#39;re going to use</text><text start=\"88.73\" dur=\"2.45\">computation to do several things.</text><text start=\"91.18\" dur=\"4.24\">The first thing we&amp;#39;re going to do is\nprobably evaluate the hypothesis.</text><text start=\"95.42\" dur=\"3.91\">What we&amp;#39;d like to do is determine if the\nmeasurements we made give us some</text><text start=\"99.33\" dur=\"3.58\">evidence that, in fact, our\nhypothesis is true.</text><text start=\"102.91\" dur=\"3.55\">The hypothesis may involve a certain\nunknown, some constant to</text><text start=\"106.46\" dur=\"3.89\">proportionality, and one of the things\nwe&amp;#39;d like to do with the measurements</text><text start=\"110.35\" dur=\"5.03\">if we decided that, in fact, the\nhypothesis is true is determine the</text><text start=\"115.38\" dur=\"6.28\">values of these unknowns\nin the hypothesis.</text><text start=\"121.66\" dur=\"2.7\">And finally, and this is maybe one of\nthe most important things that we&amp;#39;re</text><text start=\"124.36\" dur=\"5.279\">going to use computation for, is if we\nhave a validated hypothesis, we would</text><text start=\"129.639\" dur=\"3.011\">like to use it to predict\nconsequences.</text><text start=\"132.65\" dur=\"3.4\">And in fact, these may be consequences\nthat would be very hard to do</text><text start=\"136.05\" dur=\"2.1\">experimentally or very costly.</text><text start=\"138.15\" dur=\"4.28\">So, for example, if we&amp;#39;ve understood\norbital mechanics, we may wish to use</text><text start=\"142.43\" dur=\"4.19\">the computer to use the mathematical\nmodel of orbital mechanics to predict</text><text start=\"146.62\" dur=\"4.79\">the trajectory we should take in\norder to successfully have a</text><text start=\"151.41\" dur=\"3.11\">rover arrive at Mars.</text><text start=\"154.52\" dur=\"3.04\">Let&amp;#39;s see how this might\nwork in practice.</text><text start=\"157.56\" dur=\"5.55\">In 1676, the English scientist Robert\nHooke proposed the following</text><text start=\"163.11\" dur=\"2.69\">hypothesis about how springs work.</text><text start=\"165.8\" dur=\"4.08\">&amp;quot;The power of any springy body is\nin the same proportion with the</text><text start=\"169.88\" dur=\"0.99\">extension.&amp;quot;</text><text start=\"170.87\" dur=\"1.75\">So let&amp;#39;s see what he&amp;#39;s\ntalking about here.</text><text start=\"172.62\" dur=\"3.37\">So, if we take this common piece of\ngym equipment-- a bunch of springs</text><text start=\"175.99\" dur=\"4.52\">with handles on it-- and we bolt one\nhandle to the wall, and then we start</text><text start=\"180.51\" dur=\"2.33\">pulling on the other end of\nthe spring-- we apply</text><text start=\"182.84\" dur=\"1.33\">some force this way--</text><text start=\"184.17\" dur=\"1.19\">the spring will stretch.</text><text start=\"185.36\" dur=\"4.85\">And, in fact, we can measure the amount\nof stretch, and we&amp;#39;ll call that</text><text start=\"190.21\" dur=\"2.43\">the extension.</text><text start=\"192.64\" dur=\"4.2\">And as anybody who&amp;#39;s tried this knows\nfrom experience, the farther you</text><text start=\"196.84\" dur=\"3.41\">stretch it, the harder the spring is\npulling in the opposite direction.</text><text start=\"200.25\" dur=\"4.23\">So the spring will busily be exerting\nsome force to counteract the</text><text start=\"204.48\" dur=\"3.835\">extension, and that force will be\nproportional to the amount of stretch</text><text start=\"208.315\" dur=\"1.595\">that you&amp;#39;re putting into it.</text><text start=\"209.91\" dur=\"4.78\">And that constant of proportionality\nis called the spring constant.</text><text start=\"214.69\" dur=\"4.44\">If k is small, it&amp;#39;s a very weak spring,\nand in fact, it doesn&amp;#39;t take</text><text start=\"219.13\" dur=\"2.7\">much force to either compress\nor extend it.</text><text start=\"221.83\" dur=\"2.555\">For example, a ballpoint pen\ncan easily be controlled.</text><text start=\"224.385\" dur=\"3.975\">The little spring inside can\nbe compressed with a single</text><text start=\"228.36\" dur=\"1.59\">push of your finger.</text><text start=\"229.95\" dur=\"3.49\">On the other hand, if the spring\nconstant is large, that means it&amp;#39;s a</text><text start=\"233.44\" dur=\"1.47\">very stiff spring.</text><text start=\"234.91\" dur=\"4.43\">So, example of a very stiff the spring\nis like a car spring, where it takes a</text><text start=\"239.34\" dur=\"4.63\">tremendous amount of force to compress\nit even a little bit.</text><text start=\"243.97\" dur=\"3.51\">Let&amp;#39;s design an experiment\nto test Hooke&amp;#39;s law.</text><text start=\"247.48\" dur=\"2.97\">To do that, what we&amp;#39;re going to need\nto do is to figure out how to apply</text><text start=\"250.45\" dur=\"2.96\">unknown force to the\nend of the spring.</text><text start=\"253.41\" dur=\"4.679\">And we&amp;#39;re going to do that by hanging a\nweight on the end of the spring, and</text><text start=\"258.089\" dur=\"4.401\">the force, the downward force, applied\nby that weight is going to equal to</text><text start=\"262.49\" dur=\"2.71\">the mass of the weight times\nthe gravitational constant.</text><text start=\"265.2\" dur=\"4.52\">That&amp;#39;s the acceleration due to gravity,\nwhich is, I&amp;#39;ll say, 9.81</text><text start=\"269.72\" dur=\"2.86\">meters per second squared.</text><text start=\"272.58\" dur=\"4.66\">And so, when we hang a weight,\nwe get a downward force.</text><text start=\"277.24\" dur=\"2.475\">That will cause the spring to stretch.</text><text start=\"279.715\" dur=\"5.315\">So the spring stretches out, and the\nmore it stretches, the greater the</text><text start=\"285.03\" dur=\"1.19\">extension, obviously.</text><text start=\"286.22\" dur=\"2.88\">So, here&amp;#39;s the measured extension\nof the spring here.</text><text start=\"289.1\" dur=\"4.07\">We can measure how far the spring\nstretches when we add the weight, and</text><text start=\"293.17\" dur=\"5.21\">we&amp;#39;re going to get an upward force by\nthe spring resisting the extension.</text><text start=\"298.38\" dur=\"3.89\">And in fact, that upward force,\naccording to Hooke&amp;#39;s law, is equal to</text><text start=\"302.27\" dur=\"3.42\">the spring constant times\nthe amount of extension.</text><text start=\"305.69\" dur=\"3.72\">Eventually, the system will\nreach equilibrium.</text><text start=\"309.41\" dur=\"3.62\">And equilibrium happens when everything\nstops moving, which must</text><text start=\"313.03\" dur=\"4.5\">mean that the downward force exerted\nby the weight is equal</text><text start=\"317.53\" dur=\"1.056\">to the upward force.</text><text start=\"318.586\" dur=\"3.144\">In other words, everything&amp;#39;s exactly\nbalanced and there&amp;#39;s no more forces</text><text start=\"321.73\" dur=\"2.76\">acting on the weight, so the weight\nisn&amp;#39;t moving and the spring isn&amp;#39;t</text><text start=\"324.49\" dur=\"1.96\">stretching any farther.</text><text start=\"326.45\" dur=\"4.94\">And what that will tell us is that at\nthat point, the downward force, mg, is</text><text start=\"331.39\" dur=\"3.92\">equal to the upward force, kx.</text><text start=\"335.31\" dur=\"1.95\">We went off and performed\nthat experiment.</text><text start=\"337.26\" dur=\"3.82\">We took many different weights and hung\nthem on the end of the spring,</text><text start=\"341.08\" dur=\"3.37\">and here&amp;#39;s a listing of all the\ndifferent masses that we use from 0.1</text><text start=\"344.45\" dur=\"2.25\">kilograms up to 1.0 kilogram.</text><text start=\"346.7\" dur=\"6.21\">And we measured the extension in meters\nthat each weight produced.</text><text start=\"352.91\" dur=\"3.24\">So, let&amp;#39;s figure out, can\nwe compute k from this.</text><text start=\"356.15\" dur=\"5.31\">Well, if Hooke&amp;#39;s law is true,\nthen we know that mg = kx.</text><text start=\"361.46\" dur=\"2.35\">We decided that on the previous page.</text><text start=\"363.81\" dur=\"4.47\">That implies we should be able to\ncompute k by taking the force that was</text><text start=\"368.28\" dur=\"4.08\">applied by the weight and dividing\nit by the extension.</text><text start=\"372.36\" dur=\"1.28\">Let&amp;#39;s try it.</text><text start=\"373.64\" dur=\"3.66\">So, our first weight\nwas 0.1 kilograms.</text><text start=\"377.3\" dur=\"5.61\">The gravitational constant is 9.81\nmeters per second squared.</text><text start=\"382.91\" dur=\"4.58\">And we&amp;#39;ll just divide that by the\nmeasured extension, which is about</text><text start=\"387.49\" dur=\"3.16\">8/100 of a meter, 8 centimeters.</text><text start=\"390.65\" dur=\"3\">And if we do the arithmetic-- you know,\nwe can type that little formula</text><text start=\"393.65\" dur=\"4.49\">into Python or use a old-fashioned\ncalculator or even more old-fashioned</text><text start=\"398.14\" dur=\"2.25\">instead of working it\nall out by hand--</text><text start=\"400.39\" dur=\"6.65\">we end up computing that k is equal\nto 11.341 Newtons per meter.</text><text start=\"407.04\" dur=\"1.51\">So, are we done?</text><text start=\"408.55\" dur=\"1.96\">Was it really that simple?</text><text start=\"410.51\" dur=\"2.4\">Seems like we didn&amp;#39;t really need to\ntake all of these measurements.</text><text start=\"412.91\" dur=\"3.61\">We used the first one to do the\ncalculation, and if everything is</text><text start=\"416.52\" dur=\"4.1\">perfect, all the rest of the\ncomputations should come up with the</text><text start=\"420.62\" dur=\"0.85\">same result.</text><text start=\"421.47\" dur=\"4.03\">So, why not as a finger exercise do the\nsame computation that I just did,</text><text start=\"425.5\" dur=\"1.6\">except use the second measurement.</text><text start=\"427.1\" dur=\"1.262\"></text></transcript>\n", "fgrbzv_HQeE": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.58\"></text><text start=\"0.58\" dur=\"3.15\">OK, we&amp;#39;ve now seen graph search--</text><text start=\"3.73\" dur=\"2.54\">depth first search, breadth\nfirst search.</text><text start=\"6.27\" dur=\"3.55\">And we&amp;#39;ve seen, in fact, searches where\nboth depth first search and</text><text start=\"9.82\" dur=\"3.05\">breadth first search will find\nsolutions, find paths</text><text start=\"12.87\" dur=\"1.58\">with the fewest edges.</text><text start=\"14.45\" dur=\"1.6\">That may be what we want.</text><text start=\"16.05\" dur=\"2.87\">But there are also times where we\nmight want more information.</text><text start=\"18.92\" dur=\"2.22\">Let&amp;#39;s go back to our original\nexample of finding flights</text><text start=\"21.14\" dur=\"1.56\">from one city to another.</text><text start=\"22.7\" dur=\"4.19\">We could find the sequence of flights\nthat involves the fewest stops.</text><text start=\"26.89\" dur=\"1.99\">That would be the minimum\nnumber of edges.</text><text start=\"28.88\" dur=\"3.82\">But we might be more interested in\nminimizing time or minimizing cost,</text><text start=\"32.7\" dur=\"3.09\">and that&amp;#39;s information that&amp;#39;s\non the weight on an edge.</text><text start=\"35.79\" dur=\"3.49\">So if our edges are weighted, we need\nto find other solutions-- solutions</text><text start=\"39.28\" dur=\"2.38\">that minimize that total cost.</text><text start=\"41.66\" dur=\"3.44\">Turns out that for depth first search,\nthe algorithm we&amp;#39;ve shown you is quite</text><text start=\"45.1\" dur=\"1.41\">easy to modify.</text><text start=\"46.51\" dur=\"2.7\">Rather than just counting\nthe number of edges, we</text><text start=\"49.21\" dur=\"1.74\">simply sum up the weights.</text><text start=\"50.95\" dur=\"2.16\">And we keep searching to\nfind the solution--</text><text start=\"53.11\" dur=\"3.02\">the path that minimizes that sum.</text><text start=\"56.13\" dur=\"3.39\">Structure of the algorithm, other than\nthat change, is basically the same.</text><text start=\"59.52\" dur=\"3.36\">For breadth first search, in fact\nthe first found solution</text><text start=\"62.88\" dur=\"1.27\">may not be the best.</text><text start=\"64.15\" dur=\"3.81\">Because it&amp;#39;s minimizing by the structure\nof the algorithm, the number</text><text start=\"67.96\" dur=\"1.81\">of steps-- the number of edges.</text><text start=\"69.77\" dur=\"3.7\">And so one needs more sophisticated\nmethods to actually try and solve it.</text><text start=\"73.47\" dur=\"2.74\">Just to give you a difference, or a\nsense of the difference between them,</text><text start=\"76.21\" dur=\"3.28\">let&amp;#39;s look at a couple of\nsimple little examples.</text><text start=\"79.49\" dur=\"4.3\">Here&amp;#39;s that graph abstraction we had at\nthe beginning of our lecture about</text><text start=\"83.79\" dur=\"1.41\">different flights.</text><text start=\"85.2\" dur=\"3.69\">If we&amp;#39;re just minimizing the number of\nedges-- for example, going from here</text><text start=\"88.89\" dur=\"2.64\">to there, either algorithm\nwill find it.</text><text start=\"91.53\" dur=\"2.4\">And in fact, there are a number\nof different solutions.</text><text start=\"93.93\" dur=\"2.26\">So here&amp;#39;s one.</text><text start=\"96.19\" dur=\"2.5\">It&amp;#39;s got four legs.</text><text start=\"98.69\" dur=\"2.25\">Here&amp;#39;s another.</text><text start=\"100.94\" dur=\"1.4\">It&amp;#39;s got four legs.</text><text start=\"102.34\" dur=\"1.72\">And in fact, there are a bunch\nof them with four legs.</text><text start=\"104.06\" dur=\"4.02\">Here&amp;#39;s another one with four legs.</text><text start=\"108.08\" dur=\"3.67\">We&amp;#39;re minimizing the total number\nof edges along a path.</text><text start=\"111.75\" dur=\"3.86\">When we take weights into account, for\nexample the cost of the flight, then</text><text start=\"115.61\" dur=\"1.57\">things are little bit different.</text><text start=\"117.18\" dur=\"3.7\">And in fact in this graph, one could\nactually run an algorithm to show that</text><text start=\"120.88\" dur=\"9.259\">the best solution is this one, which has\na cost of $300 plus $200 plus $150</text><text start=\"130.139\" dur=\"4.631\">plus $130, which is 5, 6, $780.</text><text start=\"134.77\" dur=\"2.93\">And you can explore this for yourself\nto discover that any other path</text><text start=\"137.7\" dur=\"3.52\">through this graph, in fact,\nhas a higher cost.</text><text start=\"141.22\" dur=\"3.88\">So sometimes we want to solve minimal\nproblems or optimization problems with</text><text start=\"145.1\" dur=\"0.74\">weighted edges.</text><text start=\"145.84\" dur=\"2.72\">Sometimes it&amp;#39;s just the\ntotal number of edges.</text><text start=\"148.56\" dur=\"4.74\">All right, with that in mind, why\nare we doing graph optimization?</text><text start=\"153.3\" dur=\"3.65\">Well, as we said, we have lots of\nproblems that are naturally expressed</text><text start=\"156.95\" dur=\"3.11\">as a set of transitions between\na state of a system.</text><text start=\"160.06\" dur=\"4.16\">And those often can be easily\nsolved as a graph search.</text><text start=\"164.22\" dur=\"3.08\">Simple examples would be ones where the\nactual structure the problem is</text><text start=\"167.3\" dur=\"1.02\">itself a graph.</text><text start=\"168.32\" dur=\"3.29\">Travel through a physical network,\nwhether it&amp;#39;s a flight network or</text><text start=\"171.61\" dur=\"4.34\">whether it&amp;#39;s actually something like\nusing your GPS to find driving routes</text><text start=\"175.95\" dur=\"2.04\">from one location to another.</text><text start=\"177.99\" dur=\"4.11\">In those cases, the nodes naturally\ncorrespond to physical locations, like</text><text start=\"182.1\" dur=\"1.86\">hubs or intersections.</text><text start=\"183.96\" dur=\"3.21\">And the edges naturally correspond\nto physical structures--</text><text start=\"187.17\" dur=\"2.14\">flight paths, roads.</text><text start=\"189.31\" dur=\"3.38\">But there are other problems are\nalso well described as graphs.</text><text start=\"192.69\" dur=\"3.15\">Imagine you&amp;#39;re trying to program a\nrobot to accomplish some task.</text><text start=\"195.84\" dur=\"3.06\">Here, the nodes may be the\nstate of the system--</text><text start=\"198.9\" dur=\"2.97\">the locations of pieces or the\nlocation of the robot.</text><text start=\"201.87\" dur=\"4.295\">And the edges are actions that that\nrobot should take to change the state</text><text start=\"206.165\" dur=\"0.895\">of the system.</text><text start=\"207.06\" dur=\"2.47\">Again, well solved as a graph problem.</text><text start=\"209.53\" dur=\"2.7\">And indeed, that leads to a\nmore general sequence, or</text><text start=\"212.23\" dur=\"1.65\">collection of problems.</text><text start=\"213.88\" dur=\"4.35\">Those are problems where a physical\nsystem is being handled or</text><text start=\"218.23\" dur=\"0.72\">manipulated.</text><text start=\"218.95\" dur=\"4.18\">And here, the nodes are descriptions\nof the state of the system--</text><text start=\"223.13\" dur=\"3.01\">parameters that describe the position\nor state of the system.</text><text start=\"226.14\" dur=\"3.85\">And the edges are actions that will\nmove, or transitions if you like, that</text><text start=\"229.99\" dur=\"3.65\">will move the physical system\nfrom one state to another.</text><text start=\"233.64\" dur=\"4.93\">And again those are well solved by\ngraph optimization problems.</text><text start=\"238.57\" dur=\"3.86\">And that says, basically, what we&amp;#39;ve\nshown you are two very handy tools for</text><text start=\"242.43\" dur=\"3.53\">doing depth first and breadth first\nsearch, to find a sequence of</text><text start=\"245.96\" dur=\"4.39\">transitions that transforms a system\nto a desired goal state.</text><text start=\"250.35\" dur=\"4.02\">These methods can find optimal solutions\nto a wide range of problems</text><text start=\"254.37\" dur=\"3.23\">that are described in this matter, and\nthey&amp;#39;re going to be really valuable as</text><text start=\"257.6\" dur=\"3.2\">you use these tools to solve problems\nof interest to you.</text><text start=\"260.8\" dur=\"1.515\"></text></transcript>\n", "-gLoe0n1CEQ": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.24\"></text><text start=\"0.24\" dur=\"2.44\">Let&amp;#39;s visualize what this idea\nof checking if something is</text><text start=\"2.68\" dur=\"1.355\">a palindrome does.</text><text start=\"4.035\" dur=\"3.075\">The basic idea is to check the\nfirst and last letter to see</text><text start=\"7.11\" dur=\"1.15\">if they&amp;#39;re the same.</text><text start=\"8.26\" dur=\"3.33\">And then if they are, to check the\nremaining middle portion to see if</text><text start=\"11.59\" dur=\"1.42\">it&amp;#39;s a palindrome.</text><text start=\"13.01\" dur=\"3.04\">So here&amp;#39;s ablewasiereisawelba,\nall reduced down just</text><text start=\"16.05\" dur=\"1.05\">to lowercase letters.</text><text start=\"17.1\" dur=\"3.86\">And so at the first step, we check to\nsee are the two end cases the same?</text><text start=\"20.96\" dur=\"3.4\">They are, and that reduces to\nchecking a smaller thing.</text><text start=\"24.36\" dur=\"2.91\">Again, we check to see if the first and\nlast character are the same, they</text><text start=\"27.27\" dur=\"2.87\">are, and that reduces to checking\na smaller thing.</text><text start=\"30.14\" dur=\"3.03\">And at each stage, we keep checking\nthe end characters.</text><text start=\"33.17\" dur=\"3.02\">In this case they are all the same, and\nwe keep reducing to smaller and</text><text start=\"36.19\" dur=\"1.64\">smaller versions of the same problem.</text><text start=\"37.83\" dur=\"1.25\"></text></transcript>\n", "iw4BEqvvgiw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.94\"></text><text start=\"0.94\" dur=\"4.19\">Eric Grimson: We started this lecture\nby arguing that finding efficient</text><text start=\"5.13\" dur=\"3.84\">algorithms on our own can be hard and we\nwant, if we can, reduce problems to</text><text start=\"8.97\" dur=\"3.19\">things that somebody else has developed\nthat are efficient.</text><text start=\"12.16\" dur=\"3.17\">And we&amp;#39;ve just seen a nice example of\nthat, because what we&amp;#39;ve just seen is</text><text start=\"15.33\" dur=\"4.28\">that if we combine the idea of binary\nsearch with the idea of a divide and</text><text start=\"19.61\" dur=\"4.05\">conquer for doing merge sort, that\nthat actually gives us a very</text><text start=\"23.66\" dur=\"2.43\">efficient searching algorithm.</text><text start=\"26.09\" dur=\"3.59\">In this case in particular, if we want\nto search a list k times then the</text><text start=\"29.68\" dur=\"7.34\">efficiency is n*log(n) in order to do\nthe sorting, plus k*log(n) in order to</text><text start=\"37.02\" dur=\"1.43\">do the search k times.</text><text start=\"38.45\" dur=\"6.41\">And that, remember, we&amp;#39;re comparing\nagainst something that is k * n.</text><text start=\"44.86\" dur=\"4.87\">And so that says boy, we&amp;#39;re likely\nto be doing much better.</text><text start=\"49.73\" dur=\"5.2\">And if n is of any reasonable size, then\nthe n*log(n) times k*log(n) is</text><text start=\"54.93\" dur=\"3.56\">likely to be much smaller\nthan just k * n.</text><text start=\"58.49\" dur=\"2.4\">This still leaves the question\nof can we do better?</text><text start=\"60.89\" dur=\"3.04\">This is cool, but can we\nactually do better?</text><text start=\"63.93\" dur=\"2.94\">And the answer is yes, and here we&amp;#39;re\njust going to briefly highlight it.</text><text start=\"66.87\" dur=\"2.71\">We&amp;#39;re not going to talk a lot about\nthis, but we want to point it out.</text><text start=\"69.58\" dur=\"4.99\">Because, in fact, Python comes with a\ndata structure that supports very</text><text start=\"74.57\" dur=\"2.7\">efficient searching, and\nthat&amp;#39;s the dictionary.</text><text start=\"77.27\" dur=\"2.45\">You may have wondered about this,\nbecause dictionaries are arbitrary</text><text start=\"79.72\" dur=\"3.26\">collections of objects, and yet we can\nget things out very quickly from them.</text><text start=\"82.98\" dur=\"1.83\">And the reason we can is\nthat dictionaries use</text><text start=\"84.81\" dur=\"1.525\">something called hashing.</text><text start=\"86.335\" dur=\"3.885\">And a hash function is something that\nsays that we can do a look-up in an</text><text start=\"90.22\" dur=\"3.02\">amount of time that&amp;#39;s almost independent\nof the size of the</text><text start=\"93.24\" dur=\"0.99\">dictionary--</text><text start=\"94.23\" dur=\"1.13\">almost.</text><text start=\"95.36\" dur=\"3.78\">But for most purposes, we can really\nthink of it as saying we can do</text><text start=\"99.14\" dur=\"3.777\">something that is really efficient,\nindependent of the size of the</text><text start=\"102.917\" dur=\"1.253\">dictionary.</text><text start=\"104.17\" dur=\"2.63\">So let&amp;#39;s just briefly talk then\nabout what&amp;#39;s hashing.</text><text start=\"106.8\" dur=\"2.64\">The idea of hashing is the following.</text><text start=\"109.44\" dur=\"4.61\">Given a key, that key into an element\nof a dictionary, for example.</text><text start=\"114.05\" dur=\"4.6\">A hash function converts that key into\nan integer and it then uses this</text><text start=\"118.65\" dur=\"2.68\">integer to index into a list.</text><text start=\"121.33\" dur=\"2.662\">That can, of course, be\ndone in constant time.</text><text start=\"123.992\" dur=\"4.378\">All right, so it says basically when\nI&amp;#39;ve got a dictionary I&amp;#39;m using that,</text><text start=\"128.37\" dur=\"3.12\">if you like, sort of notion of\nindirection in a more complicated way.</text><text start=\"131.49\" dur=\"2.14\">The elements are stored in a list.</text><text start=\"133.63\" dur=\"3.38\">But to figure out where in the list to\nput them, I&amp;#39;m going to use this hash</text><text start=\"137.01\" dur=\"3.462\">function to say given the key,\nhere&amp;#39;s the location to go to.</text><text start=\"140.472\" dur=\"2.988\">Now conversion&amp;#39;s done with this thing\nwe call the hash function.</text><text start=\"143.46\" dur=\"3.41\">And the idea of a hash function is it&amp;#39;s\ngoing to map a large space of</text><text start=\"146.87\" dur=\"4.1\">inputs to a much smaller\nspace of outputs.</text><text start=\"150.97\" dur=\"3.27\">Because it&amp;#39;s doing this, it could in\nprinciple be a many-to-one mapping.</text><text start=\"154.24\" dur=\"4.11\">What that means is it says ideally we&amp;#39;d\nlike each input, each key, to go</text><text start=\"158.35\" dur=\"3.53\">to a unique place in the output\nspace into the list.</text><text start=\"161.88\" dur=\"4.12\">But it&amp;#39;s possible that two different\nkeys could go to the same</text><text start=\"166\" dur=\"1.34\">location in the list.</text><text start=\"167.34\" dur=\"2.15\">When we do, we&amp;#39;ve got what we\ncall a collision there.</text><text start=\"169.49\" dur=\"2.62\">And there we&amp;#39;re going to have to store,\nin fact, a little smaller</text><text start=\"172.11\" dur=\"3.58\">sub-list with each of those elements\nthere together with their key.</text><text start=\"175.69\" dur=\"3.72\">So that when I do the hashing, I will go\nto that location in the list, pull</text><text start=\"179.41\" dur=\"2.69\">out that sub-list, and do the search.</text><text start=\"182.1\" dur=\"5.02\">Now again, if I make the size of the\nhash table huge I can reduce the</text><text start=\"187.12\" dur=\"3.37\">number of collisions, but of course,\nthat chews up a lot of space.</text><text start=\"190.49\" dur=\"3.16\">If I&amp;#39;m not clever about the hash\nfunction, I could have everything go</text><text start=\"193.65\" dur=\"2.49\">to one space in the hash table.</text><text start=\"196.14\" dur=\"3.55\">In which case I&amp;#39;ll have the entire set\nof things there in the list and I&amp;#39;ve</text><text start=\"199.69\" dur=\"2.06\">lost because I still\nhave linear search.</text><text start=\"201.75\" dur=\"3.23\">So what it comes down to is-- and this\nis sometimes hard to do-- we&amp;#39;d like to</text><text start=\"204.98\" dur=\"2.09\">have a really good hash function.</text><text start=\"207.07\" dur=\"3.78\">And a really good hash function has a\nuniform distribution-- it minimizes</text><text start=\"210.85\" dur=\"3.19\">the probability of a collision.</text><text start=\"214.04\" dur=\"4.87\">With that idea that I&amp;#39;m going to hash by\ncomputing some function on the key</text><text start=\"218.91\" dur=\"1.82\">that&amp;#39;s going to tell me where\non the list to go to.</text><text start=\"220.73\" dur=\"3.89\">And I&amp;#39;ve got to make the list large\nenough that I can store most of the</text><text start=\"224.62\" dur=\"1.9\">elements in there-- but not too large.</text><text start=\"226.52\" dur=\"4.73\">One of the questions is, just sort of\nintuitively, how good is hashing?</text><text start=\"231.25\" dur=\"3.39\">Well, if there are no collisions,\nthen this is O(1).</text><text start=\"234.64\" dur=\"3.12\">Now, that also assumes that the\ncomputation of the hash function can</text><text start=\"237.76\" dur=\"2.32\">be done very efficiently,\nbut let&amp;#39;s assume that.</text><text start=\"240.08\" dur=\"4.01\">It basically says given an element,\na key, I do the computation, I go</text><text start=\"244.09\" dur=\"2.19\">straight to that point in\nthe list, I pull it out.</text><text start=\"246.28\" dur=\"3.33\">And if there are no collisions, only\nthat element&amp;#39;s at that location in the</text><text start=\"249.61\" dur=\"2.55\">list, I&amp;#39;m in great shape.</text><text start=\"252.16\" dur=\"2.01\">Flip it, of course, is if everything\nis hashed to the same</text><text start=\"254.17\" dur=\"1.45\">bucket, then I&amp;#39;m stuck.</text><text start=\"255.62\" dur=\"3.49\">Because now I&amp;#39;ve got O(n) because I&amp;#39;ve\ngot to then search through that list</text><text start=\"259.11\" dur=\"2.84\">linearly to find the element\nI&amp;#39;m looking for.</text><text start=\"261.95\" dur=\"4.25\">But in general, I could get something\nyou could see could be very efficient.</text><text start=\"266.2\" dur=\"1.09\">I can trade off space.</text><text start=\"267.29\" dur=\"3.44\">How much memory do I use to\nmake the hash table large?</text><text start=\"270.73\" dur=\"3.27\">And then if I&amp;#39;ve got a good function,\nI can get close to uniform</text><text start=\"274\" dur=\"5.006\">distribution which reduces the\ncomplexity to something close to O(1).</text><text start=\"279.006\" dur=\"4.994\">If in fact my hash table&amp;#39;s big enough\nthat it&amp;#39;s likely that only one element</text><text start=\"284\" dur=\"2.82\">gets hashed in a location,\nI&amp;#39;m at O(1).</text><text start=\"286.82\" dur=\"3.05\">Even if it&amp;#39;s not quite that, it&amp;#39;s still\npretty close because I&amp;#39;m not</text><text start=\"289.87\" dur=\"2.65\">searching through a huge list there,\nI&amp;#39;m looking at one or two</text><text start=\"292.52\" dur=\"1.045\">elements to find them.</text><text start=\"293.565\" dur=\"3.315\">And so in fact what this says is\nthere are even more efficient</text><text start=\"296.88\" dur=\"2.53\">ways of doing search.</text><text start=\"299.41\" dur=\"2.38\">It relies on finding really\ngood hash functions.</text><text start=\"301.79\" dur=\"2.2\">Python does that for dictionaries.</text><text start=\"303.99\" dur=\"3.44\">And what we&amp;#39;ll see as we move through\nthe term is that there are other</text><text start=\"307.43\" dur=\"3.44\">places in which we can use this idea\nof hashing to give us even better</text><text start=\"310.87\" dur=\"1.28\">complexity.</text><text start=\"312.15\" dur=\"5.03\">But nonetheless, the point of this was\nto say if I can take key ideas, binary</text><text start=\"317.18\" dur=\"5.16\">search, divide and conquer, I can use\nthose ideas to create very efficient</text><text start=\"322.34\" dur=\"2.83\">algorithms, and in this case\nwe did it for searching.</text><text start=\"325.17\" dur=\"3.86\">And the second thing we&amp;#39;ve seen is that\nwhile the complexity of a single</text><text start=\"329.03\" dur=\"3.91\">use of a procedure may be more than\nwe&amp;#39;d like, we can sometimes</text><text start=\"332.94\" dur=\"1.15\">amortize the cost.</text><text start=\"334.09\" dur=\"3.45\">Say, if we&amp;#39;re going to search multiple\ntimes through something, the cost to</text><text start=\"337.54\" dur=\"3.89\">do the sort is actually worthwhile\nbecause it gets made up by the</text><text start=\"341.43\" dur=\"3.16\">improvement in efficiency of\nactually doing a search.</text><text start=\"344.59\" dur=\"2.07\">And we&amp;#39;ll see those ideas as\nwe move through the term.</text><text start=\"346.66\" dur=\"1.522\"></text></transcript>\n", "jJqP3ZUSy5E": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.86\"></text><text start=\"1.86\" dur=\"3.18\">Now that we&amp;#39;ve introduced the idea of a\nfunction definition, I want to spend</text><text start=\"5.04\" dur=\"3.73\">a little bit of time giving you a\nmechanical way of thinking about how</text><text start=\"8.77\" dur=\"3.48\">function implications work and in\nparticular how the right kinds of</text><text start=\"12.25\" dur=\"2.42\">values get stored in the right places.</text><text start=\"14.67\" dur=\"2.56\">So we&amp;#39;re going to use the idea of what&amp;#39;s\noften called an environment to</text><text start=\"17.23\" dur=\"3.37\">understand how bindings of\nvariables take place.</text><text start=\"20.6\" dur=\"3.28\">And here&amp;#39;s the basic idea\nbehind an environment.</text><text start=\"23.88\" dur=\"2.59\">It&amp;#39;s going to be a formalism for\ntracking the bindings of</text><text start=\"26.47\" dur=\"1.34\">variables and values.</text><text start=\"27.81\" dur=\"3.39\">And it will in fact apply to general\nbindings of assignment statements as</text><text start=\"31.2\" dur=\"2.65\">well as more broadly to when\nwe do function calls.</text><text start=\"33.85\" dur=\"4.24\">So indeed, whenever we do an assignment\nstatement, that simply</text><text start=\"38.09\" dur=\"5.09\">pairs a name and the value of the other\nexpression together in a table,</text><text start=\"43.18\" dur=\"3.77\">if you want to think of it that way,\nthat we call an environment.</text><text start=\"46.95\" dur=\"3.87\">If we want to get the value of a name,\ninvoking that value or that name</text><text start=\"50.82\" dur=\"2.9\">rather, just asking for the value of\nthat name simply goes to the table,</text><text start=\"53.72\" dur=\"4.69\">and looks up the value,\nand returns it.</text><text start=\"58.41\" dur=\"3.81\">Generally when we&amp;#39;re talking to a Python\nshell, there is an environment.</text><text start=\"62.22\" dur=\"2.409\">It&amp;#39;s often called the default\nor global environment.</text><text start=\"64.629\" dur=\"3.661\">And it contains the bindings of all the\nexpressions that we put in as we</text><text start=\"68.29\" dur=\"1.4\">deal with it.</text><text start=\"69.69\" dur=\"6\">And then, the key piece of this is\nwhen we evaluate a definition, it</text><text start=\"75.69\" dur=\"4.5\">pairs the name of the function with the\ndetails of the function without</text><text start=\"80.19\" dur=\"1.72\">actually evaluating those details.</text><text start=\"81.91\" dur=\"4.74\">It creates a pairing up the name to\nwhat we call a procedure object.</text><text start=\"86.65\" dur=\"3.87\">Let me show you a graphical way\nof thinking about this.</text><text start=\"90.52\" dur=\"4.17\">Here&amp;#39;s a little bit of a description\nthat we&amp;#39;re using.</text><text start=\"94.69\" dur=\"2.97\">I have evaluated two expressions.</text><text start=\"97.66\" dur=\"4.74\">I&amp;#39;ve evaluated an expression that binds\nx to 5 and that binds p to 3.</text><text start=\"102.4\" dur=\"5.19\">And over here, I have my\nglobal environment.</text><text start=\"107.59\" dur=\"3.63\">This is the environment to which\nthe Python shell is talking.</text><text start=\"111.22\" dur=\"2.88\">And in fact, when I evaluate these\nassignment statements, they create</text><text start=\"114.1\" dur=\"2.29\">bindings of names to values.</text><text start=\"116.39\" dur=\"1.74\">x is bound to 5.</text><text start=\"118.13\" dur=\"1.34\">p is bound to 3.</text><text start=\"119.47\" dur=\"1.82\">I&amp;#39;ve also bound result down here.</text><text start=\"121.29\" dur=\"4.07\">bound to 1 over in that environment.</text><text start=\"125.36\" dur=\"5.474\">That gives me variable names\nand values as associations.</text><text start=\"130.834\" dur=\"2.756\">And now imagine I want to run\na little piece of code, this</text><text start=\"133.59\" dur=\"1.28\">little for loop here.</text><text start=\"134.87\" dur=\"1.56\">I&amp;#39;m not going to worry too\nmuch about the details.</text><text start=\"136.43\" dur=\"0.64\">We&amp;#39;ll come back to it.</text><text start=\"137.07\" dur=\"4.67\">But basically, this four-loop is going\nto run using an iterating variable</text><text start=\"141.74\" dur=\"4.19\">turn over the range from 0 up to p minus\n1, which we know is going to be</text><text start=\"145.93\" dur=\"1.46\">0, 1, and 2.</text><text start=\"147.39\" dur=\"1.54\">It&amp;#39;s got a print statement in there.</text><text start=\"148.93\" dur=\"2.82\">But it&amp;#39;s also got an expression\ndown here.</text><text start=\"151.75\" dur=\"2.6\">And here&amp;#39;s what will happen\nif I evaluate that.</text><text start=\"154.35\" dur=\"0.93\">We know what should happen.</text><text start=\"155.28\" dur=\"3.65\">But in terms of the environment, when I\nwant to evaluate this expression, it</text><text start=\"158.93\" dur=\"4.4\">says get the value of result by\nlooking it up over here in the</text><text start=\"163.33\" dur=\"0.97\">environment.</text><text start=\"164.3\" dur=\"3.28\">Get the value of x by looking it\nup here in the environment.</text><text start=\"167.58\" dur=\"5.85\">Multiplying them together, and then\nrebind result to that value.</text><text start=\"173.43\" dur=\"1.88\">That was when term was equal to 0.</text><text start=\"175.31\" dur=\"3.39\">Having done that, we go back\nand we say turn equal to 1.</text><text start=\"178.7\" dur=\"0.84\">And we do the same thing.</text><text start=\"179.54\" dur=\"1.27\">We get the value of result.</text><text start=\"180.81\" dur=\"4.36\">We get the value of x by looking them up\nin this environment here, doing the</text><text start=\"185.17\" dur=\"4.83\">computation, and rebinding\nresult to 25.</text><text start=\"190\" dur=\"1.555\">Turn goes up one more.</text><text start=\"191.555\" dur=\"1.465\">That&amp;#39;s equal to 2.</text><text start=\"193.02\" dur=\"1.6\">It&amp;#39;s going to be the last one.</text><text start=\"194.62\" dur=\"3.45\">And we again, do the same kind of\ncomputation, getting result, x</text><text start=\"198.07\" dur=\"4.01\">multiplying together and\nrebinding result.</text><text start=\"202.08\" dur=\"2.12\">So my rules, now, are just\namplified a little bit.</text><text start=\"204.2\" dur=\"3.84\">I&amp;#39;m actually just keeping track in this\nenvironment of the bindings of</text><text start=\"208.04\" dur=\"3.27\">variables, looking them up when I need\nthem, and re-changing them with</text><text start=\"211.31\" dur=\"2.38\">assignment statements when I have to.</text><text start=\"213.69\" dur=\"3.7\">So after I&amp;#39;ve executed all of this, my\nenvironment would look like this.</text><text start=\"217.39\" dur=\"4.26\">So that if in fact I said to Python,\nwhat&amp;#39;s the value of result, it would</text><text start=\"221.65\" dur=\"5.44\">look it up in that environment\nand return the value.</text><text start=\"227.09\" dur=\"2.67\">So this computation does what\nI expected it would do.</text><text start=\"229.76\" dur=\"2.78\">But we can see how this idea of an\nenvironment gives us a little bit more</text><text start=\"232.54\" dur=\"4.01\">formalism for thinking about what\nhappens as we do those evaluations.</text><text start=\"236.55\" dur=\"6.42\">Now, let&amp;#39;s see what happens when\nwe create a procedure object.</text><text start=\"242.97\" dur=\"3.61\">I&amp;#39;m going to bind, in this\ncase, x to 5 and y to 3.</text><text start=\"246.58\" dur=\"2.24\">And there are my bindings\nright there for it.</text><text start=\"248.82\" dur=\"4.37\">And when I give the Python shell a\ndefinition, whether I load it in from</text><text start=\"253.19\" dur=\"4.6\">a file or I type it in, it is going\nto associate with the name in the</text><text start=\"257.79\" dur=\"3.26\">environment, what we call\na procedure object.</text><text start=\"261.05\" dur=\"2.94\">So it&amp;#39;s got an identifier that\nsays this is a procedure.</text><text start=\"263.99\" dur=\"3.17\">And inside of it, it has\nthe parameter list.</text><text start=\"267.16\" dur=\"3.3\">And it has the body of the procedure.</text><text start=\"270.46\" dur=\"2.33\">And notice the form which\nis important.</text><text start=\"272.79\" dur=\"2.74\">It doesn&amp;#39;t have substitutions\nfor x and y here.</text><text start=\"275.53\" dur=\"2.69\">It has them as variable names.</text><text start=\"278.22\" dur=\"5.04\">That means that this procedure here\ncan be used multiple times.</text><text start=\"283.26\" dur=\"2.62\">And that&amp;#39;s great.</text><text start=\"285.88\" dur=\"2.42\">I&amp;#39;ve now captured that computation.</text><text start=\"288.3\" dur=\"4.11\">I can refer to it by name because that\nname&amp;#39;s available in that environment.</text><text start=\"292.41\" dur=\"2.3\">And I ought to be able to use it.</text><text start=\"294.71\" dur=\"0.47\">Great.</text><text start=\"295.18\" dur=\"5.21\">So that procedure object is something\nthat sits available to me, but again</text><text start=\"300.39\" dur=\"1.13\">has not been evaluated.</text><text start=\"301.52\" dur=\"2.9\">We don&amp;#39;t have substitutions\nfor x and y there.</text><text start=\"304.42\" dur=\"1.26\">There is variable names.</text><text start=\"305.68\" dur=\"2.74\">And the last piece is this\nlittle thing here we call</text><text start=\"308.42\" dur=\"3.26\">an environment pointer.</text><text start=\"311.68\" dur=\"4.08\">And it, from the procedure object,\npoints back to the environment in</text><text start=\"315.76\" dur=\"2.61\">which that procedure was defined.</text><text start=\"318.37\" dur=\"1.57\">And we&amp;#39;re going to see\nwhy we want that.</text><text start=\"319.94\" dur=\"6.88\">But it basically tells us the context\nrelative to which I want to evaluate</text><text start=\"326.82\" dur=\"1.57\">my procedure objects.</text><text start=\"328.39\" dur=\"3.01\">So this arrow points to the binding.</text><text start=\"331.4\" dur=\"4.31\">This arrow is an environment\npointer that comes back.</text><text start=\"335.71\" dur=\"4.5\">Here&amp;#39;s what happens when I\nactually call a function.</text><text start=\"340.21\" dur=\"5.71\">If I want to evaluate some expression\nfollowed with, in parentheses, some</text><text start=\"345.92\" dur=\"3.18\">other number of expressions, which would\nbe what a function call would</text><text start=\"349.1\" dur=\"4.61\">look like, I first evaluate this\nexpression, which is a name.</text><text start=\"353.71\" dur=\"3.77\">And that says I&amp;#39;m going to just\nlook it up in the environment.</text><text start=\"357.48\" dur=\"3.36\">And I will get back the value which\nis that procedure object.</text><text start=\"360.84\" dur=\"4.38\">I then evaluate all of these other\nexpressions to get the values of the</text><text start=\"365.22\" dur=\"1.61\">parameters.</text><text start=\"366.83\" dur=\"6.33\">Then I bind those parameter names in the\nprocedure object to the values of</text><text start=\"373.16\" dur=\"2.69\">the arguments that has passed in.</text><text start=\"375.85\" dur=\"5.11\">And I do that in a new frame, which has,\nas a parent, the environment in</text><text start=\"380.96\" dur=\"2.55\">which the procedure was defined.</text><text start=\"383.51\" dur=\"2.36\">That&amp;#39;s going to create a new context.</text><text start=\"385.87\" dur=\"1.1\">It&amp;#39;s going to look just\nlike an environment.</text><text start=\"386.97\" dur=\"3.54\">It&amp;#39;s going to have names, in this\ncase the parameters, with values</text><text start=\"390.51\" dur=\"1.33\">associated with them.</text><text start=\"391.84\" dur=\"2.89\">And relative to that environment,\nI&amp;#39;m going to evaluate</text><text start=\"394.73\" dur=\"2.74\">the body of the function.</text><text start=\"397.47\" dur=\"2.43\">And that&amp;#39;s going to do just\nexactly the same rules.</text><text start=\"399.9\" dur=\"4.95\">So I evaluate the body of the procedure\nrelative to this new frame.</text><text start=\"404.85\" dur=\"5.53\">So for example, if I were to now call\nmax of 3 and 4, right there I&amp;#39;m going</text><text start=\"410.38\" dur=\"3.56\">to bind the value of that\nto z when I&amp;#39;m done.</text><text start=\"413.94\" dur=\"0.88\">What do I do?</text><text start=\"414.82\" dur=\"2.12\">I first get the value of max.</text><text start=\"416.94\" dur=\"0.8\">It&amp;#39;s right there.</text><text start=\"417.74\" dur=\"2.96\">And it is pointing to that object.</text><text start=\"420.7\" dur=\"2.11\">I get the values of 3 and 4.</text><text start=\"422.81\" dur=\"0.61\">Those are easy.</text><text start=\"423.42\" dur=\"1.17\">They&amp;#39;re just numbers.</text><text start=\"424.59\" dur=\"5.73\">And then I bind the parameters of\nthe procedure in a new frame.</text><text start=\"430.32\" dur=\"2.42\">I&amp;#39;m calling this one E2\nfor Environment Two.</text><text start=\"432.74\" dur=\"4.31\">I bind them to the values\nthat I just got.</text><text start=\"437.05\" dur=\"5.68\">And then relative to E2, I&amp;#39;m going\nto evaluate this body.</text><text start=\"442.73\" dur=\"1.14\">That&amp;#39;s great.</text><text start=\"443.87\" dur=\"1.38\">Because now what do I have?</text><text start=\"445.25\" dur=\"3.88\">I have a way of saying if x is greater\nthan y-- and where do I get the x?</text><text start=\"449.13\" dur=\"0.955\">It&amp;#39;s right there.</text><text start=\"450.085\" dur=\"1.225\">It&amp;#39;s relative to this frame.</text><text start=\"451.31\" dur=\"1.82\">So I only see that value of x.</text><text start=\"453.13\" dur=\"2.01\">I only see that value of y.</text><text start=\"455.14\" dur=\"3.04\">I don&amp;#39;t get confused by things\nup here in the global frame.</text><text start=\"458.18\" dur=\"3.86\">Because I&amp;#39;ve created a new\nenvironment right there.</text><text start=\"462.04\" dur=\"3.64\">And relative to that environment, I\nevaluate the body of the procedure.</text><text start=\"465.68\" dur=\"5.55\">Now you can see, this encapsulation is\ngoing to protect the interior details</text><text start=\"471.23\" dur=\"4.02\">so that it doesn&amp;#39;t matter, in fact, what\nnames I use for the parameters</text><text start=\"475.25\" dur=\"3.65\">here, or whether they have bindings\nelsewhere, because they&amp;#39;re not going</text><text start=\"478.9\" dur=\"1.1\">to get seen by Python.</text><text start=\"480\" dur=\"3.765\">It&amp;#39;s going to use the local context,\nand, in this case, return the max of</text><text start=\"483.765\" dur=\"2.835\">these, which is the value 4.</text><text start=\"486.6\" dur=\"0.65\">Mechanistic?</text><text start=\"487.25\" dur=\"1.27\">Yes.</text><text start=\"488.52\" dur=\"0.9\">A little bit boring?</text><text start=\"489.42\" dur=\"0.83\">Yes.</text><text start=\"490.25\" dur=\"4.43\">But really valuable for understanding\nexactly how the computation keeps</text><text start=\"494.68\" dur=\"4.39\">track of what values to use, what\nvariable names to use, and how to use</text><text start=\"499.07\" dur=\"2.79\">the steps to do the computation\nwe just captured inside</text><text start=\"501.86\" dur=\"1.25\">that procedure object.</text><text start=\"503.11\" dur=\"0.7\"></text></transcript>\n", "jL4wZ8-RjTs": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.41\"></text><text start=\"0.41\" dur=\"4.52\">In this ninth lecture, we&amp;#39;re going\nto look at search algorithms.</text><text start=\"4.93\" dur=\"4.1\">Many computational problems involve\nsearching to find items in collections</text><text start=\"9.03\" dur=\"2.24\">of data objects.</text><text start=\"11.27\" dur=\"4.16\">We will generalize the idea of bisection\nsearch to more generic</text><text start=\"15.43\" dur=\"4.07\">binary search, where we use information\nto reduce the search space</text><text start=\"19.5\" dur=\"2.29\">in half at each step.</text><text start=\"21.79\" dur=\"3.09\">We&amp;#39;ll show that if the data\nis sorted, this is a very</text><text start=\"24.88\" dur=\"2.81\">efficient way to find objects.</text><text start=\"27.69\" dur=\"3.44\">But if the data is not sorted\nthen we have to find ways to</text><text start=\"31.13\" dur=\"1.64\">transform the data set.</text><text start=\"32.77\" dur=\"3.81\">And we&amp;#39;ll look at two different\nsorting algorithms.</text><text start=\"36.58\" dur=\"3.91\">Finally, we&amp;#39;ll show that if we&amp;#39;re going\nto execute multiple searches of</text><text start=\"40.49\" dur=\"5.07\">a data set then the combination of\nsorting and binary search is a very</text><text start=\"45.56\" dur=\"1.25\">powerful method.</text><text start=\"46.81\" dur=\"0.81\"></text></transcript>\n", "Zoy7t4LbAPY": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.04\"></text><text start=\"0.04\" dur=\"3.02\">PROFESSOR: We&amp;#39;ve been looking at\nthe idea of exhaustive search.</text><text start=\"3.06\" dur=\"2.6\">And we just saw, when we want to do\nthis on things that don&amp;#39;t have a</text><text start=\"5.66\" dur=\"3.24\">finite number of choices, real value\nto floating point numbers, for</text><text start=\"8.9\" dur=\"2.51\">example, we&amp;#39;ve got a problem.</text><text start=\"11.41\" dur=\"2.71\">We need to make the step size\nsmall in terms of how many</text><text start=\"14.12\" dur=\"1.07\">different things we sample.</text><text start=\"15.19\" dur=\"2.96\">But as we keep making it smaller, it&amp;#39;s\ngoing to make the search take longer</text><text start=\"18.15\" dur=\"0.795\">and longer.</text><text start=\"18.945\" dur=\"1.775\">Because if we&amp;#39;re going to do it, we&amp;#39;re\ngoing to put a lot of effort into</text><text start=\"20.72\" dur=\"1.16\">trying to find the right answer.</text><text start=\"21.88\" dur=\"5.32\">So we&amp;#39;d really like to have a way of\nhaving things still be very efficient,</text><text start=\"27.2\" dur=\"1.89\">yet, find the answer we want.</text><text start=\"29.09\" dur=\"2.38\">And it turns out, for a lot of problems,\nwe can do that using a</text><text start=\"31.47\" dur=\"3.16\">wonderful idea called\nbisection search.</text><text start=\"34.63\" dur=\"0.68\">So what do we know?</text><text start=\"35.31\" dur=\"2.02\">Let&amp;#39;s go back to the idea of trying\nto find the square root.</text><text start=\"37.33\" dur=\"3.54\">We know that the square root of x\nlies somewhere between 0 and x.</text><text start=\"40.87\" dur=\"3.95\">We&amp;#39;re assuming x is positive just to\nmake life a little easier for us.</text><text start=\"44.82\" dur=\"2.03\">That&amp;#39;s a mathematical fact.</text><text start=\"46.85\" dur=\"3.09\">Now, what we did was we said\nlet&amp;#39;s start with 0.</text><text start=\"49.94\" dur=\"1.1\">Then, 0 plus a little bit.</text><text start=\"51.04\" dur=\"4\">Then, 0 plus 2 times a little bit, and\nthen 0 times 3 times a little bit,</text><text start=\"55.04\" dur=\"3.42\">trying all of those examples, until we\ngot to something that was close enough</text><text start=\"58.46\" dur=\"1.96\">to the answer we wanted.</text><text start=\"60.42\" dur=\"1.42\">That&amp;#39;s exhaustive.</text><text start=\"61.84\" dur=\"3.63\">Rather than doing that, suppose instead\nwe say, look, we know that the</text><text start=\"65.47\" dur=\"2.19\">square root of x is somewhere\nbetween 0 and x.</text><text start=\"67.66\" dur=\"3.56\">So let&amp;#39;s just pick a guess\nright here in the middle.</text><text start=\"71.22\" dur=\"1.24\">Let&amp;#39;s call that g.</text><text start=\"72.46\" dur=\"3.955\">Let&amp;#39;s just pick the midpoint\nbetween 0 and x and try it.</text><text start=\"76.415\" dur=\"4.405\">Now, if we&amp;#39;re lucky, the answer is\nclose enough and then we&amp;#39;re done.</text><text start=\"80.82\" dur=\"1.39\">That&amp;#39;s unlikely.</text><text start=\"82.21\" dur=\"3.75\">But even if that is not the case,\nwe have a good situation.</text><text start=\"85.96\" dur=\"3.95\">Even if we&amp;#39;re not close enough, we\ncan now ask was that guess g</text><text start=\"89.91\" dur=\"2.6\">too big or too small?</text><text start=\"92.51\" dur=\"6.11\">Well, if g^2 is bigger than x, then\nwe know that it&amp;#39;s too big.</text><text start=\"98.62\" dur=\"5.49\">We know that the square root has to\nlie somewhere between 0 and g.</text><text start=\"104.11\" dur=\"6.33\">And that says we can now instantly\njust focus on this portion.</text><text start=\"110.44\" dur=\"2.505\">Doing that, we can, again, take\nthe midpoint of that.</text><text start=\"112.945\" dur=\"1.535\">Let&amp;#39;s call it another version of g.</text><text start=\"114.48\" dur=\"0.9\">A new g.</text><text start=\"115.38\" dur=\"2.85\">And again, we can say,\nis that close enough?</text><text start=\"118.23\" dur=\"2.92\">If not, is it too big or too small?</text><text start=\"121.15\" dur=\"3.94\">For example, in this case let&amp;#39;s assume\nthat g^2 is less than x.</text><text start=\"125.09\" dur=\"3.13\">That says g is too small,\nand what does that say?</text><text start=\"128.22\" dur=\"6.435\">It says, we know that the actual value\nhas to lie somewhere between my new g</text><text start=\"134.655\" dur=\"1.955\">and the previous g that I guessed.</text><text start=\"136.61\" dur=\"4.26\">And again, we can pick the\nmidpoint and guess again.</text><text start=\"140.87\" dur=\"3.33\">If this works, and it does,\nthis is really cool.</text><text start=\"144.2\" dur=\"6.79\">Because it says, at each stage of this\nbisection search I&amp;#39;m cutting in half</text><text start=\"150.99\" dur=\"2.49\">the size of the range of values\nI have to look at.</text><text start=\"153.48\" dur=\"2.1\">We&amp;#39;re bisecting them, which\nis why it&amp;#39;s called that.</text><text start=\"155.58\" dur=\"4.08\">At each stage we reduce the range of\nvalues that we have to search by half.</text><text start=\"159.66\" dur=\"1.59\">And that is going to\nbe really powerful.</text><text start=\"161.25\" dur=\"2.77\">Rather than just at each stage throwing\naway a little bit, we&amp;#39;re</text><text start=\"164.02\" dur=\"4.24\">cutting down the problem, a big\nportion, each time through.</text><text start=\"168.26\" dur=\"2.575\">So can we capture that idea?</text><text start=\"170.835\" dur=\"3.975\">The answer is, sure, and it&amp;#39;s\nnot that hard to do.</text><text start=\"174.81\" dur=\"1.5\">Again, there&amp;#39;s some code.</text><text start=\"176.31\" dur=\"3.7\">It looks a little bit daunting, but it&amp;#39;s\nreally not as bad as you think.</text><text start=\"180.01\" dur=\"1.4\">What does it say?</text><text start=\"181.41\" dur=\"2.54\">It says, I&amp;#39;m going to have some value\nof x I&amp;#39;m going to start with.</text><text start=\"183.95\" dur=\"2.74\">OK, I&amp;#39;m going to pick an epsilon which\nis going to tell me how close I am,</text><text start=\"186.69\" dur=\"3.23\">and I&amp;#39;m going to keep track of how\nmany guesses I did as well.</text><text start=\"189.92\" dur=\"4.26\">I&amp;#39;m going to set up, initially, a low\nand high value, which are to start</text><text start=\"194.18\" dur=\"1.84\">with 0 and the value of x.</text><text start=\"196.02\" dur=\"4.98\">That&amp;#39;s my range where which I want to\nbe trying to do the computation.</text><text start=\"201\" dur=\"6.09\">My answer is initially going to be the\nmidpoint halfway between low and high.</text><text start=\"207.09\" dur=\"0.98\">And then, what do I do?</text><text start=\"208.07\" dur=\"4.6\">I run through one of these little loops\nwhere, again, I basically say,</text><text start=\"212.67\" dur=\"3.05\">am I close enough?</text><text start=\"215.72\" dur=\"5.72\">If this is true, then\nI&amp;#39;m too far apart.</text><text start=\"221.44\" dur=\"1.89\">I&amp;#39;m not close enough.</text><text start=\"223.33\" dur=\"3.31\">And in that case, well, I&amp;#39;ll print out\nsome information that tells me where I</text><text start=\"226.64\" dur=\"0.66\">currently am.</text><text start=\"227.3\" dur=\"2.8\">I&amp;#39;ll change the number of guesses and\nI&amp;#39;m about to make a new guess.</text><text start=\"230.1\" dur=\"2.01\">And if I&amp;#39;m not close enough,\nwhat does it say to do?</text><text start=\"232.11\" dur=\"5.52\">It says, if my current answer squared is\nless than x, I&amp;#39;m too small, and I&amp;#39;m</text><text start=\"237.63\" dur=\"3.7\">going to change the lower\nend to be that guess.</text><text start=\"241.33\" dur=\"2.2\">I&amp;#39;m moving up the lower end.</text><text start=\"243.53\" dur=\"4.39\">On the other hand, if answered squared\nis bigger than x, then I&amp;#39;m too high</text><text start=\"247.92\" dur=\"7.28\">and I&amp;#39;m going to reduce the\nhigh down to the answer.</text><text start=\"255.2\" dur=\"1.44\">And I&amp;#39;m just going to keep doing that.</text><text start=\"256.64\" dur=\"4.03\">If I keep doing that I&amp;#39;m going to keep\nchunking this thing in half, and</text><text start=\"260.67\" dur=\"3.21\">having done either of those two\npieces I then change my</text><text start=\"263.88\" dur=\"2.45\">answer to gain the midpoint.</text><text start=\"266.33\" dur=\"2.06\">And I do this one more time.</text><text start=\"268.39\" dur=\"3.68\">So I&amp;#39;ll just keep cycling through this,\ncutting in half each time, the</text><text start=\"272.07\" dur=\"3.35\">size of the problem until I get to\nsomething that&amp;#39;s close enough.</text><text start=\"275.42\" dur=\"1.51\">We hope.</text><text start=\"276.93\" dur=\"2.86\">OK, let&amp;#39;s see what happens\nif we do it.</text><text start=\"279.79\" dur=\"4.25\">Here&amp;#39;s some code in my IDLE\nsystem that has it.</text><text start=\"284.04\" dur=\"1.45\">It has exactly that.</text><text start=\"285.49\" dur=\"4.77\">Let&amp;#39;s do this, basically, let&amp;#39;s start\nwith something simple which we said</text><text start=\"290.26\" dur=\"2.07\">was going to be 25.</text><text start=\"292.33\" dur=\"4.54\">And let&amp;#39;s see what happens\nif we evaluate that.</text><text start=\"296.87\" dur=\"1.27\">Oh, look what happens.</text><text start=\"298.14\" dur=\"2.99\">I start off, and let&amp;#39;s look at that,\nI start off with a range</text><text start=\"301.13\" dur=\"1.74\">between 0 and 25.</text><text start=\"302.87\" dur=\"2.29\">And the answers is the midpoint.</text><text start=\"305.16\" dur=\"2.6\">I then, cut down the high end.</text><text start=\"307.76\" dur=\"2.31\">I then, cut down the high end again.</text><text start=\"310.07\" dur=\"1.98\">I then, cut down the low end.</text><text start=\"312.05\" dur=\"1.35\">I then, cut down the low end.</text><text start=\"313.4\" dur=\"2.8\">And you can see at each stage\nit&amp;#39;s reducing the range.</text><text start=\"316.2\" dur=\"4.58\">And after only 13 guesses I get a pretty\ngood guess for what the square</text><text start=\"320.78\" dur=\"1.34\">root of 25 is.</text><text start=\"322.12\" dur=\"0.605\">It&amp;#39;s not exact.</text><text start=\"322.725\" dur=\"3.085\">I happen to know it&amp;#39;s 5, but in\nonly 13 guesses I got it.</text><text start=\"325.81\" dur=\"2.82\">Remember, last time we did 50,000\nguesses to get to something that</text><text start=\"328.63\" dur=\"1.48\">wasn&amp;#39;t, in fact, much better.</text><text start=\"330.11\" dur=\"2.72\">In fact, it wasn&amp;#39;t even\nas good as this guess.</text><text start=\"332.83\" dur=\"3.5\">So notice how it&amp;#39;s cutting down\nthe problem at each stage.</text><text start=\"336.33\" dur=\"3.34\">All right, let&amp;#39;s go try this other\nversion of this, right?</text><text start=\"339.67\" dur=\"1.77\">12345.</text><text start=\"341.44\" dur=\"4.445\">Let&amp;#39;s see what happens if we find, using\nby section first, the square</text><text start=\"345.885\" dur=\"2.135\">root of that.</text><text start=\"348.02\" dur=\"1.52\">We see it cranking along.</text><text start=\"349.54\" dur=\"6.53\">Wow, in 26 steps, it got to something\nthat took a million steps the last</text><text start=\"356.07\" dur=\"0.645\">time around.</text><text start=\"356.715\" dur=\"3.241\">In 26 steps it gets to a pretty\ngood approximation.</text><text start=\"359.956\" dur=\"3.154\">Let&amp;#39;s try something even bigger.</text><text start=\"363.11\" dur=\"3.31\">Let&amp;#39;s see what happens\nif we do that one.</text><text start=\"366.42\" dur=\"3.18\">All right.</text><text start=\"369.6\" dur=\"2.28\">Again, you can see if you look\nat these numbers how quickly</text><text start=\"371.88\" dur=\"1.05\">it&amp;#39;s zeroing in.</text><text start=\"372.93\" dur=\"5.09\">In only 36 steps, it got to the square\nroot of a pretty big number.</text><text start=\"378.02\" dur=\"2.58\">So in fact, this does it really well.</text><text start=\"380.6\" dur=\"2.59\">What can we observe out of this?</text><text start=\"383.19\" dur=\"1.37\">Well, here are some things\nthat we see.</text><text start=\"384.56\" dur=\"2.69\">First of all, bisection search\nradically reduces</text><text start=\"387.25\" dur=\"1.44\">the computation time.</text><text start=\"388.69\" dur=\"3\">And this is part of that original\nmessage that it&amp;#39;s not just having a</text><text start=\"391.69\" dur=\"0.76\">fast computer.</text><text start=\"392.45\" dur=\"3.23\">It&amp;#39;s being smart about how we think\nabout solving the problem.</text><text start=\"395.68\" dur=\"2.79\">And in this case, being smart about how\nwe generate the guess is going to</text><text start=\"398.47\" dur=\"1.78\">be really important.</text><text start=\"400.25\" dur=\"2.57\">So when does this idea of\nbisection search work?</text><text start=\"402.82\" dur=\"2.25\">Well, it should work well on\nproblems where there&amp;#39;s a</text><text start=\"405.07\" dur=\"1.8\">sort of ordering property.</text><text start=\"406.87\" dur=\"3.27\">Meaning, that the value of the\nfunction being solved varies</text><text start=\"410.14\" dur=\"2.37\">monotonically with the input value.</text><text start=\"412.51\" dur=\"3.38\">Another way of saying it is here the\nvalue I&amp;#39;m looking for is g**2.</text><text start=\"415.89\" dur=\"1.94\">Then, it grows as g grows.</text><text start=\"417.83\" dur=\"3.72\">And that says that there&amp;#39;s this nice\nordering of the solutions or the</text><text start=\"421.55\" dur=\"3.64\">potential solutions, and so picking\na midpoint gives me a good way of</text><text start=\"425.19\" dur=\"2.84\">cutting the problem in\nhalf at each stage.</text><text start=\"428.03\" dur=\"2.23\">We&amp;#39;re going to come back to this\nidea of bisection search</text><text start=\"430.26\" dur=\"0.9\">throughout the term.</text><text start=\"431.16\" dur=\"3.79\">It&amp;#39;s a really powerful tool, but you\ncan already see how dramatically it</text><text start=\"434.95\" dur=\"2.02\">reduces the computational cost.</text><text start=\"436.97\" dur=\"1.25\"></text></transcript>\n", "zhKN60gDjk8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.41\"></text><text start=\"0.41\" dur=\"3.15\">So far we&amp;#39;ve been building up\nour repertoire of Python</text><text start=\"3.56\" dur=\"0.76\">expressions.</text><text start=\"4.32\" dur=\"2.97\">We&amp;#39;ve seen numbers and strings\nas primitive data objects.</text><text start=\"7.29\" dur=\"1.59\">We&amp;#39;ve seen assignment,\nthe ability to</text><text start=\"8.88\" dur=\"1.22\">give a name to a value.</text><text start=\"10.1\" dur=\"2.3\">We&amp;#39;ve seen input and output\ncharacteristics.</text><text start=\"12.4\" dur=\"2.53\">We&amp;#39;ve seen the ability to make\ncomparisons, and we&amp;#39;ve added</text><text start=\"14.93\" dur=\"1.219\">in looping constructs.</text><text start=\"16.149\" dur=\"1.811\">Things like for and\nwhile loops.</text><text start=\"17.96\" dur=\"3.02\">With that set of tools, they\nturn out to be sufficient to</text><text start=\"20.98\" dur=\"3.53\">give us what we call a Turing\ncomplete language.</text><text start=\"24.51\" dur=\"0.99\">And what does that mean?</text><text start=\"25.5\" dur=\"2.61\">It says just with that set\nof tools, anything that&amp;#39;s</text><text start=\"28.11\" dur=\"1.76\">computable, we can compute.</text><text start=\"29.87\" dur=\"2.18\">So we can compute anything.</text><text start=\"32.05\" dur=\"1.76\">That&amp;#39;s actually amazing.</text><text start=\"33.81\" dur=\"2.94\">With just that set of tools,\nanything that&amp;#39;s computable, we</text><text start=\"36.75\" dur=\"3.53\">can capture with a description\nusing those sets of tools.</text><text start=\"40.28\" dur=\"1.59\">Sounds like we&amp;#39;re done.</text><text start=\"41.87\" dur=\"2.24\">And of course we&amp;#39;re not, and\npart of the reason we&amp;#39;re not</text><text start=\"44.11\" dur=\"3.12\">is the code we&amp;#39;re able to write\nso far, those scripts</text><text start=\"47.23\" dur=\"3.38\">that we&amp;#39;ve done lack what\nwe call abstraction.</text><text start=\"50.61\" dur=\"1.48\">And let me give you some reasons\nof what I mean by</text><text start=\"52.09\" dur=\"2.5\">that, and then what the\ndefinition of abstraction is.</text><text start=\"54.59\" dur=\"2.66\">For example, as you saw before,\nevery time I want to</text><text start=\"57.25\" dur=\"2.98\">use a script, I&amp;#39;ve got\nto reload the file.</text><text start=\"60.23\" dur=\"2.09\">And if I want to do it with\nsome different parameters,</text><text start=\"62.32\" dur=\"1.999\">I&amp;#39;ve got to change the\nvalues of variables</text><text start=\"64.319\" dur=\"1.841\">before I run that file.</text><text start=\"66.16\" dur=\"3.58\">Moreover, or more importantly,\nI can&amp;#39;t use the same variable</text><text start=\"69.74\" dur=\"1.63\">names other places\nin the code.</text><text start=\"71.37\" dur=\"2.73\">If I&amp;#39;ve got a piece of code this\nusing x, y, and z, I&amp;#39;ve</text><text start=\"74.1\" dur=\"2.62\">got to make sure that they&amp;#39;re\nnot accidentally getting</text><text start=\"76.72\" dur=\"1.11\">changed somewhere else.</text><text start=\"77.83\" dur=\"2.53\">So I&amp;#39;m stuck with having\nto be very careful</text><text start=\"80.36\" dur=\"1.67\">about the use of names.</text><text start=\"82.03\" dur=\"2.46\">And finally, imagine I&amp;#39;ve got\na piece of code that&amp;#39;s</text><text start=\"84.49\" dur=\"2.07\">computing the maximum\nof two numbers.</text><text start=\"86.56\" dur=\"2.04\">I might want to use\nthat many places.</text><text start=\"88.6\" dur=\"2.58\">I&amp;#39;m going to have to copy\nit throughout the code.</text><text start=\"91.18\" dur=\"2.66\">Doesn&amp;#39;t sound too bad, except\nit gets very quickly</text><text start=\"93.84\" dur=\"2.42\">cumbersome to be able to\nmaintain that code.</text><text start=\"96.26\" dur=\"3.18\">Suppose I change my mind about\nthe actual details of how I do</text><text start=\"99.44\" dur=\"1.28\">that computation.</text><text start=\"100.72\" dur=\"2.24\">I&amp;#39;ve got to then search through\nthe code and find all</text><text start=\"102.96\" dur=\"3.5\">the places where I was doing\nthat, and make that change.</text><text start=\"106.46\" dur=\"1.76\">Otherwise I&amp;#39;m going\nto mess up.</text><text start=\"108.22\" dur=\"2.97\">So I lack abstraction, and what\nwe&amp;#39;re going to do is add</text><text start=\"111.19\" dur=\"1.17\">the idea of a function.</text><text start=\"112.36\" dur=\"2.69\">A function is going to give\nus a way to capture a</text><text start=\"115.05\" dur=\"3.73\">computation, to wrap it up in a\npackage and then treat that</text><text start=\"118.78\" dur=\"1.93\">function as if it were\na primitive.</text><text start=\"120.71\" dur=\"4.02\">Something provided to us by\nPython that we can just use.</text><text start=\"124.73\" dur=\"1.27\">Let&amp;#39;s look at that.</text><text start=\"126\" dur=\"2.139\">Here&amp;#39;s a very simple example,\njust to get us started.</text><text start=\"128.139\" dur=\"3.421\">Suppose that we want to take\ntwo numbers whose names, or</text><text start=\"131.56\" dur=\"2.71\">variable names are x and y,\nand we want to compute the</text><text start=\"134.27\" dur=\"2.69\">maximum and bind that\nto the name z.</text><text start=\"136.96\" dur=\"1.76\">Here&amp;#39;s a very simple script\nthat would do it.</text><text start=\"138.72\" dur=\"2.33\">Assuming I&amp;#39;ve got values for\nx and y, I just do the</text><text start=\"141.05\" dur=\"0.95\">comparison.</text><text start=\"142\" dur=\"2.89\">If x is greater than\ny, I bind z to x.</text><text start=\"144.89\" dur=\"3.33\">So there&amp;#39;s a binding there,\nand if not I bind z to y.</text><text start=\"148.22\" dur=\"2.2\">But as I already said, notice\nthe problem here.</text><text start=\"150.42\" dur=\"2.86\">I&amp;#39;m going to have to copy\nthis everywhere that</text><text start=\"153.28\" dur=\"1.07\">I want to use it.</text><text start=\"154.35\" dur=\"1.69\">That&amp;#39;s going to be\na real pain.</text><text start=\"156.04\" dur=\"4.36\">And I can&amp;#39;t reuse x and y,\nbecause if I did, I might</text><text start=\"160.4\" dur=\"1.52\">actually change the values\nhere, and that&amp;#39;s</text><text start=\"161.92\" dur=\"1.04\">going to be a problem.</text><text start=\"162.96\" dur=\"1.14\">So I want to capture this.</text><text start=\"164.1\" dur=\"1.49\">I keep using that word\ncapture, let&amp;#39;s</text><text start=\"165.59\" dur=\"1.21\">see what that means.</text><text start=\"166.8\" dur=\"3.33\">The idea is that we want to wrap\nup that computation, that</text><text start=\"170.13\" dur=\"3.89\">set of mechanical steps, that\nrecipe within a particular</text><text start=\"174.02\" dur=\"3.14\">scope so that we can treat\nthat function, that</text><text start=\"177.16\" dur=\"1.95\">computation as if it\nwere a primitive.</text><text start=\"179.11\" dur=\"3.3\">Then I could just use it by\nsimply calling its name, using</text><text start=\"182.41\" dur=\"2.72\">the name, and I&amp;#39;ll get back\nthat procedure object, and</text><text start=\"185.13\" dur=\"2.55\">giving some input into\nthat function.</text><text start=\"187.68\" dur=\"1.86\">We&amp;#39;ll see how to do\nthat in a second.</text><text start=\"189.54\" dur=\"2.99\">But a key thing by doing this is\nthat the internal details,</text><text start=\"192.53\" dur=\"2.62\">the steps inside of the\ncomputation are going to be</text><text start=\"195.15\" dur=\"1.39\">hidden from the users.</text><text start=\"196.54\" dur=\"1.66\">They won&amp;#39;t know what they\nactually are, they&amp;#39;re going to</text><text start=\"198.2\" dur=\"2.94\">just treat this like what\nwe call a black box.</text><text start=\"201.14\" dur=\"2.77\">Something that we can use that\nsatisfies a particular</text><text start=\"203.91\" dur=\"2.49\">contract, but we don&amp;#39;t need to\nknow the details inside.</text><text start=\"206.4\" dur=\"2.97\">And more importantly, what\nhappens inside won&amp;#39;t have any</text><text start=\"209.37\" dur=\"4.3\">effect on computations outside\nthe scope of this function.</text><text start=\"213.67\" dur=\"1.29\">What does it look like?</text><text start=\"214.96\" dur=\"3.61\">Well, here&amp;#39;s the syntax for a\ndefinition of a function.</text><text start=\"218.57\" dur=\"2.16\">It&amp;#39;s got, let me in fact\ngive you the next</text><text start=\"220.73\" dur=\"0.73\">pieces of it here.</text><text start=\"221.46\" dur=\"3.39\">It&amp;#39;s got a keyword, def, that\ntells Python I&amp;#39;m about to</text><text start=\"224.85\" dur=\"2.6\">create a definition\nof the procedure.</text><text start=\"227.45\" dur=\"1.99\">It has a name for a function.</text><text start=\"229.44\" dur=\"2.49\">And I&amp;#39;ve put that here in angle\nbraces just to say it&amp;#39;ll</text><text start=\"231.93\" dur=\"1.73\">be some particular instance.</text><text start=\"233.66\" dur=\"2.69\">And the name can be any\nlegal Python name.</text><text start=\"236.35\" dur=\"3.43\">And then within parentheses,\nwe&amp;#39;re going to have a sequence</text><text start=\"239.78\" dur=\"2.12\">of 0, 1, or more formal</text><text start=\"241.9\" dur=\"2.52\">parameters, names for variables.</text><text start=\"244.42\" dur=\"2.515\">And those names are going to be\nused in the function body.</text><text start=\"246.935\" dur=\"2.295\">And then we have a colon here.</text><text start=\"249.23\" dur=\"3.33\">That is followed by the body of\nthe function, which is any</text><text start=\"252.56\" dur=\"3.19\">sequence of legal Python\nexpressions that&amp;#39;s going to do</text><text start=\"255.75\" dur=\"1.41\">the actual computation.</text><text start=\"257.16\" dur=\"2.39\">And what we&amp;#39;ll see is that\nwithin that body, we&amp;#39;re going</text><text start=\"259.55\" dur=\"3.96\">to use the names of the formal\nparameters to identify the</text><text start=\"263.51\" dur=\"2.88\">places where we want to use\nthe values associated with</text><text start=\"266.39\" dur=\"0.94\">those parameters.</text><text start=\"267.33\" dur=\"2.08\">So those very lanes are going\nto be used inside</text><text start=\"269.41\" dur=\"1.06\">the function body.</text><text start=\"270.47\" dur=\"1.92\">And of course there&amp;#39;s an\nindentation here just to help</text><text start=\"272.39\" dur=\"2.4\">us determine the scope, or the\nlength of the function</text><text start=\"274.79\" dur=\"1.09\">procedure itself.</text><text start=\"275.88\" dur=\"1.62\">That&amp;#39;s the syntax.</text><text start=\"277.5\" dur=\"1.56\">Let&amp;#39;s look at an example.</text><text start=\"279.06\" dur=\"1.48\">Well, let me go back to\nmy idea of taking</text><text start=\"280.54\" dur=\"1.33\">the max of two numbers.</text><text start=\"281.87\" dur=\"2.25\">Here&amp;#39;s a nice function\ndefinition.</text><text start=\"284.12\" dur=\"3.41\">I say define, and there&amp;#39;s\nthe name, max.</text><text start=\"287.53\" dur=\"3.16\">Inside of the parens here I&amp;#39;ve\ngot two formal parameters, x</text><text start=\"290.69\" dur=\"3.98\">and y, and then the body is\nsimply a description of the</text><text start=\"294.67\" dur=\"1.52\">computations I want to do.</text><text start=\"296.19\" dur=\"2.84\">And I&amp;#39;m going to compare x to y,\nand depending on the value,</text><text start=\"299.03\" dur=\"2.53\">whether x is greater than y or\nnot, I&amp;#39;m either going to</text><text start=\"301.56\" dur=\"2.49\">return the value of x, or\nreturn the value of y.</text><text start=\"304.05\" dur=\"2\">We&amp;#39;ll come back to return in a\nsecond, but let&amp;#39;s just think</text><text start=\"306.05\" dur=\"1.3\">about how would we use this?</text><text start=\"307.35\" dur=\"4.67\">So we invoke this, or we call\nit, as we say, by simply using</text><text start=\"312.02\" dur=\"1.07\">this sort of an expression.</text><text start=\"313.09\" dur=\"3.61\">We say I want to bind z to,\nand there&amp;#39;s the assignment</text><text start=\"316.7\" dur=\"3.39\">statement, the value that this\nfunction max gives me on these</text><text start=\"320.09\" dur=\"1.54\">arguments 3 and 4.</text><text start=\"321.63\" dur=\"4.37\">When we do that function call,\nwhen we invoke max of 3 and 4,</text><text start=\"326\" dur=\"2.76\">we literally get the values\nof these expressions,</text><text start=\"328.76\" dur=\"0.52\">and those are easy.</text><text start=\"329.28\" dur=\"1.32\">In this case they&amp;#39;re\njust numbers.</text><text start=\"330.6\" dur=\"3.99\">And given those values, we are\ngoing to locally bind x to the</text><text start=\"334.59\" dur=\"3.85\">value of 3, y to the value of\n4, just as if they were like</text><text start=\"338.44\" dur=\"2.41\">assignment statements in a\nvery particular scope.</text><text start=\"340.85\" dur=\"4.05\">And then relative to those\nbindings, the body expressions</text><text start=\"344.9\" dur=\"1.2\">are going to be evaluated.</text><text start=\"346.1\" dur=\"2\">And you can see, then, this is\ngoing to do exactly what I did</text><text start=\"348.1\" dur=\"1.13\">with my little script.</text><text start=\"349.23\" dur=\"1.43\">So that&amp;#39;s cool.</text><text start=\"350.66\" dur=\"2.33\">Now, what about the body?</text><text start=\"352.99\" dur=\"3.32\">Well, I said the body can be any\nlegal Python expressions.</text><text start=\"356.31\" dur=\"2.94\">And in the process, if you like,\nwhen I invoke or call a</text><text start=\"359.25\" dur=\"2.66\">procedure definition, it&amp;#39;s\nhaving bound the variable</text><text start=\"361.91\" dur=\"1.32\">names to the values.</text><text start=\"363.23\" dur=\"3.3\">I will simply execute or\nevaluate each of the</text><text start=\"366.53\" dur=\"2.67\">expressions of the body\nin turn until one</text><text start=\"369.2\" dur=\"1.45\">of two things happens.</text><text start=\"370.65\" dur=\"2.11\">Either I run out of expressions,\nI get to the end</text><text start=\"372.76\" dur=\"3.83\">of the body, in which case a\nvery special value called None</text><text start=\"376.59\" dur=\"2.62\">is returned, and that is the\nvalue of the computation.</text><text start=\"379.21\" dur=\"2.19\">And if you think about my\ninvocation, I said I was going</text><text start=\"381.4\" dur=\"2.24\">to bind z to some value.</text><text start=\"383.64\" dur=\"1.83\">If I get to the end of the\nexpression and there&amp;#39;s nothing</text><text start=\"385.47\" dur=\"3.12\">returned, I&amp;#39;m going to\njust bind it to None.</text><text start=\"388.59\" dur=\"2.91\">Alternatively, I will keep\nexecuting instructions until I</text><text start=\"391.5\" dur=\"3.44\">hit that special keyword return\nthat we saw earlier.</text><text start=\"394.94\" dur=\"2.66\">And in that case, the expression\nimmediately</text><text start=\"397.6\" dur=\"4.4\">following that keyword return\nis evaluated, and that value</text><text start=\"402\" dur=\"2.19\">is returned as the value\nof the function call.</text><text start=\"404.19\" dur=\"3.85\">That value becomes, if you like,\nthe semantic value of</text><text start=\"408.04\" dur=\"1.27\">calling that function.</text><text start=\"409.31\" dur=\"2.17\">And that suggests if you look\nback at my code, I&amp;#39;m going to</text><text start=\"411.48\" dur=\"3.15\">be able to then in fact do the\ncomputation, and I&amp;#39;m going to</text><text start=\"414.63\" dur=\"1.91\">be able to reuse it multiple\ntimes to get</text><text start=\"416.54\" dur=\"2.03\">the max of two numbers.</text><text start=\"418.57\" dur=\"3.42\">So, to summarize this then,\nthe sequence of events are</text><text start=\"421.99\" dur=\"3.05\">when we call a function, the\nexpressions for each parameter</text><text start=\"425.04\" dur=\"2.58\">are evaluated the normal way\nthey would be in Python.</text><text start=\"427.62\" dur=\"1.96\">And they are bound to\nthe formal parameter</text><text start=\"429.58\" dur=\"1.12\">names of the function.</text><text start=\"430.7\" dur=\"2.24\">Should be 1 expression for\neach parameter name.</text><text start=\"432.94\" dur=\"2.9\">We then transfer control to the\nfirst expression in the</text><text start=\"435.84\" dur=\"3.32\">body of the procedure, in the\nbody of the function, and we</text><text start=\"439.16\" dur=\"1.03\">start evaluating.</text><text start=\"440.19\" dur=\"3.41\">And those expressions are\nevaluated or executed until</text><text start=\"443.6\" dur=\"3.3\">either that return keyword is\nreached, in which case we get</text><text start=\"446.9\" dur=\"2.85\">the value of the following\nexpression and return it back,</text><text start=\"449.75\" dur=\"3.11\">or we run out of expressions,\nthereby returning None.</text><text start=\"452.86\" dur=\"2.91\">And after that, the implication\nis bound to the</text><text start=\"455.77\" dur=\"2.58\">return value, and as that return\nvalue is what is passed</text><text start=\"458.35\" dur=\"3.02\">out to whatever asks for it, and\ncontrol transfers to the</text><text start=\"461.37\" dur=\"0.99\">next piece of code.</text><text start=\"462.36\" dur=\"1.84\">In the next segment, we&amp;#39;re going\nto look at some details</text><text start=\"464.2\" dur=\"2.73\">of understanding mechanically\nhow this happens, but there&amp;#39;s</text><text start=\"466.93\" dur=\"1.56\">the idea of a function\ndefinition.</text><text start=\"468.49\" dur=\"1.25\"></text></transcript>\n", "e7IErqC25nU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.435\"></text><text start=\"0.435\" dur=\"2.345\">ERIC GRIMSON: So we&amp;#39;ve now\nstarting to see some</text><text start=\"2.78\" dur=\"2.25\">interesting examples\nof recursion.</text><text start=\"5.03\" dur=\"2.4\">In the case of Towers of Hanoi\nwe saw an example of where the</text><text start=\"7.43\" dur=\"3.48\">recursive call might involve\nmultiple subproblems,</text><text start=\"10.91\" dur=\"1.79\">in that case too.</text><text start=\"12.7\" dur=\"2.61\">We also will see examples of\nrecursion where it may have</text><text start=\"15.31\" dur=\"1.49\">multiple base cases.</text><text start=\"16.8\" dur=\"1.3\">And let&amp;#39;s look at\nanother classic</text><text start=\"18.1\" dur=\"2.38\">example, Fibonacci numbers.</text><text start=\"20.48\" dur=\"3.29\">The history of this is several\ncenturies ago Leonardo of</text><text start=\"23.77\" dur=\"3.62\">Pisa, also known as Fibonacci,\nwanted to model how quickly</text><text start=\"27.39\" dur=\"2.3\">rabbits breed.</text><text start=\"29.69\" dur=\"2.35\">And he built a model that&amp;#39;s not\ncompletely realistic, but</text><text start=\"32.04\" dur=\"2.46\">still gives you an interesting\nprocess.</text><text start=\"34.5\" dur=\"2.14\">And he described\nit as follows.</text><text start=\"36.64\" dur=\"1.86\">He took a newborn, or he wanted\nto take, rather, a</text><text start=\"38.5\" dur=\"2.25\">newborn pair of rabbits,\n1 male, 1 female, and</text><text start=\"40.75\" dur=\"1.62\">put them in a pen.</text><text start=\"42.37\" dur=\"4.02\">He assumed that rabbits mate\nat age of 1 month, and that</text><text start=\"46.39\" dur=\"2.84\">the gestation period for a\nrabbit is also a month.</text><text start=\"49.23\" dur=\"3.68\">So after 1 month rabbits can\nmate, a month later, the</text><text start=\"52.91\" dur=\"2.73\">female will produce offspring.</text><text start=\"55.64\" dur=\"3.95\">And in particular, he assumed\nthat the females will always</text><text start=\"59.59\" dur=\"4.32\">produce a new pair, 1 male, 1\nfemale, every month from the</text><text start=\"63.91\" dur=\"1.299\">second month on.</text><text start=\"65.209\" dur=\"1.841\">And finally he assumed that\nrabbits don&amp;#39;t die.</text><text start=\"67.05\" dur=\"2.8\">Which is not true, but it&amp;#39;s an\ninteresting way to try and</text><text start=\"69.85\" dur=\"0.99\">deal with it.</text><text start=\"70.84\" dur=\"3.15\">And the question was, how many\nfemale rabbits are there at</text><text start=\"73.99\" dur=\"3.52\">the end of 1 year, 2 years,\nhowever many years?</text><text start=\"77.51\" dur=\"3.33\">So, that was the model.</text><text start=\"80.84\" dur=\"2.39\">Here&amp;#39;s how we can actually\nthink about it</text><text start=\"83.23\" dur=\"1.5\">computationally.</text><text start=\"84.73\" dur=\"1.24\">We want to know the\nnumber of females.</text><text start=\"85.97\" dur=\"1.85\">So at the end of 1 month,\nlet&amp;#39;s call it</text><text start=\"87.82\" dur=\"1.82\">0, we&amp;#39;ve got 1 female.</text><text start=\"89.64\" dur=\"1.98\">That&amp;#39;s what we started with.</text><text start=\"91.62\" dur=\"3.12\">After the second month, there&amp;#39;s\nstill 1 female, but</text><text start=\"94.74\" dur=\"1.72\">she&amp;#39;s now pregnant.</text><text start=\"96.46\" dur=\"3.45\">And at the third month, she&amp;#39;s\ngoing to deliver.</text><text start=\"99.91\" dur=\"2.65\">So, in fact, not only is there\nnow that female, but there&amp;#39;s a</text><text start=\"102.56\" dur=\"1.17\">second female.</text><text start=\"103.73\" dur=\"1.04\">1 pregnant.</text><text start=\"104.77\" dur=\"1.37\">1 not.</text><text start=\"106.14\" dur=\"5.05\">And in general, we can figure\nout the formulation of the</text><text start=\"111.19\" dur=\"2.15\">recursive expression,\nif you like.</text><text start=\"113.34\" dur=\"4.69\">Because in general, every female\nalive at month n - 2 is</text><text start=\"118.03\" dur=\"2.66\">going to produce a female\nat month n.</text><text start=\"120.69\" dur=\"2.54\">It takes 2 months for\nthat to happen.</text><text start=\"123.23\" dur=\"3.29\">Those new females that are\ngenerated at month n, can be</text><text start=\"126.52\" dur=\"2.399\">added to those that were alive\nthe previous month, because</text><text start=\"128.919\" dur=\"0.891\">those are the new females.</text><text start=\"129.81\" dur=\"4.1\">So the total number of females\nat month n is the number that</text><text start=\"133.91\" dur=\"2.33\">were alive at month n - 2,\nbecause each one of them has</text><text start=\"136.24\" dur=\"3.77\">produced a new offspring, plus\nall the ones that were alive</text><text start=\"140.01\" dur=\"1.68\">at month n - 1.</text><text start=\"141.69\" dur=\"2.025\">And so you can see at month\n0 there will be 1.</text><text start=\"143.715\" dur=\"2.295\">At month 1 there will be 1.</text><text start=\"146.01\" dur=\"1.09\">At month 2.</text><text start=\"147.1\" dur=\"1.27\">There will be 2.</text><text start=\"148.37\" dur=\"1.71\">At month 3 there will be 3.</text><text start=\"150.08\" dur=\"2.47\">And now you can see we&amp;#39;re just\nadding to create the next one.</text><text start=\"152.55\" dur=\"1.44\">At month 4 there will be 5.</text><text start=\"153.99\" dur=\"2.59\">At month 5 there will be 8.</text><text start=\"156.58\" dur=\"3.03\">And 13, and so on.</text><text start=\"159.61\" dur=\"0.43\">OK.</text><text start=\"160.04\" dur=\"2.2\">We don&amp;#39;t really care whether\nthis is a good model for</text><text start=\"162.24\" dur=\"2.43\">rabbits, although you can see\nwhy Australia may be suffering</text><text start=\"164.67\" dur=\"2.59\">the problems it does when 24\nrabbits were introduced into</text><text start=\"167.26\" dur=\"1.65\">their ecosystem.</text><text start=\"168.91\" dur=\"4.05\">But let&amp;#39;s think about just\nwriting code to capture it.</text><text start=\"172.96\" dur=\"1.79\">Description is nice and easy.</text><text start=\"174.75\" dur=\"3.54\">And notice here, Fibonacci\nhas 2 base cases.</text><text start=\"178.29\" dur=\"1.91\">Base case for the\nzeroth month.</text><text start=\"180.2\" dur=\"1.59\">Base case for the first month.</text><text start=\"181.79\" dur=\"2.74\">That base case in both\ninstances is 1.</text><text start=\"184.53\" dur=\"4.16\">And then the recursive case\nis what we just described.</text><text start=\"188.69\" dur=\"1.04\">OK.</text><text start=\"189.73\" dur=\"3.08\">And the code, nice and simple.</text><text start=\"192.81\" dur=\"1.98\">I&amp;#39;m going to add 1 new thing\nhere, which is this assert</text><text start=\"194.79\" dur=\"1.31\">statement right here.</text><text start=\"196.1\" dur=\"1.97\">So let me spend a\nsecond on that.</text><text start=\"198.07\" dur=\"2.07\">Here&amp;#39;s my definition\nfor Fibonacci.</text><text start=\"200.14\" dur=\"0.815\">I&amp;#39;ve got a specification.</text><text start=\"200.955\" dur=\"2.995\">It says assume that x is an\ninteger and it&amp;#39;s greater than</text><text start=\"203.95\" dur=\"1.09\">or equal to 0.</text><text start=\"205.04\" dur=\"2.56\">If that&amp;#39;s the case, I&amp;#39;m\ngoing to return the</text><text start=\"207.6\" dur=\"2.08\">Fibonacci number of x.</text><text start=\"209.68\" dur=\"3.89\">Assert is something that\nbasically takes an expression,</text><text start=\"213.57\" dur=\"2.96\">which is a Boolean, and in this\ncase, it&amp;#39;s an expression</text><text start=\"216.53\" dur=\"2.94\">that has 2 subexpressions, both\nof which are Booleans.</text><text start=\"219.47\" dur=\"2.67\">And what assert does is it\na checks to see is that</text><text start=\"222.14\" dur=\"1.16\">statement true.</text><text start=\"223.3\" dur=\"1.96\">So here what you see we&amp;#39;ve been\ndoing is we&amp;#39;re saying,</text><text start=\"225.26\" dur=\"2.7\">given x, let&amp;#39;s make sure that\nit is, in fact, an int by</text><text start=\"227.96\" dur=\"1.25\">checking its type.</text><text start=\"229.21\" dur=\"2.73\">And let&amp;#39;s make sure that it\nsatisfies the condition of</text><text start=\"231.94\" dur=\"1.7\">being greater than\nor equal to 0.</text><text start=\"233.64\" dur=\"3.68\">And if both of those are true,\nthen the body of the procedure</text><text start=\"237.32\" dur=\"1.72\">will be evaluated.</text><text start=\"239.04\" dur=\"2.36\">But if either of them is not, if\nthe overall expression for</text><text start=\"241.4\" dur=\"2.35\">the assert is false,\nit&amp;#39;s going to stop</text><text start=\"243.75\" dur=\"2.5\">and return an error.</text><text start=\"246.25\" dur=\"2.25\">Inside of fib, it&amp;#39;s exactly\nwhat we&amp;#39;d expect.</text><text start=\"248.5\" dur=\"1.19\">I&amp;#39;ve got two base cases.</text><text start=\"249.69\" dur=\"2.09\">I happen to be checking them\nwith just one Boolean</text><text start=\"251.78\" dur=\"1.31\">combination.</text><text start=\"253.09\" dur=\"2.66\">Two base cases and a value to\nreturn and otherwise I&amp;#39;m</text><text start=\"255.75\" dur=\"4.329\">returning, just like in towers,\na recursive call done</text><text start=\"260.079\" dur=\"3.191\">twice, I&amp;#39;m returning the\nsum of fib(x) - 1 ,</text><text start=\"263.27\" dur=\"2.49\">and fib(x) - 2.</text><text start=\"265.76\" dur=\"2.62\">OK, let&amp;#39;s try running it.</text><text start=\"268.38\" dur=\"1.92\">So I&amp;#39;m going to go\nover to idle.</text><text start=\"270.3\" dur=\"2.28\">I have my version of fib.</text><text start=\"272.58\" dur=\"1\">And let&amp;#39;s check.</text><text start=\"273.58\" dur=\"3.48\">Let&amp;#39;s check the base cases.\nfib(0) should be 1.</text><text start=\"277.06\" dur=\"1.39\">It is.</text><text start=\"278.45\" dur=\"2.73\">fib(1) should be 1.</text><text start=\"281.18\" dur=\"1.42\">And then what did\nwe also know?</text><text start=\"282.6\" dur=\"1.91\">Well, we said that fib(2)\nought to be the</text><text start=\"284.51\" dur=\"1.02\">sum of those two.</text><text start=\"285.53\" dur=\"1.16\">And it is.</text><text start=\"286.69\" dur=\"2.52\">fib(3) ought to be the sum\nof the previous two.</text><text start=\"289.21\" dur=\"1.07\">And it is.</text><text start=\"290.28\" dur=\"2.23\">fib(4) ought to be the sum\nof the previous two.</text><text start=\"292.51\" dur=\"0.44\">And it is.</text><text start=\"292.95\" dur=\"2.2\">And you can see it&amp;#39;s\ndoing pretty well.</text><text start=\"295.15\" dur=\"2.91\">And so, how many at month 12?</text><text start=\"298.06\" dur=\"2.19\">233.</text><text start=\"300.25\" dur=\"2.03\">Gets bad fairly quickly.</text><text start=\"302.28\" dur=\"3.54\">Just to give an example of\nthat, at 13 it jumps up.</text><text start=\"305.82\" dur=\"6.1\">And If I go to something like\nsay fib(15) , or fib(16) ,</text><text start=\"311.92\" dur=\"2.09\">it&amp;#39;s climbing pretty quickly.</text><text start=\"314.01\" dur=\"0.92\">But there we are.</text><text start=\"314.93\" dur=\"2.25\">We&amp;#39;ve got a way of computing\nFibonacci.</text><text start=\"317.18\" dur=\"1.25\">Great.</text><text start=\"318.43\" dur=\"0.3\"></text></transcript>\n", "QgDq9EieZTg": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.19\"></text><text start=\"1.19\" dur=\"3.03\">ERIC GRIMSON: Now, you may still\nbe a little concerned.</text><text start=\"4.22\" dur=\"2.42\">I&amp;#39;ve tried to show you that,\nusing this environment model,</text><text start=\"6.64\" dur=\"3\">we can see how the computation\nof a recursive function should</text><text start=\"9.64\" dur=\"1.9\">do the right thing, but\nyou may still be</text><text start=\"11.54\" dur=\"1.42\">saying, wait a minute.</text><text start=\"12.96\" dur=\"1.03\">Does this really work?</text><text start=\"13.99\" dur=\"2.65\">How do we know that our\nrecursive code will work?</text><text start=\"16.64\" dur=\"2.34\">And when I say will work, how\ndo we know both that it&amp;#39;s</text><text start=\"18.98\" dur=\"2.22\">actually going to stop, and\nhow do we know that it</text><text start=\"21.2\" dur=\"2.59\">computes the value that\nwe want it to?</text><text start=\"23.79\" dur=\"2.51\">So I&amp;#39;d like to walk you through\nthat a little bit just</text><text start=\"26.3\" dur=\"2.65\">to give you a sense of how\nwe can reason about it.</text><text start=\"28.95\" dur=\"3.03\">Let&amp;#39;s start with the\niterative version.</text><text start=\"31.98\" dur=\"4.45\">iterMul we know terminates\nbecause b starts out initially</text><text start=\"36.43\" dur=\"2.77\">positive, and each time\nthrough the loop, it</text><text start=\"39.2\" dur=\"1.71\">decreases by 1.</text><text start=\"40.91\" dur=\"2.79\">And just by simple logic, if it\nstarts out as a positive or</text><text start=\"43.7\" dur=\"3.37\">non-zero, non-negative value\nas an integer, and we keep</text><text start=\"47.07\" dur=\"2.6\">decreasing by one, at some\npoint, it&amp;#39;s going to get down</text><text start=\"49.67\" dur=\"3.17\">to 0, which was our test case,\nand it&amp;#39;s going to stop.</text><text start=\"52.84\" dur=\"1.28\">Great.</text><text start=\"54.12\" dur=\"3.7\">Now, what about recursive mul?</text><text start=\"57.82\" dur=\"2.55\">We can actually reason about\nit in a similar way.</text><text start=\"60.37\" dur=\"3.29\">We know that recursive mul, if\nit&amp;#39;s called with b as the</text><text start=\"63.66\" dur=\"2.6\">value of 1, stops, because\nthere&amp;#39;s no</text><text start=\"66.26\" dur=\"1.13\">additional work to do.</text><text start=\"67.39\" dur=\"1.95\">The code simply said\nreturn a value.</text><text start=\"69.34\" dur=\"2.36\">So we know it stops, and we also\nknow it gives us back the</text><text start=\"71.7\" dur=\"2.37\">right value.</text><text start=\"74.07\" dur=\"1.72\">What else do we know?</text><text start=\"75.79\" dur=\"2.81\">Well, we know from our code that\nif we call recursive mul</text><text start=\"78.6\" dur=\"4.79\">with an integer bigger than 1\nas a value of b, it makes a</text><text start=\"83.39\" dur=\"2.36\">recursive call with a slightly\nsmaller version,</text><text start=\"85.75\" dur=\"1.86\">in fact, b - 1.</text><text start=\"87.61\" dur=\"3.39\">But by exactly the reasoning\nthat we just used here, we can</text><text start=\"91\" dur=\"1.97\">apply the same argument\nto that call.</text><text start=\"92.97\" dur=\"1.59\">It&amp;#39;s going to make a recursive\ncall with a</text><text start=\"94.56\" dur=\"1.08\">smaller version of b.</text><text start=\"95.64\" dur=\"3.99\">And because b is reducing by 1\neach time, it started a bigger</text><text start=\"99.63\" dur=\"3.95\">than 0, eventually we have to\nget to a place where it has a</text><text start=\"103.58\" dur=\"2.78\">recursive call with b = 1, which\nsays we&amp;#39;re going to get</text><text start=\"106.36\" dur=\"2.94\">back down to that case and\nwe&amp;#39;re going to stop.</text><text start=\"109.3\" dur=\"0.85\">Great.</text><text start=\"110.15\" dur=\"1.5\">So we know it stops.</text><text start=\"111.65\" dur=\"1.95\">How do we know it does\nthe right thing?</text><text start=\"113.6\" dur=\"1.55\">Well, we&amp;#39;re going\nto come to that.</text><text start=\"115.15\" dur=\"2.45\">And to do that, I&amp;#39;m going to\nburrow with a little bit of a</text><text start=\"117.6\" dur=\"3.45\">side tour a tool for\nmathematics.</text><text start=\"121.05\" dur=\"2.61\">Because in fact, what we can do\nis we can use the idea of</text><text start=\"123.66\" dur=\"4.479\">mathematical induction\nto reason about code.</text><text start=\"128.139\" dur=\"1.661\">What&amp;#39;s mathematical\ninduction, say?</text><text start=\"129.8\" dur=\"2.05\">Well, if you haven&amp;#39;t seen it\nbefore, here&amp;#39;s a simple</text><text start=\"131.85\" dur=\"0.43\">definition.</text><text start=\"132.28\" dur=\"2.78\">If we want to prove a statement,\na mathematical</text><text start=\"135.06\" dur=\"3.3\">statement that is indexed on the\nintegers, that is, it&amp;#39;s a</text><text start=\"138.36\" dur=\"3.11\">statement where one of the\nparameters is an integer, if</text><text start=\"141.47\" dur=\"2.31\">we want to show that that\nstatement is true for all</text><text start=\"143.78\" dur=\"4.17\">values of n, here&amp;#39;s how\nmathematical induction works.</text><text start=\"147.95\" dur=\"3.32\">We&amp;#39;re first going to prove\nthat it&amp;#39;s true for n&amp;#39;s</text><text start=\"151.27\" dur=\"2.35\">smallest value, which will\ntypically be when</text><text start=\"153.62\" dur=\"2.95\">n = 0 or n = 1.</text><text start=\"156.57\" dur=\"4.83\">And then we&amp;#39;re going to prove\nthat if that statement is true</text><text start=\"161.4\" dur=\"3.31\">for an arbitrary value of n, you\ncan show that it must be</text><text start=\"164.71\" dur=\"2.88\">true when n is 1 bigger.</text><text start=\"167.59\" dur=\"3.64\">If we can prove these things, we\ncan prove it&amp;#39;s correct for</text><text start=\"171.23\" dur=\"4.76\">small values, and we can prove\nthat, given any value, it&amp;#39;s</text><text start=\"175.99\" dur=\"2.27\">true for the next\nlarger value.</text><text start=\"178.26\" dur=\"2.85\">Then induction says we can\nassume it is true for all</text><text start=\"181.11\" dur=\"1.37\">values of n.</text><text start=\"182.48\" dur=\"2.64\">That&amp;#39;s powerful, because it&amp;#39;s\na way of helping us deduce</text><text start=\"185.12\" dur=\"4.09\">that our code, if we can use it\nthere, works all the time.</text><text start=\"189.21\" dur=\"1.96\">This may sound a little funny,\nso let&amp;#39;s look at a very simple</text><text start=\"191.17\" dur=\"1.79\">example from math.</text><text start=\"192.96\" dur=\"1.53\">And here&amp;#39;s the simple example.</text><text start=\"194.49\" dur=\"3.35\">If I add up all the integers\nfrom 0, 1, all the way up to</text><text start=\"197.84\" dur=\"4.7\">n, the claim is that that is\nequal to n * n + 1, all</text><text start=\"202.54\" dur=\"1.57\">divided by 2.</text><text start=\"204.11\" dur=\"1.8\">That&amp;#39;s a little statement of\nfact from mathematics.</text><text start=\"205.91\" dur=\"1.88\">But let&amp;#39;s see how induction\nwould actually</text><text start=\"207.79\" dur=\"1.63\">let us prove that.</text><text start=\"209.42\" dur=\"2.48\">So if we wanted to prove it,\nwhat do we have to do?</text><text start=\"211.9\" dur=\"2.68\">Well, we&amp;#39;ve got to look at the\nbase case, the simple case.</text><text start=\"214.58\" dur=\"2.27\">If n = 0, what do we know?</text><text start=\"216.85\" dur=\"4.28\">Well, this left hand side of\nthat equation is just 0, so</text><text start=\"221.13\" dur=\"0.99\">that&amp;#39;s done.</text><text start=\"222.12\" dur=\"2.6\">In the right hand side,\nI&amp;#39;ll substitute n.</text><text start=\"224.72\" dur=\"4.7\">If n = 0, that says 0 * 1\n/ 2, well that&amp;#39;s 0, so</text><text start=\"229.42\" dur=\"1.48\">we know it&amp;#39;s true.</text><text start=\"230.9\" dur=\"1.41\">OK.</text><text start=\"232.31\" dur=\"7.31\">The inductive step says that\nwe need to now assume that</text><text start=\"239.62\" dur=\"3.24\">this statement is true for some\nvalue, let&amp;#39;s call it k.</text><text start=\"242.86\" dur=\"3.51\">And what we need to then show is\nthat, as a consequence, we</text><text start=\"246.37\" dur=\"2.95\">can also established that\nit&amp;#39;s true for k + 1.</text><text start=\"249.32\" dur=\"2.06\">So we&amp;#39;re assuming it&amp;#39;s true for\nsmaller versions of the</text><text start=\"251.38\" dur=\"1.37\">problem, and we want\nto show it&amp;#39;s for</text><text start=\"252.75\" dur=\"1.27\">the next larger version.</text><text start=\"254.02\" dur=\"2.999\">If we can do that, then\ncan prove it&amp;#39;s</text><text start=\"257.019\" dur=\"1.481\">true for all values.</text><text start=\"258.5\" dur=\"0.94\">So what do we need to do?</text><text start=\"259.44\" dur=\"4.89\">We need to show that this\nis equal to that.</text><text start=\"264.33\" dur=\"3.3\">OK, but this left hand side,\nthat is just the same as</text><text start=\"267.63\" dur=\"3.6\">taking this part + k + 1.</text><text start=\"271.23\" dur=\"2.63\">And that part, we&amp;#39;ve\nassumed is true.</text><text start=\"273.86\" dur=\"0.99\">That was part of\nour assumption.</text><text start=\"274.85\" dur=\"1.39\">We said it&amp;#39;s true for\nsmaller versions.</text><text start=\"276.24\" dur=\"3.73\">So we know why that one is\ngiven by this definition.</text><text start=\"279.97\" dur=\"5.516\">So that is simply\nthis plus that.</text><text start=\"285.486\" dur=\"0.804\">OK.</text><text start=\"286.29\" dur=\"1.25\">That&amp;#39;s nice.</text><text start=\"287.54\" dur=\"2.33\">And then, I can just do a\nlittle bit of algebra.</text><text start=\"289.87\" dur=\"1.96\">I&amp;#39;m not going to do it here, but\nif I just do the additions</text><text start=\"291.83\" dur=\"3.73\">together, by a little bit of\nalgebra, I can show that this</text><text start=\"295.56\" dur=\"2.39\">piece here becomes that piece.</text><text start=\"297.95\" dur=\"3.52\">Ah, and that&amp;#39;s exactly what I\nwanted to prove, because this</text><text start=\"301.47\" dur=\"4.9\">is just that definition\nwhere n = k + 1.</text><text start=\"306.37\" dur=\"1.37\">What have I done?</text><text start=\"307.74\" dur=\"2.5\">All right, so, I show it&amp;#39;s true\nin the simple case, and</text><text start=\"310.24\" dur=\"2.31\">then I said, let&amp;#39;s assume\nit&amp;#39;s true for all</text><text start=\"312.55\" dur=\"1.77\">cases up to some size.</text><text start=\"314.32\" dur=\"3.28\">Given that I can prove it&amp;#39;s true\nfor the next larger case,</text><text start=\"317.6\" dur=\"4.1\">by induction, I can assume that\nit is true for all sizes.</text><text start=\"321.7\" dur=\"1.57\">Great.</text><text start=\"323.27\" dur=\"4.14\">What does that have\nto do with code.</text><text start=\"327.41\" dur=\"3.36\">Well, the same logic\napplies to code.</text><text start=\"330.77\" dur=\"4.19\">There&amp;#39;s my recursive mul, and\nlet&amp;#39;s look what we have.</text><text start=\"334.96\" dur=\"4.64\">In the base case, we can show\nthat recursive mul stops, if b</text><text start=\"339.6\" dur=\"2.362\">= 1, it just returns a value,\nand more importantly, it gives</text><text start=\"341.962\" dur=\"1.358\">us the right answer.</text><text start=\"343.32\" dur=\"0.64\">It gives us back a.</text><text start=\"343.96\" dur=\"2.74\">OK. a * 1 is just a.</text><text start=\"346.7\" dur=\"0.81\">And then what do we know?</text><text start=\"347.51\" dur=\"4.32\">In the recursive case, we can\nassume that recursive mul</text><text start=\"351.83\" dur=\"2.63\">correctly returns an answer\nfor problems of size</text><text start=\"354.46\" dur=\"1.59\">smaller than b.</text><text start=\"356.05\" dur=\"1.26\">And then what do we know?</text><text start=\"357.31\" dur=\"4.11\">Well, by this step right here,\nwe know that this is not only</text><text start=\"361.42\" dur=\"2.11\">going to give us an answer, it&amp;#39;s\ngoing to give us back the</text><text start=\"363.53\" dur=\"5.32\">correct answer for a * b - 1,\nand therefore, we can deduce</text><text start=\"368.85\" dur=\"2.63\">that this will return an answer\nbecause it&amp;#39;s just doing</text><text start=\"371.48\" dur=\"2.98\">an addition, and giving us\nback the right answer.</text><text start=\"374.46\" dur=\"2.24\">So it must give us back\nthe correct answer for</text><text start=\"376.7\" dur=\"1.16\">problem size b.</text><text start=\"377.86\" dur=\"3.84\">And therefore, by induction,\nwe&amp;#39;ve just shown that this</text><text start=\"381.7\" dur=\"2.74\">code always stops and returns\nthe correct answer.</text><text start=\"384.44\" dur=\"1.99\">And when we say always stops,\nstops if we give it an</text><text start=\"386.43\" dur=\"2.24\">appropriate value for a and b.</text><text start=\"388.67\" dur=\"2.27\">We&amp;#39;re not going to do a lot of\nproofs throughout this course,</text><text start=\"390.94\" dur=\"3.12\">but this is one nice way\nof seeing how thinking</text><text start=\"394.06\" dur=\"2.22\">recursively actually\nworks very well.</text><text start=\"396.28\" dur=\"2.85\">And we&amp;#39;re guaranteed, if we do\nit properly, that it will give</text><text start=\"399.13\" dur=\"1.57\">us correct answers, and\nit will terminate.</text><text start=\"400.7\" dur=\"1.26\"></text></transcript>\n", "J1zJNuEFw2U": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"2.73\"></text><text start=\"2.73\" dur=\"3.84\">So we&amp;#39;re going to do one last\nexample in this sequence.</text><text start=\"6.57\" dur=\"2.01\">We&amp;#39;ve been looking at\napproximation algorithms.</text><text start=\"8.58\" dur=\"2.56\">We&amp;#39;ve been looking at guess\nand check, exhaustive</text><text start=\"11.14\" dur=\"1.14\">enumeration.</text><text start=\"12.28\" dur=\"2.22\">We saw when we wanted to move\nto floating point, we needed</text><text start=\"14.5\" dur=\"2.45\">to be a little more clever, and\nthat led us to the idea of</text><text start=\"16.95\" dur=\"3.35\">bisection as a smart way of\nreducing the computation at</text><text start=\"20.3\" dur=\"3.42\">each stage, especially when we\nhave functions or problems</text><text start=\"23.72\" dur=\"3.2\">where there&amp;#39;s a monotonic\nrelationship between the value</text><text start=\"26.92\" dur=\"2.27\">we&amp;#39;re looking for and the\nguesses we&amp;#39;re making.</text><text start=\"29.19\" dur=\"2.23\">There&amp;#39;s one other, very\npowerful, algorithm for doing</text><text start=\"31.42\" dur=\"3.23\">approximations, due to Sir Isaac\nNewton, often called the</text><text start=\"34.65\" dur=\"3.34\">Newton-Raphson algorithm because\nit was found at the</text><text start=\"37.99\" dur=\"2.36\">same time by Newton\nand by Raphson.</text><text start=\"40.35\" dur=\"2.4\">Here&amp;#39;s the basic\nidea behind it.</text><text start=\"42.75\" dur=\"1.92\">We want to find the root\nof a polynomial.</text><text start=\"44.67\" dur=\"3.87\">I&amp;#39;ll remind you a polynomial,\np(x), is some sequence of</text><text start=\"48.54\" dur=\"4.77\">coefficients and powers, so it&amp;#39;s\na_n * x to the n-th power</text><text start=\"53.31\" dur=\"4.5\">+ a_n - 1 * x to the n minus\nfirst power and so on.</text><text start=\"57.81\" dur=\"3.99\">It&amp;#39;s just a sequence of numbers\ntimes powers of x, and</text><text start=\"61.8\" dur=\"3.5\">what we often want to do is find\na value r such that p(r)</text><text start=\"65.3\" dur=\"0.72\">is equal to 0.</text><text start=\"66.02\" dur=\"4.27\">We want to find the root, the\nplace where, on that x-axis,</text><text start=\"70.29\" dur=\"2.58\">that graph crosses 0.</text><text start=\"72.87\" dur=\"1.05\">Now, that sounds like\na lot of math.</text><text start=\"73.92\" dur=\"1.01\">Let&amp;#39;s make it a little\nsimpler.</text><text start=\"74.93\" dur=\"2.31\">A simple way to think about this\nis if we want to define,</text><text start=\"77.24\" dur=\"3.46\">for example, the square root\nof 24, we just need to find</text><text start=\"80.7\" dur=\"3.54\">the root of the polynomial\nx^2 - 24.</text><text start=\"84.24\" dur=\"3\">Makes sense, if we combine the\nvalue of x such that x^2 - 24</text><text start=\"87.24\" dur=\"2.59\">is equal to 0, we&amp;#39;re\ndone because that&amp;#39;s</text><text start=\"89.83\" dur=\"1.6\">the thing we want.</text><text start=\"91.43\" dur=\"3.61\">Now, what Newton showed was\nthat for things like</text><text start=\"95.04\" dur=\"4.14\">polynomials, if g is an\napproximation to the root, the</text><text start=\"99.18\" dur=\"9.4\">place where it&amp;#39;s equal to 0,\nthen g - p(g) / p&amp;#39;(g) is a</text><text start=\"108.58\" dur=\"3.78\">better approximation, where p&amp;#39;\nis just the derivative of p.</text><text start=\"112.36\" dur=\"1.46\">And if you haven&amp;#39;t\ndone calculus,</text><text start=\"113.82\" dur=\"0.6\">don&amp;#39;t worry about it.</text><text start=\"114.42\" dur=\"2.4\">We&amp;#39;ll show you in a second what\nthat means, but this is a</text><text start=\"116.82\" dur=\"0.78\">powerful tool.</text><text start=\"117.6\" dur=\"6.04\">Newton proved this, that given\nan approximation, g - p(g) /</text><text start=\"123.64\" dur=\"3.56\">p&amp;#39;(g) is a much better\napproximation.</text><text start=\"127.2\" dur=\"1.68\">OK, so what does this have\nto do with things?</text><text start=\"128.88\" dur=\"2.98\">Well, let&amp;#39;s look at an example,\na really simple case.</text><text start=\"131.86\" dur=\"4.59\">Suppose our polynomial is just\nsome coefficient c times x^2 +</text><text start=\"136.45\" dur=\"4.48\">k, then its first derivative\nis just 2cx.</text><text start=\"140.93\" dur=\"2.29\">And in particular, if the\npolynomial is just something</text><text start=\"143.22\" dur=\"4.5\">simple, like x^2 + k, then the\nderivative is just 2x.</text><text start=\"147.72\" dur=\"0.79\">Why is that nice?</text><text start=\"148.51\" dur=\"3.31\">Well, Newton-Raphson says that\ngiven a guess g for the root,</text><text start=\"151.82\" dur=\"5.87\">a better guess is just shown\nright here, is g - g^2 - k,</text><text start=\"157.69\" dur=\"1.76\">all divided by 2g.</text><text start=\"159.45\" dur=\"3.23\">And remember, we were using\nthis form to find square</text><text start=\"162.68\" dur=\"5.59\">roots, because it says if k is\nthe value of the square root I</text><text start=\"168.27\" dur=\"2.74\">want to find, then that&amp;#39;s the\npolynomial I want to use.</text><text start=\"171.01\" dur=\"2.86\">So this little formula says\nhere&amp;#39;s a better way of finding</text><text start=\"173.87\" dur=\"4.43\">a guess for the square\nroot of k.</text><text start=\"178.3\" dur=\"2.97\">All right, let&amp;#39;s put\nthat together.</text><text start=\"181.27\" dur=\"2.96\">We can now have another way of\ngenerating guesses, which we</text><text start=\"184.23\" dur=\"3.17\">can check, which turns out to\nbe very efficient, so here&amp;#39;s</text><text start=\"187.4\" dur=\"1.09\">some code that would do it.</text><text start=\"188.49\" dur=\"2.47\">Again, I&amp;#39;ve got a little epsilon\nthat tells me how</text><text start=\"190.96\" dur=\"1.24\">close I want to get.</text><text start=\"192.2\" dur=\"2.17\">Let&amp;#39;s assume I&amp;#39;m looking for\nthe square root of 24.</text><text start=\"194.37\" dur=\"2.26\">We&amp;#39;ll try some other examples\nin a second.</text><text start=\"196.63\" dur=\"1.56\">I&amp;#39;m going to give an initial\nguess, which</text><text start=\"198.19\" dur=\"1.76\">will just be y / 2.</text><text start=\"199.95\" dur=\"1.19\">It&amp;#39;s not a very good\nguess, but it&amp;#39;s</text><text start=\"201.14\" dur=\"1.57\">reasonable place to go.</text><text start=\"202.71\" dur=\"1.4\">And look at the code.</text><text start=\"204.11\" dur=\"3.27\">Very crisp, very clean,\nvery efficient.</text><text start=\"207.38\" dur=\"6.01\">It basically says check to\nsee am I close enough.</text><text start=\"213.39\" dur=\"3.476\">Is the difference between the\nguess^2 and y less than or</text><text start=\"216.866\" dur=\"0.684\">equal to the epsilon.</text><text start=\"217.55\" dur=\"2.56\">If it&amp;#39;s bigger than that,\nI&amp;#39;m not close enough.</text><text start=\"220.11\" dur=\"3.47\">And then Newton says get a new\nguess by taking the old value</text><text start=\"223.58\" dur=\"4.78\">of guess, taking guess^2 - 1,\ndivide it by 2 * guess, which</text><text start=\"228.36\" dur=\"2.46\">is the derivative, and\nuse that to create a</text><text start=\"230.82\" dur=\"1.59\">new binding for guess.</text><text start=\"232.41\" dur=\"1.21\">You just keep updating.</text><text start=\"233.62\" dur=\"2.43\">Do that until I get close\nenough, and when I&amp;#39;m done,</text><text start=\"236.05\" dur=\"2.31\">just print out the result.</text><text start=\"238.36\" dur=\"1.18\">Nice and crisp.</text><text start=\"239.54\" dur=\"1.05\">What&amp;#39;s this doing?</text><text start=\"240.59\" dur=\"1.96\">It&amp;#39;s generating guesses.</text><text start=\"242.55\" dur=\"2.63\">There&amp;#39;s the generation.</text><text start=\"245.18\" dur=\"1.54\">But it&amp;#39;s not doing\nit exhaustively.</text><text start=\"246.72\" dur=\"2.76\">It&amp;#39;s using this property of\nmathematics together, and then</text><text start=\"249.48\" dur=\"3.26\">it&amp;#39;s testing, right here,\nto see if I&amp;#39;m done.</text><text start=\"252.74\" dur=\"2.32\">So it&amp;#39;s another example of a\ngenerate and test kind of</text><text start=\"255.06\" dur=\"3.25\">algorithm, and let&amp;#39;s look at\nwhat happens if we run it.</text><text start=\"258.31\" dur=\"2.11\">So in my IDLE, I&amp;#39;ve got just\na version of that.</text><text start=\"260.42\" dur=\"1.86\">I&amp;#39;m going to do it with\n24 to start with.</text><text start=\"262.28\" dur=\"5.25\">And if I evaluate this, it\nprints out its guesses, starts</text><text start=\"267.53\" dur=\"4.58\">with a value of 14, and\nthen goes to 7, 5.</text><text start=\"272.11\" dur=\"3.07\">And you see, in just\n4 guesses, it gets</text><text start=\"275.18\" dur=\"1.51\">a pretty good answer.</text><text start=\"276.69\" dur=\"1.06\">Let&amp;#39;s try a different example.</text><text start=\"277.75\" dur=\"3.942\">Let&amp;#39;s try our good old\nexample of 25.</text><text start=\"281.692\" dur=\"5.588\">Again, if I evaluate that one,\nyou&amp;#39;ll see again, in basically</text><text start=\"287.28\" dur=\"3.27\">five steps because the first one\nwas using 12 and a half,</text><text start=\"290.55\" dur=\"3.05\">it gets to a quite good\napproximation of it.</text><text start=\"293.6\" dur=\"1.39\">Let&amp;#39;s try something\neven bigger.</text><text start=\"294.99\" dur=\"1.93\">I&amp;#39;ll go back over here.</text><text start=\"296.92\" dur=\"5.75\">Let&amp;#39;s do my example of 12345\nand let&amp;#39;s evaluate that.</text><text start=\"302.67\" dur=\"1.76\">And if we do that--</text><text start=\"304.43\" dur=\"0.77\">huh.</text><text start=\"305.2\" dur=\"0.67\">What did it take me?</text><text start=\"305.87\" dur=\"5.21\">1, 2, 3, 4, 5, 6, 7, 8, 9-- in\n10 steps, it got to a really</text><text start=\"311.08\" dur=\"1.41\">good solution.</text><text start=\"312.49\" dur=\"1.03\">So this is what?</text><text start=\"313.52\" dur=\"3.82\">This is another way of simply\nfiguring out how to generate</text><text start=\"317.34\" dur=\"2.93\">good guesses and then\ntesting them.</text><text start=\"320.27\" dur=\"2.78\">So we&amp;#39;ve now seen several\nexamples.</text><text start=\"323.05\" dur=\"1.78\">We&amp;#39;ve got this idea of\niterative algorithms.</text><text start=\"324.83\" dur=\"2.74\">We&amp;#39;re using the same piece of\ncode over and over again.</text><text start=\"327.57\" dur=\"2.94\">We&amp;#39;re using that to build up\nthis idea of a guess and check</text><text start=\"330.51\" dur=\"3.45\">method where we guess solutions\nand then check them.</text><text start=\"333.96\" dur=\"2.86\">We use a looping construct to\ngenerate the guesses, and then</text><text start=\"336.82\" dur=\"1.95\">we just check and keep going.</text><text start=\"338.77\" dur=\"1.16\">And what have we seen?</text><text start=\"339.93\" dur=\"2.31\">We&amp;#39;ve seen we could do\nexhaustive enumeration, where</text><text start=\"342.24\" dur=\"2.02\">we just do a whole\nbunch of trials.</text><text start=\"344.26\" dur=\"2.64\">We could cut down on the search\nin a clever way by</text><text start=\"346.9\" dur=\"3.31\">simply using bisection,\nbisecting the range of places</text><text start=\"350.21\" dur=\"1.99\">where we&amp;#39;re looking for guesses\nuntil we get to</text><text start=\"352.2\" dur=\"1.29\">something close enough.</text><text start=\"353.49\" dur=\"2.44\">Or for the group finding case,\nwhich it turns out to be a</text><text start=\"355.93\" dur=\"2.97\">very general case, we can be\nreally efficient by taking</text><text start=\"358.9\" dur=\"3.08\">advantage of a mathematical\nproperty to very quickly cut</text><text start=\"361.98\" dur=\"2.26\">down on where the\nsolution lies.</text><text start=\"364.24\" dur=\"2.79\">Those are examples of iterative\nalgorithms, and</text><text start=\"367.03\" dur=\"2.22\">they&amp;#39;re examples, in particular,\nof guess and check</text><text start=\"369.25\" dur=\"2.6\">methods that turned out\nto be really powerful.</text><text start=\"371.85\" dur=\"2.15\">And we&amp;#39;re going to give you a\nchance to explore those as we</text><text start=\"374\" dur=\"1.25\">move through the class.</text><text start=\"375.25\" dur=\"0.9\"></text></transcript>\n", "bckOwpozezo": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.04\"></text><text start=\"1.04\" dur=\"2.62\">Chris Terman: Our next example comes\nfrom the world of text formatting,</text><text start=\"3.66\" dur=\"3.74\">where we&amp;#39;re trying to position the\nwords on a page to produce an</text><text start=\"7.4\" dur=\"2.56\">attractive and readable layout.</text><text start=\"9.96\" dur=\"1.4\">Two challenges here.</text><text start=\"11.36\" dur=\"2.62\">First, we have to come up with a\ngood metric for measuring the</text><text start=\"13.98\" dur=\"1.83\">goodness of a layout.</text><text start=\"15.81\" dur=\"4.26\">And secondly, we want to structure the\nproblem in such a way that there&amp;#39;s a</text><text start=\"20.07\" dur=\"5.38\">good possibility of overlapping\nsubproblems as we do our search.</text><text start=\"25.45\" dur=\"6.08\">Compare how we choose to structure the\nsubproblems for the layout problem</text><text start=\"31.53\" dur=\"3.68\">versus how we did it for the\n0/ 1 knapsack problem.</text><text start=\"35.21\" dur=\"3.59\">I think you&amp;#39;ll find there&amp;#39;s\na lot of similarities.</text><text start=\"38.8\" dur=\"3.97\">Our goal in this problem is to find\nthe optimal layout of words in a</text><text start=\"42.77\" dur=\"4.44\">paragraph so as to make the result\nlook the most pleasing.</text><text start=\"47.21\" dur=\"5.26\">This over here is simply the operation\nof a greedy algorithm, where we take</text><text start=\"52.47\" dur=\"4.15\">the words as they come along, and we\nkeep adding them to the line until we</text><text start=\"56.62\" dur=\"3.31\">run out of space and the next word\nwould cause us to go beyond the</text><text start=\"59.93\" dur=\"3.03\">margin, so what we have to do\nis to start a new line.</text><text start=\"62.96\" dur=\"4.32\">So this is the result of a simple\ngreedy layout algorithm.</text><text start=\"67.28\" dur=\"3.75\">People don&amp;#39;t like this because of\nthe large indentation here.</text><text start=\"71.03\" dur=\"3.76\">And in fact, there are four spaces\nhere at the end of this line.</text><text start=\"74.79\" dur=\"2.02\">And that&amp;#39;s considered to look ugly.</text><text start=\"76.81\" dur=\"3.66\">They would much prefer a layout that\nlooks like this, where the right</text><text start=\"80.47\" dur=\"3.19\">margin is kept as even as possible.</text><text start=\"83.66\" dur=\"2.47\">In this case, that&amp;#39;s achieved\nby having two spaces at</text><text start=\"86.13\" dur=\"2.32\">the end of each line.</text><text start=\"88.45\" dur=\"4.07\">So this is what we would like\nto achieve if possible.</text><text start=\"92.52\" dur=\"2.13\">And the way that was reduced\nto an algorithm--</text><text start=\"94.65\" dur=\"5.77\">and this is following the example of Don\nKnuth and his tech layout language</text><text start=\"100.42\" dur=\"3.99\">is we simply compute the number of\nspaces at the end of each line.</text><text start=\"104.41\" dur=\"3.87\">We&amp;#39;re going to actually omit the last\nline from this calculation, because we</text><text start=\"108.28\" dur=\"3.475\">don&amp;#39;t mind if the paragraph has\nextra spaces on its last line.</text><text start=\"111.755\" dur=\"1.855\">So we&amp;#39;re going to omit the last line.</text><text start=\"113.61\" dur=\"5.02\">But otherwise, what we&amp;#39;re going to do is\nto compute the number of spaces in</text><text start=\"118.63\" dur=\"4.34\">each line, take the cube of that result,\nand sum it up to compute the</text><text start=\"122.97\" dur=\"2.65\">badness of a particular layout.</text><text start=\"125.62\" dur=\"2.43\">And we&amp;#39;re trying to find\nthe layout that has the</text><text start=\"128.05\" dur=\"1.709\">minimum amount of badness.</text><text start=\"129.759\" dur=\"4.741\">So in this case, with the four spaces at\nthe end of the second line, we end</text><text start=\"134.5\" dur=\"3.27\">up with a badness of 4 cubed, or 64.</text><text start=\"137.77\" dur=\"4.92\">In the better example, over here we see\nwe have basically two spaces at</text><text start=\"142.69\" dur=\"1.45\">the end of two lines.</text><text start=\"144.14\" dur=\"3.6\">So the total badness is 16.</text><text start=\"147.74\" dur=\"4.07\">And so, according to the badness\nmeasure, this layout is to be much</text><text start=\"151.81\" dur=\"3.8\">preferred to the original\ngreedy layout.</text><text start=\"155.61\" dur=\"4.37\">So how do we divide the line breaks\nproblem into subproblems?</text><text start=\"159.98\" dur=\"1.29\">Well, here&amp;#39;s our formulation.</text><text start=\"161.27\" dur=\"3.95\">We&amp;#39;re going to define formula called\nlineBreaks, which, given a list of</text><text start=\"165.22\" dur=\"3.71\">words, a starting column-- so initially\nthat will be zero, because</text><text start=\"168.93\" dur=\"3.43\">we&amp;#39;re starting on the first\ncolumn of the first line--</text><text start=\"172.36\" dur=\"3.97\">and a maximum width, which is the total\nwidth in the previous example--</text><text start=\"176.33\" dur=\"1.9\">that was 13 columns--</text><text start=\"178.23\" dur=\"5\">that we want the paragraph to be laid\nout with, is going to return the</text><text start=\"183.23\" dur=\"0.94\">actual paragraph.</text><text start=\"184.17\" dur=\"4.39\">So this is a string, which represents\nthe optimal laid out paragraph.</text><text start=\"188.56\" dur=\"4.67\">And this is the cost of the badness.</text><text start=\"193.23\" dur=\"3.26\">So this is what we&amp;#39;re trying\nto minimize here.</text><text start=\"196.49\" dur=\"4.57\">So how do we break an initial\nproblem into subproblems?</text><text start=\"201.06\" dur=\"1.16\">It goes as follows.</text><text start=\"202.22\" dur=\"5.64\">What we do is we consider taking the\nfirst word from the list and basically</text><text start=\"207.86\" dur=\"2.45\">saying, look, there&amp;#39;s no line\nbreak after this word.</text><text start=\"210.31\" dur=\"3.19\">So what we&amp;#39;re going to do is to lay out\nthe rest of the list, but we&amp;#39;re</text><text start=\"213.5\" dur=\"2.78\">going to start after the first word.</text><text start=\"216.28\" dur=\"7.22\">So the remaining words will start on\nthe same line as the current word,</text><text start=\"223.5\" dur=\"5.17\">except the starting column will\nbe moved over by the width</text><text start=\"228.67\" dur=\"1.51\">of the first word.</text><text start=\"230.18\" dur=\"5.42\">Plus a 1 that corresponds to the spaces\nbetween the first word and the</text><text start=\"235.6\" dur=\"1.37\">rest of the words.</text><text start=\"236.97\" dur=\"5.59\">So the subproblem is, please lay out\nall the rest of the word list, but</text><text start=\"242.56\" dur=\"4.01\">leave room in the current line\nfor the current word.</text><text start=\"246.57\" dur=\"5.92\">And when we get back, we&amp;#39;ll simply\nmodify the string that represents the</text><text start=\"252.49\" dur=\"4.039\">paragraph that&amp;#39;s been laid out to\ninclude us at the beginning of the</text><text start=\"256.529\" dur=\"1.581\">first line of that paragraph.</text><text start=\"258.11\" dur=\"4.7\">And then, as we return up, more words\nwill accumulate on each line.</text><text start=\"262.81\" dur=\"1.98\">So that&amp;#39;s the first alternative.</text><text start=\"264.79\" dur=\"5.08\">The second alternative is to say, look,\nmaybe what we&amp;#39;ll do is to put a</text><text start=\"269.87\" dur=\"3.46\">new line after the first\nword in the list.</text><text start=\"273.33\" dur=\"2.32\">In other words, the first word in the\nlist will actually be the end of the</text><text start=\"275.65\" dur=\"1.07\">current line.</text><text start=\"276.72\" dur=\"5.68\">So laying out the remaining words will\nbasically start on a new line.</text><text start=\"282.4\" dur=\"5.45\">So the column that we&amp;#39;re going to ask\nfor all the rest of the words to be</text><text start=\"287.85\" dur=\"5.01\">laid out on, the starting column,\nwill be starting at zero.</text><text start=\"292.86\" dur=\"0.48\">OK.</text><text start=\"293.34\" dur=\"3.15\">And so again, we have the subproblem.</text><text start=\"296.49\" dur=\"3.84\">And then, when we get back the answer\nfor the subproblem, we&amp;#39;ll go off and</text><text start=\"300.33\" dur=\"5.81\">add our word at the beginning of that\nlist, but instead of separating it</text><text start=\"306.14\" dur=\"4.13\">from the remaining words by a space,\nwe&amp;#39;re going to make sure that the</text><text start=\"310.27\" dur=\"1.79\">remaining words start on a new line.</text><text start=\"312.06\" dur=\"2.73\">So we&amp;#39;ll put in this new\nline character here.</text><text start=\"314.79\" dur=\"6.58\">And since our current word is at the end\nof a line in the paragraph, we&amp;#39;ll</text><text start=\"321.37\" dur=\"3.63\">go off and compute the cost,\nnow, and add that to the</text><text start=\"325\" dur=\"2.54\">total cost of the paragraph.</text><text start=\"327.54\" dur=\"4.31\">So what we do is we go through the\nentire word list until we get to the</text><text start=\"331.85\" dur=\"4.55\">end, and then we&amp;#39;re slowly building the\nparagraph back up, computing the</text><text start=\"336.4\" dur=\"4.63\">cost every time we run across\nthe end of a new line.</text><text start=\"341.03\" dur=\"3.15\">The lecture code includes an\nimplementation of the line breaks</text><text start=\"344.18\" dur=\"3.31\">algorithm along the lines\nwe just discussed.</text><text start=\"347.49\" dur=\"3.87\">There are two cases where we\nterminate the recursion.</text><text start=\"351.36\" dur=\"3.82\">One is when we reach the end of\nthe paragraph, there&amp;#39;s no more</text><text start=\"355.18\" dur=\"1.35\">words to lay out.</text><text start=\"356.53\" dur=\"4.38\">And the other is if the word that we&amp;#39;ve\njust placed on the line actually</text><text start=\"360.91\" dur=\"1.89\">go goes past the end.</text><text start=\"362.8\" dur=\"4.08\">In that case, we want to return an\ninfinite cost for this alternative,</text><text start=\"366.88\" dur=\"4.32\">because it&amp;#39;s illegal for a word\nto go past the margin.</text><text start=\"371.2\" dur=\"4.7\">Otherwise, we&amp;#39;ve implemented\nthe two alternatives just</text><text start=\"375.9\" dur=\"1.29\">as described before--</text><text start=\"377.19\" dur=\"3.99\">one where the remaining words are laid\nout on the same line as the current</text><text start=\"381.18\" dur=\"3\">word, and the other in which the\nremaining words are laid</text><text start=\"384.18\" dur=\"1.96\">out on a new line.</text><text start=\"386.14\" dur=\"6.1\">We simply choose the least costly of the\nalternatives to return as the desk</text><text start=\"392.24\" dur=\"6.3\">layout for the word list, including\nthe first word.</text><text start=\"398.54\" dur=\"6\">Just for comparison, we&amp;#39;ve included\na definition of a greedy layout</text><text start=\"404.54\" dur=\"3.93\">algorithm, so we can see what sort of\nbadness it computes, and hopefully our</text><text start=\"408.47\" dur=\"1.93\">layout algorithm will do better.</text><text start=\"410.4\" dur=\"3.05\">And we&amp;#39;ve included a\ncouple test cases.</text><text start=\"413.45\" dur=\"5.2\">One is the short word list that we used\nat the beginning of this segment.</text><text start=\"418.65\" dur=\"3.81\">And the other is a longer statement\ninvolving a piece of</text><text start=\"422.46\" dur=\"2\">the Gettysburg Address.</text><text start=\"424.46\" dur=\"2.72\">Notice we&amp;#39;re doing an exhaustive search\nof where to place the new</text><text start=\"427.18\" dur=\"5.2\">lines, and we would anticipate that\nwith this long a list, that the</text><text start=\"432.38\" dur=\"4.72\">recursive search-- the exhaustive\nsearch-- will in fact run for a very,</text><text start=\"437.1\" dur=\"1.43\">very long time.</text><text start=\"438.53\" dur=\"2.3\">Let&amp;#39;s give it a whirl.</text><text start=\"440.83\" dur=\"2.56\">Let&amp;#39;s start by testing this\non our short list.</text><text start=\"443.39\" dur=\"6.07\">So we&amp;#39;re going to test breaks, and we&amp;#39;re\ngoing to use the original little</text><text start=\"449.46\" dur=\"3.51\">five or six word paragraph, and\nwe&amp;#39;re going to lay that out in</text><text start=\"452.97\" dur=\"2.27\">a width of 13 columns.</text><text start=\"455.24\" dur=\"5.37\">And you can see that our optimal layout\ndid achieve a cost of 16.</text><text start=\"460.61\" dur=\"3.53\">And the greedy layout had the cost\nof 64, just as we computed</text><text start=\"464.14\" dur=\"1.43\">on the first slide.</text><text start=\"465.57\" dur=\"3.27\">Now, let&amp;#39;s try our longer example.</text><text start=\"468.84\" dur=\"2.92\">So this is with the second word\nlist, the Gettysburg Address--</text><text start=\"471.76\" dur=\"3.14\">or the first couple paragraphs\nof the Gettysburg Address.</text><text start=\"474.9\" dur=\"4.65\">Let&amp;#39;s try it with a width of 40.</text><text start=\"479.55\" dur=\"3.23\">And in fact, you can see that it&amp;#39;s not\ngoing to return, because it&amp;#39;s off</text><text start=\"482.78\" dur=\"1.65\">trying that optimal layout.</text><text start=\"484.43\" dur=\"4.04\">And it&amp;#39;s going to have to work for a\nvery long time, because the exhaustive</text><text start=\"488.47\" dur=\"3.3\">search, or trying every possible\ncombination of line breaks, is</text><text start=\"491.77\" dur=\"2.55\">essentially computationally\nintractable.</text><text start=\"494.32\" dur=\"1.82\">So I&amp;#39;m going to stop that.</text><text start=\"496.14\" dur=\"3.05\">And you can see, I was really\ndeep in the recursion.</text><text start=\"499.19\" dur=\"4.98\">And then, what I&amp;#39;m going to do now,\nis go off and memoize line breaks.</text><text start=\"504.17\" dur=\"3.6\">So &amp;quot;memoize.&amp;quot; So this is the\nadvantage of having that</text><text start=\"507.77\" dur=\"1\">general purpose function.</text><text start=\"508.77\" dur=\"2.37\">We don&amp;#39;t have to rewrite\nany of our code.</text><text start=\"511.14\" dur=\"4.46\">We&amp;#39;re just going to apply our general\npurpose technique for dealing with</text><text start=\"515.6\" dur=\"3.939\">overlapping subproblems, was to use\nour little cache of previously</text><text start=\"519.539\" dur=\"1.471\">computed answers.</text><text start=\"521.01\" dur=\"3.63\">So now, if we do that,\nand we test it now--</text><text start=\"524.64\" dur=\"6.54\">again, using the long list with the 40,\nwe can see that we get our answer</text><text start=\"531.18\" dur=\"1.19\">right away.</text><text start=\"532.37\" dur=\"4.09\">The line breaks had a\ntotal cost of 1068.</text><text start=\"536.46\" dur=\"5.68\">And you can see the margin here is as\nsmooth as it felt it could make it.</text><text start=\"542.14\" dur=\"3.09\">The greedy breaks had a cost of 2124.</text><text start=\"545.23\" dur=\"4.45\">And the real difference here occurs on\nthis line, where we can see that after</text><text start=\"549.68\" dur=\"4.08\">the word great, there&amp;#39;s a large indent\nbecause of &amp;quot;battlefield&amp;quot;</text><text start=\"553.76\" dur=\"1.54\">being such a long word.</text><text start=\"555.3\" dur=\"3.84\">And that&amp;#39;s what caused this cost\nto go through the roof.</text><text start=\"559.14\" dur=\"6.29\">So this is yet another example of a\nimplementation where there must be a</text><text start=\"565.43\" dur=\"2.28\">large number of overlapping\nsubproblems.</text><text start=\"567.71\" dur=\"2.21\">And it&amp;#39;s interesting to think\nabout why that is.</text><text start=\"569.92\" dur=\"1.25\"></text></transcript>\n", "2Y5CrREsJ-4": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"2.98\">ERIC GRIMSON: OK, we&amp;#39;re almost\nready to start getting our</text><text start=\"2.98\" dur=\"1.91\">computer to do things for us.</text><text start=\"4.89\" dur=\"2.56\">As we&amp;#39;ve said, we want to take\nthat idea of computational</text><text start=\"7.45\" dur=\"3.45\">thinking, taking a problem and\nbreaking it down into a</text><text start=\"10.9\" dur=\"2.72\">sequence of mechanical steps\nthat will let us deduce</text><text start=\"13.62\" dur=\"1.442\">solutions to that problem.</text><text start=\"15.062\" dur=\"2.938\">And we want to be able to take\nthat description and somehow</text><text start=\"18\" dur=\"1.98\">convert it into a form that\nthe computer can do</text><text start=\"19.98\" dur=\"1.43\">the work for us.</text><text start=\"21.41\" dur=\"3.54\">That says we need a way of\ndescribing those sequences of</text><text start=\"24.95\" dur=\"2.91\">steps, and that&amp;#39;s where the\nprogramming language comes in.</text><text start=\"27.86\" dur=\"2.94\">Programming language is going to\ndefine both the syntax and</text><text start=\"30.8\" dur=\"3.08\">semantics that we need to\ntranslate our computational</text><text start=\"33.88\" dur=\"2.42\">ideas into mechanical steps.</text><text start=\"36.3\" dur=\"2.71\">Syntax, I&amp;#39;ll remind you, says\nhow we put together legal</text><text start=\"39.01\" dur=\"1\">expressions?</text><text start=\"40.01\" dur=\"3.11\">Semantics says, how do we deduce\nthe meanings associated</text><text start=\"43.12\" dur=\"2.27\">with those expressions, which\nis going to let us solve the</text><text start=\"45.39\" dur=\"1.4\">problems that we want.</text><text start=\"46.79\" dur=\"1.99\">We&amp;#39;re almost ready to start\ntalking about a programming</text><text start=\"48.78\" dur=\"1.99\">language, but we need to\nmake one more choice.</text><text start=\"50.77\" dur=\"2.26\">And that choice comes\ndown to the kind</text><text start=\"53.03\" dur=\"1.43\">of programming language.</text><text start=\"54.46\" dur=\"2.22\">One way to think about this is,\nno matter which language</text><text start=\"56.68\" dur=\"1.99\">we use, the interaction with\nthe computer will all be</text><text start=\"58.67\" dur=\"1.34\">roughly the same.</text><text start=\"60.01\" dur=\"2.33\">We&amp;#39;re going to take\nan input and</text><text start=\"62.34\" dur=\"1.03\">provide it to the computer.</text><text start=\"63.37\" dur=\"1.93\">That&amp;#39;s what we call\nthe source code.</text><text start=\"65.3\" dur=\"2.95\">That input is then going to\ngo through some kind of</text><text start=\"68.25\" dur=\"1.09\">computational process.</text><text start=\"69.34\" dur=\"3.67\">And when we&amp;#39;re done, we&amp;#39;d like\nto get a result printed out or</text><text start=\"73.01\" dur=\"2.05\">returned by the computer.</text><text start=\"75.06\" dur=\"3.41\">And right here is where that\ncomputational process is going</text><text start=\"78.47\" dur=\"1.47\">to take place.</text><text start=\"79.94\" dur=\"3.03\">And we have some choices here\nin terms of how the computer</text><text start=\"82.97\" dur=\"2.57\">actually deals with taking\nour input and</text><text start=\"85.54\" dur=\"1.326\">reducing it to an output.</text><text start=\"86.866\" dur=\"2.394\">And let&amp;#39;s look at what those\nchoices might say.</text><text start=\"89.26\" dur=\"3.3\">One choice is that we can use\nwhat&amp;#39;s called a low level</text><text start=\"92.56\" dur=\"1.24\">programming language.</text><text start=\"93.8\" dur=\"2.7\">Low level says that the\ninstructions we type in or</text><text start=\"96.5\" dur=\"3.12\">that we enter into the computer\nare very similar to</text><text start=\"99.62\" dur=\"2.71\">the internal control unit\nwe saw last time.</text><text start=\"102.33\" dur=\"2.67\">Those instructions might be at\nthe level of saying, move data</text><text start=\"105\" dur=\"3.66\">from one location of memory to\nanother, or execute a simple</text><text start=\"108.66\" dur=\"2.96\">ALU, or arithmetic logic\nunit operation, like</text><text start=\"111.62\" dur=\"2.54\">add, subtract, compare.</text><text start=\"114.16\" dur=\"2.4\">It might also involve jumping to\na new point in the sequence</text><text start=\"116.56\" dur=\"2.01\">of instructions based\non that comparison.</text><text start=\"118.57\" dur=\"3.3\">But the programming would be\ndone in a very low level.</text><text start=\"121.87\" dur=\"3.07\">Once you make that decision to\nuse this kind of a programming</text><text start=\"124.94\" dur=\"2.31\">language, then the stages within\nthe computer are pretty</text><text start=\"127.25\" dur=\"0.91\">straightforward.</text><text start=\"128.16\" dur=\"2.68\">There is a process called a\nchecker, which takes that low</text><text start=\"130.84\" dur=\"3.25\">level code and just confirms\nthat the syntax is correct and</text><text start=\"134.09\" dur=\"2.13\">that the static semantics\nare correct.</text><text start=\"136.22\" dur=\"3.04\">And then, it passes the sequence\nof instructions on</text><text start=\"139.26\" dur=\"2.43\">through a process called the\ninterpreter that simply</text><text start=\"141.69\" dur=\"3.1\">follows that sequence, much as\nwe saw last time, ending up</text><text start=\"144.79\" dur=\"2.055\">with some output that gets\nprinted back out to us.</text><text start=\"146.845\" dur=\"2.965\">So on a low level language,\nwe&amp;#39;re programming, basically,</text><text start=\"149.81\" dur=\"1.9\">at the level of the machine.</text><text start=\"151.71\" dur=\"1.3\">That&amp;#39;s one option.</text><text start=\"153.01\" dur=\"2.12\">There&amp;#39;s a second option, though,\nwhich is to use what&amp;#39;s</text><text start=\"155.13\" dur=\"2.41\">called a high level language.</text><text start=\"157.54\" dur=\"4.46\">And a high level language uses\nmore abstract kinds of terms.</text><text start=\"162\" dur=\"2.91\">We might want to talk about\nhaving the computer think</text><text start=\"164.91\" dur=\"3.05\">about, invert a matrix, compute\na function, compare</text><text start=\"167.96\" dur=\"1.82\">two complex data structures.</text><text start=\"169.78\" dur=\"2.43\">We&amp;#39;d like to be able to program,\nif you&amp;#39;d like, at the</text><text start=\"172.21\" dur=\"3.43\">level of thinking about higher\nkinds of abstractions.</text><text start=\"175.64\" dur=\"2.99\">Now here, again, we&amp;#39;ve\ngot a choice.</text><text start=\"178.63\" dur=\"4.9\">In a compiled language, those\nabstractions are then first</text><text start=\"183.53\" dur=\"4.22\">checked, as they did before, but\nthen converted back into</text><text start=\"187.75\" dur=\"1.36\">low level code.</text><text start=\"189.11\" dur=\"3.79\">So there is a special thing, or\nspecial process, inside the</text><text start=\"192.9\" dur=\"3\">computer called a compiler\nthat takes the checked</text><text start=\"195.9\" dur=\"3.86\">sequence of instructions and\nreduces or converts them back</text><text start=\"199.76\" dur=\"2.886\">down to those basic computer\ninstructions that we know we</text><text start=\"202.646\" dur=\"3.034\">need and those are then run\nthrough the interpreter in</text><text start=\"205.68\" dur=\"2\">order to execute the\nactual process.</text><text start=\"207.68\" dur=\"3.06\">So this is certainly one way to\ndo it, a compiled language.</text><text start=\"210.74\" dur=\"0.7\">There&amp;#39;s an alternative.</text><text start=\"211.44\" dur=\"4.76\">And the alternative is, again,\nto have a high level language,</text><text start=\"216.2\" dur=\"2.04\">run it through the checker\nas before.</text><text start=\"218.24\" dur=\"2.91\">But in an interpreted language,\nthere&amp;#39;s a special</text><text start=\"221.15\" dur=\"2.54\">program that converts that\nsource code to an internal</text><text start=\"223.69\" dur=\"2.92\">data structure and then\nsequentially converts each</text><text start=\"226.61\" dur=\"3.83\">step into a low machine\ninstructions and executions.</text><text start=\"230.44\" dur=\"3.44\">That says we&amp;#39;re going to, one\ninstruction at a time, do the</text><text start=\"233.88\" dur=\"2.05\">conversion and execution.</text><text start=\"235.93\" dur=\"2.37\">And in this case, this\nis the kind of like</text><text start=\"238.3\" dur=\"0.53\">you&amp;#39;re going to use.</text><text start=\"238.83\" dur=\"3.37\">In this course, we&amp;#39;re going to\nuse Python, which belongs to</text><text start=\"242.2\" dur=\"2.74\">this class of interpreted\nprogramming languages.</text><text start=\"244.94\" dur=\"2.07\">Now, you might say, so\nwhat are the choices?</text><text start=\"247.01\" dur=\"0.98\">What are the tradeoffs here?</text><text start=\"247.99\" dur=\"1.78\">And there are a couple\nof tradeoffs.</text><text start=\"249.77\" dur=\"3.99\">In a compiled language, the\ncode typically is faster</text><text start=\"253.76\" dur=\"2.07\">because we do all the work ahead\nof time, through the</text><text start=\"255.83\" dur=\"2.899\">compiler, to convert our\ninstructions into the low</text><text start=\"258.729\" dur=\"1.54\">level machine instructions.</text><text start=\"260.269\" dur=\"2.131\">So we can make them very\nefficient, which means they&amp;#39;ll</text><text start=\"262.4\" dur=\"0.99\">run faster.</text><text start=\"263.39\" dur=\"3.19\">But one of the challenges is if\nwe have a bug or an error</text><text start=\"266.58\" dur=\"3.89\">in our code, when the compiled\ncode hits that error, it can</text><text start=\"270.47\" dur=\"2.27\">often be difficult to figure\nout what caused it.</text><text start=\"272.74\" dur=\"3.24\">Because we&amp;#39;re way down in the\nweeds of those compiled</text><text start=\"275.98\" dur=\"3.07\">instructions and figuring out\nwhat corresponding point in</text><text start=\"279.05\" dur=\"3.44\">our actual instructions led to\nthat error can be a challenge.</text><text start=\"282.49\" dur=\"2.937\">In an interpreted language, it\ncan be a little slower, not</text><text start=\"285.427\" dur=\"2.763\">badly, but a little slower,\nbecause we&amp;#39;re doing the</text><text start=\"288.19\" dur=\"3.47\">conversion on the fly, one\ninstruction at a time.</text><text start=\"291.66\" dur=\"3.44\">On the other hand, when we do\nhit an error or a bug, it is</text><text start=\"295.1\" dur=\"3.36\">usually easier to determine what\ncaused that error because</text><text start=\"298.46\" dur=\"3.655\">we know exactly at what point\nin our code we were at when</text><text start=\"302.115\" dur=\"2.345\">that error occurred.</text><text start=\"304.46\" dur=\"1.76\">Again, there are\ntradeoffs here.</text><text start=\"306.22\" dur=\"0.64\">Different people like</text><text start=\"306.86\" dur=\"1.44\">different versions of languages.</text><text start=\"308.3\" dur=\"2.47\">For us, we&amp;#39;re going to use\nPython, which has this</text><text start=\"310.77\" dur=\"1.48\">property of being an\ninterpretive language.</text><text start=\"312.25\" dur=\"1.428\"></text></transcript>\n", "AU66NP1kQm0": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.84\"></text><text start=\"1.84\" dur=\"1.85\">Eric Grimson: All right, we want\nto measure complexity.</text><text start=\"3.69\" dur=\"3.18\">We&amp;#39;re going to use this random access\nmachine model, which says we&amp;#39;re going</text><text start=\"6.87\" dur=\"1.7\">to count basic steps.</text><text start=\"8.57\" dur=\"2.09\">And we want to measure this\nin the worst case.</text><text start=\"10.66\" dur=\"3.71\">And we want to measure it basically as a\nfunction of the size of the problem.</text><text start=\"14.37\" dur=\"3.73\">So what we need is a formal way to talk\nabout the relationship between</text><text start=\"18.1\" dur=\"2.95\">the running time and the\nsize of the input.</text><text start=\"21.05\" dur=\"3.18\">And as we suggested, what we&amp;#39;re mostly\ninterested in is what happens as the</text><text start=\"24.23\" dur=\"3.83\">size of the inputs gets very large,\nas it approaches infinity.</text><text start=\"28.06\" dur=\"3.24\">So let&amp;#39;s look at an example of\nhow we might capture that</text><text start=\"31.3\" dur=\"1.65\">a little more formally.</text><text start=\"32.95\" dur=\"2.91\">And in particular, let&amp;#39;s look\nat a little example.</text><text start=\"35.86\" dur=\"3.64\">I&amp;#39;ve written a function that&amp;#39;s\ngot 3 loops in it.</text><text start=\"39.5\" dur=\"4.65\">I&amp;#39;m first going to loop for\ni from 0 up to 999.</text><text start=\"44.15\" dur=\"1.62\">And I&amp;#39;m going to set\nanswer equal to i.</text><text start=\"45.77\" dur=\"2.94\">It&amp;#39;s a boring thing to do, but because\nI want to do something like that, I&amp;#39;m</text><text start=\"48.71\" dur=\"1.02\">going to do it.</text><text start=\"49.73\" dur=\"5.45\">Then I&amp;#39;m going to loop for i from 0 up\nto x - 1 for whatever the input x is.</text><text start=\"55.18\" dur=\"2.75\">And I&amp;#39;m going to just increase\nthe answer by one.</text><text start=\"57.93\" dur=\"2.53\">And then, finally, I&amp;#39;m going\nto have a nested loop.</text><text start=\"60.46\" dur=\"3.809\">I&amp;#39;m going to loop for i\nfrom 0 up to x - 1.</text><text start=\"64.269\" dur=\"4.181\">And for each version of i, I&amp;#39;m going\nto loop for j from 0 up to x - 1.</text><text start=\"68.45\" dur=\"3.55\">And I&amp;#39;m going to set answer\nto increase by 1.</text><text start=\"72\" dur=\"1.6\">Not a big deal.</text><text start=\"73.6\" dur=\"4.27\">What I want to know, though, is what\namount of time does this take?</text><text start=\"77.87\" dur=\"3.17\">And ignoring the issues of the overhead,\nif you like, of running the</text><text start=\"81.04\" dur=\"3.4\">for loops, you can see that in this\nfirst loop here, there are going to be</text><text start=\"84.44\" dur=\"4.36\">1,000 steps, no matter what x is,\nbecause I&amp;#39;m doing it 1,000 times.</text><text start=\"88.8\" dur=\"4.91\">For this second loop, there are going\nto be x steps, depending on what the</text><text start=\"93.71\" dur=\"1.57\">input x is.</text><text start=\"95.28\" dur=\"3.79\">And for this final loop, well, I&amp;#39;m going\nto do this inner loop x times.</text><text start=\"99.07\" dur=\"2.87\">And I&amp;#39;m going to do that\nanother x times.</text><text start=\"101.94\" dur=\"2.28\">So I&amp;#39;m going to do x squared things.</text><text start=\"104.22\" dur=\"2.79\">So I&amp;#39;ve got an expression that\nbasically says, I&amp;#39;ve got</text><text start=\"107.01\" dur=\"1.94\">1,000 plus x plus.</text><text start=\"108.95\" dur=\"1.78\">And I&amp;#39;ve got a 2x squared there.</text><text start=\"110.73\" dur=\"3.21\">The 2 is, I guess, if I really think\nabout it, I&amp;#39;m doing 2 steps here.</text><text start=\"113.94\" dur=\"3.41\">And I should actually have a 2 there,\nbecause I&amp;#39;m really doing 2 steps</text><text start=\"117.35\" dur=\"0.68\">there, as well.</text><text start=\"118.03\" dur=\"4.99\">All right, so I&amp;#39;ve got 1,000 + 2x +\n2x^2 if each of these things is a</text><text start=\"123.02\" dur=\"1.9\">basic operation.</text><text start=\"124.92\" dur=\"3.08\">OK, with that, let&amp;#39;s think about this.</text><text start=\"128\" dur=\"1.37\">Again, I&amp;#39;m going to change\nthis slightly.</text><text start=\"129.37\" dur=\"0.96\">That should really be 2x.</text><text start=\"130.33\" dur=\"3.26\">I&amp;#39;ve got 1,000 + 2x + 2x^2.</text><text start=\"133.59\" dur=\"2.13\">So let&amp;#39;s think about x.</text><text start=\"135.72\" dur=\"3.23\">If x is small, the constant\nterm dominates.</text><text start=\"138.95\" dur=\"3.01\">This term is really the big one.</text><text start=\"141.96\" dur=\"4.49\">It&amp;#39;s going to be, if x is 10, then 1,000\nout of the, basically, 1,200--</text><text start=\"146.45\" dur=\"1.74\">and actually, it should be 1,220--</text><text start=\"148.19\" dur=\"2\">steps are in the first loop.</text><text start=\"150.19\" dur=\"2.64\">But still, almost all of it&amp;#39;s\ndone in the first loop.</text><text start=\"152.83\" dur=\"4.49\">On the other hand, if x is large,\nthen this term dominates.</text><text start=\"157.32\" dur=\"4.95\">So for example, if x is a million, then\nthe first loop takes a tiny, tiny</text><text start=\"162.27\" dur=\"1.05\">fraction of the time.</text><text start=\"163.32\" dur=\"3.35\">The second loop takes only a tiny\nfraction of the time, because we&amp;#39;ve</text><text start=\"166.67\" dur=\"2.61\">got a billion in summed operations\nthat we&amp;#39;re doing here.</text><text start=\"169.28\" dur=\"3.41\">And you can see that, in fact,\nin this case, all of this is</text><text start=\"172.69\" dur=\"2.62\">dominated by this term.</text><text start=\"175.31\" dur=\"4.18\">We really only need to consider, when\nwe look at code then, that nested</text><text start=\"179.49\" dur=\"1.99\">loop, the quadratic component.</text><text start=\"181.48\" dur=\"3.87\">And does it really matter if this\npart takes 2x^2 steps as opposed</text><text start=\"185.35\" dur=\"1.89\">to, say, x^2 steps?</text><text start=\"187.24\" dur=\"1.79\">A little bit, but not really.</text><text start=\"189.03\" dur=\"4.63\">In our example, if our computer executes\n100 million steps per second,</text><text start=\"193.66\" dur=\"2.955\">then the difference might go from five\nand a half hours down to two and a</text><text start=\"196.615\" dur=\"0.815\">quarter hours.</text><text start=\"197.43\" dur=\"3.11\">So the 2 does matter in terms\nof practical time.</text><text start=\"200.54\" dur=\"2.8\">But on the other hand, if we could\nfind a linear algorithm here,</text><text start=\"203.34\" dur=\"3.89\">something that varied with x, not with\nx^2, then this thing would run in a</text><text start=\"207.23\" dur=\"1.35\">fraction of a second.</text><text start=\"208.58\" dur=\"3.97\">And so again, it goes back to saying\nthose multiplicative factors probably</text><text start=\"212.55\" dur=\"1.04\">are not crucial.</text><text start=\"213.59\" dur=\"3.37\">It&amp;#39;s really this order of growth that\nis the most important thing that we</text><text start=\"216.96\" dur=\"1.46\">want to deal with.</text><text start=\"218.42\" dur=\"5.42\">So what we&amp;#39;re saying is we want\nto use asymptotic complexity.</text><text start=\"223.84\" dur=\"0.86\">And what does it mean?</text><text start=\"224.7\" dur=\"3.24\">We&amp;#39;re going to describe the running\ntime in terms of the</text><text start=\"227.94\" dur=\"1.4\">number of basic steps.</text><text start=\"229.34\" dur=\"3.19\">If the running time is a sum of multiple\nterms because of multiple</text><text start=\"232.53\" dur=\"2.35\">components to the code, we&amp;#39;re going\nto keep the one with the</text><text start=\"234.88\" dur=\"1.58\">largest growth rate.</text><text start=\"236.46\" dur=\"3.37\">And if that remaining term is a product,\nwe&amp;#39;re going to drop any</text><text start=\"239.83\" dur=\"1.715\">multiplicative constants.</text><text start=\"241.545\" dur=\"3.085\">And so here&amp;#39;s where the asymptotic\nportion comes in.</text><text start=\"244.63\" dur=\"5.14\">We&amp;#39;re worrying about it as the problem\nsize goes to infinity.</text><text start=\"249.77\" dur=\"2.56\">That&amp;#39;s really what we&amp;#39;re\nconcerned about here.</text><text start=\"252.33\" dur=\"1.49\">The notation we&amp;#39;ll use--</text><text start=\"253.82\" dur=\"4.154\">we borrow from theoretical computer\nscience-- it&amp;#39;s called big O notation.</text><text start=\"257.974\" dur=\"3.536\">It comes from the Greek letter Omicron,\nwhich Donald Knuth picked</text><text start=\"261.51\" dur=\"1.93\">when he was measuring these\nkinds of things.</text><text start=\"263.44\" dur=\"3.44\">And we&amp;#39;ll use big O as a way to give\nan upper bound on the asymptotic</text><text start=\"266.88\" dur=\"1.87\">growth of a function.</text><text start=\"268.75\" dur=\"3.25\">What we&amp;#39;re going to do next is look at\nsome examples of the different kinds</text><text start=\"272\" dur=\"2.03\">of asymptotic growths that we have.</text><text start=\"274.03\" dur=\"3.07\">And these capture, if you like,\ndifferent classes of</text><text start=\"277.1\" dur=\"1.25\">complexity of functions.</text><text start=\"278.35\" dur=\"1.13\"></text></transcript>\n", "CIld2wLmjXI": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.78\"></text><text start=\"0.78\" dur=\"3.58\">ERIC GRIMSON: We&amp;#39;ve now seen a bunch\nof examples of recursive functions.</text><text start=\"4.36\" dur=\"1.41\">Seen some of the power of them.</text><text start=\"5.77\" dur=\"2.95\">We keep coming back to this idea of\nbreak a problem down into smaller</text><text start=\"8.72\" dur=\"1.67\">versions of the same problem.</text><text start=\"10.39\" dur=\"2.51\">Really great way of trying\nto tackle a problem.</text><text start=\"12.9\" dur=\"1.645\">We&amp;#39;re going to do one last thing.</text><text start=\"14.545\" dur=\"2.965\">And that goes back to when we ran fib.</text><text start=\"17.51\" dur=\"4.75\">When we ran Fibonacci, we might have\nnoticed that as we made the arguments</text><text start=\"22.26\" dur=\"1.52\">larger and larger, it slowed down.</text><text start=\"23.78\" dur=\"0.78\">Which is not surprising.</text><text start=\"24.56\" dur=\"2.74\">It&amp;#39;s calling itself multiple times.</text><text start=\"27.3\" dur=\"2.68\">But suppose we wanted to actually count\nthe number of times that fib</text><text start=\"29.98\" dur=\"2.24\">called itself recursively.</text><text start=\"32.22\" dur=\"3.07\">Multiple ways of doing it, but one of\nthe ways in which we can do this is to</text><text start=\"35.29\" dur=\"3.035\">use what&amp;#39;s called a global variable.</text><text start=\"38.325\" dur=\"0.545\">What does that mean?</text><text start=\"38.87\" dur=\"4.54\">Well, so far, all the functions have\ncommunicated with their environment</text><text start=\"43.41\" dur=\"2.8\">strictly through their parameters\nand their return values.</text><text start=\"46.21\" dur=\"2.85\">If it&amp;#39;s when we call a new function,\nit creates an environment with some</text><text start=\"49.06\" dur=\"1.19\">parameters passed in.</text><text start=\"50.25\" dur=\"2.76\">It does some work internally, and\nit returns a value as the</text><text start=\"53.01\" dur=\"2.01\">value of its response.</text><text start=\"55.02\" dur=\"4.73\">We can make a variable or declare\na variable to be global.</text><text start=\"59.75\" dur=\"4.37\">And what this means is that the name is\ndefined at the outermost scope of</text><text start=\"64.12\" dur=\"4.82\">the program, rather than the scope of\nthe function within which it appears.</text><text start=\"68.94\" dur=\"2.23\">It&amp;#39;s global because it&amp;#39;s going to\nappear up at the top level.</text><text start=\"71.17\" dur=\"3.25\">It&amp;#39;s going to be part of what we want\nto deal with when we&amp;#39;re interacting</text><text start=\"74.42\" dur=\"4.2\">with, for example, the Python shell.</text><text start=\"78.62\" dur=\"2.36\">As it notes here, this can\nbe a bit dangerous.</text><text start=\"80.98\" dur=\"1.27\">And we&amp;#39;ll talk about that in a second.</text><text start=\"82.25\" dur=\"2.52\">But let&amp;#39;s just look at\nhow we might do this.</text><text start=\"84.77\" dur=\"2.01\">So, here&amp;#39;s the idea.</text><text start=\"86.78\" dur=\"2.9\">We&amp;#39;re going to call this a metered\nversion of Fibonacci.</text><text start=\"89.68\" dur=\"1.94\">It has much the same form as before.</text><text start=\"91.62\" dur=\"3.41\">There is the recursive call, just\nas we had before, using a</text><text start=\"95.03\" dur=\"1.16\">different name, of course.</text><text start=\"96.19\" dur=\"1.82\">But we do two things.</text><text start=\"98.01\" dur=\"6.23\">Right here, we make a declaration that\nsays the variable numCalls is global.</text><text start=\"104.24\" dur=\"4.2\">That means it&amp;#39;s going to be bound way\nup at the top, at the highest-level</text><text start=\"108.44\" dur=\"1.32\">environment.</text><text start=\"109.76\" dur=\"4.21\">Inside of fibMetered, we&amp;#39;re going\nto actually change numCalls.</text><text start=\"113.97\" dur=\"4.42\">This says every time we call fibMetered,\nwe&amp;#39;re going to increase</text><text start=\"118.39\" dur=\"1.9\">that global variable by one.</text><text start=\"120.29\" dur=\"0.79\">Great.</text><text start=\"121.08\" dur=\"2.48\">So that&amp;#39;s going to count how\nmany times it&amp;#39;s called.</text><text start=\"123.56\" dur=\"2.9\">We can test this with a little\ntest script here.</text><text start=\"126.46\" dur=\"1.72\">I&amp;#39;m going to run fib for some number.</text><text start=\"128.18\" dur=\"3.66\">I&amp;#39;m going to have i roll\nover from 0 up to n.</text><text start=\"131.84\" dur=\"1.15\">And notice what I&amp;#39;m going to do.</text><text start=\"132.99\" dur=\"4.49\">Each time I go through the loop, I&amp;#39;m\ngoing to again say numCalls is a</text><text start=\"137.48\" dur=\"1.03\">global variable.</text><text start=\"138.51\" dur=\"2.41\">It&amp;#39;s defined up in that\ntop-level place.</text><text start=\"140.92\" dur=\"2.9\">And I&amp;#39;m going to set it to zero.</text><text start=\"143.82\" dur=\"3.45\">That is going to have the effect of\nin the global environment changing</text><text start=\"147.27\" dur=\"1\">numCalls to zero.</text><text start=\"148.27\" dur=\"4.42\">And then I&amp;#39;m going to actually do some\nwork and print up some results.</text><text start=\"152.69\" dur=\"2.62\">I&amp;#39;m going to do the work of figuring\nout what Fibonacci is.</text><text start=\"155.31\" dur=\"5.34\">The call to fibMeter will, every time\nit calls it, change numCalls by one.</text><text start=\"160.65\" dur=\"3.86\">And when I&amp;#39;m done and when it returns,\nI can print out how many times was</text><text start=\"164.51\" dur=\"2\">that actually called.</text><text start=\"166.51\" dur=\"0.56\">OK.</text><text start=\"167.07\" dur=\"1.38\">Let&amp;#39;s see what happens if we do this.</text><text start=\"168.45\" dur=\"4.92\">I&amp;#39;m going to go over and start up over\nhere inside of my IDLE environment.</text><text start=\"173.37\" dur=\"5.614\">And if I load that in, let&amp;#39;s\nactually do a test on fib.</text><text start=\"178.984\" dur=\"3.836\">And this put means we&amp;#39;re\ngoing to do up to five.</text><text start=\"182.82\" dur=\"2.34\">And it now tells us, oh cool.</text><text start=\"185.16\" dur=\"2.98\">When I call a fib on zero,\nthe answer is one.</text><text start=\"188.14\" dur=\"0.95\">It was called one time.</text><text start=\"189.09\" dur=\"0.64\">Makes sense.</text><text start=\"189.73\" dur=\"2.3\">When I call fib on one,\nthe answer is one.</text><text start=\"192.03\" dur=\"1.08\">It was also called one time.</text><text start=\"193.11\" dur=\"1.57\">We knew those were the base cases.</text><text start=\"194.68\" dur=\"2.15\">And then you can see the responses\nas we move up.</text><text start=\"196.83\" dur=\"1.81\">So let&amp;#39;s make this a\nlittle bit bigger.</text><text start=\"198.64\" dur=\"3.72\">Let&amp;#39;s do testFib--</text><text start=\"202.36\" dur=\"4.19\">oh, let&amp;#39;s make it up to 20.</text><text start=\"206.55\" dur=\"2.99\">Then we&amp;#39;ll see what it does here.</text><text start=\"209.54\" dur=\"1.33\">You see it&amp;#39;s moving pretty quickly.</text><text start=\"210.87\" dur=\"1.57\">It&amp;#39;s starting to slow\ndown a little bit.</text><text start=\"212.44\" dur=\"4.29\">But we&amp;#39;re actually now calling\ntestFib in that metered form.</text><text start=\"216.73\" dur=\"2.61\">And it&amp;#39;s showing us how many\ntimes it&amp;#39;s called.</text><text start=\"219.34\" dur=\"2.42\">Also notice, if you look at the\nnumbers, it&amp;#39;s clear that we&amp;#39;re</text><text start=\"221.76\" dur=\"1.93\">resetting numCalls each time around.</text><text start=\"223.69\" dur=\"3.18\">And that, if we go back to our\nslides, came from right here.</text><text start=\"226.87\" dur=\"3.72\">Each time through the loop and testFib,\nwe reset numCalls to zero up</text><text start=\"230.59\" dur=\"1.45\">in that top environment.</text><text start=\"232.04\" dur=\"5.13\">So that when we go ahead and call\nfibMetered, it is starting from zero</text><text start=\"237.17\" dur=\"4.41\">and doing a count for each time it\ncalls recursively within itself.</text><text start=\"241.58\" dur=\"0.82\">A nice tool.</text><text start=\"242.4\" dur=\"2.43\">A tool that&amp;#39;s really kind of handy, and\nsomething that we&amp;#39;ll come back to,</text><text start=\"244.83\" dur=\"3.035\">because it is a way of being able\nto keep track of some things.</text><text start=\"247.865\" dur=\"3.795\">But I want to finish with\na couple of comments.</text><text start=\"251.66\" dur=\"2.87\">First one is use it with care.</text><text start=\"254.53\" dur=\"3.01\">Putting a variable as a global\nvariable is destroying the</text><text start=\"257.54\" dur=\"0.979\">locality of the code.</text><text start=\"258.519\" dur=\"4.601\">One of the beautiful pieces about\nrecursive code is all of the function</text><text start=\"263.12\" dur=\"3.43\">call contains within it all\nthe information it needs.</text><text start=\"266.55\" dur=\"3.24\">The parameter&amp;#39;s passed in, it does all\nthe work internally, locally, and it</text><text start=\"269.79\" dur=\"2.26\">simply returns a value back out.</text><text start=\"272.05\" dur=\"3.31\">That is an elegant way of being able to\nnot only think about what&amp;#39;s going</text><text start=\"275.36\" dur=\"2.37\">on, but to be able to\ndeal with the code.</text><text start=\"277.73\" dur=\"4.83\">Once we have global variables, they\ncan be modified or read in a wide</text><text start=\"282.56\" dur=\"0.92\">range of places.</text><text start=\"283.48\" dur=\"4.1\">And that&amp;#39;s going to make it really easy\nto break the locality, especially</text><text start=\"287.58\" dur=\"4.22\">if someplace outside of the function\nwe&amp;#39;re dealing with makes a change for</text><text start=\"291.8\" dur=\"4.41\">global variable and that affects the\ncomputation inside that local call to</text><text start=\"296.21\" dur=\"1.21\">a procedure.</text><text start=\"297.42\" dur=\"3.81\">This is going to allow the potential\nfor introducing bugs.</text><text start=\"301.23\" dur=\"3.58\">And most computer scientists will be\nvery strong about arguing that one</text><text start=\"304.81\" dur=\"3.02\">should not use global variables\nif at all possible.</text><text start=\"307.83\" dur=\"3.31\">It is much better to encapsulate\nthe computation locally.</text><text start=\"311.14\" dur=\"3.34\">But here&amp;#39;s an example where we&amp;#39;re\nmetering things, where having a global</text><text start=\"314.48\" dur=\"1.38\">variable can be really handy.</text><text start=\"315.86\" dur=\"1.25\"></text></transcript>\n", "7m8pab1MfYY": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.49\"></text><text start=\"0.49\" dur=\"1.43\">Congratulations.</text><text start=\"1.92\" dur=\"2.38\">Now you know how to use one of\nthe basic building blocks of</text><text start=\"4.3\" dur=\"1.31\">the course.</text><text start=\"5.61\" dur=\"2.8\">If you look to your left, you\nwill see a table of contents</text><text start=\"8.41\" dur=\"2.25\">for all of the aspects\nof the course.</text><text start=\"10.66\" dur=\"2.85\">Right now, since you are playing\nthis video, you&amp;#39;re in</text><text start=\"13.51\" dur=\"2.97\">the overview section, which\ncontains various aspects of</text><text start=\"16.48\" dur=\"3.18\">administrivia including\nthese tutorials.</text><text start=\"19.66\" dur=\"2.3\">Continuing to look to your\nleft, if you click on the</text><text start=\"21.96\" dur=\"3.59\">various chapter labels, you will\nsee the course content</text><text start=\"25.55\" dur=\"2.73\">that it&amp;#39;s associated\nwith each chapter.</text><text start=\"28.28\" dur=\"3.57\">You will not change content or\ninterrupt a video until you</text><text start=\"31.85\" dur=\"3.98\">actually click on a new course\nelement to navigate to.</text><text start=\"35.83\" dur=\"1.97\">Each chapter contains activities\nthat you are</text><text start=\"37.8\" dur=\"2.48\">expected to complete, including\npresentation</text><text start=\"40.28\" dur=\"3.94\">sequences, which you should\nwatch and participate in in</text><text start=\"44.22\" dur=\"2.89\">order to learn new material\nconcepts.</text><text start=\"47.11\" dur=\"2.77\">You should also complete the\nhomeworks and activities in</text><text start=\"49.88\" dur=\"2.8\">order to get more practice and\nsolidify your understanding of</text><text start=\"52.68\" dur=\"1.68\">the material.</text><text start=\"54.36\" dur=\"2.57\">Many courses will grade you\nbased off of your performance</text><text start=\"56.93\" dur=\"1.74\">on homework questions.</text><text start=\"58.67\" dur=\"2.59\">The next section will describe\nhow to enter</text><text start=\"61.26\" dur=\"1.87\">and check your answers.</text><text start=\"63.13\" dur=\"3.3\">Note that in this sequence, even\nthough the next section</text><text start=\"66.43\" dur=\"3.8\">will give you feedback it will\nnot affect your grade on any</text><text start=\"70.23\" dur=\"3.29\">aspect of your interactions with\nthat x So you should feel</text><text start=\"73.52\" dur=\"1.25\">free to experiment.</text><text start=\"74.77\" dur=\"0.67\"></text></transcript>\n", "BvooIjkNJ24": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"2.98\">ERIC GRIMSON: OK, we&amp;#39;re almost\nready to start getting our</text><text start=\"2.98\" dur=\"1.91\">computer to do things for us.</text><text start=\"4.89\" dur=\"2.56\">As we&amp;#39;ve said, we want to take\nthat idea of computational</text><text start=\"7.45\" dur=\"3.45\">thinking, taking a problem and\nbreaking it down into a</text><text start=\"10.9\" dur=\"2.72\">sequence of mechanical steps\nthat will let us deduce</text><text start=\"13.62\" dur=\"1.442\">solutions to that problem.</text><text start=\"15.062\" dur=\"2.938\">And we want to be able to take\nthat description and somehow</text><text start=\"18\" dur=\"1.98\">convert it into a form that\nthe computer can do</text><text start=\"19.98\" dur=\"1.43\">the work for us.</text><text start=\"21.41\" dur=\"3.54\">That says we need a way of\ndescribing those sequences of</text><text start=\"24.95\" dur=\"2.91\">steps, and that&amp;#39;s where the\nprogramming language comes in.</text><text start=\"27.86\" dur=\"2.94\">Programming language is going to\ndefine both the syntax and</text><text start=\"30.8\" dur=\"3.08\">semantics that we need to\ntranslate our computational</text><text start=\"33.88\" dur=\"2.42\">ideas into mechanical steps.</text><text start=\"36.3\" dur=\"2.71\">Syntax, I&amp;#39;ll remind you, says\nhow we put together legal</text><text start=\"39.01\" dur=\"1\">expressions?</text><text start=\"40.01\" dur=\"3.11\">Semantics says, how do we deduce\nthe meanings associated</text><text start=\"43.12\" dur=\"2.27\">with those expressions, which\nis going to let us solve the</text><text start=\"45.39\" dur=\"1.4\">problems that we want.</text><text start=\"46.79\" dur=\"1.99\">We&amp;#39;re almost ready to start\ntalking about a programming</text><text start=\"48.78\" dur=\"1.99\">language, but we need to\nmake one more choice.</text><text start=\"50.77\" dur=\"2.26\">And that choice comes\ndown to the kind</text><text start=\"53.03\" dur=\"1.43\">of programming language.</text><text start=\"54.46\" dur=\"2.22\">One way to think about this is,\nno matter which language</text><text start=\"56.68\" dur=\"1.99\">we use, the interaction with\nthe computer will all be</text><text start=\"58.67\" dur=\"1.34\">roughly the same.</text><text start=\"60.01\" dur=\"2.33\">We&amp;#39;re going to take\nan input and</text><text start=\"62.34\" dur=\"1.03\">provide it to the computer.</text><text start=\"63.37\" dur=\"1.93\">That&amp;#39;s what we call\nthe source code.</text><text start=\"65.3\" dur=\"2.95\">That input is then going to\ngo through some kind of</text><text start=\"68.25\" dur=\"1.09\">computational process.</text><text start=\"69.34\" dur=\"3.67\">And when we&amp;#39;re done, we&amp;#39;d like\nto get a result printed out or</text><text start=\"73.01\" dur=\"2.05\">returned by the computer.</text><text start=\"75.06\" dur=\"3.41\">And right here is where that\ncomputational process is going</text><text start=\"78.47\" dur=\"1.47\">to take place.</text><text start=\"79.94\" dur=\"3.03\">And we have some choices here\nin terms of how the computer</text><text start=\"82.97\" dur=\"2.57\">actually deals with taking\nour input and</text><text start=\"85.54\" dur=\"1.326\">reducing it to an output.</text><text start=\"86.866\" dur=\"2.394\">And let&amp;#39;s look at what those\nchoices might say.</text><text start=\"89.26\" dur=\"3.3\">One choice is that we can use\nwhat&amp;#39;s called a low level</text><text start=\"92.56\" dur=\"1.24\">programming language.</text><text start=\"93.8\" dur=\"2.7\">Low level says that the\ninstructions we type in or</text><text start=\"96.5\" dur=\"3.12\">that we enter into the computer\nare very similar to</text><text start=\"99.62\" dur=\"2.71\">the internal control unit\nwe saw last time.</text><text start=\"102.33\" dur=\"2.67\">Those instructions might be at\nthe level of saying, move data</text><text start=\"105\" dur=\"3.66\">from one location of memory to\nanother, or execute a simple</text><text start=\"108.66\" dur=\"2.96\">ALU, or arithmetic logic\nunit operation, like</text><text start=\"111.62\" dur=\"2.54\">add, subtract, compare.</text><text start=\"114.16\" dur=\"2.4\">It might also involve jumping to\na new point in the sequence</text><text start=\"116.56\" dur=\"2.01\">of instructions based\non that comparison.</text><text start=\"118.57\" dur=\"3.3\">But the programming would be\ndone in a very low level.</text><text start=\"121.87\" dur=\"3.07\">Once you make that decision to\nuse this kind of a programming</text><text start=\"124.94\" dur=\"2.31\">language, then the stages within\nthe computer are pretty</text><text start=\"127.25\" dur=\"0.91\">straightforward.</text><text start=\"128.16\" dur=\"2.68\">There is a process called a\nchecker, which takes that low</text><text start=\"130.84\" dur=\"3.25\">level code and just confirms\nthat the syntax is correct and</text><text start=\"134.09\" dur=\"2.13\">that the static semantics\nare correct.</text><text start=\"136.22\" dur=\"3.04\">And then, it passes the sequence\nof instructions on</text><text start=\"139.26\" dur=\"2.43\">through a process called the\ninterpreter that simply</text><text start=\"141.69\" dur=\"3.1\">follows that sequence, much as\nwe saw last time, ending up</text><text start=\"144.79\" dur=\"2.055\">with some output that gets\nprinted back out to us.</text><text start=\"146.845\" dur=\"2.965\">So on a low level language,\nwe&amp;#39;re programming, basically,</text><text start=\"149.81\" dur=\"1.9\">at the level of the machine.</text><text start=\"151.71\" dur=\"1.3\">That&amp;#39;s one option.</text><text start=\"153.01\" dur=\"2.12\">There&amp;#39;s a second option, though,\nwhich is to use what&amp;#39;s</text><text start=\"155.13\" dur=\"2.41\">called a high level language.</text><text start=\"157.54\" dur=\"4.46\">And a high level language uses\nmore abstract kinds of terms.</text><text start=\"162\" dur=\"2.91\">We might want to talk about\nhaving the computer think</text><text start=\"164.91\" dur=\"3.05\">about, invert a matrix, compute\na function, compare</text><text start=\"167.96\" dur=\"1.82\">two complex data structures.</text><text start=\"169.78\" dur=\"2.43\">We&amp;#39;d like to be able to program,\nif you&amp;#39;d like, at the</text><text start=\"172.21\" dur=\"3.43\">level of thinking about higher\nkinds of abstractions.</text><text start=\"175.64\" dur=\"2.99\">Now here, again, we&amp;#39;ve\ngot a choice.</text><text start=\"178.63\" dur=\"4.9\">In a compiled language, those\nabstractions are then first</text><text start=\"183.53\" dur=\"4.22\">checked, as they did before, but\nthen converted back into</text><text start=\"187.75\" dur=\"1.36\">low level code.</text><text start=\"189.11\" dur=\"3.79\">So there is a special thing, or\nspecial process, inside the</text><text start=\"192.9\" dur=\"3\">computer called a compiler\nthat takes the checked</text><text start=\"195.9\" dur=\"3.86\">sequence of instructions and\nreduces or converts them back</text><text start=\"199.76\" dur=\"2.886\">down to those basic computer\ninstructions that we know we</text><text start=\"202.646\" dur=\"3.034\">need and those are then run\nthrough the interpreter in</text><text start=\"205.68\" dur=\"2\">order to execute the\nactual process.</text><text start=\"207.68\" dur=\"3.06\">So this is certainly one way to\ndo it, a compiled language.</text><text start=\"210.74\" dur=\"0.7\">There&amp;#39;s an alternative.</text><text start=\"211.44\" dur=\"4.76\">And the alternative is, again,\nto have a high level language,</text><text start=\"216.2\" dur=\"2.04\">run it through the checker\nas before.</text><text start=\"218.24\" dur=\"2.91\">But in an interpreted language,\nthere&amp;#39;s a special</text><text start=\"221.15\" dur=\"2.54\">program that converts that\nsource code to an internal</text><text start=\"223.69\" dur=\"2.92\">data structure and then\nsequentially converts each</text><text start=\"226.61\" dur=\"3.83\">step into a low machine\ninstructions and executions.</text><text start=\"230.44\" dur=\"3.44\">That says we&amp;#39;re going to, one\ninstruction at a time, do the</text><text start=\"233.88\" dur=\"2.05\">conversion and execution.</text><text start=\"235.93\" dur=\"2.37\">And in this case, this\nis the kind of like</text><text start=\"238.3\" dur=\"0.53\">you&amp;#39;re going to use.</text><text start=\"238.83\" dur=\"3.37\">In this course, we&amp;#39;re going to\nuse Python, which belongs to</text><text start=\"242.2\" dur=\"2.74\">this class of interpreted\nprogramming languages.</text><text start=\"244.94\" dur=\"2.07\">Now, you might say, so\nwhat are the choices?</text><text start=\"247.01\" dur=\"0.98\">What are the tradeoffs here?</text><text start=\"247.99\" dur=\"1.78\">And there are a couple\nof tradeoffs.</text><text start=\"249.77\" dur=\"3.99\">In a compiled language, the\ncode typically is faster</text><text start=\"253.76\" dur=\"2.07\">because we do all the work ahead\nof time, through the</text><text start=\"255.83\" dur=\"2.899\">compiler, to convert our\ninstructions into the low</text><text start=\"258.729\" dur=\"1.54\">level machine instructions.</text><text start=\"260.269\" dur=\"2.131\">So we can make them very\nefficient, which means they&amp;#39;ll</text><text start=\"262.4\" dur=\"0.99\">run faster.</text><text start=\"263.39\" dur=\"3.19\">But one of the challenges is if\nwe have a bug or an error</text><text start=\"266.58\" dur=\"3.89\">in our code, when the compiled\ncode hits that error, it can</text><text start=\"270.47\" dur=\"2.27\">often be difficult to figure\nout what caused it.</text><text start=\"272.74\" dur=\"3.24\">Because we&amp;#39;re way down in the\nweeds of those compiled</text><text start=\"275.98\" dur=\"3.07\">instructions and figuring out\nwhat corresponding point in</text><text start=\"279.05\" dur=\"3.44\">our actual instructions led to\nthat error can be a challenge.</text><text start=\"282.49\" dur=\"2.937\">In an interpreted language, it\ncan be a little slower, not</text><text start=\"285.427\" dur=\"2.763\">badly, but a little slower,\nbecause we&amp;#39;re doing the</text><text start=\"288.19\" dur=\"3.47\">conversion on the fly, one\ninstruction at a time.</text><text start=\"291.66\" dur=\"3.44\">On the other hand, when we do\nhit an error or a bug, it is</text><text start=\"295.1\" dur=\"3.36\">usually easier to determine what\ncaused that error because</text><text start=\"298.46\" dur=\"3.655\">we know exactly at what point\nin our code we were at when</text><text start=\"302.115\" dur=\"2.345\">that error occurred.</text><text start=\"304.46\" dur=\"1.76\">Again, there are\ntradeoffs here.</text><text start=\"306.22\" dur=\"0.64\">Different people like</text><text start=\"306.86\" dur=\"1.44\">different versions of languages.</text><text start=\"308.3\" dur=\"2.47\">For us, we&amp;#39;re going to use\nPython, which has this</text><text start=\"310.77\" dur=\"1.48\">property of being an\ninterpretive language.</text><text start=\"312.25\" dur=\"1.428\"></text></transcript>\n", "qA24CgJ1Zc8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.62\"></text><text start=\"1.62\" dur=\"1.23\">ERIC GRIMSON: OK.</text><text start=\"2.85\" dur=\"2.34\">So we&amp;#39;ve now seen how to create\nsimple expressions.</text><text start=\"5.19\" dur=\"2.45\">We can take objects\nthat are numbers</text><text start=\"7.64\" dur=\"1.19\">like integers or floats.</text><text start=\"8.83\" dur=\"3.05\">We can combine them together\nwith operators, so we say 3</text><text start=\"11.88\" dur=\"4.19\">plus 4 or 3 plus 4 all in\nparentheses times 5.</text><text start=\"16.07\" dur=\"2.66\">That gives us a way of doing\nsome simple computations, but</text><text start=\"18.73\" dur=\"1.21\">it&amp;#39;s pretty boring.</text><text start=\"19.94\" dur=\"2.15\">It basically says we\ngot a calculator.</text><text start=\"22.09\" dur=\"2.62\">So we can type in expressions\nand get out values.</text><text start=\"24.71\" dur=\"1.55\">But we like to obviously\ndo more</text><text start=\"26.26\" dur=\"2.21\">complicated kinds of things.</text><text start=\"28.47\" dur=\"2.31\">One thing we need in order to\nmake that happen is what we</text><text start=\"30.78\" dur=\"1.579\">call a means of abstraction.</text><text start=\"32.359\" dur=\"2.141\">While we can certainly write\narbitrary expressions, it</text><text start=\"34.5\" dur=\"2.52\">would be valuable having written\nit down and gotten the</text><text start=\"37.02\" dur=\"2.99\">value of an expression to be\nable to remember, to save it</text><text start=\"40.01\" dur=\"3.22\">away by giving it a name, and\nthen using the name to get the</text><text start=\"43.23\" dur=\"2.72\">value back whenever\nwe needed it.</text><text start=\"45.95\" dur=\"1.43\">Fortunately, we have\nthat ability.</text><text start=\"47.38\" dur=\"1.37\">It&amp;#39;s called assignment.</text><text start=\"48.75\" dur=\"3.47\">And in Python, the format\nof that is shown here.</text><text start=\"52.22\" dur=\"4.61\">We type in word or a sequence\nof characters followed by an</text><text start=\"56.83\" dur=\"4.41\">equal sign followed by some\nexpression whose value will</text><text start=\"61.24\" dur=\"3.18\">then be associated\nwith that word.</text><text start=\"64.42\" dur=\"4.98\">So if I go over to my Python\nshell, I can do things like</text><text start=\"69.4\" dur=\"8.93\">I&amp;#39;m going to say, give\nthe name pi 3.14159.</text><text start=\"78.33\" dur=\"2.25\">And notice when it print it out,\nit doesn&amp;#39;t mean anything.</text><text start=\"80.58\" dur=\"1.54\">It simply has done\nthat assignment.</text><text start=\"82.12\" dur=\"1.02\">That is it basically--</text><text start=\"83.14\" dur=\"2.65\">as we&amp;#39;re going to see later on--\ncreated a binding of the</text><text start=\"85.79\" dur=\"1.915\">name pi to that value.</text><text start=\"87.705\" dur=\"3.525\">If I want to see the value of\npi, I can simply ask the</text><text start=\"91.23\" dur=\"2.49\">Python interpreter to give\nit to me, and it</text><text start=\"93.72\" dur=\"1.34\">prints it back out.</text><text start=\"95.06\" dur=\"1.44\">So I could do another binding.</text><text start=\"96.5\" dur=\"4.05\">I can say, I&amp;#39;ve got\na radius of 11.2.</text><text start=\"100.55\" dur=\"2.03\">Again, notice that it doesn&amp;#39;t\nprint anything out.</text><text start=\"102.58\" dur=\"3.43\">If I want to get the value of\nradius, I can ask for it.</text><text start=\"106.01\" dur=\"3.07\">But I can also now do things\nlike create expressions.</text><text start=\"109.08\" dur=\"2.27\">So I&amp;#39;m going to assign\nthe name area to.</text><text start=\"111.35\" dur=\"2.32\">And I can now write an\nexpression as I would have</text><text start=\"113.67\" dur=\"8.57\">before with now not just numbers\nbut names whose values</text><text start=\"122.24\" dur=\"0.79\">are also numbers.</text><text start=\"123.03\" dur=\"4.05\">So the area is pi r squared,\nwhere r is my radius.</text><text start=\"127.08\" dur=\"3.78\">And I can say, OK, what\nis the value of area?</text><text start=\"130.86\" dur=\"2.11\">And it did that computation.</text><text start=\"132.97\" dur=\"1.43\">So I have an assignment\nstatement.</text><text start=\"134.4\" dur=\"2.76\">And notice here I&amp;#39;m using a\nsingle equal sign, which is</text><text start=\"137.16\" dur=\"3.14\">why we use the double equal\nsign for comparison.</text><text start=\"140.3\" dur=\"3.86\">A word or a name, an equal sign,\nand expression says, get</text><text start=\"144.16\" dur=\"3.81\">the value of that expression and\nbind to it or bind it to</text><text start=\"147.97\" dur=\"2.6\">if you like the value of the\nname associated on the left</text><text start=\"150.57\" dur=\"3.89\">hand side of that expression.</text><text start=\"154.46\" dur=\"2.26\">So let&amp;#39;s look at that in\na little more detail.</text><text start=\"156.72\" dur=\"4.4\">We say that we&amp;#39;re binding a\nvariable or a name to a value.</text><text start=\"161.12\" dur=\"1.08\">And what does that mean?</text><text start=\"162.2\" dur=\"4.16\">That statement pi equals 3.14159\nliterally assigns the</text><text start=\"166.36\" dur=\"3\">name pi to the value of the\nexpression to the right hand</text><text start=\"169.36\" dur=\"1.502\">side of the equal.</text><text start=\"170.862\" dur=\"3.188\">And you can think of this as\nliterally creating a binding</text><text start=\"174.05\" dur=\"2.31\">between a name and\na value stored</text><text start=\"176.36\" dur=\"1.18\">somewhere in the computer.</text><text start=\"177.54\" dur=\"2.43\">So over here are all the values\nthat are stored away in</text><text start=\"179.97\" dur=\"0.87\">the computer.</text><text start=\"180.84\" dur=\"3\">And I have somewhere within the\ncomputer a listing of all</text><text start=\"183.84\" dur=\"2.48\">the names whose bindings\nI have done.</text><text start=\"186.32\" dur=\"2.47\">As we just saw, we can retrieve\nthe value associated</text><text start=\"188.79\" dur=\"2.65\">with the name by simply invoking\nthe name, just asking</text><text start=\"191.44\" dur=\"4.41\">for what is the value\npi or pi.</text><text start=\"195.85\" dur=\"2.86\">Now I can change the bindings.</text><text start=\"198.71\" dur=\"3.23\">So having the bound a variable\nname, I can do another</text><text start=\"201.94\" dur=\"1.34\">assignment statement.</text><text start=\"203.28\" dur=\"2.81\">So, for example, if I go back\nover to my Python shell, I</text><text start=\"206.09\" dur=\"2.11\">could change the value\nof radius.</text><text start=\"208.2\" dur=\"6.29\">Remember, initially we\nhad radius of 11.2.</text><text start=\"214.49\" dur=\"1.81\">Let&amp;#39;s change it to something\ndifferent.</text><text start=\"216.3\" dur=\"1.8\">Let&amp;#39;s changes it to in fact--</text><text start=\"218.1\" dur=\"3.95\">I&amp;#39;m going to make this 14.3.</text><text start=\"222.05\" dur=\"1.37\">So how do I do that?</text><text start=\"223.42\" dur=\"3.62\">I say let&amp;#39;s have\nradius be 14.3.</text><text start=\"227.04\" dur=\"2.44\">Now what&amp;#39;s my value of radius?</text><text start=\"229.48\" dur=\"1.8\">There it is.</text><text start=\"231.28\" dur=\"3.04\">What that&amp;#39;s done in my diagram\nover here is it&amp;#39;s change the</text><text start=\"234.32\" dur=\"1.07\">binding for radius.</text><text start=\"235.39\" dur=\"1.22\">Remember before it was 11.2.</text><text start=\"236.61\" dur=\"2.93\">It has now changed into\nsomething else.</text><text start=\"239.54\" dur=\"3.23\">But notice that area\nhasn&amp;#39;t changed.</text><text start=\"242.77\" dur=\"2.07\">And in fact I can\nconfirm that.</text><text start=\"244.84\" dur=\"4.68\">The area is still 3.94 point\na whole bunch of stuff.</text><text start=\"249.52\" dur=\"2.92\">And that&amp;#39;s because my evaluation\nof the binding for</text><text start=\"252.44\" dur=\"2.13\">area having been done\nearlier has simply</text><text start=\"254.57\" dur=\"1.48\">stored away that value.</text><text start=\"256.05\" dur=\"2.729\">As you can see right here,\nit doesn&amp;#39;t have an</text><text start=\"258.779\" dur=\"0.825\">expression of value.</text><text start=\"259.604\" dur=\"1.725\">And it is the particular\nvalue.</text><text start=\"261.329\" dur=\"3.301\">So rebinding radius does\nnot change the binding</text><text start=\"264.63\" dur=\"1.75\">associated with area.</text><text start=\"266.38\" dur=\"3.28\">An easy place to make a bug or\nhave a mistake and something</text><text start=\"269.66\" dur=\"2.34\">that you want to keep an eye out\non as you move forward in</text><text start=\"272\" dur=\"1.25\">terms of using these ideas.</text><text start=\"273.25\" dur=\"1.2\"></text></transcript>\n", "qic9_yRWj5U": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0.88\" dur=\"3.63\">Now we&amp;#39;ve seen some examples of how bindings of variables</text><text start=\"4.51\" dur=\"2.41\">take place when functions are called.</text><text start=\"6.92\" dur=\"2.21\">Let&amp;#39;s do a couple of other examples to just really</text><text start=\"9.13\" dur=\"1.04\">reinforce this point.</text><text start=\"10.17\" dur=\"2.97\">Because it&amp;#39;s really important for you to understand bindings</text><text start=\"13.14\" dur=\"2.31\">of variables and how they take place.</text><text start=\"15.45\" dur=\"1.5\">For this one, I&amp;#39;m actually going to just go over to</text><text start=\"16.95\" dur=\"2.63\">Python and IDLE, and type in a little example.</text><text start=\"19.58\" dur=\"4.18\">Imagine I say I&amp;#39;m going to create f(x) to have the</text><text start=\"23.76\" dur=\"0.95\">following property.</text><text start=\"24.71\" dur=\"2.435\">I&amp;#39;m going to bind y to 1.</text><text start=\"27.145\" dur=\"4.425\">I&amp;#39;m going to bind x to be x + y.</text><text start=\"34.59\" dur=\"6\">I&amp;#39;m going to then print out the current value of x, that x</text><text start=\"40.59\" dur=\"1.25\">is equal to--</text><text start=\"45.97\" dur=\"0.18\">sorry.</text><text start=\"46.15\" dur=\"1.876\">I&amp;#39;m printing out the string x is equal to and then the</text><text start=\"48.026\" dur=\"1.454\">actual value of x.</text><text start=\"49.48\" dur=\"3.87\">And then I&amp;#39;m going to return the value of x.</text><text start=\"53.35\" dur=\"5.17\">And now inside of Python, I set x to 3.</text><text start=\"58.52\" dur=\"2.77\">I set y to 2.</text><text start=\"61.29\" dur=\"0.6\">And I&amp;#39;m sorry.</text><text start=\"61.89\" dur=\"0.74\">I mistyped that.</text><text start=\"62.63\" dur=\"1.13\">So let&amp;#39;s do that properly.</text><text start=\"63.76\" dur=\"1.85\">There&amp;#39;s y is equal to 2.</text><text start=\"65.61\" dur=\"5.318\">And I bind z to be f(x) .</text><text start=\"70.928\" dur=\"0.882\">And I run it.</text><text start=\"71.81\" dur=\"2.41\">And it says x is equal to 4.</text><text start=\"74.22\" dur=\"2.62\">And if I now ask, what&amp;#39;s the value of z?</text><text start=\"76.84\" dur=\"3.112\">It&amp;#39;s 4. x is 3.</text><text start=\"79.952\" dur=\"3.028\">And y is 2.</text><text start=\"82.98\" dur=\"1.82\">Hm.</text><text start=\"84.8\" dur=\"2.31\">I want to see, so why does that happen?</text><text start=\"87.11\" dur=\"4.59\">Why is it that x is now returning an</text><text start=\"91.7\" dur=\"1.81\">internal value of 4 here.</text><text start=\"93.51\" dur=\"1.79\">But externally is 3.</text><text start=\"95.3\" dur=\"0.9\">And z is 4.</text><text start=\"96.2\" dur=\"1.97\">And y is equal to 2.</text><text start=\"98.17\" dur=\"2.74\">So why does this happen?</text><text start=\"100.91\" dur=\"2.06\">This is going to give us a chance, again, to look at what</text><text start=\"102.97\" dur=\"1.3\">happens inside of the binding.</text><text start=\"104.27\" dur=\"3.61\">So let&amp;#39;s look in detail at what happens here.</text><text start=\"107.88\" dur=\"3.42\">I create a definition of f.</text><text start=\"111.3\" dur=\"4.19\">And in my global environment for Python, that says I&amp;#39;ve got</text><text start=\"115.49\" dur=\"2.18\">a binding of f to that procedure.</text><text start=\"117.67\" dur=\"2.36\">And to remind you, inside there, there&amp;#39;s the formal</text><text start=\"120.03\" dur=\"1.38\">parameter for x.</text><text start=\"121.41\" dur=\"2.77\">And there is the interior.</text><text start=\"124.18\" dur=\"1.1\">And I didn&amp;#39;t repeat all of it.</text><text start=\"125.28\" dur=\"1.32\">It&amp;#39;s got that print statement to it.</text><text start=\"126.6\" dur=\"3.985\">But basically there is that interior that deals with all</text><text start=\"130.585\" dur=\"0.935\">of those pieces.</text><text start=\"131.52\" dur=\"2.485\">And notice that it&amp;#39;s just there as text.</text><text start=\"134.005\" dur=\"3.255\">It hasn&amp;#39;t actually been evaluated yet.</text><text start=\"137.26\" dur=\"2.99\">I then go ahead and do the bindings of x is 3 and y is</text><text start=\"140.25\" dur=\"0.65\">equal to 2.</text><text start=\"140.9\" dur=\"2.55\">And at this stage in the computation, I&amp;#39;ve got bindings</text><text start=\"143.45\" dur=\"2.81\">for them inside the environment.</text><text start=\"146.26\" dur=\"1.05\">Key thing to notice.</text><text start=\"147.31\" dur=\"5.56\">In the global environment x is 3, y is 2, and f is bound to a</text><text start=\"152.87\" dur=\"4.66\">procedure object whose body has references to x and y but</text><text start=\"157.53\" dur=\"2.31\">nothing more.</text><text start=\"159.84\" dur=\"2.41\">Let&amp;#39;s move on in the computation.</text><text start=\"162.25\" dur=\"2.48\">I now say I want to invoke f.</text><text start=\"164.73\" dur=\"2.8\">I&amp;#39;m going to eventually bind z to the value returned by</text><text start=\"167.53\" dur=\"2.28\">calling f on x.</text><text start=\"169.81\" dur=\"3.01\">But I&amp;#39;m invoking f of x right there.</text><text start=\"172.82\" dur=\"1.02\">What does that do?</text><text start=\"173.84\" dur=\"4.13\">Well I get the binding for f, which is this procedure.</text><text start=\"177.97\" dur=\"2.79\">And that says I&amp;#39;m going to copy this environment pointer.</text><text start=\"180.76\" dur=\"2.95\">So I&amp;#39;m going to create a new frame whose parent is that</text><text start=\"183.71\" dur=\"1.37\">global environment.</text><text start=\"185.08\" dur=\"4.14\">And inside there, I&amp;#39;m going to bind a parameter x--</text><text start=\"189.22\" dur=\"1.67\">and that is coming from there--</text><text start=\"190.89\" dur=\"4.97\">to the value passed in by the value of the call to f.</text><text start=\"195.86\" dur=\"3.74\">And that x refers to this one.</text><text start=\"199.6\" dur=\"1.72\">OK, a little funky.</text><text start=\"201.32\" dur=\"2.39\">But it&amp;#39;s important to see that the rules actually tell me how</text><text start=\"203.71\" dur=\"0.43\">to do that.</text><text start=\"204.14\" dur=\"3.38\">My invocation of f says create a frame in which the formal</text><text start=\"207.52\" dur=\"1.835\">parameter x is going to have a binding.</text><text start=\"209.355\" dur=\"1.785\">And what&amp;#39;s the binding for that value?</text><text start=\"211.14\" dur=\"2.23\">It&amp;#39;s the value of this expression.</text><text start=\"213.37\" dur=\"1.79\">And that expression is a variable name.</text><text start=\"215.16\" dur=\"2.54\">So I&amp;#39;m doing that evaluation here in the global</text><text start=\"217.7\" dur=\"0.77\">environment.</text><text start=\"218.47\" dur=\"3.35\">I get that value of x, which is 3.</text><text start=\"221.82\" dur=\"4.29\">So I&amp;#39;ve now created a local binding for x to be 3.</text><text start=\"226.11\" dur=\"1.75\">And now I&amp;#39;m ready to move on.</text><text start=\"227.86\" dur=\"2.97\">So relative to this environment, I am now going to</text><text start=\"230.83\" dur=\"2.35\">evaluate the body of f.</text><text start=\"233.18\" dur=\"1.83\">So let&amp;#39;s step on.</text><text start=\"235.01\" dur=\"3.6\">The body of f says, first expression is to create a</text><text start=\"238.61\" dur=\"1.62\">binding for y.</text><text start=\"240.23\" dur=\"3.09\">Remember that&amp;#39;s happening here.</text><text start=\"243.32\" dur=\"2.74\">That&amp;#39;s happening in the frame associated with the function</text><text start=\"246.06\" dur=\"1.09\">invocation.</text><text start=\"247.15\" dur=\"7.02\">So I&amp;#39;m going to bind y, have the value 1 there.</text><text start=\"254.17\" dur=\"1.46\">That&amp;#39;s interesting because it&amp;#39;s not</text><text start=\"255.63\" dur=\"1.34\">changing things up here.</text><text start=\"256.97\" dur=\"2.27\">It is making that binding there.</text><text start=\"259.24\" dur=\"2.89\">So that step of the computation</text><text start=\"262.13\" dur=\"1.255\">creates that change.</text><text start=\"263.385\" dur=\"5.655\">And If I now move on, the next expression in f says get the</text><text start=\"269.04\" dur=\"1.72\">value of x.</text><text start=\"270.76\" dur=\"2.81\">Remember, I&amp;#39;m doing that relative to this frame.</text><text start=\"273.57\" dur=\"3.4\">Get the value of y, which I&amp;#39;m doing relative to this frame.</text><text start=\"276.97\" dur=\"2.87\">And then do that computation and change the binding, which</text><text start=\"279.84\" dur=\"3.5\">is why it goes from 3 + 1, and I&amp;#39;m changing</text><text start=\"283.34\" dur=\"2.14\">that binding to 4.</text><text start=\"285.48\" dur=\"4.05\">From the perspective of f, it never sees that version of y.</text><text start=\"289.53\" dur=\"2.55\">It only sees this version of y.</text><text start=\"292.08\" dur=\"2.76\">From the perspective of f, it only saw that version of x,</text><text start=\"294.84\" dur=\"1.68\">which was originally 3.</text><text start=\"296.52\" dur=\"4.39\">And then the binding, this, happens in this frame.</text><text start=\"300.91\" dur=\"3.58\">And that&amp;#39;s why that version of x changes.</text><text start=\"304.49\" dur=\"2.83\">Having done that, we can move on.</text><text start=\"307.32\" dur=\"4.94\">And it says return the value of x, which is 4, and that is</text><text start=\"312.26\" dur=\"2.12\">what z is going to be bound to.</text><text start=\"314.38\" dur=\"3.41\">And that binding, remember, takes place up in this frame</text><text start=\"317.79\" dur=\"3.68\">because that expression is being evaluated relative to</text><text start=\"321.47\" dur=\"1.96\">the global environment.</text><text start=\"323.43\" dur=\"2.77\">It&amp;#39;s a long-winded way of saying notice that this</text><text start=\"326.2\" dur=\"7.21\">particular expression here, the body of f, got a value for</text><text start=\"333.41\" dur=\"2.81\">y that it had bound locally, got a value for x which was</text><text start=\"336.22\" dur=\"3.92\">the local parameter, and did the change locally inside of</text><text start=\"340.14\" dur=\"1.29\">that environment.</text><text start=\"341.43\" dur=\"2.57\">But the return value was a binding that took place up in</text><text start=\"344\" dur=\"1.57\">the global environment.</text><text start=\"345.57\" dur=\"3.22\">And that&amp;#39;s why if I were now to go ahead and print out,</text><text start=\"348.79\" dur=\"2.65\">control reverts to the global environment.</text><text start=\"351.44\" dur=\"2.72\">And that&amp;#39;s where the values of x, y and z are visible, which</text><text start=\"354.16\" dur=\"3.76\">is why I am going to, in fact, now do the values that I saw</text><text start=\"357.92\" dur=\"2.68\">printed when I did that in my environment.</text><text start=\"360.6\" dur=\"3.71\">So the point of this is that those bindings actually take</text><text start=\"364.31\" dur=\"2.65\">place in frames that make sense.</text><text start=\"366.96\" dur=\"1.96\">Here are some observations.</text><text start=\"368.92\" dur=\"4.37\">Each function call creates a new environment, a new scope,</text><text start=\"373.29\" dur=\"2.29\">where the bindings of the formal parameters and the</text><text start=\"375.58\" dur=\"2.66\">values passed in take place.</text><text start=\"378.24\" dur=\"3.47\">And where, as we saw, local variables, things created as</text><text start=\"381.71\" dur=\"2.13\">assignments within the body, take place, that</text><text start=\"383.84\" dur=\"1.91\">local binding of y.</text><text start=\"385.75\" dur=\"3.28\">And that creates an environment in which we</text><text start=\"389.03\" dur=\"2.13\">actually do the computation.</text><text start=\"391.16\" dur=\"4.29\">This scoping is often called either static or lexical.</text><text start=\"395.45\" dur=\"3.65\">Because the scope within which a variable has a value is</text><text start=\"399.1\" dur=\"3.03\">defined by the extent of the code boundaries.</text><text start=\"402.13\" dur=\"4.25\">That definition of f had, lexically, a scope around that</text><text start=\"406.38\" dur=\"2.37\">said I&amp;#39;m locally binding y.</text><text start=\"408.75\" dur=\"2.24\">I&amp;#39;m locally using the formal parameter of x.</text><text start=\"410.99\" dur=\"3.72\">All computations take place within that scope.</text><text start=\"414.71\" dur=\"3.18\">So that gives us a sense of why we see the particular</text><text start=\"417.89\" dur=\"1.46\">examples that we just did.</text></transcript>\n", "PauHW4ObHDo": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.32\"></text><text start=\"0.32\" dur=\"4.11\">In this sixth lecture we&amp;#39;re going to\nintroduce compound data types.</text><text start=\"4.43\" dur=\"4.32\">These are ways to combine simpler data\nobjects into collections, for which we</text><text start=\"8.75\" dur=\"3.56\">can then write algorithms to\ninfer new information.</text><text start=\"12.31\" dur=\"3.86\">In particular, we will introduce\ntuples and lists.</text><text start=\"16.17\" dur=\"3.33\">And we&amp;#39;ll talk about fundamental\noperations on these common compound</text><text start=\"19.5\" dur=\"1.69\">data types.</text><text start=\"21.19\" dur=\"3.63\">Finally, we will show you a more general\ncollection of objects called</text><text start=\"24.82\" dur=\"4.71\">dictionaries, and methods for creating\nand manipulating them.</text><text start=\"29.53\" dur=\"3.21\">At the end of this lecture, you should\nbe able to write functions that</text><text start=\"32.74\" dur=\"4.22\">manipulate compound data objects, as\nwell as those that deal with scalar</text><text start=\"36.96\" dur=\"1.8\">objects, like numbers and strings.</text><text start=\"38.76\" dur=\"1.25\"></text></transcript>\n", "EeGAH_Es_7s": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.89\"></text><text start=\"0.89\" dur=\"3.86\">Eric Grimson: Now we&amp;#39;ve seen black-box\ntesting, designing a test suite based</text><text start=\"4.75\" dur=\"2.55\">on just pass through\nthe specification.</text><text start=\"7.3\" dur=\"3.14\">A nice complement to that\nis glass-box testing.</text><text start=\"10.44\" dur=\"4.1\">That&amp;#39;s where we&amp;#39;re going to use the code\nitself, the implementation, to</text><text start=\"14.54\" dur=\"2.96\">guide the design of test cases.</text><text start=\"17.5\" dur=\"4.29\">Obviously looking at the code should\ngive us a more complete handle, if you</text><text start=\"21.79\" dur=\"3.07\">like, on trying to figure out where\nthere might be possible bugs.</text><text start=\"24.86\" dur=\"1.77\">So let&amp;#39;s think a little bit\nabout what it means.</text><text start=\"26.63\" dur=\"1.75\">And again, the name sort\nof suggests it.</text><text start=\"28.38\" dur=\"4.239\">Glass-box says I can see inside\nto figure out what&amp;#39;s going on.</text><text start=\"32.619\" dur=\"6.591\">A glass-box test suite, a good one,\nis called path-complete, if every</text><text start=\"39.21\" dur=\"4.59\">possible path through the code\nis tested at least once.</text><text start=\"43.8\" dur=\"3.23\">Now if you think about it, that&amp;#39;s\nnot always going to be possible.</text><text start=\"47.03\" dur=\"3.68\">If we&amp;#39;ve got a loop, we might be able\nto say what happens if the loop is</text><text start=\"50.71\" dur=\"2.66\">executed once, executed\nmore than once.</text><text start=\"53.37\" dur=\"3.82\">But to do one, two, three, four, five,\nup to a billion times, again we may</text><text start=\"57.19\" dur=\"1.49\">not be able to test all of them.</text><text start=\"58.68\" dur=\"3.8\">But we can certainly talk about\ndifferent samplings of</text><text start=\"62.48\" dur=\"1.47\">test through a loop.</text><text start=\"63.95\" dur=\"1.9\">Same thing with a recursive function.</text><text start=\"65.85\" dur=\"2.99\">There maybe arbitrarily deep levels of\nrecursions, where we may not be able</text><text start=\"68.84\" dur=\"0.73\">to test all of it.</text><text start=\"69.57\" dur=\"3.86\">But the idea of testing multiple\npaths through the code.</text><text start=\"73.43\" dur=\"3.84\">And if possible all paths through\nthe code, is really nice.</text><text start=\"77.27\" dur=\"3.31\">Notice by the way, even a path-complete\ntest suite can still</text><text start=\"80.58\" dur=\"1\">miss a bug.</text><text start=\"81.58\" dur=\"2.21\">It will depend on the\nchoice of examples.</text><text start=\"83.79\" dur=\"3.12\">But if it is path-complete, if we&amp;#39;re\nexercising every path through the</text><text start=\"86.91\" dur=\"5.11\">code, at least we&amp;#39;re more likely\nto find a bug if it&amp;#39;s there.</text><text start=\"92.02\" dur=\"3.21\">Now let&amp;#39;s look at a little example.</text><text start=\"95.23\" dur=\"3.24\">Here&amp;#39;s a simple little piece of code\nfor finding absolute value.</text><text start=\"98.47\" dur=\"1.16\">Assumes x is an int.</text><text start=\"99.63\" dur=\"3.37\">It&amp;#39;s going to return x, if x is greater\nthan or equal to 0, it&amp;#39;ll</text><text start=\"103\" dur=\"1.86\">return minus x otherwise.</text><text start=\"104.86\" dur=\"3.77\">And since I know that x is an int,\nI can do some good sampling here.</text><text start=\"108.63\" dur=\"2.27\">And you can see the code inside.</text><text start=\"110.9\" dur=\"2.72\">Now, what would a good\ntest suite here be?</text><text start=\"113.62\" dur=\"2.55\">Well, one sample of a test suite\nwould be to pick the values</text><text start=\"116.17\" dur=\"2.26\">of minus 2 and 2.</text><text start=\"118.43\" dur=\"2.58\">It&amp;#39;s certainly path-complete, right.</text><text start=\"121.01\" dur=\"4.59\">If it&amp;#39;s minus 2, it&amp;#39;s going\nto take this path.</text><text start=\"125.6\" dur=\"3.349\">If it&amp;#39;s positive 2, it&amp;#39;s going\nto take this path.</text><text start=\"128.949\" dur=\"4.101\">So it&amp;#39;s looking at both paths\nthrough the if clause.</text><text start=\"133.05\" dur=\"2.76\">On the other hand, it&amp;#39;s\ngoing to miss a case.</text><text start=\"135.81\" dur=\"3.95\">And it will miss in fact, this case\nhere, of looking at absolute minus 1,</text><text start=\"139.76\" dur=\"2.21\">which in this case gives me a bug.</text><text start=\"141.97\" dur=\"4.963\">Because in fact I should have had\nx less than or equal to here</text><text start=\"146.933\" dur=\"2.697\">to catch that case.</text><text start=\"149.63\" dur=\"0.73\">What does that say?</text><text start=\"150.36\" dur=\"3.25\">It says it&amp;#39;s not just being\npath-complete, but we want to think</text><text start=\"153.61\" dur=\"1.92\">about boundary cases.</text><text start=\"155.53\" dur=\"2.89\">And here the code itself gives\nus a boundary case.</text><text start=\"158.42\" dur=\"5.03\">Since that&amp;#39;s the test, I ought to pick\nthat up as one of the boundary cases.</text><text start=\"163.45\" dur=\"2.96\">When it&amp;#39;s at that boundary, when it&amp;#39;s\nbelow that boundary, when it&amp;#39;s above</text><text start=\"166.41\" dur=\"1.6\">that boundary.</text><text start=\"168.01\" dur=\"2.59\">But here&amp;#39;s a case where I do explore\nall the possible paths.</text><text start=\"170.6\" dur=\"3.97\">I&amp;#39;ve got a path-complete set of tests.</text><text start=\"174.57\" dur=\"2.03\">OK, so what can we do with this?</text><text start=\"176.6\" dur=\"3.2\">Well, here&amp;#39;s some simple rules of\nthumb-- in a second we&amp;#39;re going to get</text><text start=\"179.8\" dur=\"2.82\">to an example-- but here&amp;#39;s some\nrules of thumb for how you do</text><text start=\"182.62\" dur=\"2\">good glass-box testing.</text><text start=\"184.62\" dur=\"4.06\">First, make sure that both branches\nof all if statements are checked.</text><text start=\"188.68\" dur=\"2.42\">I just did that, in that\nparticular case.</text><text start=\"191.1\" dur=\"3.32\">Similarly, insure that every\nexcept clause is executed.</text><text start=\"194.42\" dur=\"0.95\">We&amp;#39;re going to return to this.</text><text start=\"195.37\" dur=\"3.16\">We haven&amp;#39;t talked a lot about except\nso far, or exceptions.</text><text start=\"198.53\" dur=\"1.08\">But it&amp;#39;s the same idea.</text><text start=\"199.61\" dur=\"3.33\">Every time I&amp;#39;ve got an exception,\nmake sure I actually test that.</text><text start=\"202.94\" dur=\"5.13\">If I have a loop, a for loop, I want\nto have tests where the loop&amp;#39;s not</text><text start=\"208.07\" dur=\"4.53\">entered, where the body of the loop is\nexecuted exactly once, or the body of</text><text start=\"212.6\" dur=\"2.87\">the loop is executed more than once.</text><text start=\"215.47\" dur=\"2.46\">As I said earlier, I can&amp;#39;t do\nall possible versions of</text><text start=\"217.93\" dur=\"0.66\">them more than once.</text><text start=\"218.59\" dur=\"3.05\">But I can sample those three because\nthey tend to expose places</text><text start=\"221.64\" dur=\"1.34\">where there are bugs.</text><text start=\"222.98\" dur=\"1.69\">Same thing for a while loop.</text><text start=\"224.67\" dur=\"1.88\">Do the same thing I did for for.</text><text start=\"226.55\" dur=\"3.59\">The loop&amp;#39;s not done, done once,\ndone multiple times.</text><text start=\"230.14\" dur=\"3.65\">But also I want to catch all the cases\nhere where there are different ways to</text><text start=\"233.79\" dur=\"1.17\">exit the loop.</text><text start=\"234.96\" dur=\"3.4\">If there are different parts of my loop\nor I can break out of it, I want</text><text start=\"238.36\" dur=\"1.59\">to catch all of those.</text><text start=\"239.95\" dur=\"3.48\">If I&amp;#39;ve got a recursive function, I want\nto test what happens if there&amp;#39;s</text><text start=\"243.43\" dur=\"2.42\">no recursive call, it&amp;#39;s\njust the base case.</text><text start=\"245.85\" dur=\"2.79\">What happens if there&amp;#39;s exactly\none recursive call?</text><text start=\"248.64\" dur=\"2.04\">And again, if there&amp;#39;s more\nthan one recursive call.</text><text start=\"250.68\" dur=\"5.31\">And you can see this pattern of none,\none, and more, there and here.</text><text start=\"255.99\" dur=\"2.599\">And that&amp;#39;s a common thing that I&amp;#39;m going\nto want to try and use, as I</text><text start=\"258.589\" dur=\"3.191\">build different test suites for\ndoing glass-box testing.</text><text start=\"261.78\" dur=\"2.045\"></text></transcript>\n", "vmz9pVWI2S4": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.4\"></text><text start=\"0.4\" dur=\"2.9\">Eric Grimson: In this fourth lecture,\nwe are going to take our ideas of</text><text start=\"3.3\" dur=\"3.09\">looping computations\nand abstract them.</text><text start=\"6.39\" dur=\"3.45\">That means we&amp;#39;ll capture the idea of\na computational method inside a</text><text start=\"9.84\" dur=\"4.74\">function, allowing us to separate the\ndetails of how we do the computation</text><text start=\"14.58\" dur=\"1.97\">from the use of the computation.</text><text start=\"16.55\" dur=\"3.17\">Something we call a black\nbox abstraction.</text><text start=\"19.72\" dur=\"3.74\">This is a very powerful idea that will\nlet us build complex collections of</text><text start=\"23.46\" dur=\"3.55\">functions that compute very interesting\nthings without getting</text><text start=\"27.01\" dur=\"1.615\">bogged down in the details.</text><text start=\"28.625\" dur=\"3.814\">And in a way, that makes it easier\nto reuse methods, or to</text><text start=\"32.439\" dur=\"2.061\">debug or correct them.</text><text start=\"34.5\" dur=\"3.6\">We&amp;#39;ll also introduce a formalism\ncalled environments to help us</text><text start=\"38.1\" dur=\"4.26\">visualize how using functions within\na Python interpreter controls the</text><text start=\"42.36\" dur=\"4.71\">assignment of names to values, how those\nvalues are retrieved, and how we</text><text start=\"47.07\" dur=\"4.15\">can use those ideas to conceptualize\nnew algorithms.</text><text start=\"51.22\" dur=\"4\">At the end of this lecture you will have\nthe ability to write arbitrary</text><text start=\"55.22\" dur=\"4.59\">computations as functions, and to use\nthose functions as building blocks for</text><text start=\"59.81\" dur=\"3.6\">other computations, a key element\nof computational thinking.</text><text start=\"63.41\" dur=\"1.25\"></text></transcript>\n", "_FbKIp-6YzY": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.03\"></text><text start=\"1.03\" dur=\"2.33\">Chris Terman: In this lecture, we&amp;#39;re\ngoing to revisit optimization</text><text start=\"3.36\" dur=\"4.1\">problems, particularly those that\ninvolved having to do an exhaustive</text><text start=\"7.46\" dur=\"2.98\">search to find the optimal solution.</text><text start=\"10.44\" dur=\"4.22\">Before, we were forced to adopt a simple\nheuristic, like the greedy</text><text start=\"14.66\" dur=\"4.54\">algorithm, in order to come up with\nrun-times that are reasonable.</text><text start=\"19.2\" dur=\"3.71\">Now, we&amp;#39;re going to try using a\ntechnique called dynamic programming</text><text start=\"22.91\" dur=\"3.12\">that will let us achieve optimal\nresults, but with much</text><text start=\"26.03\" dur=\"2.08\">more reasonable run-times.</text><text start=\"28.11\" dur=\"1.82\">Let&amp;#39;s get started.</text><text start=\"29.93\" dur=\"5.25\">Some optimization problems exhibit\nproperties which, if they were true,</text><text start=\"35.18\" dur=\"3.55\">allow us to come up with a much more\ncomputationally efficient way to solve</text><text start=\"38.73\" dur=\"1.36\">the problem.</text><text start=\"40.09\" dur=\"3.35\">The first property is called\noptimal substructure.</text><text start=\"43.44\" dur=\"5.17\">So suppose we have some optimization\nproblem expressed as the function f,</text><text start=\"48.61\" dur=\"2.81\">where we pass in an argument\nthat has some structure.</text><text start=\"51.42\" dur=\"4.35\">For example, the argument may be a list\nof items, and the shaded area</text><text start=\"55.77\" dur=\"3.64\">might represent the first half of the\nlist, and the unshaded area the second</text><text start=\"59.41\" dur=\"1.44\">half of the list.</text><text start=\"60.85\" dur=\"3.27\">In some problems, we might discover\nthat, to come up with the optimal</text><text start=\"64.12\" dur=\"5.14\">solution for the original problem, we&amp;#39;ll\ndiscover ourselves computing the</text><text start=\"69.26\" dur=\"4.68\">same optimization problem, but on a\nsmaller argument as part of the</text><text start=\"73.94\" dur=\"2.93\">original arguments that have\nbeen whittled down somehow.</text><text start=\"76.87\" dur=\"4.15\">So in this case, we&amp;#39;re computing the\noptimization function on the first</text><text start=\"81.02\" dur=\"1.7\">half, and then the second half.</text><text start=\"82.72\" dur=\"4.41\">So we decompose the problem, the\noriginal problem, into two</text><text start=\"87.13\" dur=\"1.63\">sub-problems.</text><text start=\"88.76\" dur=\"2.9\">Now, if it&amp;#39;s the case that I&amp;#39;ll be able\nto take the answer to these two</text><text start=\"91.66\" dur=\"4.82\">sub-problems and combine them some way,\nI may be able to come up with the</text><text start=\"96.48\" dur=\"2.66\">answer for the original problem.</text><text start=\"99.14\" dur=\"6.4\">And if that&amp;#39;s true, if our computation\nexhibits this behavior, we say that it</text><text start=\"105.54\" dur=\"2.19\">has optimal substructure.</text><text start=\"107.73\" dur=\"5.53\">Another property is that in doing this\nsort of decomposition of the</text><text start=\"113.26\" dur=\"4\">optimization problem into sub-problems,\nwe may discover that the</text><text start=\"117.26\" dur=\"3.59\">same sub-problem keeps reoccurring.</text><text start=\"120.85\" dur=\"5.4\">And when that happens, so for example,\nwe may discover that we keep computing</text><text start=\"126.25\" dur=\"2.32\">this particular function many times.</text><text start=\"128.57\" dur=\"4.22\">And when that happens, when we say that\nthe sub-problems are overlapping.</text><text start=\"132.79\" dur=\"4.31\">In other words, if we find ourselves\ncomputing the answer for the same</text><text start=\"137.1\" dur=\"3.69\">sub-problem again and again and again.</text><text start=\"140.79\" dur=\"4.55\">Although if not an optimization problem,\nthis definition for Fibonacci</text><text start=\"145.34\" dur=\"4.83\">and its execution display the properties\nthat we talked about on the</text><text start=\"150.17\" dur=\"1.38\">previous slide.</text><text start=\"151.55\" dur=\"6.46\">We can see that, to compute fib(n) ,\nwe end up computing fib(n-1) , and</text><text start=\"158.01\" dur=\"5.69\">fib(n-2) of , and this is the sort of\nsubstructure we were talking about.</text><text start=\"163.7\" dur=\"4.2\">And then, of course, the computation\ninvolves adding</text><text start=\"167.9\" dur=\"1.06\">the two results together.</text><text start=\"168.96\" dur=\"0.58\">So we--</text><text start=\"169.54\" dur=\"5.17\">processing the answers from fib(n-1)\nand fib(n-2) to come up with the</text><text start=\"174.71\" dur=\"2.16\">answer for fib(n) .</text><text start=\"176.87\" dur=\"4.66\">If we actually consider the execution\nof this, say, on Fibonacci of five,</text><text start=\"181.53\" dur=\"3.21\">let&amp;#39;s sort of show the call tree, all\nthe sub-problems that have to be</text><text start=\"184.74\" dur=\"3.09\">solved, and see what we see.</text><text start=\"187.83\" dur=\"7.33\">So, fib(5) we have to compute fib(4)\nand fib(3) And fib(4) we&amp;#39;ll compute</text><text start=\"195.16\" dur=\"6.49\">fib(3) and fib(2) And for fib(3)\nwe&amp;#39;ll compute fib(2) and fib(1)</text><text start=\"201.65\" dur=\"4.61\">fib(1) , when the argument is 1, you can\nsee we don&amp;#39;t make any more calls,</text><text start=\"206.26\" dur=\"2.36\">so that&amp;#39;s a leaf of the call tree.</text><text start=\"208.62\" dur=\"5.87\">But fib(2) involves a call of fib(1)\nand fib(0) Same up here, call to a</text><text start=\"214.49\" dur=\"3.53\">fib(1) , and a call to fib(0) .</text><text start=\"218.02\" dur=\"5.59\">And then fib(3) involves a call of\nfib(2) and fib(1) And finally, this</text><text start=\"223.61\" dur=\"4.33\">fib(2) involves a call\nto fib(1) and fib(0)</text><text start=\"227.94\" dur=\"5.02\">So that&amp;#39;s the entire call tree that we\nwill execute when we initially start</text><text start=\"232.96\" dur=\"2.28\">off by calling fib(5).</text><text start=\"235.24\" dur=\"2.72\">We can see there&amp;#39;s a lot of\ncommon sub-problems here.</text><text start=\"237.96\" dur=\"7.44\">For example, we compute f(2)\nhere, and here, and here.</text><text start=\"245.4\" dur=\"2.35\">And in fact, there&amp;#39;s higher\nlevels of sub-problems.</text><text start=\"247.75\" dur=\"3.17\">For example, fib(3) shows up twice.</text><text start=\"250.92\" dur=\"4.95\">So as we look at the call tree, we see\nthat there is a lot of overlap in the</text><text start=\"255.87\" dur=\"2.98\">various sub-problems.</text><text start=\"258.85\" dur=\"2.66\">And we&amp;#39;ll be able to take advantage\nof that as we think of a more</text><text start=\"261.51\" dur=\"5\">computationally efficient\nway to compute fib.</text><text start=\"266.51\" dur=\"3.53\">So how many calls does it take\nto compute Fibonacci(n) ?</text><text start=\"270.04\" dur=\"3.27\">Let&amp;#39;s let t(n) equal the number\nof calls that we need.</text><text start=\"273.31\" dur=\"3.88\">So we can sort of say, well, T(n) , and\nnow we can look at the structure</text><text start=\"277.19\" dur=\"0.71\">of the problem.</text><text start=\"277.9\" dur=\"4.04\">And we can see that to compute\nFibonacci(n) , we have to compute</text><text start=\"281.94\" dur=\"8.39\">Fibonacci(n-1) , which will take T(n-1)\ncalls, plus Fibonacci(n-2) ,</text><text start=\"290.33\" dur=\"2.78\">which takes T(n-2) calls</text><text start=\"293.11\" dur=\"3.84\">Well, looking at the form of this\nequation, we can see that this</text><text start=\"296.95\" dur=\"5.8\">quantity basically approximately doubles\nwith each increment to n, and</text><text start=\"302.75\" dur=\"1.77\">that suggests that the answer--</text><text start=\"304.52\" dur=\"3.05\">we expect the answer to\ngrow exponentially.</text><text start=\"307.57\" dur=\"5.38\">Now, it&amp;#39;s not quite doubling, so the\nexponential won&amp;#39;t involve the constant</text><text start=\"312.95\" dur=\"3.89\">2, but let&amp;#39;s assume that it involves\nsome constant alpha, so it</text><text start=\"316.84\" dur=\"2.02\">goes alpha^n .</text><text start=\"318.86\" dur=\"2.22\">So let&amp;#39;s see if we can figure\nout what alpha is.</text><text start=\"321.08\" dur=\"6.61\">So this equation here, if we assume that\nthe form of t(n) of n is alpha(n)</text><text start=\"327.69\" dur=\"9.17\">. that suggests that alpha^n =\nalpha^(n-1) + alpha^(n-2) We&amp;#39;d like to</text><text start=\"336.86\" dur=\"7.69\">solve this for alpha, so let&amp;#39;s divide\nboth sides by alpha^(n-2) so I&amp;#39;m just</text><text start=\"344.55\" dur=\"4.65\">dividing both sides by the same\nconstant, which is fine.</text><text start=\"349.2\" dur=\"5.16\">OK, so now I&amp;#39;m going to\nsimplify this into--</text><text start=\"354.36\" dur=\"6.48\">that&amp;#39;s alpha^2 , and alpha^(n-1) over\nalpha^(n-2) is alpha, and then that</text><text start=\"360.84\" dur=\"1.91\">reduces to 1.</text><text start=\"362.75\" dur=\"3.65\">And I can go ahead and solve that, so\nI&amp;#39;m going to have to solve this for</text><text start=\"366.4\" dur=\"5.02\">alpha, and when I do so using the\nquadratic formula, I discover that</text><text start=\"371.42\" dur=\"7.37\">alpha = 1 + sqrt(5/2) , and that&amp;#39;s\na very magic number.</text><text start=\"378.79\" dur=\"3.78\">It occurs in many interesting places--\nparticularly in nature, it&amp;#39;s called</text><text start=\"382.57\" dur=\"0.965\">the Golden Ratio.</text><text start=\"383.535\" dur=\"4.455\">A good thing to remember as sort of\npart of your education is what the</text><text start=\"387.99\" dur=\"4.56\">golden ratio is-- it&amp;#39;s 1 plus\nthe square root of 5/2.</text><text start=\"392.55\" dur=\"6.57\">And so what that suggests is that the\nnumber of calls that we have to make</text><text start=\"399.12\" dur=\"6.85\">in order to compute Fibonacci(n) is\norder of this Golden Ratio, which is</text><text start=\"405.97\" dur=\"4.32\">about 1.6^n .</text><text start=\"410.29\" dur=\"5.6\">In the code accompanying this lecture,\nwe provided a definition of Fibonacci,</text><text start=\"415.89\" dur=\"3.37\">which we&amp;#39;ll use to do some\nperformance evaluations.</text><text start=\"419.26\" dur=\"3.95\">One little detail we have to take care\nof before we start, though, is that</text><text start=\"423.21\" dur=\"4.66\">Python really thinks that functions that\nkeep calling themselves too many</text><text start=\"427.87\" dur=\"2.09\">times-- too many levels of recursion--</text><text start=\"429.96\" dur=\"1.66\">are probably in error.</text><text start=\"431.62\" dur=\"2.98\">In order for our experiments to succeed,\nwe&amp;#39;re going to have to</text><text start=\"434.6\" dur=\"6.35\">convince Python to let us do a large\nnumber of recursive calls, and we can</text><text start=\"440.95\" dur=\"4.72\">specify that using the set recursion\nlimit function that is</text><text start=\"445.67\" dur=\"1.47\">inside the sys module.</text><text start=\"447.14\" dur=\"4.01\">So we set it very high so that we can\nrun our experiments without complaints</text><text start=\"451.15\" dur=\"2.02\">from the Python system.</text><text start=\"453.17\" dur=\"1.66\">OK, so let&amp;#39;s go give this a try.</text><text start=\"454.83\" dur=\"4.55\">We&amp;#39;re going to save this out,\nand then do some functions.</text><text start=\"459.38\" dur=\"3.85\">So for instance, we can ask\nfor what fib(10) is--</text><text start=\"463.23\" dur=\"0.73\">89.</text><text start=\"463.96\" dur=\"3.08\">And we can ask maybe what fib(20) is .</text><text start=\"467.04\" dur=\"1.47\">OK, that&amp;#39;s a bigger number.</text><text start=\"468.51\" dur=\"4.39\">You can see that the Fibonacci sequence\nactually gets large quickly.</text><text start=\"472.9\" dur=\"3.71\">How about fib(30) ?</text><text start=\"476.61\" dur=\"1.92\">Did you see there was a little\nbit more of a pause there.</text><text start=\"478.53\" dur=\"3.52\">Remember that the number of function\ncalls is growing exponentially with</text><text start=\"482.05\" dur=\"3.84\">the size of the argument, so we had to\nmake many, many more function calls in</text><text start=\"485.89\" dur=\"4.13\">order to compute fib(30) with the\ndefinition of fib that we have.</text><text start=\"490.02\" dur=\"3.99\">How about fib(35) ?</text><text start=\"494.01\" dur=\"4.22\">Well, it&amp;#39;s going to be somewhat larger,\nand you can see that I was</text><text start=\"498.23\" dur=\"4.94\">taking a considerable length of time\nto compute, and as we&amp;#39;re going, the</text><text start=\"503.17\" dur=\"3.27\">run-time is sort of growing\nexponentially.</text><text start=\"506.44\" dur=\"3.2\">How about fib(40) ?</text><text start=\"509.64\" dur=\"3.69\">Well, it&amp;#39;s running away, and in\nfact, it will run away for</text><text start=\"513.33\" dur=\"0.93\">quite a long time.</text><text start=\"514.26\" dur=\"3.47\">We&amp;#39;d have to sit on our hands, go out\nfor a cup of coffee, maybe even lunch,</text><text start=\"517.73\" dur=\"2.5\">and come back to get the answer here.</text><text start=\"520.23\" dur=\"4.5\">If I interrupt this execution, you can\nsee that we were many, many levels</text><text start=\"524.73\" dur=\"3.42\">deep in the recursive calls\nto the Fibonacci.</text><text start=\"528.15\" dur=\"1.612\"></text></transcript>\n", "Y0lczs-_w-I": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.25\"></text><text start=\"0.25\" dur=\"2.94\">Eric Grimson: In this third lecture we\nare going to start building on our</text><text start=\"3.19\" dur=\"2.55\">ability to write simple programs.</text><text start=\"5.74\" dur=\"3.75\">In particular, we&amp;#39;re going to introduce\nthe concept of iteration, or</text><text start=\"9.49\" dur=\"4.91\">how to repeat a method multiple times\nin order to reuse the computation to</text><text start=\"14.4\" dur=\"3.7\">execute something an arbitrary\nnumber of times.</text><text start=\"18.1\" dur=\"3.72\">Once we have iteration, we can start\ndoing some interesting classes of</text><text start=\"21.82\" dur=\"1.14\">algorithms.</text><text start=\"22.96\" dur=\"5.19\">Starting with guess and check methods,\nthe guess and answer, check it, and</text><text start=\"28.15\" dur=\"3.57\">then use the results to\nimprove the guess.</text><text start=\"31.72\" dur=\"4.25\">This will lead naturally to the idea of\nloop constructs, or mechanisms in</text><text start=\"35.97\" dur=\"4\">our language that let us generalize the\nidea of repeating a computation</text><text start=\"39.97\" dur=\"3.42\">until a particular condition\nis reached.</text><text start=\"43.39\" dur=\"3.59\">This will let us generalize our guess\nand check methods to a broader group</text><text start=\"46.98\" dur=\"4.35\">of algorithms called successive\napproximation, and especially to a</text><text start=\"51.33\" dur=\"4.59\">very common and very powerful method\ncalled bisection search.</text><text start=\"55.92\" dur=\"3.51\">At the end of this lecture you will be\nable to write simple algorithms that</text><text start=\"59.43\" dur=\"4.6\">solve numerical problems by improving\napproximate estimates of the answer to</text><text start=\"64.03\" dur=\"1.97\">get successively better guesses.</text><text start=\"66\" dur=\"1.25\"></text></transcript>\n", "GometKBrL7E": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.19\"></text><text start=\"1.19\" dur=\"2.66\">CHRIS TERMAN: By now, I hope you&amp;#39;re\ngetting the idea that we can tackle</text><text start=\"3.85\" dur=\"4.66\">the exponential cost of exhaustive\nsearch by structuring the problem so</text><text start=\"8.51\" dur=\"2.96\">as to generate recurring subproblems.</text><text start=\"11.47\" dur=\"5.21\">Then we can use memoization to look up\nthe answer instead of recomputing it.</text><text start=\"16.68\" dur=\"3.7\">Our next example comes from the field of\ngenomics research, where one of the</text><text start=\"20.38\" dur=\"4.02\">interesting computational problems is\nto figure out the alignment of two</text><text start=\"24.4\" dur=\"3.23\">genetic sequences.</text><text start=\"27.63\" dur=\"3.56\">In this example, we&amp;#39;re trying to find\nthe minimum cost alignment between two</text><text start=\"31.19\" dur=\"4.49\">sequences, so here are two example\nfour element sequences.</text><text start=\"35.68\" dur=\"4.36\">If we consider an alignment where we\nbasically start by lining up their</text><text start=\"40.04\" dur=\"5.87\">first characters, and going from\nthere, we can see that, in this</text><text start=\"45.91\" dur=\"3.6\">particular case, there\nare three mismatches.</text><text start=\"49.51\" dur=\"3.76\">In this column, this column, and this\ncolumn the individual symbols don&amp;#39;t</text><text start=\"53.27\" dur=\"5.21\">match, and so I would say the cost of\nthis alignment is three times the cost</text><text start=\"58.48\" dur=\"1.04\">of a mismatch.</text><text start=\"59.52\" dur=\"4.549\">So that will be a parameter that we\ncan set, a cost of a mismatch.</text><text start=\"64.069\" dur=\"2.151\">Let&amp;#39;s consider a different\nsort of alignment.</text><text start=\"66.22\" dur=\"5.1\">Suppose we start off by aligning the two\nfirst characters but assume that</text><text start=\"71.32\" dur=\"4.02\">the second character, in the first\nsequence, lines up with a gap in the</text><text start=\"75.34\" dur=\"6.42\">second sequence, and then we can\ncontinue the matching process like so.</text><text start=\"81.76\" dur=\"3.32\">And then there&amp;#39;s a final character in\nthe second sequence, which we would</text><text start=\"85.08\" dur=\"2.9\">assume would line up with a\ngap in the first sequence.</text><text start=\"87.98\" dur=\"3.4\">So here what we&amp;#39;re considering is what\nhappens if we start introducing gaps</text><text start=\"91.38\" dur=\"4.13\">into the process where some\ncharacters disappeared.</text><text start=\"95.51\" dur=\"3.99\">This particular alignment, where we&amp;#39;ve\nmade some assumption of the gaps in</text><text start=\"99.5\" dur=\"4.67\">each of the two sequences, would\nhave a total cost of two times</text><text start=\"104.17\" dur=\"1.91\">the cost of a gap.</text><text start=\"106.08\" dur=\"5.16\">What we&amp;#39;d like to do is to consider all\npossible combinations of matching</text><text start=\"111.24\" dur=\"4.42\">the symbol at any particular column or\nintroducing a gap in one sequence or</text><text start=\"115.66\" dur=\"4.23\">the other, and once we&amp;#39;ve run through\nall possible combinations of</text><text start=\"119.89\" dur=\"3.34\">mismatches and gaps, we would\nlike to choose the alignment</text><text start=\"123.23\" dur=\"3.03\">with the minimum cost.</text><text start=\"126.26\" dur=\"4.46\">Let&amp;#39;s see how we can break the alignment\nprocess into subproblems.</text><text start=\"130.72\" dur=\"2.53\">Originally, we&amp;#39;re given two sequences.</text><text start=\"133.25\" dur=\"4.39\">Let&amp;#39;s say this one starts with A and\nsome number of symbols afterwards, and</text><text start=\"137.64\" dur=\"4.44\">sequence two starts with a B and some\nnumber of symbols afterwards.</text><text start=\"142.08\" dur=\"3.38\">There&amp;#39;s actually three different\nalternatives we want to be</text><text start=\"145.46\" dur=\"1.6\">able to test out.</text><text start=\"147.06\" dur=\"4.84\">In the first alternative, we assume that\nthe two sequences match at their</text><text start=\"151.9\" dur=\"5.37\">starting symbol, and so the subproblem\nthat we need to solve is basically to</text><text start=\"157.27\" dur=\"1.85\">align the rest of the sequences.</text><text start=\"159.12\" dur=\"3.16\">We want the optimal alignment for\nthe rest of the sequences.</text><text start=\"162.28\" dur=\"4.79\">So all but the first character in the\nfirst sequence and all but the first</text><text start=\"167.07\" dur=\"2.2\">character in the second sequence.</text><text start=\"169.27\" dur=\"5.08\">So we want to align those two, and then\nwe&amp;#39;ll simply account for the cost</text><text start=\"174.35\" dur=\"1.37\">of the alignment of the first symbol.</text><text start=\"175.72\" dur=\"5.8\">So the cost is, well, if the first\ncharacter in S1 isn&amp;#39;t equal to the</text><text start=\"181.52\" dur=\"6.62\">first character in S2, then we have to\nincrement the cost of the subproblem</text><text start=\"188.14\" dur=\"4.04\">here, increment the cost by\nthe cost of a mismatch.</text><text start=\"192.18\" dur=\"3.47\">However, if they were the same, if it\nturned out that was A and that was A,</text><text start=\"195.65\" dur=\"5.53\">then we&amp;#39;d use the optimal alignment for\nthe rest of the sequence and there</text><text start=\"201.18\" dur=\"2.73\">would be no additional cost.</text><text start=\"203.91\" dur=\"5.12\">The second alternative is that the first\ncharacter in A actually of the</text><text start=\"209.03\" dur=\"3.26\">first sequence, actually aligns with\na gap in the second sequence.</text><text start=\"212.29\" dur=\"2.59\">So this is sort of the problem\nwe&amp;#39;re looking at here.</text><text start=\"214.88\" dur=\"3.91\">And so that means that the subproblem\nnow, this is after we consider the</text><text start=\"218.79\" dur=\"4.49\">first character was the subproblem,\nthe subproblem is that we need to</text><text start=\"223.28\" dur=\"3.59\">align the rest of this characters\nin the first sequence.</text><text start=\"226.87\" dur=\"2.86\">So that&amp;#39;s when we take off the first\ncharacter because it&amp;#39;s aligning with a</text><text start=\"229.73\" dur=\"3.67\">gap, with all the characters\nof the second sequence.</text><text start=\"233.4\" dur=\"4.12\">And then when we get back the optimal\nalignment there, the first string will</text><text start=\"237.52\" dur=\"3.33\">have an A on it, and the second\nstring, we&amp;#39;ll put a gap--</text><text start=\"240.85\" dur=\"2.65\">a dash to indicate a gap at the front.</text><text start=\"243.5\" dur=\"6.49\">And the additional cost is going to be\nnow the cost of a gap, so gcost.</text><text start=\"249.99\" dur=\"3.53\">And finally, as a third alternative,\nwe have the second</text><text start=\"253.52\" dur=\"2.15\">situation only reversed.</text><text start=\"255.67\" dur=\"3.9\">In this case, we assume that the first\ncharacter of the second sequence</text><text start=\"259.57\" dur=\"3.27\">aligns with a gap in\nthe first sequence.</text><text start=\"262.84\" dur=\"5.3\">So that&amp;#39;s the situation we have, and\nnow the subproblem is to align the</text><text start=\"268.14\" dur=\"4.08\">first sequence with the remaining\ncharacters in the second</text><text start=\"272.22\" dur=\"3.04\">sequence like so.</text><text start=\"275.26\" dur=\"4.83\">And the cost, once we get back that\noptimal alignment, we can put these</text><text start=\"280.09\" dur=\"3.46\">two characters at the front, and we&amp;#39;ll\nhave the optimal alignment including</text><text start=\"283.55\" dur=\"4.68\">the first characters and the increment\nand the cost will be again, the cost</text><text start=\"288.23\" dur=\"2.47\">of another gap.</text><text start=\"290.7\" dur=\"3.6\">So if we pursue this recursively, where\nwe slowly consume the first</text><text start=\"294.3\" dur=\"4.42\">character of the sequence and then\nconsider the three alternatives, we&amp;#39;ll</text><text start=\"298.72\" dur=\"4.51\">eventually exhaust all possible\ncombination of matches and gaps in the</text><text start=\"303.23\" dur=\"1.65\">two sequences.</text><text start=\"304.88\" dur=\"2.57\">Here&amp;#39;s the implementation of\nthe recursive alignment</text><text start=\"307.45\" dur=\"2.02\">procedure we just discussed.</text><text start=\"309.47\" dur=\"3.1\">We start by dealing with termination\nof the recursion.</text><text start=\"312.57\" dur=\"4.93\">So, for example, if the first sequences\nrun out, we assume that it&amp;#39;s</text><text start=\"317.5\" dur=\"3.65\">padded with gaps that match\nany remaining characters</text><text start=\"321.15\" dur=\"1.52\">in the second sequence.</text><text start=\"322.67\" dur=\"3.09\">And similarly, for the second\nsequence, if it runs out.</text><text start=\"325.76\" dur=\"3.9\">Then we go off and consider the\nsame three alternatives</text><text start=\"329.66\" dur=\"1.34\">we discussed earlier.</text><text start=\"331\" dur=\"4.77\">The first symbols of the two sequences\naligning or the first symbol of one</text><text start=\"335.77\" dur=\"2.18\">sequence aligning with\na gap in the other.</text><text start=\"337.95\" dur=\"6.38\">In each case, we go off and do a\nrecursive call to compute the best</text><text start=\"344.33\" dur=\"5.3\">alignment of the remaining symbols, and\nthen, add any cost penalties that</text><text start=\"349.63\" dur=\"4.12\">are incurred by the situation\nthat we&amp;#39;re dealing with.</text><text start=\"353.75\" dur=\"5.37\">We&amp;#39;ve also included code that constructs\nthe align sequences so we</text><text start=\"359.12\" dur=\"4.27\">can see what the optimal alignment\nhas turned out to be.</text><text start=\"363.39\" dur=\"4.37\">Finally, at the end, of course, we\nchoose to return the alternative that</text><text start=\"367.76\" dur=\"3.38\">has the cheapest cost among the three.</text><text start=\"371.14\" dur=\"3.04\">We have a couple test cases\ndown here at the bottom.</text><text start=\"374.18\" dur=\"4.55\">One is a very simple alignment where\nwe&amp;#39;re aligning the sequence CAT with</text><text start=\"378.73\" dur=\"5.66\">the sequence AT, and then a longer\nchallenge, which-- and we&amp;#39;ll see how</text><text start=\"384.39\" dur=\"0.99\">that turns out.</text><text start=\"385.38\" dur=\"2.61\">And, as usual, we have\nour little test case.</text><text start=\"387.99\" dur=\"3.24\">So let&amp;#39;s start that up\nand see how it works.</text><text start=\"391.23\" dur=\"2.5\">So first, let&amp;#39;s test the alignment.</text><text start=\"393.73\" dur=\"1.91\">of the simple sequence.</text><text start=\"395.64\" dur=\"5.58\">So s1a and s1b, and as expected, we\ndiscover that the minimum cost</text><text start=\"401.22\" dur=\"5\">alignment involves a gap at the\nbeginning of the second sequence.</text><text start=\"406.22\" dur=\"3.52\">What about the longer\nof the two problems?</text><text start=\"409.74\" dur=\"3.77\">Now, as you might expect given that\nthis is a lecture on dynamic</text><text start=\"413.51\" dur=\"4.95\">programming, we&amp;#39;ll discover that, in\nthis particular case, we don&amp;#39;t get an</text><text start=\"418.46\" dur=\"2.98\">answer right away, and, in fact, we&amp;#39;d\nhave to wait for a very long time</text><text start=\"421.44\" dur=\"4.66\">because exploring all the possible\nalternatives of where to put the gaps</text><text start=\"426.1\" dur=\"3.6\">is actually quite time consuming as the\nsequence gets longer and longer</text><text start=\"429.7\" dur=\"0.48\">and longer.</text><text start=\"430.18\" dur=\"2.72\">The cost grows exponentially.</text><text start=\"432.9\" dur=\"4.09\">So I&amp;#39;m going to terminate this, and now,\nwe&amp;#39;re going to see if there&amp;#39;s any</text><text start=\"436.99\" dur=\"1.47\">overlapping subproblems.</text><text start=\"438.46\" dur=\"5.41\">If there are overlapping subproblems,\nthen I would assume that if we go off</text><text start=\"443.87\" dur=\"9.01\">and memoize the alignment procedure, now\nwe would hope that trying to align</text><text start=\"452.88\" dur=\"7.02\">the longer sequences, so s2a with s2b,\nwill actually result in an answer</text><text start=\"459.9\" dur=\"4.57\">quickly if there are overlapping\nsubproblems that the memoization is</text><text start=\"464.47\" dur=\"1.71\">taking care or for us.</text><text start=\"466.18\" dur=\"2.4\">And, in fact, you see we get the\nanswer almost instantaneously.</text><text start=\"468.58\" dur=\"4.7\">So that means there was a large number\nof overlapping subproblems, and you</text><text start=\"473.28\" dur=\"5.14\">can see that it suggests that the\noptimal alignment comes with the</text><text start=\"478.42\" dur=\"4.61\">insertion of two gaps leaving\njust one mismatch.</text><text start=\"483.03\" dur=\"5.47\">So this C and that A, so one mismatch\nand two gaps was the optimal guess for</text><text start=\"488.5\" dur=\"3.66\">the alignment of those two sequences.</text><text start=\"492.16\" dur=\"1.2\">Well, there you have it.</text><text start=\"493.36\" dur=\"3.41\">We&amp;#39;ve looked at three examples where\ndynamic programming could reduce the</text><text start=\"496.77\" dur=\"5.37\">exponential costs of our exhaustive\nsearch so that we can get the optimal</text><text start=\"502.14\" dur=\"2.09\">solution in reasonable time.</text><text start=\"504.23\" dur=\"2.44\">We needed two properties\nto be able to do this.</text><text start=\"506.67\" dur=\"5.29\">One was optimal substructure, where we\nhad to be able to reduce the original</text><text start=\"511.96\" dur=\"5.64\">problem into a sequence of smaller but\nidentical subproblems, and then we</text><text start=\"517.6\" dur=\"3.829\">could combine the answers from the\nsubproblems into the answer for the</text><text start=\"521.429\" dur=\"1.801\">overall problem.</text><text start=\"523.23\" dur=\"4.05\">And secondly, we wanted to have\noverlapping subproblems so we could</text><text start=\"527.28\" dur=\"5.96\">use memoization to look up the answers\ninstead of having to recompute them.</text><text start=\"533.24\" dur=\"4.17\">Dynamic programming is not something\nwe can apply to every optimization</text><text start=\"537.41\" dur=\"2.94\">problem, but it&amp;#39;s always worth giving\nit a try to see if you can cast a</text><text start=\"540.35\" dur=\"3.26\">problem in a way that exhibits\nthese two properties.</text><text start=\"543.61\" dur=\"3.66\">If so, you&amp;#39;re in luck and you should\nbe able to get a computationally</text><text start=\"547.27\" dur=\"1.25\">efficient answer.</text><text start=\"548.52\" dur=\"1.118\"></text></transcript>\n", "9i-VL98AuEY": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.78\"></text><text start=\"0.78\" dur=\"3.3\">PROFESSOR: In the last lecture we\nstarted talking about graphs, and we</text><text start=\"4.08\" dur=\"1.63\">saw the basic idea of a graph.</text><text start=\"5.71\" dur=\"4.04\">We could represent objects as nodes,\nand connections and interactions</text><text start=\"9.75\" dur=\"2.26\">between those objects as edges.</text><text start=\"12.01\" dur=\"2.7\">And then what we often wanted to\ndo was to find a solution--</text><text start=\"14.71\" dur=\"0.92\">an optimization--</text><text start=\"15.63\" dur=\"1.56\">over that graph.</text><text start=\"17.19\" dur=\"3.12\">And that was straightforward to\nunderstand when we were thinking about</text><text start=\"20.31\" dur=\"2.52\">graphs that represented\nphysical networks--</text><text start=\"22.83\" dur=\"3.79\">a transportation network, an electrical\nnetwork, some other network</text><text start=\"26.62\" dur=\"1.39\">that moves things around.</text><text start=\"28.01\" dur=\"4.109\">Where in case of the transportation\nnetwork, the nodes could be cities and</text><text start=\"32.119\" dur=\"3.231\">the edges would be flights\nbetween those cities.</text><text start=\"35.35\" dur=\"4.12\">We saw as an example, we could find\nsolutions like the cheapest flight or</text><text start=\"39.47\" dur=\"2.95\">set of flights from one place to\nanother, or the one that took the</text><text start=\"42.42\" dur=\"3.87\">least number of legs or segments\nin the flight.</text><text start=\"46.29\" dur=\"3.29\">But we can also use graphs to explore\nother kinds of systems.</text><text start=\"49.58\" dur=\"4.3\">In particular, systems where we&amp;#39;re\nreally interested in the changes in</text><text start=\"53.88\" dur=\"2.73\">the state of a physical system.</text><text start=\"56.61\" dur=\"0.935\">What does that mean?</text><text start=\"57.545\" dur=\"3.745\">I might have a physical system like a\nplant-- a power plant, some other kind</text><text start=\"61.29\" dur=\"1.88\">of plant, a manufacturing plant.</text><text start=\"63.17\" dur=\"3.78\">And I want to have the states, or the\nnodes of the graph rather, represent</text><text start=\"66.95\" dur=\"1.74\">the states of the system--</text><text start=\"68.69\" dur=\"1.77\">current configuration.</text><text start=\"70.46\" dur=\"3.08\">And the edges in this case,\nwould represent actions--</text><text start=\"73.54\" dur=\"3.81\">things that cause a change\nin the state--</text><text start=\"77.35\" dur=\"4.95\">open up a valve, close a valve, change\nthe heat, something like that.</text><text start=\"82.3\" dur=\"4.51\">And here, my graph search wants to\nfind a sequence of actions that</text><text start=\"86.81\" dur=\"2.97\">converts the system to\na desired state.</text><text start=\"89.78\" dur=\"2.68\">Now, let&amp;#39;s look at an example.</text><text start=\"92.46\" dur=\"3.94\">And here&amp;#39;s what seems like a simple\nexample, but actually a fun one.</text><text start=\"96.4\" dur=\"2.27\">This is a little puzzle you may\nhave had when you were a child</text><text start=\"98.67\" dur=\"2.01\">called the 8 puzzle.</text><text start=\"100.68\" dur=\"4.63\">It has a set of 8 numbered tiles\nin a grid that has 9 spots.</text><text start=\"105.31\" dur=\"2.52\">So there&amp;#39;s one blank spot right here.</text><text start=\"107.83\" dur=\"3.52\">And the idea is, I want to go from some\ninitial state, such as the one</text><text start=\"111.35\" dur=\"1.33\">shown here.</text><text start=\"112.68\" dur=\"3.98\">By sliding the tiles one at a time into\nthe blank spot, I want to try and</text><text start=\"116.66\" dur=\"4.42\">figure out how do I convert the puzzle\ninto some desired goal state--</text><text start=\"121.08\" dur=\"2.84\">such as getting them all lined\nup in the proper order.</text><text start=\"123.92\" dur=\"3.53\">So here process is slide any tile.</text><text start=\"127.45\" dur=\"2.89\">And I want to find the sequence of\nslides that actually gets me to the</text><text start=\"130.34\" dur=\"2.31\">solution I want-- the goal state.</text><text start=\"132.65\" dur=\"1.85\">Here&amp;#39;s an example.</text><text start=\"134.5\" dur=\"3.28\">There&amp;#39;s my initial starting solution\nand here&amp;#39;s the things I can do.</text><text start=\"137.78\" dur=\"4.83\">I can start by doing a slide that moves\n6 down into that spot, getting</text><text start=\"142.61\" dur=\"1.03\">it down where I want it to be.</text><text start=\"143.64\" dur=\"2.58\">And then I could do another\nslide that moves 3 over.</text><text start=\"146.22\" dur=\"3.69\">And that I&amp;#39;m going to do because\nI want to actually shift 4 up.</text><text start=\"149.91\" dur=\"2.59\">Now I&amp;#39;m in pretty good shape because you\ncan see that this is going to let</text><text start=\"152.5\" dur=\"2.445\">me move 7 over and 8 down.</text><text start=\"154.945\" dur=\"2.555\">Now the bottom three tiles are\nnow in the right place.</text><text start=\"157.5\" dur=\"4.75\">And oh, I can also see now that if I\nbring 5 down, all I have left to do is</text><text start=\"162.25\" dur=\"2.64\">shift 2 over and then 1 over.</text><text start=\"164.89\" dur=\"1.51\">And I&amp;#39;m done.</text><text start=\"166.4\" dur=\"1.79\">Nice and easy, right.</text><text start=\"168.19\" dur=\"3.01\">And you can see here, I&amp;#39;d like to\nfind that sequence of steps.</text><text start=\"171.2\" dur=\"2.52\">You can also see it may not\nbe trivial to find.</text><text start=\"173.72\" dur=\"3.47\">So how could I turn this\ninto a graph problem?</text><text start=\"177.19\" dur=\"3.88\">Well, a simple way would be to just\nthink about representing it the way we</text><text start=\"181.07\" dur=\"1.91\">did with previous problems.</text><text start=\"182.98\" dur=\"2.66\">I could take each state of the\npuzzle-- each particular</text><text start=\"185.64\" dur=\"1.44\">arrangement of tiles--</text><text start=\"187.08\" dur=\"2.31\">and I could represent that\nas a node in a graph.</text><text start=\"189.39\" dur=\"3.89\">So every specific layout of tiles would\nbe a different node in my graph.</text><text start=\"193.28\" dur=\"4.71\">Each edge of the graph would specify\nwhich tile I would slide to get to a</text><text start=\"197.99\" dur=\"1.82\">new state of the puzzle.</text><text start=\"199.81\" dur=\"3.85\">So from one node there might be 2 or 3\npossible edges that tell me different</text><text start=\"203.66\" dur=\"3.1\">ways I could slide a tile to get\nto a new state of the puzzle.</text><text start=\"206.76\" dur=\"2.73\">And I could just then\nexplore that space.</text><text start=\"209.49\" dur=\"3.1\">Here&amp;#39;s the problem: how\nbig is the space?</text><text start=\"212.59\" dur=\"3.12\">Well, I&amp;#39;ve got 9 spots in my grid.</text><text start=\"215.71\" dur=\"6.03\">So in fact, there are 9 factorial, or\n9 * 8 * 7 * 6 all the way down to 1.</text><text start=\"221.74\" dur=\"3.41\">Different ways to arrange numbered\ntiles in that grid.</text><text start=\"225.15\" dur=\"4.86\">And that says I&amp;#39;ve got almost\n365,000 nodes in my graph.</text><text start=\"230.01\" dur=\"0.77\">Eh.</text><text start=\"230.78\" dur=\"1.42\">That&amp;#39;s big.</text><text start=\"232.2\" dur=\"4.36\">Worse, each node has either 2, 3, or 4\nedges because there&amp;#39;s going to be 2,</text><text start=\"236.56\" dur=\"3.15\">3, or 4 tiles that I could\nslide into the open spot.</text><text start=\"239.71\" dur=\"5.29\">And that says basically, that the graph\nhas almost a million edges and</text><text start=\"245\" dur=\"3.01\">360 plus thousand nodes.</text><text start=\"248.01\" dur=\"1.55\">I don&amp;#39;t want to build\na graph that big.</text><text start=\"249.56\" dur=\"1.07\">That&amp;#39;d take forever.</text><text start=\"250.63\" dur=\"1.4\">It&amp;#39;s going to be huge.</text><text start=\"252.03\" dur=\"3.27\">Is there another way in which I could\nactually turn this into a graph</text><text start=\"255.3\" dur=\"1.96\">problem and solve it?</text><text start=\"257.26\" dur=\"1.25\">And that&amp;#39;s what we&amp;#39;re\ngoing to talk about.</text><text start=\"258.51\" dur=\"1.088\"></text></transcript>\n", "yBRf7ajFSTU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.28\"></text><text start=\"1.28\" dur=\"4.45\">PROFESSOR: So let&amp;#39;s use polyfit to find\nthe line that best fits our data.</text><text start=\"5.73\" dur=\"4.66\">So what we&amp;#39;ve done here is created a new\nPython procedure called fitData.</text><text start=\"10.39\" dur=\"5.35\">And it&amp;#39;s just like plotData except that\nwe&amp;#39;ve added a call to polyfit in</text><text start=\"15.74\" dur=\"4.43\">which we give it the forces and the\nobserved extensions and ask it to find</text><text start=\"20.17\" dur=\"6.29\">the equations of the line so that the\npredictions best fit the observations.</text><text start=\"26.46\" dur=\"5.29\">Then we go off and use those parameters\nto make a bunch of</text><text start=\"31.75\" dur=\"4.81\">estimates for what the y value should\nbe, the extension should be, based on</text><text start=\"36.56\" dur=\"1.48\">the forces that we&amp;#39;re applying.</text><text start=\"38.04\" dur=\"4.25\">And here, we&amp;#39;re using the predictive\npower of our mathematical model, and</text><text start=\"42.29\" dur=\"2.44\">we&amp;#39;re going to plot that\nline on the graph.</text><text start=\"44.73\" dur=\"3.68\">And finally, since the slope\nof the line is 1 over k--</text><text start=\"48.41\" dur=\"4.55\">this is the slope, so that means that\nk is equal to 1 over the slope.</text><text start=\"52.96\" dur=\"2.79\">And we&amp;#39;ll also put that on our plot.</text><text start=\"55.75\" dur=\"4.83\">So let&amp;#39;s go off and run this procedure\non the data values.</text><text start=\"60.58\" dur=\"1.37\">So I&amp;#39;ve already saved this out.</text><text start=\"61.95\" dur=\"3.94\">So we&amp;#39;ll start the execution,\nand hopefully up we&amp;#39;ll plot.</text><text start=\"65.89\" dur=\"1.66\">Here it is.</text><text start=\"67.55\" dur=\"1.43\">And here&amp;#39;s the line.</text><text start=\"68.98\" dur=\"1.88\">We can sort of see it here.</text><text start=\"70.86\" dur=\"4.21\">And you can look at that and say, well,\nOK that&amp;#39;s certainly the best fit</text><text start=\"75.07\" dur=\"1.33\">line, I suppose.</text><text start=\"76.4\" dur=\"7.17\">It does the best job it can of sort of\nminimizing the sizes of the squares of</text><text start=\"83.57\" dur=\"1.15\">the errors here.</text><text start=\"84.72\" dur=\"1.76\">But it doesn&amp;#39;t look like the best fit.</text><text start=\"86.48\" dur=\"2.43\">It seems something here about\nit we don&amp;#39;t like.</text><text start=\"88.91\" dur=\"2.26\">Maybe Hooke&amp;#39;s law is wrong.</text><text start=\"91.17\" dur=\"3.82\">Maybe there&amp;#39;s a different curve here\nthat would actually fit the observed</text><text start=\"94.99\" dur=\"1.07\">points better.</text><text start=\"96.06\" dur=\"4.01\">So just for grins, let&amp;#39;s try\nto invent Terman&amp;#39;s law.</text><text start=\"100.07\" dur=\"5.35\">So what Terman&amp;#39;s law is, in fact, that\nthere&amp;#39;s a cubic relationship between</text><text start=\"105.42\" dur=\"3.1\">the force that&amp;#39;s supplied and extension,\nrather than a linear</text><text start=\"108.52\" dur=\"0.99\">relationship.</text><text start=\"109.51\" dur=\"4.2\">So let me start off by commenting\nout the call to fitData.</text><text start=\"113.71\" dur=\"6.56\">And here I have a new procedure,\nfitData1 which uses polyfit to fit a</text><text start=\"120.27\" dur=\"3.92\">cubic equation to the observed data.</text><text start=\"124.19\" dur=\"1.25\">And let&amp;#39;s plot those results.</text><text start=\"125.44\" dur=\"2.83\">So I&amp;#39;m going to make it\nso we run this guy.</text><text start=\"128.27\" dur=\"4.13\">And I&amp;#39;m going to save him out\nand then start execution.</text><text start=\"132.4\" dur=\"1.9\">And here&amp;#39;s the resulting plot.</text><text start=\"134.3\" dur=\"1.74\">And in fact, this actually\nlooks better.</text><text start=\"136.04\" dur=\"4.49\">Maybe Terman&amp;#39;s law has something\ngoing for it here.</text><text start=\"140.53\" dur=\"5.39\">The curve looks much closer to all the\npoints than the original linear fit,</text><text start=\"145.92\" dur=\"4.73\">so maybe Hooke got it wrong and modern\nsprings are much more sophisticated.</text><text start=\"150.65\" dur=\"3.56\">They obey this sort of cubic\nrelationship between the force that&amp;#39;s</text><text start=\"154.21\" dur=\"3.15\">applied and extension that&amp;#39;s observed.</text><text start=\"157.36\" dur=\"1.91\">Well how do we figure this out?</text><text start=\"159.27\" dur=\"3.36\">I mean, here we fitted some data, and\nwe&amp;#39;re sort of saying, gosh, it</text><text start=\"162.63\" dur=\"2.41\">certainly looks like that&amp;#39;s\na better fit.</text><text start=\"165.04\" dur=\"4.88\">Well, one of ways we can evaluate\nthe power of a model is</text><text start=\"169.92\" dur=\"1.58\">its predictive power.</text><text start=\"171.5\" dur=\"3.42\">So what I want to do, I&amp;#39;m going to start\nby-- let&amp;#39;s comment this guy back</text><text start=\"174.92\" dur=\"4.98\">out again, and look at that fitData2\nwhich is just like fitData1 except</text><text start=\"179.9\" dur=\"5.21\">what I&amp;#39;ve done is that when I&amp;#39;m going to\nuse the model for predictions, I&amp;#39;m</text><text start=\"185.11\" dur=\"3.56\">going to ask it to predict\nthe extensions created by</text><text start=\"188.67\" dur=\"1.58\">applying heavier weights.</text><text start=\"190.25\" dur=\"4.18\">We didn&amp;#39;t make these measurements, but\nwe sort of expect the spring to keep</text><text start=\"194.43\" dur=\"4.47\">stretching as we apply higher\nand higher weights to it.</text><text start=\"198.9\" dur=\"1.41\">So everything is just the same.</text><text start=\"200.31\" dur=\"5.05\">We are still doing a linear fit\nhere and a cubic fit here.</text><text start=\"205.36\" dur=\"3.66\">Let&amp;#39;s see what happens when we run\nthis and plot the results.</text><text start=\"209.02\" dur=\"5.23\">So we&amp;#39;re trying to use our model here\nto determine the predictive power of</text><text start=\"214.25\" dur=\"5\">Terman&amp;#39;s law which hypothesizes a\ncubic relationship between the</text><text start=\"219.25\" dur=\"1.84\">extension and the force applied.</text><text start=\"221.09\" dur=\"4.51\">So we&amp;#39;re going to save this\nout and then run it.</text><text start=\"225.6\" dur=\"2.26\">OK, here&amp;#39;s the results.</text><text start=\"227.86\" dur=\"1.55\">Oops.</text><text start=\"229.41\" dur=\"4.67\">We did a pretty good job of matching\nour curve to the observed data, but</text><text start=\"234.08\" dur=\"3.07\">when we went off and asked about some\npredictions-- so here&amp;#39;s what the</text><text start=\"237.15\" dur=\"3.61\">prediction extension is as we\nadd additional force to</text><text start=\"240.76\" dur=\"0.84\">the end of the spring.</text><text start=\"241.6\" dur=\"3.17\">And even though we&amp;#39;re pulling on the\nspring harder, all of a sudden the</text><text start=\"244.77\" dur=\"1.54\">extension is getting smaller\nand smaller.</text><text start=\"246.31\" dur=\"1.43\">The spring is no longer stretching.</text><text start=\"247.74\" dur=\"2.22\">It&amp;#39;s shrinking when we\npull harder on it.</text><text start=\"249.96\" dur=\"3.34\">Well, gosh, that doesn&amp;#39;t\nseem quite right.</text><text start=\"253.3\" dur=\"6.25\">So even though we&amp;#39;ve managed to find a\nway to fit the curve to the observed</text><text start=\"259.55\" dur=\"3.88\">data, it turns out the predictive\npower of Terman&amp;#39;s law is bunk.</text><text start=\"263.43\" dur=\"3.51\">It&amp;#39;s simply predicting behavior\nin a spring that</text><text start=\"266.94\" dur=\"1.44\">doesn&amp;#39;t seem very sensible.</text><text start=\"268.38\" dur=\"5.07\">And we would certainly expect\ndisplacement of the spring to continue</text><text start=\"273.45\" dur=\"2.03\">to get longer as we pulled on it.</text><text start=\"275.48\" dur=\"4.29\">So let&amp;#39;s give up on Terman&amp;#39;s law and\nactually think a little bit about what</text><text start=\"279.77\" dur=\"1.14\">we saw in the data.</text><text start=\"280.91\" dur=\"3.56\">So when we looked at the data,\nwhat we saw is that it</text><text start=\"284.47\" dur=\"2.06\">flattened out at the end.</text><text start=\"286.53\" dur=\"3.27\">And so what I was thinking of is--</text><text start=\"289.8\" dur=\"4.51\">well actually, let&amp;#39;s put that plot\nback up while we&amp;#39;re sitting here.</text><text start=\"294.31\" dur=\"3.48\">If we look at this sort of flattened\ndata here, we can see the curve</text><text start=\"297.79\" dur=\"1.58\">flattens out at a point.</text><text start=\"299.37\" dur=\"7.24\">So it looks like Hooke&amp;#39;s law may, in\nfact, with some observational errors</text><text start=\"306.61\" dur=\"3.73\">in our measurements that we made, it\nlooks like Hooke&amp;#39;s law might be OK.</text><text start=\"310.34\" dur=\"3.81\">It&amp;#39;s just that these last data points\nshow that the spring has stopped</text><text start=\"314.15\" dur=\"1.14\">stretching.</text><text start=\"315.29\" dur=\"3.63\">And we might hypothesize instead\nof Terman&amp;#39;s law with a cubic</text><text start=\"318.92\" dur=\"4.23\">relationship, we might just say, look,\nHooke&amp;#39;s law applies to the point at</text><text start=\"323.15\" dur=\"2.39\">the spring reaches its elastic limit.</text><text start=\"325.54\" dur=\"4.07\">in other words, when it stops behaving\nas a spring and now just behaves as</text><text start=\"329.61\" dur=\"3.92\">sort of like a rigid rope\nor a cable of some sort.</text><text start=\"333.53\" dur=\"2.47\">In other words, it doesn&amp;#39;t get any\nlonger just because you hang more</text><text start=\"336\" dur=\"0.96\">weight on it.</text><text start=\"336.96\" dur=\"4.79\">So maybe what we should do is try\ngetting rid of these last points and</text><text start=\"341.75\" dur=\"3.89\">seeing if Hooke&amp;#39;s law does a better\njob of doing the projection.</text><text start=\"345.64\" dur=\"4.4\">So we&amp;#39;re going to come back here and go\nahead and comment this guy out and</text><text start=\"350.04\" dur=\"5.65\">look at fitData3, which is just like\nfitData1 except that what we&amp;#39;ve done</text><text start=\"355.69\" dur=\"3.66\">is to eliminate the last six values,\nthe values that we feel that</text><text start=\"359.35\" dur=\"4.01\">correspond to the spring having\nreached its elastic limit.</text><text start=\"363.36\" dur=\"2.26\">So let&amp;#39;s go ahead and run this.</text><text start=\"365.62\" dur=\"6.28\">So let&amp;#39;s comment that back in again,\nsave that, and run it and see what the</text><text start=\"371.9\" dur=\"1.41\">plot produces.</text><text start=\"373.31\" dur=\"1.64\">And voila.</text><text start=\"374.95\" dur=\"4.72\">Without that flattening out of the\ncurve, we actually have a fairly good</text><text start=\"379.67\" dur=\"2.28\">fit to the data.</text><text start=\"381.95\" dur=\"6.96\">In other words, there&amp;#39;s still some\namount of measurement error, but now</text><text start=\"388.91\" dur=\"1.8\">the curve seems to fit better.</text><text start=\"390.71\" dur=\"4.27\">And in a couple minutes, we&amp;#39;ll talk\nabout what a measure of the goodness</text><text start=\"394.98\" dur=\"4.75\">of the fit, but we&amp;#39;re pretty happy or\ncertainly happier with this fit than</text><text start=\"399.73\" dur=\"3.53\">with either the cubic fit, which\nmispredicted, or the original fit,</text><text start=\"403.26\" dur=\"3.1\">which just didn&amp;#39;t seem to\nfit the points at all.</text><text start=\"406.36\" dur=\"3.97\">So this raised the question, are we just\nallowed to eliminate points we</text><text start=\"410.33\" dur=\"0.57\">don&amp;#39;t like?</text><text start=\"410.9\" dur=\"2.38\">I mean, suppose I eliminated\nall but two points?</text><text start=\"413.28\" dur=\"1.92\">I&amp;#39;m going to keep this\npoint and that point.</text><text start=\"415.2\" dur=\"2.52\">And then I would discover that I\ncan make a perfect prediction.</text><text start=\"417.72\" dur=\"2.43\">You can always put a line\nthrough two points.</text><text start=\"420.15\" dur=\"4.38\">So why was it I felt comfortable\neliminating those last six points and</text><text start=\"424.53\" dur=\"3.04\">I&amp;#39;m not running around eliminating some\nother points here that seemed</text><text start=\"427.57\" dur=\"5.86\">like embarrassments or making it harder\nfor me to show that Hooke&amp;#39;s law</text><text start=\"433.43\" dur=\"2.45\">is the right equation?</text><text start=\"435.88\" dur=\"2.44\">And the answer is, well, I had\na theoretical justification.</text><text start=\"438.32\" dur=\"4.43\">I hypothesized this notion that there\nwas an elastic limit to the spring.</text><text start=\"442.75\" dur=\"4.47\">And as soon as I saw that the length\nwasn&amp;#39;t growing as I added extra</text><text start=\"447.22\" dur=\"5.72\">weights, I said, OK, maybe what I\nshould do is to consider that a</text><text start=\"452.94\" dur=\"0.9\">different regime.</text><text start=\"453.84\" dur=\"1.93\">Hooke&amp;#39;s law wouldn&amp;#39;t apply there.</text><text start=\"455.77\" dur=\"3.07\">But I am expecting Hooke&amp;#39;s law to apply\nfor all of these measurements.</text><text start=\"458.84\" dur=\"3.99\">So I&amp;#39;m not allowed to willy nilly just\nget rid of points I don&amp;#39;t like.</text><text start=\"462.83\" dur=\"2.49\">I really do need a theoretical\njustification.</text><text start=\"465.32\" dur=\"3.87\">But with that justification in hand,\nI think we can make a fairly good</text><text start=\"469.19\" dur=\"4.62\">prediction that the spring constant of\nthe spring is somewhere around 15 1/2,</text><text start=\"473.81\" dur=\"2.94\">pretty close to 15 1/2.</text></transcript>\n", "OEoXaMPEzfM": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.27\"></text><text start=\"0.27\" dur=\"2.45\">LILA FISHER: Hi,\nwelcome to Edx.</text><text start=\"2.72\" dur=\"2.71\">I&amp;#39;m Lila Fisher, an Edx\nfellow helping to put</text><text start=\"5.43\" dur=\"1.73\">together these courses.</text><text start=\"7.16\" dur=\"3.67\">As you know, our courses\nare entirely online.</text><text start=\"10.83\" dur=\"2.05\">So before we start learning\nabout the subjects that</text><text start=\"12.88\" dur=\"3.01\">brought you here, let&amp;#39;s learn\nabout the tools that you will</text><text start=\"15.89\" dur=\"3.11\">use to navigate through\nthe course material.</text><text start=\"19\" dur=\"3.07\">Let&amp;#39;s start with what is on\nyour screen right now.</text><text start=\"22.07\" dur=\"3.1\">You are watching a video\nof me talking.</text><text start=\"25.17\" dur=\"2.72\">You have several tools\nassociated with these videos.</text><text start=\"27.89\" dur=\"2.7\">Some of them are standard video\nbuttons, like the play</text><text start=\"30.59\" dur=\"2.33\">Pause Button on the\nbottom left.</text><text start=\"32.92\" dur=\"3.44\">Like most video players, you can\nsee how far you are into</text><text start=\"36.36\" dur=\"3.27\">this particular video segment\nand how long the entire video</text><text start=\"39.63\" dur=\"1.54\">segment is.</text><text start=\"41.17\" dur=\"1.62\">Something that you might\nnot be used to</text><text start=\"42.79\" dur=\"1.8\">is the speed option.</text><text start=\"44.59\" dur=\"2.73\">While you are going through the\nvideos, you can speed up</text><text start=\"47.32\" dur=\"2.93\">or slow down the video player\nwith these buttons.</text><text start=\"50.25\" dur=\"1.63\">Go ahead and try that now.</text><text start=\"51.88\" dur=\"2.44\">Make me talk faster\nand slower.</text><text start=\"54.32\" dur=\"3.09\">If you ever get frustrated by\nthe pace of speech, you can</text><text start=\"57.41\" dur=\"1.75\">adjust it this way.</text><text start=\"59.16\" dur=\"3.16\">Another great feature is the\ntranscript on the side.</text><text start=\"62.32\" dur=\"2.779\">This will follow along with\neverything that I am saying as</text><text start=\"65.099\" dur=\"3.331\">I am saying it, so you can\nread along if you like.</text><text start=\"68.43\" dur=\"2.93\">You can also click on any of the\nwords, and you will notice</text><text start=\"71.36\" dur=\"2.28\">that the video jumps\nto that word.</text><text start=\"73.64\" dur=\"2.94\">The video slider at the bottom\nof the video will let you</text><text start=\"76.58\" dur=\"2.08\">navigate through the\nvideo quickly.</text><text start=\"78.66\" dur=\"2.82\">If you ever find the transcript\ndistracting, you</text><text start=\"81.48\" dur=\"2.46\">can toggle the captioning button\nin order to make it go</text><text start=\"83.94\" dur=\"2.29\">away or reappear.</text><text start=\"86.23\" dur=\"2.34\">Now that you know about the\nvideo player, I want to point</text><text start=\"88.57\" dur=\"1.95\">out the sequence navigator.</text><text start=\"90.52\" dur=\"2.91\">Right now you&amp;#39;re in a lecture\nsequence, which interweaves</text><text start=\"93.43\" dur=\"2.51\">many videos and practice\nexercises.</text><text start=\"95.94\" dur=\"3.15\">You can see how far you are in\na particular sequence by</text><text start=\"99.09\" dur=\"1.82\">observing which tab you&amp;#39;re on.</text><text start=\"100.91\" dur=\"2.83\">You can navigate directly to\nany video or exercise by</text><text start=\"103.74\" dur=\"1.87\">clicking on the appropriate\ntab.</text><text start=\"105.61\" dur=\"2.7\">You can also progress to the\nnext element by pressing the</text><text start=\"108.31\" dur=\"2.79\">Arrow button, or by clicking\non the next tab.</text><text start=\"111.1\" dur=\"1.26\">Try that now.</text><text start=\"112.36\" dur=\"1.86\">The tutorial will continue\nin the next video.</text><text start=\"114.22\" dur=\"1.25\"></text></transcript>\n", "nf-d1FFE-bE": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.59\"></text><text start=\"0.59\" dur=\"3.11\">PROFESSOR: In our first example, we&amp;#39;re\ngoing to work on a specialization of</text><text start=\"3.7\" dur=\"2.9\">the bin packing problem called\nthe knapsack problem.</text><text start=\"6.6\" dur=\"3.32\">Here we&amp;#39;re going to have a single bin,\nand our goal is to find a collection</text><text start=\"9.92\" dur=\"3.62\">of objects that fit into the knapsack\nbut that maximize the</text><text start=\"13.54\" dur=\"2.839\">value when it&amp;#39;s full.</text><text start=\"16.379\" dur=\"4.431\">We&amp;#39;ll also meet the greedy algorithm,\nan efficient little computation that</text><text start=\"20.81\" dur=\"3.09\">can be used to come up with acceptable\nsolutions for many</text><text start=\"23.9\" dur=\"1.98\">optimization problems.</text><text start=\"25.88\" dur=\"2.95\">It looks like it&amp;#39;s going to be\na good night for our burglar.</text><text start=\"28.83\" dur=\"3.19\">He&amp;#39;s found a mansion and\nnobody&amp;#39;s at home.</text><text start=\"32.02\" dur=\"4.25\">He arrives and with him he&amp;#39;s brought a\nknapsack, and the maximum weight the</text><text start=\"36.27\" dur=\"5.62\">knapsack can hold is 20 kilograms.</text><text start=\"41.89\" dur=\"3.27\">When he gets inside, the burglar\ndiscovered he&amp;#39;s facing a challenge.</text><text start=\"45.16\" dur=\"2.62\">There are many items to choose\nbetween, each with their</text><text start=\"47.78\" dur=\"2.64\">own value and weight.</text><text start=\"50.42\" dur=\"4.24\">The burglar remembers that his knapsack\ncan only hold 20 kilograms.</text><text start=\"54.66\" dur=\"5.395\">So expressed as an optimization problem,\nthe burglar wants to maximize</text><text start=\"60.055\" dur=\"4.065\">the sum of the values of the\nobjects that he&amp;#39;s taking.</text><text start=\"64.12\" dur=\"0.6\">OK.</text><text start=\"64.72\" dur=\"4.78\">But, he also realizes that the sum of\nthe weights of all the values that</text><text start=\"69.5\" dur=\"3.38\">he&amp;#39;s taking has to be less than 20.</text><text start=\"72.88\" dur=\"4.53\">This type of optimization problem is\ncalled the 0/1 knapsack problem.</text><text start=\"77.41\" dur=\"3.49\">0/1 because either you can\ntake nothing of an object</text><text start=\"80.9\" dur=\"1.53\">or all of an object.</text><text start=\"82.43\" dur=\"2.23\">So you can either take a whole clock--</text><text start=\"84.66\" dur=\"2.5\">that would be, in a sense,\nrepresented by a 1--</text><text start=\"87.16\" dur=\"4.2\">or not take any part of the painting--\nthat would be represented by a 0.</text><text start=\"91.36\" dur=\"2.75\">And you have that choice for\neach of the objects.</text><text start=\"94.11\" dur=\"5.34\">So it&amp;#39;s really up to the burglar to find\nsome combination of items to take</text><text start=\"99.45\" dur=\"4.43\">and items to leave behind that meet his\nweight constraint but maximize the</text><text start=\"103.88\" dur=\"2.71\">total value of the goods\nin this knapsack.</text><text start=\"106.59\" dur=\"3.71\">This problem gets harder as\nthe number of items grows.</text><text start=\"110.3\" dur=\"3.68\">That&amp;#39;s because, as there&amp;#39;s more and\nmore items, there&amp;#39;s more different</text><text start=\"113.98\" dur=\"3.96\">combinations to consider when trying\nto maximize value within the weight</text><text start=\"117.94\" dur=\"1.68\">constraint.</text><text start=\"119.62\" dur=\"3.45\">Our burglar&amp;#39;s going to solve this\nproblem by using a greedy algorithm.</text><text start=\"123.07\" dur=\"1.2\">Here&amp;#39;s how that works.</text><text start=\"124.27\" dur=\"5.82\">At each step, he&amp;#39;s going to choose the\nbest of the remaining items subject to</text><text start=\"130.09\" dur=\"3.36\">the constraint that it will fit\nin the remaining weight</text><text start=\"133.45\" dur=\"2.18\">allowance of his knapsack.</text><text start=\"135.63\" dur=\"1.77\">Best-- how does he determine best?</text><text start=\"137.4\" dur=\"4.25\">Well, he&amp;#39;s going to use some metric,\nand he can use that to evaluate the</text><text start=\"141.65\" dur=\"1.77\">goodness of each of the choices.</text><text start=\"143.42\" dur=\"3.07\">And he&amp;#39;ll choose the one that scores\nhighest on the metric.</text><text start=\"146.49\" dur=\"4.45\">One possible metric is to choose the\nremaining item that has the greatest</text><text start=\"150.94\" dur=\"3.72\">value, or if there&amp;#39;s more than one with\nthe same greatest value, just</text><text start=\"154.66\" dur=\"1.87\">arbitrarily choose.</text><text start=\"156.53\" dur=\"4.99\">The reasoning here is that by maximizing\nthe value at each step, he</text><text start=\"161.52\" dur=\"4.2\">hopes to maximize the total\nvalue of his knapsack.</text><text start=\"165.72\" dur=\"3.53\">He might decide to try to use\nminimum weight objects.</text><text start=\"169.25\" dur=\"4.19\">Here the theory is that if he fills up\non the lighter objects first, perhaps</text><text start=\"173.44\" dur=\"4.57\">a greater number of objects\nwill actually result in a</text><text start=\"178.01\" dur=\"1.95\">greater total value.</text><text start=\"179.96\" dur=\"5.93\">Or he might sort of try to choose\nobjects that have the best value to</text><text start=\"185.89\" dur=\"1.48\">weight ratio.</text><text start=\"187.37\" dur=\"4.39\">Whichever metric he uses, the burglar&amp;#39;s\nbasically adopting the</text><text start=\"191.76\" dur=\"8.23\">strategy of choosing a locally optimal\nitem in the hopes that a series of</text><text start=\"199.99\" dur=\"4.66\">locally optimal choices will lead to the\nglobal optimum of coming up with</text><text start=\"204.65\" dur=\"2.15\">the greatest value of goods.</text><text start=\"206.8\" dur=\"5.05\">Then he simply repeats that first\nstep until his backpack is full.</text><text start=\"211.85\" dur=\"3.19\">The burglar likes the greedy algorithm,\nbecause it&amp;#39;s easy to</text><text start=\"215.04\" dur=\"3.76\">implement and because of its\nstraightforward nature, will actually</text><text start=\"218.8\" dur=\"4.23\">perform quite well even when the\nnumber of objects is large.</text><text start=\"223.03\" dur=\"3.22\">So which of these metrics should\nthe burglar choose?</text><text start=\"226.25\" dur=\"5.78\">As it turns out, none of these metrics\nactually produces the optimal result</text><text start=\"232.03\" dur=\"1.7\">in all cases.</text><text start=\"233.73\" dur=\"3.78\">By that, I mean that if the burglar\nalways uses one of the metrics to</text><text start=\"237.51\" dur=\"5.98\">choose items, he may end up with a sack\nof items which has less total</text><text start=\"243.49\" dur=\"2.19\">value than would have been possible.</text><text start=\"245.68\" dur=\"6.09\">Moreover, none of these metrics is\nalways better than the other metrics.</text><text start=\"251.77\" dur=\"4.05\">So even if the burglar is willing to do\nwith a less than optimal solution,</text><text start=\"255.82\" dur=\"4.329\">it&amp;#39;s still the case that if he chose a\ndifferent metric, he might end up with</text><text start=\"260.149\" dur=\"4.201\">a more valuable bag of items\nthan in certain situations.</text><text start=\"264.35\" dur=\"2.37\">So in other words, a certain combination\nof items in which max</text><text start=\"266.72\" dur=\"3.18\">value does best, and there&amp;#39;s\nother combinations in which</text><text start=\"269.9\" dur=\"1.85\">min weight does best.</text><text start=\"271.75\" dur=\"3.51\">Sadly, the burglar comes to the\nrealization that the greedy algorithm</text><text start=\"275.26\" dur=\"3.76\">is heuristic for the 0/1\nknapsack problem.</text><text start=\"279.02\" dur=\"4.13\">In other words, the choices that are\nmade aren&amp;#39;t guaranteed to produce an</text><text start=\"283.15\" dur=\"2.14\">optimal result.</text><text start=\"285.29\" dur=\"2.97\">There are situations where\nthe greedy algorithm does</text><text start=\"288.26\" dur=\"2.09\">produce an optimal result.</text><text start=\"290.35\" dur=\"3.96\">Consider a situation where the materials\nthat the burglar is thinking</text><text start=\"294.31\" dur=\"3.06\">about choosing between are, in\nfact, infinitely divisible.</text><text start=\"297.37\" dur=\"3.15\">He can take as much or little\nof each one that he wants.</text><text start=\"300.52\" dur=\"3.24\">That&amp;#39;s why it&amp;#39;s called the continuous\nknapsack problem.</text><text start=\"303.76\" dur=\"4.33\">So for example, suppose there were\nthree barrels of liquids, one</text><text start=\"308.09\" dur=\"3.97\">containing water, one containing\noil, and one containing wine.</text><text start=\"312.06\" dur=\"4.37\">It turns out that if the burglar pursues\na greedy algorithm with a</text><text start=\"316.43\" dur=\"4.29\">metric of choosing the liquid that has\nthe greatest value per weight, then</text><text start=\"320.72\" dur=\"1.73\">he&amp;#39;ll find an optimal solution.</text><text start=\"322.45\" dur=\"3.665\">And so what he&amp;#39;ll do is choose the most\nvaluable liquid, and either fill</text><text start=\"326.115\" dur=\"3.655\">up his backpack with that, or if it runs\nout early, he&amp;#39;ll move to the next</text><text start=\"329.77\" dur=\"1.23\">valuable liquid.</text><text start=\"331\" dur=\"4.64\">And if he pursues that strategy, he&amp;#39;ll\nend up with the most valuable contents</text><text start=\"335.64\" dur=\"1.25\">in his backpack.</text><text start=\"336.89\" dur=\"0.54\"></text></transcript>\n", "MJ4baVLD4uU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.02\"></text><text start=\"1.02\" dur=\"1.35\">COLLIN M. STULTZ: So my\nname is Collin Stultz.</text><text start=\"2.37\" dur=\"3.675\">I&amp;#39;m a faculty member at MIT in the\nDepartment of Electrical Engineering</text><text start=\"6.045\" dur=\"2.915\">and Computer Science, and also in the\ndivision of Health Sciences and</text><text start=\"8.96\" dur=\"0.66\">Technology.</text><text start=\"9.62\" dur=\"3.87\">I am also a clinical cardiologist\nwho still sees patients.</text><text start=\"13.49\" dur=\"5.7\">And I have an interest in combining\ncomputational methods with medicine to</text><text start=\"19.19\" dur=\"3.25\">make statements about patients,\nstatements that will help to improve</text><text start=\"22.44\" dur=\"3.37\">the lives and quality of\npeople who are sick.</text><text start=\"25.81\" dur=\"2.82\">And today, I&amp;#39;m going to talk about some\nmethods that we&amp;#39;ve been working</text><text start=\"28.63\" dur=\"4.64\">on to combine sophisticated\ncomputational algorithms to make</text><text start=\"33.27\" dur=\"2.66\">statements about patients with\ncardiovascular disease.</text><text start=\"35.93\" dur=\"2.66\">Cardiovascular disease\nis a big problem.</text><text start=\"38.59\" dur=\"2.2\">In fact, everybody has\natherosclerosis.</text><text start=\"40.79\" dur=\"2.08\">It doesn&amp;#39;t matter how young\nor how old you are.</text><text start=\"42.87\" dur=\"2.71\">Atherosclerosis is actually\na disease of the juvenile.</text><text start=\"45.58\" dur=\"3.58\">And the problem is that, although\neveryone has it, some people will die</text><text start=\"49.16\" dur=\"1.81\">from it and some people won&amp;#39;t.</text><text start=\"50.97\" dur=\"5.11\">So a huge challenge in clinical\ncardiology is to identify those</text><text start=\"56.08\" dur=\"2.54\">patients who have atherosclerotic\nheart disease who are</text><text start=\"58.62\" dur=\"1.26\">going to die from it.</text><text start=\"59.88\" dur=\"4.889\">And this slide demonstrates that\natherosclerosis is a huge problem.</text><text start=\"64.769\" dur=\"3.221\">About every 30 seconds in the United\nStates, somebody dies of heart attack.</text><text start=\"67.99\" dur=\"3.07\">And about half a million\npeople die each year.</text><text start=\"71.06\" dur=\"1.77\">So it&amp;#39;s about a quarter of\nall deaths in the US.</text><text start=\"72.83\" dur=\"2.72\">And these are statistics from\njust a few years ago.</text><text start=\"75.55\" dur=\"3.21\">And although we know that everybody\nhas atherosclerosis--</text><text start=\"78.76\" dur=\"1.42\">we know a lot about the disease--</text><text start=\"80.18\" dur=\"3.46\">we&amp;#39;re horrible in trying to identify\nthose who will die.</text><text start=\"83.64\" dur=\"3.51\">So if you look at the whole pie of\npeople who die from atherosclerotic</text><text start=\"87.15\" dur=\"4.51\">heart disease, we only can identify a\nsmall fraction of those who will.</text><text start=\"91.66\" dur=\"4.53\">So our goal, at least one of the goals\nof my research group, is to develop</text><text start=\"96.19\" dur=\"3.85\">predictive models that help our ability\nto identify patients with high</text><text start=\"100.04\" dur=\"1.15\">risk of death.</text><text start=\"101.19\" dur=\"4.12\">So when you think about atherosclerosis,\nwhat really happens</text><text start=\"105.31\" dur=\"1.28\">when somebody has a heart attack?</text><text start=\"106.59\" dur=\"4.69\">Well, here in this picture is the\nclassic photo of somebody having chest</text><text start=\"111.28\" dur=\"3\">pain due to heart disease--</text><text start=\"114.28\" dur=\"1.07\">clutching his chest.</text><text start=\"115.35\" dur=\"2.86\">It usually feels like a pressure\nthat comes down on your chest.</text><text start=\"118.21\" dur=\"3.34\">It&amp;#39;s typically described as an elephant\nsitting on your chest.</text><text start=\"121.55\" dur=\"5.24\">And this type of event is correlated\nwith something that has been very well</text><text start=\"126.79\" dur=\"0.98\">described in the literature.</text><text start=\"127.77\" dur=\"3.42\">A lot of studies have been done to say\nwhat causes this type of pain that</text><text start=\"131.19\" dur=\"1.77\">leads to adverse events.</text><text start=\"132.96\" dur=\"5.53\">So if you were able to open this man&amp;#39;s\nchest to decipher the actual things</text><text start=\"138.49\" dur=\"3.65\">that are going on, you&amp;#39;ll find\nthat here&amp;#39;s the heart.</text><text start=\"142.14\" dur=\"3.11\">And this is a blood vessel\nwhich supplies blood to a</text><text start=\"145.25\" dur=\"1.41\">region of the heart.</text><text start=\"146.66\" dur=\"2.86\">And in a heart attack, this blood\nvessel becomes blocked.</text><text start=\"149.52\" dur=\"3.64\">You have this thing which builds up\nwithin the lumen of the vessel called</text><text start=\"153.16\" dur=\"1.96\">an atherosclerotic plaque.</text><text start=\"155.12\" dur=\"3.72\">So this heart muscle normally was being\nprofused by blood, but this</text><text start=\"158.84\" dur=\"1.6\">blockage happens.</text><text start=\"160.44\" dur=\"1.84\">And it grows all of a sudden.</text><text start=\"162.28\" dur=\"2.69\">And this blood vessel can no\nlonger supply blood to</text><text start=\"164.97\" dur=\"0.84\">that area of the heart.</text><text start=\"165.81\" dur=\"3.06\">And consequently, that\nheart muscle dies.</text><text start=\"168.87\" dur=\"3.36\">And if you were to take a blow up of\nthis picture, this is an actual</text><text start=\"172.23\" dur=\"3.06\">specimen taken from somebody who\ndied of a massive heart attack.</text><text start=\"175.29\" dur=\"2.66\">Here is the atherosclerotic plaque.</text><text start=\"177.95\" dur=\"2.86\">And what happens is it\nthis plaque ruptures.</text><text start=\"180.81\" dur=\"2.98\">And the blood, which sits in the lumen,\ncomes into contact with all of</text><text start=\"183.79\" dur=\"1.85\">this bad stuff that&amp;#39;s in\nthe atherosclerotic</text><text start=\"185.64\" dur=\"3.12\">plaque, and a clot forms.</text><text start=\"188.76\" dur=\"3.64\">And this process of breaking open\nthe plaque involves lots of</text><text start=\"192.4\" dur=\"1.37\">inflammatory cells.</text><text start=\"193.77\" dur=\"4.73\">So these are cells which are involved\nin an immune response.</text><text start=\"198.5\" dur=\"3.49\">And these cells secrete substances\nwhich break open the plaque.</text><text start=\"201.99\" dur=\"3.56\">There&amp;#39;s a protective covering\nof collagen on top of this</text><text start=\"205.55\" dur=\"3.04\">atherosclerotic plaque that becomes\nruptured because these cells secrete</text><text start=\"208.59\" dur=\"2.5\">enzymes that degrade the collagen.</text><text start=\"211.09\" dur=\"2.3\">And that&amp;#39;s what allows the blood to come\ninto contact with all of these</text><text start=\"213.39\" dur=\"2.88\">bad materials with an atherosclerotic\nplaque, which leads to the formation</text><text start=\"216.27\" dur=\"1.47\">of this clot.</text><text start=\"217.74\" dur=\"2.32\">So here&amp;#39;s where computation\ncould come into play.</text><text start=\"220.06\" dur=\"4.46\">All of this was determined by biological\nmethods, experiments that</text><text start=\"224.52\" dur=\"5.2\">are typically done in a laboratory with\ntest tubes and gels and so forth.</text><text start=\"229.72\" dur=\"2.91\">But the events that happen at this\nlevel, the enzyme that actually breaks</text><text start=\"232.63\" dur=\"5.39\">down collagen, these involve very, very\nsmall things that are typically</text><text start=\"238.02\" dur=\"3.41\">very hard to study experimentally.</text><text start=\"241.43\" dur=\"3.55\">But what you can do with a computer\nis you can model these proteins.</text><text start=\"244.98\" dur=\"2.49\">So we know what the structure\nof collagen looks like.</text><text start=\"247.47\" dur=\"2.9\">We know the structure of the enzymes\nthat degrade collagen.</text><text start=\"250.37\" dur=\"3.19\">And we can put this molecule\nin a computer.</text><text start=\"253.56\" dur=\"3.399\">We can do sophisticated calculations to\nget estimates of how this molecule</text><text start=\"256.959\" dur=\"2.081\">moves and how it gets degraded.</text><text start=\"259.04\" dur=\"3.26\">And we can get insights into the motions\nof this protein that lead to</text><text start=\"262.3\" dur=\"3.6\">its degradation, which leads to rupture\nof this plaque, which leads to</text><text start=\"265.9\" dur=\"2.81\">formation of the clot, which\nleads to a heart attack.</text><text start=\"268.71\" dur=\"2.9\">And so our group has been involved\nin doing a lot of sophisticated</text><text start=\"271.61\" dur=\"1.89\">computations along this line.</text><text start=\"273.5\" dur=\"2.33\">But that&amp;#39;s really not what I&amp;#39;m\ngoing to talk about today.</text><text start=\"275.83\" dur=\"1.95\">I&amp;#39;m going to talk about something\nthat&amp;#39;s a lot bigger.</text><text start=\"277.78\" dur=\"3.37\">This is just an example to show you\none avenue in which sophisticated</text><text start=\"281.15\" dur=\"4.05\">computational tools can be used to gain\ninsights into the disease process</text><text start=\"285.2\" dur=\"4.15\">known as atherosclerosis and\natherosclerotic plaque rupture.</text><text start=\"289.35\" dur=\"2.62\">So now, what I&amp;#39;m going to talk about--\nif you go back to this mature</text><text start=\"291.97\" dur=\"3.54\">gentleman who&amp;#39;s suffering from chest\npain, this person, let&amp;#39;s say, goes</text><text start=\"295.51\" dur=\"4.19\">into an emergency room or\ngoes to his doctor.</text><text start=\"299.7\" dur=\"3.74\">And the physician gets a lot of\ninformation about this patient.</text><text start=\"303.44\" dur=\"2.47\">They can get electrocardiographic\ninformation.</text><text start=\"305.91\" dur=\"0.93\">So that&amp;#39;s what this is.</text><text start=\"306.84\" dur=\"4.77\">And if you&amp;#39;re familiar with shows like\nER or Hospital, people come into the</text><text start=\"311.61\" dur=\"0.61\">emergency room.</text><text start=\"312.22\" dur=\"3.09\">There are leads that are put\non the patient&amp;#39;s chest.</text><text start=\"315.31\" dur=\"2.62\">And what&amp;#39;s recorded is\nan electrocardiogram.</text><text start=\"317.93\" dur=\"3.38\">So these are the same tracings that you\nmay be familiar with from watching</text><text start=\"321.31\" dur=\"2.04\">popular television shows.</text><text start=\"323.35\" dur=\"3.32\">You can get tracings that record blood\npressure, how the blood pressure</text><text start=\"326.67\" dur=\"3.59\">changes over time, and different\ntracings that record pressures within</text><text start=\"330.26\" dur=\"2.04\">various parts of the vascular tree.</text><text start=\"332.3\" dur=\"1.35\">So now, this electrocardiogram--</text><text start=\"333.65\" dur=\"3.81\">maybe a lot of you have had these done\nbefore or know somebody who&amp;#39;s had them</text><text start=\"337.46\" dur=\"0.43\">done before.</text><text start=\"337.89\" dur=\"2.09\">It&amp;#39;s very easy to obtain.</text><text start=\"339.98\" dur=\"6.73\">And the question that we&amp;#39;re posing is,\n&amp;quot;Can we use data like these that are</text><text start=\"346.71\" dur=\"3.86\">easy to obtain, that are obtained on\na lot of people, to try to identify</text><text start=\"350.57\" dur=\"2.28\">whether this person is\ngoing to die or not?&amp;quot;</text><text start=\"352.85\" dur=\"3.15\">He may be having a heart attack, but\nhe can survive his heart attack and</text><text start=\"356\" dur=\"2.61\">live the rest of his life\nin a productive manner.</text><text start=\"358.61\" dur=\"1.18\">Or he could have a heart\nattack and die.</text><text start=\"359.79\" dur=\"3.63\">And we want to identify those patients\nwho have high risk of death after a</text><text start=\"363.42\" dur=\"1.73\">heart attack.</text><text start=\"365.15\" dur=\"3.7\">So as I&amp;#39;ve said, lots of information can\nbe recorded for my gentleman when</text><text start=\"368.85\" dur=\"2.97\">he&amp;#39;s well and when he&amp;#39;s sick.</text><text start=\"371.82\" dur=\"4.29\">And this stuff is cheap, easy to obtain,\nand we want to see how we can</text><text start=\"376.11\" dur=\"3.95\">use this to improve our ability\nto identify patients who die.</text><text start=\"380.06\" dur=\"3.81\">So again, we&amp;#39;re interested in using\neasily obtained data that are low-</text><text start=\"383.87\" dur=\"4.26\">cost to improve our ability to identify\npatients of high risk of what</text><text start=\"388.13\" dur=\"4.41\">we call adverse cardiovascular events,\nof which the worst is death.</text><text start=\"392.54\" dur=\"2.3\">Now, one thing to note about the\nsurface electrocardiogram--</text><text start=\"394.84\" dur=\"1.4\">it encodes a lot of information.</text><text start=\"396.24\" dur=\"6.5\">And this is a normal ECG strip,\nECG being electrocardiogram.</text><text start=\"402.74\" dur=\"2.78\">This, what I&amp;#39;m circling\nhere, is one beat.</text><text start=\"405.52\" dur=\"2.34\">It constitutes one beat of the heart.</text><text start=\"407.86\" dur=\"3.02\">And what you notice is that there are\nthree peaks associated with the</text><text start=\"410.88\" dur=\"0.64\">electrocardiogram.</text><text start=\"411.52\" dur=\"3.87\">There&amp;#39;s what we call the P wave,\na QRS complex, and a T wave.</text><text start=\"415.39\" dur=\"5.68\">And it repeats in a quasi-periodic\nfashion, pretty regular.</text><text start=\"421.07\" dur=\"3.58\">Now, a healthy electrocardiogram tells\nyou a lot about the patient.</text><text start=\"424.65\" dur=\"4.54\">It tells you that the patient&amp;#39;s\nmyocardium, the heart muscle, is for</text><text start=\"429.19\" dur=\"1.74\">the most part normal.</text><text start=\"430.93\" dur=\"3.25\">The electrocardiogram records\nelectrochemical impulses as they</text><text start=\"434.18\" dur=\"1.79\">traverse through the heart.</text><text start=\"435.97\" dur=\"3.36\">And you need a normal myocardium, normal\nheart muscle, to have a normal</text><text start=\"439.33\" dur=\"2.05\">electrocardiogram.</text><text start=\"441.38\" dur=\"2.86\">The heart, however, is not by itself.</text><text start=\"444.24\" dur=\"1.18\">It&amp;#39;s not an island by itself.</text><text start=\"445.42\" dur=\"1.41\">It interacts with other things.</text><text start=\"446.83\" dur=\"4.08\">And there&amp;#39;s the nervous system, which\nsends nerves to the heart, which helps</text><text start=\"450.91\" dur=\"0.91\">to innervate the heart.</text><text start=\"451.82\" dur=\"4.83\">So the heart responds to\nnervous stimulation.</text><text start=\"456.65\" dur=\"3.57\">The classic example is the\nflight or fight response.</text><text start=\"460.22\" dur=\"3.48\">If you&amp;#39;re running away from something\nthat you&amp;#39;re scared of, or if you</text><text start=\"463.7\" dur=\"2.77\">become nervous at times, your\nheart starts to be faster.</text><text start=\"466.47\" dur=\"3.85\">That&amp;#39;s because your nervous system\nis telling your heart to do so.</text><text start=\"470.32\" dur=\"3.8\">So a normal electrocardiogram tells you\nabout the heart rate, tells you</text><text start=\"474.12\" dur=\"2.72\">about the interaction of the nervous\nsystem with the heart, and it tells</text><text start=\"476.84\" dur=\"1.39\">you about the myocardium.</text><text start=\"478.23\" dur=\"2.31\">We call it the endogenous factors--</text><text start=\"480.54\" dur=\"0.69\">the myocardium--</text><text start=\"481.23\" dur=\"3.94\">because that&amp;#39;s intrinsic to the heart\nitself, and exogenous factors--</text><text start=\"485.17\" dur=\"1.94\">interactions with the nervous system.</text><text start=\"487.11\" dur=\"2.76\">And the nervous system is a combination\nof two types of systems</text><text start=\"489.87\" dur=\"2.37\">that&amp;#39;s not too important for this\ndiscussion, but are called the</text><text start=\"492.24\" dur=\"2.3\">sympathetic and the parasympathetic\nsystem.</text><text start=\"494.54\" dur=\"3.73\">So again, when a cardiologist gets an\nelectrocardiogram, he or she looks at</text><text start=\"498.27\" dur=\"5.48\">it in a gross fashion and, to assess\nthe health of the myocardium, the</text><text start=\"503.75\" dur=\"1.49\">endogenous factors.</text><text start=\"505.24\" dur=\"3.78\">And you can look at the heart rate as\nwell from the electrocardiogram,</text><text start=\"509.02\" dur=\"3.529\">variations in the heart rate to\ndetermine the health of exogenous</text><text start=\"512.549\" dur=\"3.01\">factors, and how that interacts with\nthe heart and how those exogenous</text><text start=\"515.559\" dur=\"1.641\">factors affect the heart.</text><text start=\"517.2\" dur=\"3.62\">Now, there are a number of automated\napproaches to try to analyze an</text><text start=\"520.82\" dur=\"4.99\">electrocardiogram to determine who&amp;#39;s at\nrisk of bad events and who&amp;#39;s not.</text><text start=\"525.81\" dur=\"3.57\">But a lot of those automated methods\nonly focus on looking at changes in</text><text start=\"529.38\" dur=\"3.8\">the heart rate, only really look\nat the exogenous factors.</text><text start=\"533.18\" dur=\"5.75\">So our hypothesis is that we can\nuse computers to evaluate the</text><text start=\"538.93\" dur=\"4.8\">electrocardiogram to look at both\nendogenous and exogenous factors to</text><text start=\"543.73\" dur=\"4.71\">get an overall picture of the health\nof the patient, and thereby improve</text><text start=\"548.44\" dur=\"5.05\">risk stratification for cardiovascular\ndeath, CVD for short.</text><text start=\"553.49\" dur=\"0.88\">Now, a cardiologist--</text><text start=\"554.37\" dur=\"2.85\">even the most well-trained\ncardiologist--</text><text start=\"557.22\" dur=\"3.35\">looks at an electrocardiogram, but\nit&amp;#39;s very hard for he or she to</text><text start=\"560.57\" dur=\"3.15\">determine very subtle differences\nbetween beats, very subtle</text><text start=\"563.72\" dur=\"0.8\">abnormalities.</text><text start=\"564.52\" dur=\"2.31\">We&amp;#39;re very good at detecting\nbig things--</text><text start=\"566.83\" dur=\"4.17\">so if there are large changes in the QRS\ncomplex, large changes in T wave,</text><text start=\"571\" dur=\"2.9\">or the parts of the beat.</text><text start=\"573.9\" dur=\"3.85\">But very small change that might be\nthere, it&amp;#39;s very easy to miss</text><text start=\"577.75\" dur=\"0.84\">with the naked eye.</text><text start=\"578.59\" dur=\"3.64\">But that&amp;#39;s the sort of thing that\ncomputers do exceptionally well.</text><text start=\"582.23\" dur=\"4.41\">Computers can look at beats and can\nquantify the differences in them, even</text><text start=\"586.64\" dur=\"3.94\">though the differences can be quite\nminuscule and hard to detect by the</text><text start=\"590.58\" dur=\"3.05\">naked eye, even by a specialist.</text><text start=\"593.63\" dur=\"5.48\">So we want to develop metrics to\nquantify subtle variability in the</text><text start=\"599.11\" dur=\"3.98\">morphology of signals, and how\nbeats change over time.</text><text start=\"603.09\" dur=\"4.84\">And the hypothesis is that beats that\nchange a lot over time indicate an</text><text start=\"607.93\" dur=\"6.77\">unstable system and are associated with\npatients who are at high risk of</text><text start=\"614.7\" dur=\"1.83\">cardiovascular death.</text><text start=\"616.53\" dur=\"5.97\">So in this work, which parenthetically\nis pioneered by myself, John Guttag,</text><text start=\"622.5\" dur=\"2.53\">who&amp;#39;s a colleague of mine, in the\nComputer Science, Electrical</text><text start=\"625.03\" dur=\"1.99\">Engineering and Computer\nScience Department--</text><text start=\"627.02\" dur=\"3\">and Professor Zeeshan Syed at\nthe University of Michigan.</text><text start=\"630.02\" dur=\"1.75\">So if you take a normal\nelectrocardiogram--</text><text start=\"631.77\" dur=\"3.17\">and remember, the goal now is to\ndetect subtle variations in the</text><text start=\"634.94\" dur=\"1.97\">electrocardiogram over time--</text><text start=\"636.91\" dur=\"4.73\">we pre-process it to remove bad beats,\nbeats that are really abnormal, that</text><text start=\"641.64\" dur=\"5.5\">maybe are caused by noise or other sorts\nof other things that really can</text><text start=\"647.14\" dur=\"3.35\">cloud our ability to make rigorous\nstatements about the patient.</text><text start=\"650.49\" dur=\"6.19\">Then, for every pair of beats within the\nECG, we can align them and compute</text><text start=\"656.68\" dur=\"2.56\">what we call the morphology\ndifferences between</text><text start=\"659.24\" dur=\"2.12\">consecutive heart beats.</text><text start=\"661.36\" dur=\"4.75\">And from that, we get what&amp;#39;s called a\nMorphology Difference Time Series.</text><text start=\"666.11\" dur=\"2.39\">So for every pair of beats, we\ncompute the differences, and</text><text start=\"668.5\" dur=\"1.42\">we get a time series.</text><text start=\"669.92\" dur=\"2.93\">And then we summarize the variability\nin this time series to get what we</text><text start=\"672.85\" dur=\"1.92\">call the morphologic variability\nmeasure.</text><text start=\"674.77\" dur=\"2.57\">Now, the key aspect of this\nwhole approach is this.</text><text start=\"677.34\" dur=\"3.8\">It&amp;#39;s a rigorous method to compute\ndifferences in the morphology between</text><text start=\"681.14\" dur=\"1.85\">consecutive beats.</text><text start=\"682.99\" dur=\"1.59\">So how do you do that?</text><text start=\"684.58\" dur=\"1.56\">Well, if you have-- this is one beat.</text><text start=\"686.14\" dur=\"3.9\">Remember, from one of the previous\nslides, a beat is composed of several</text><text start=\"690.04\" dur=\"0.9\">different peaks.</text><text start=\"690.94\" dur=\"3.53\">There&amp;#39;s a P wave, a QRS\ncomplex, and a T wave.</text><text start=\"694.47\" dur=\"2.09\">So let&amp;#39;s say these are two beats\nthat occur in the patient.</text><text start=\"696.56\" dur=\"4.91\">The beats can vary by very subtle\nmeans as a ECG strip is being</text><text start=\"701.47\" dur=\"2.7\">recorded, as the data\nare being obtained.</text><text start=\"704.17\" dur=\"4.41\">If you want to take just two beats and\nline them up with one another, you can</text><text start=\"708.58\" dur=\"2.57\">take a look at this beat, look at all\nof the samples associated with this</text><text start=\"711.15\" dur=\"3.55\">signal, look at all the samples\nassociated with this signal, line them</text><text start=\"714.7\" dur=\"4.02\">up, and just subtract them to get a\ndifference between those beats.</text><text start=\"718.72\" dur=\"2.11\">But there&amp;#39;s a problem with that.</text><text start=\"720.83\" dur=\"4.6\">If the beats vary by a lot in terms of\ntheir length, then you may end up</text><text start=\"725.43\" dur=\"3.39\">pairing up this portion of the T wave at\nthe region of the beat that doesn&amp;#39;t</text><text start=\"728.82\" dur=\"2.47\">correspond to the same\nphysiologic event.</text><text start=\"731.29\" dur=\"3.94\">The T wave corresponds to something very\nspecific, as does the QRS and as</text><text start=\"735.23\" dur=\"1.4\">does the P wave.</text><text start=\"736.63\" dur=\"2.81\">So really, when you align beats and\nwhen you compare them, you want to</text><text start=\"739.44\" dur=\"4.54\">make sure that you&amp;#39;re comparing\nthe same physiologic things.</text><text start=\"743.98\" dur=\"7.59\">So there is an algorithm that we use\ncalled dynamic time warping to align</text><text start=\"751.57\" dur=\"2.6\">these beats, to ensure that\nthey correspond to the</text><text start=\"754.17\" dur=\"1.66\">same physiologic event.</text><text start=\"755.83\" dur=\"3.57\">Similar algorithms are used in the area\nof computational biology to align</text><text start=\"759.4\" dur=\"4.4\">sequences, sequences of amino\nacids, sequences of</text><text start=\"763.8\" dur=\"3.13\">nucleic acids, DNA, protein.</text><text start=\"766.93\" dur=\"3.88\">And really, essentially, you just want\nto make sure that you&amp;#39;re comparing</text><text start=\"770.81\" dur=\"3.93\">apples with apples, T waves with a T\nwave, QRS with a QRS, and a P wave</text><text start=\"774.74\" dur=\"1.41\">with a P wave.</text><text start=\"776.15\" dur=\"3.13\">And then, once this pairing is done\nusing this dynamic time warping</text><text start=\"779.28\" dur=\"2.36\">algorithm, we can subtract\nthe differences and get</text><text start=\"781.64\" dur=\"2.12\">a meaningful result.</text><text start=\"783.76\" dur=\"1.51\">So quickly, to summarize--</text><text start=\"785.27\" dur=\"3.1\">we have our electrocardiographic\nstrip.</text><text start=\"788.37\" dur=\"6.3\">We take two beats, we line them up, we\nperform dynamic time warping akin to a</text><text start=\"794.67\" dur=\"2.59\">sequence alignment-- what is done\nin computational biology--</text><text start=\"797.26\" dur=\"1.68\">and we get a number.</text><text start=\"798.94\" dur=\"1.12\">We look at the next pair.</text><text start=\"800.06\" dur=\"1.97\">We do the same sort of comparison.</text><text start=\"802.03\" dur=\"2.12\">We line them up and we\nget another number.</text><text start=\"804.15\" dur=\"1.99\">Similarly, we do this for the\nnext sequence of beats.</text><text start=\"806.14\" dur=\"0.65\">We get another number.</text><text start=\"806.79\" dur=\"5.55\">And we get this Morphologic\nDifference Time Series.</text><text start=\"812.34\" dur=\"5.14\">So this is time on the x-axis and this\nis the value on the y-axis that</text><text start=\"817.48\" dur=\"1.2\">correspond to these differences.</text><text start=\"818.68\" dur=\"4.3\">So lots of variation here in this signal\nmeans that there&amp;#39;s lots of</text><text start=\"822.98\" dur=\"1.63\">changes in the heartbeat over time.</text><text start=\"824.61\" dur=\"2.83\">Even though these changes might be\nsubtle, they&amp;#39;ll be captured, because</text><text start=\"827.44\" dur=\"2.23\">computers are very good at computing\nthese differences</text><text start=\"829.67\" dur=\"1.63\">and doing the alignment.</text><text start=\"831.3\" dur=\"3.52\">And so then from that, we can use this\ntime series to compute measures of the</text><text start=\"834.82\" dur=\"1.94\">variability of the underlying signal.</text><text start=\"836.76\" dur=\"3.41\">So again, Morphologic Distance Time\nSeries captures both differences in</text><text start=\"840.17\" dur=\"3.11\">the heart rate, because different heart\nrates means the length of the</text><text start=\"843.28\" dur=\"1.39\">beats are different.</text><text start=\"844.67\" dur=\"2.77\">And that will give you a nonzero\ndifference when you align the beats</text><text start=\"847.44\" dur=\"3.08\">and when you compute the distance\nmeasure between them.</text><text start=\"850.52\" dur=\"3.65\">And so both in the heart rate, as well\nas the morphology, even if the heart</text><text start=\"854.17\" dur=\"5.83\">rate is constant and the lengths of the\nbeats are the same, if there are</text><text start=\"860\" dur=\"1.15\">morphology differences--</text><text start=\"861.15\" dur=\"3.7\">So if the T wave looks slightly\ndifferent one beat to another, the QRS</text><text start=\"864.85\" dur=\"2.24\">complex looks slightly different\none beat to another--</text><text start=\"867.09\" dur=\"3.23\">it&amp;#39;ll be captured in this Morphologic\nDistance Time Series as well.</text><text start=\"870.32\" dur=\"4.77\">So it encapsulates both the exogenous\nand endogenous factors</text><text start=\"875.09\" dur=\"0.53\">that affect the heart.</text><text start=\"875.62\" dur=\"2.55\">It&amp;#39;s something that we stated that\nwe wanted to address at the</text><text start=\"878.17\" dur=\"1.52\">outset of this talk.</text><text start=\"879.69\" dur=\"1.422\">Now, myocardial ischemia--</text><text start=\"881.112\" dur=\"2.858\">by ischemia, I&amp;#39;m referring to what\nI talked about in one of the very</text><text start=\"883.97\" dur=\"1.7\">earlier slides--</text><text start=\"885.67\" dur=\"3.22\">when you have a vessel that supplies\nthe heart, there&amp;#39;s a blockage that</text><text start=\"888.89\" dur=\"3.49\">develops in that vessel, and then\nthe heart is denied blood.</text><text start=\"892.38\" dur=\"2.87\">That&amp;#39;s what ischemia means-- just\ndenying blood to the myocardium, to</text><text start=\"895.25\" dur=\"3.58\">the heart muscle, leads to abnormal\nrepolarization, abnormal electrical</text><text start=\"898.83\" dur=\"1.23\">conduction.</text><text start=\"900.06\" dur=\"2.25\">And it can cause subtle changes\nin the electrocardiogram.</text><text start=\"902.31\" dur=\"3.12\">So these are the endogenous\nand the exogenous factors.</text><text start=\"905.43\" dur=\"2.6\">This is what a typical Morphologic\nDistance Time Series looks like.</text><text start=\"908.03\" dur=\"2.63\">So this is time and this is the dynamic\ntime warping morphology</text><text start=\"910.66\" dur=\"0.42\">difference.</text><text start=\"911.08\" dur=\"1.43\">Looks like a mess, right?</text><text start=\"912.51\" dur=\"3.52\">It&amp;#39;s very hard for any person to look\nat this and be able to say with any</text><text start=\"916.03\" dur=\"4.43\">certainty whether this patient\nis at high risk or not.</text><text start=\"920.46\" dur=\"3.45\">Now, with the computer, what we do is\nwe take a look at this and we can</text><text start=\"923.91\" dur=\"2.98\">quantify this in a very straightforward\nmanner.</text><text start=\"926.89\" dur=\"3.7\">We can do this both in the time domain,\nor we can look at the power</text><text start=\"930.59\" dur=\"4.55\">spectrum, do a Fourier transform, and\nlook at in the frequency domain to</text><text start=\"935.14\" dur=\"2.15\">develop various metrics.</text><text start=\"937.29\" dur=\"1.79\">So how do we develop this measure?</text><text start=\"939.08\" dur=\"1.99\">So we have a list of patients\nfrom a database.</text><text start=\"941.07\" dur=\"3.74\">We have a database of patients\nwho all had heart attacks.</text><text start=\"944.81\" dur=\"2.4\">And some of them died,\nsome of them did not.</text><text start=\"947.21\" dur=\"3.05\">And they all had Holter monitors, which\nare devices that can record your</text><text start=\"950.26\" dur=\"2.4\">electrocardiogram for a\nlong period of time.</text><text start=\"952.66\" dur=\"3.31\">And we used this database to be\nable to develop our methods.</text><text start=\"955.97\" dur=\"3.91\">So when you look at the Morphologic\nDistance Time Series and then you look</text><text start=\"959.88\" dur=\"3.88\">at it in the frequency domain, is there\na particular frequency band that</text><text start=\"963.76\" dur=\"1.92\">carries prognostic information?</text><text start=\"965.68\" dur=\"4.69\">So what I mean by that is you have your\ntime series signal, you transform</text><text start=\"970.37\" dur=\"3.25\">that to the frequency domain, and you\nhave a list of frequencies and you</text><text start=\"973.62\" dur=\"1.21\">have the power spectrum.</text><text start=\"974.83\" dur=\"2.76\">So is there a particular range of\nfrequencies that are more meaningful</text><text start=\"977.59\" dur=\"0.95\">than others?</text><text start=\"978.54\" dur=\"3.78\">So we sub the power in a particular\nfrequency band to determine the</text><text start=\"982.32\" dur=\"0.75\">patient&amp;#39;s risk.</text><text start=\"983.07\" dur=\"1.7\">And we have to determine what\nband is appropriate.</text><text start=\"984.77\" dur=\"4.37\">So we use this DISPERSE2 data\nset of these patients--</text><text start=\"989.14\" dur=\"2.55\">some patients who died and\nsome who did not die.</text><text start=\"991.69\" dur=\"2.55\">But all of them have\nhad a heart attack.</text><text start=\"994.24\" dur=\"2.66\">And we use that to derive parameters\nfor this model.</text><text start=\"996.9\" dur=\"3.52\">We created a heat map where we looked\nat the prognostic information on all</text><text start=\"1000.42\" dur=\"1.76\">possible frequency bands.</text><text start=\"1002.18\" dur=\"0.69\">So here--</text><text start=\"1002.87\" dur=\"1.2\">this is the upper band limit.</text><text start=\"1004.07\" dur=\"0.96\">This the lower band limit.</text><text start=\"1005.03\" dur=\"4.66\">And the colors here is an assessment\nof the predictive value within that</text><text start=\"1009.69\" dur=\"0.95\">frequency band.</text><text start=\"1010.64\" dur=\"1.41\">This is a plot of--</text><text start=\"1012.05\" dur=\"2.27\">for those you who are\nfamiliar with it--</text><text start=\"1014.32\" dur=\"2.18\">the area under the curve from\nthe receiver operating</text><text start=\"1016.5\" dur=\"3.41\">curve for this predictor.</text><text start=\"1019.91\" dur=\"2.35\">And we found a particular diagnostic\nfrequency that was</text><text start=\"1022.26\" dur=\"1.71\">actually very useful.</text><text start=\"1023.97\" dur=\"2.75\">And once we developed this on DISPERSE,\nwe took another set of</text><text start=\"1026.72\" dur=\"1.79\">thousands of patients--</text><text start=\"1028.51\" dur=\"2.109\">the MERLIN TIMI-36 trial.</text><text start=\"1030.619\" dur=\"3.871\">Again, this was a trial that compared\na drug called Ranolazine to placebo.</text><text start=\"1034.49\" dur=\"2.629\">But for the purposes of this, we were\nreally interested in just the patients</text><text start=\"1037.119\" dur=\"1.97\">who didn&amp;#39;t get a drug.</text><text start=\"1039.089\" dur=\"1.891\">All of these patients, again,\nhad heart attacks.</text><text start=\"1040.98\" dur=\"1.68\">All of the them wore Holter\nmonitors to record the</text><text start=\"1042.66\" dur=\"1.58\">electrocardiographic signals.</text><text start=\"1044.24\" dur=\"0.55\">Some died.</text><text start=\"1044.79\" dur=\"0.63\">Some didn&amp;#39;t.</text><text start=\"1045.42\" dur=\"2.929\">And we wanted to see if this metric that\nwas developed on some other data</text><text start=\"1048.349\" dur=\"4.641\">set could be used to predict who\nwould die in this data set.</text><text start=\"1052.99\" dur=\"5.74\">And sure enough, if you compute the\nMorphologic Distance Time Series, you</text><text start=\"1058.73\" dur=\"3.31\">sum the power with a particular\nfrequency band, and you get a number</text><text start=\"1062.04\" dur=\"1.31\">for each patient.</text><text start=\"1063.35\" dur=\"2.66\">Those patients that have high numbers\nhave lots of variability to the</text><text start=\"1066.01\" dur=\"1.48\">underlying signal.</text><text start=\"1067.49\" dur=\"2.44\">And those are the patients\nthat we call high risk.</text><text start=\"1069.93\" dur=\"3.13\">Those patients that have a low\nvalue for this measure, we</text><text start=\"1073.06\" dur=\"1.73\">say are at low risk.</text><text start=\"1074.79\" dur=\"3.9\">And if you look here, this is called\nthe Kaplan-Meier Curve.</text><text start=\"1078.69\" dur=\"4.01\">And this is the percent of people\nwho died over time over the</text><text start=\"1082.7\" dur=\"1.77\">span of about a year.</text><text start=\"1084.47\" dur=\"4.78\">The red is a death rate for patients\nwho the algorithms</text><text start=\"1089.25\" dur=\"1.47\">says are at high risk.</text><text start=\"1090.72\" dur=\"4.14\">And this is the death rate for patients\nthat we say had low risk.</text><text start=\"1094.86\" dur=\"5.76\">So what you see is that, sure enough,\nif the algorithm says that you have</text><text start=\"1100.62\" dur=\"3.9\">lots of variability in\nelectrocardiographic signal, you&amp;#39;re at</text><text start=\"1104.52\" dur=\"3.37\">a threefold increased risk of death.</text><text start=\"1107.89\" dur=\"2.87\">And this is a P value which shows\nthat these differences--</text><text start=\"1110.76\" dur=\"3.7\">the statement here that&amp;#39;s important\nis that this is statistically</text><text start=\"1114.46\" dur=\"1.46\">significant.</text><text start=\"1115.92\" dur=\"1.8\">So this is really not by chance.</text><text start=\"1117.72\" dur=\"1.52\">There&amp;#39;s something really here.</text><text start=\"1119.24\" dur=\"3.11\">And even if you look at different\nsubgroups of patients-- so if you look</text><text start=\"1122.35\" dur=\"3.07\">at patients who are mature-- those\nare greater than 65, those that</text><text start=\"1125.42\" dur=\"1.43\">are less than 65--</text><text start=\"1126.85\" dur=\"4.825\">in all these groups, if the algorithm\nsays that you have lots of variability</text><text start=\"1131.675\" dur=\"2.685\">to the underlying electrocardiographic\nsignal, you are at an increased risk</text><text start=\"1134.36\" dur=\"4.03\">of death, even a fourfold risk of death\nif you don&amp;#39;t have high blood</text><text start=\"1138.39\" dur=\"3.69\">pressure, threefold risk of death\nif you do, and so forth.</text><text start=\"1142.08\" dur=\"5.41\">So it works in all patient populations\nthat we&amp;#39;ve looked at thus far.</text><text start=\"1147.49\" dur=\"2.36\">And if you look at this and you\ncompare this to other sorts of</text><text start=\"1149.85\" dur=\"3.97\">metrics, other sorts of things that\nexist in the literature for predicting</text><text start=\"1153.82\" dur=\"2.2\">who&amp;#39;s at high risk of death\nand who isn&amp;#39;t--</text><text start=\"1156.02\" dur=\"4.82\">measures called heart rate variability,\ndeceleration capacity,</text><text start=\"1160.84\" dur=\"3.41\">and so forth, as well as other metrics\nthat are used in clinical practice--</text><text start=\"1164.25\" dur=\"4.11\">of the electrocardiograph measures, the\nmorphologic variability does quite</text><text start=\"1168.36\" dur=\"2.98\">well in terms of the hazard ratios.</text><text start=\"1171.34\" dur=\"4.74\">So it says that you&amp;#39;re about a twofold\nincreased risk even after you control</text><text start=\"1176.08\" dur=\"2.14\">for all of these other metrics.</text><text start=\"1178.22\" dur=\"4.76\">So it provides added value relative\nto these other metrics.</text><text start=\"1182.98\" dur=\"3.02\">And you look at the ones-- and we&amp;#39;ve\njust pointed out a few here that are</text><text start=\"1186\" dur=\"3.98\">used in clinical practice to show that\nit is on par and it provides added</text><text start=\"1189.98\" dur=\"3.12\">information to these other known things\nthat are used to quantify</text><text start=\"1193.1\" dur=\"1.42\">patients&amp;#39; risk.</text><text start=\"1194.52\" dur=\"5.14\">So in conclusion, I think the one\nupshot to get from here is that</text><text start=\"1199.66\" dur=\"3.54\">electrocardiographic information\nis easy to obtain and it</text><text start=\"1203.2\" dur=\"1.14\">has prognostic value.</text><text start=\"1204.34\" dur=\"2.47\">It just requires sophisticated\ntools to do so.</text><text start=\"1206.81\" dur=\"1.6\">So one method--</text><text start=\"1208.41\" dur=\"2.68\">to talk about this in a\nbroader framework--</text><text start=\"1211.09\" dur=\"3.13\">we want to get information about a\npatient, evaluate the patient using</text><text start=\"1214.22\" dur=\"2.545\">current and past information,\nand choose an intervention.</text><text start=\"1216.765\" dur=\"3.395\">In clinical cardiology, as in many areas\nof medicine, this is typically</text><text start=\"1220.16\" dur=\"1.11\">the paradigm that&amp;#39;s followed.</text><text start=\"1221.27\" dur=\"2.68\">And you perform an intervention that&amp;#39;s\ngoing to affect the patient.</text><text start=\"1223.95\" dur=\"3.34\">Now, evaluation of the patient\nis perhaps the weakest link.</text><text start=\"1227.29\" dur=\"3.13\">And by evaluation, I mean looking at\nthe patient and trying to determine</text><text start=\"1230.42\" dur=\"3.39\">whether that patient is in trouble or\nnot, getting sense of how sick that</text><text start=\"1233.81\" dur=\"1.01\">patient is.</text><text start=\"1234.82\" dur=\"2.06\">And techniques from electrical\nengineering, computer science,</text><text start=\"1236.88\" dur=\"3.75\">medicine, and physics and such\ncan help in this endeavor.</text><text start=\"1240.63\" dur=\"1.99\">So one other thing--</text><text start=\"1242.62\" dur=\"2.9\">there exists a lot of information\nin physiologic signals that&amp;#39;s</text><text start=\"1245.52\" dur=\"4.34\">unappreciated, physiologic signals that\nare cheap and easy to obtain, and</text><text start=\"1249.86\" dur=\"4.06\">can be gathered in a lot\nof different settings.</text><text start=\"1253.92\" dur=\"4\">So we believe that by gathering all of\nthis information, you can make better</text><text start=\"1257.92\" dur=\"3.44\">inferences about patients so that you\ncan identify those patients who are at</text><text start=\"1261.36\" dur=\"4.01\">high risk of having adverse events\nand treat them accordingly.</text><text start=\"1265.37\" dur=\"1.25\">Thank you.</text><text start=\"1266.62\" dur=\"0.53\"></text></transcript>\n", "O74Bw-NcCkY": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.15\"></text><text start=\"1.15\" dur=\"2.53\">ERIC GRIMSON: Let&amp;#39;s visualize\nwhat merge sort does.</text><text start=\"3.68\" dur=\"3.06\">The basic idea is we&amp;#39;re going to keep\nsplitting the list down into smaller</text><text start=\"6.74\" dur=\"3.64\">and smaller pieces until we get to\nbasically, a list of one element each.</text><text start=\"10.38\" dur=\"2.76\">And then we&amp;#39;re going to start\nrecursively merging things together,</text><text start=\"13.14\" dur=\"3.39\">taking two sorted lists and simply\nlooking at the first element of each</text><text start=\"16.53\" dur=\"2.99\">list to decide which is the next one\nto go into the merged list that&amp;#39;s</text><text start=\"19.52\" dur=\"1.5\">going to be sorted.</text><text start=\"21.02\" dur=\"3.2\">So if we start off with a list of\nelements like what&amp;#39;s shown here, in</text><text start=\"24.22\" dur=\"2.41\">the first stage we&amp;#39;re going to\nsplit it into two parts.</text><text start=\"26.63\" dur=\"3.06\">And actually, we would do this\nrecursively first with the front part,</text><text start=\"29.69\" dur=\"0.74\">and then the back part.</text><text start=\"30.43\" dur=\"1.63\">But I&amp;#39;m going to show it in parallel.</text><text start=\"32.06\" dur=\"4.14\">And we&amp;#39;ll keep splitting it until we get\ndown to lists of just two elements</text><text start=\"36.2\" dur=\"4.18\">each, such as for example shown here\nwhere I&amp;#39;ve got two one element lists.</text><text start=\"40.38\" dur=\"3.34\">At this stage, I can start merging by\nlooking at each element, and putting</text><text start=\"43.72\" dur=\"3.31\">the smallest element first, followed\nby the next element.</text><text start=\"47.03\" dur=\"4.02\">I then look at the next list, and again,\nthese are two lists of one</text><text start=\"51.05\" dur=\"0.67\">element each.</text><text start=\"51.72\" dur=\"3.25\">So I can once more look at each element\nto decide how to put the</text><text start=\"54.97\" dur=\"2.83\">smallest element up first, and\nthen the next element.</text><text start=\"57.8\" dur=\"3.77\">Now we can see where the real impact\ncomes in, because given now two sorted</text><text start=\"61.57\" dur=\"4.29\">lists, again the merge says looking at\nthese two lists, check the first</text><text start=\"65.86\" dur=\"3.66\">element of each to decide which is\nsmallest, and put it at the front of</text><text start=\"69.52\" dur=\"2.79\">the list, followed by the next smallest\nelement, followed by the next</text><text start=\"72.31\" dur=\"3.03\">smallest element followed by\nthe next smallest element.</text><text start=\"75.34\" dur=\"1.73\">Now I have a sorted list.</text><text start=\"77.07\" dur=\"2.72\">Let me move that over, and I\ncan now go and do the same</text><text start=\"79.79\" dur=\"1.62\">thing with these lists.</text><text start=\"81.41\" dur=\"2.21\">I&amp;#39;m going to skip some steps,\nbut basically that will</text><text start=\"83.62\" dur=\"1.52\">reduce it to this stage.</text><text start=\"85.14\" dur=\"3.17\">And then the final stage, I could then\nmerge this one by first comparing</text><text start=\"88.31\" dur=\"3.01\">these two elements, moving the smallest\none to the front, and so on.</text><text start=\"91.32\" dur=\"1.25\"></text></transcript>\n", "BXfWJbn8gKQ": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.29\"></text><text start=\"1.29\" dur=\"2.85\">PROFESSOR: Here&amp;#39;s some Python code\nthat will let us test the greedy</text><text start=\"4.14\" dur=\"3.16\">algorithm on the burglar&amp;#39;s problem.</text><text start=\"7.3\" dur=\"5.3\">We define an item class, which will\nlet us quickly hold all the</text><text start=\"12.6\" dur=\"5.34\">information for an individual item, the\nname its value, its weight, along</text><text start=\"17.94\" dur=\"4.95\">with a routine that will let us print\nout the contents of a knapsack in a</text><text start=\"22.89\" dur=\"1.35\">pretty fashion.</text><text start=\"24.24\" dur=\"3.52\">We have a simple little helper function\nthat creates a list of all</text><text start=\"27.76\" dur=\"5.75\">the items in the house, the clock, the\npainting, the radio, the vase, the</text><text start=\"33.51\" dur=\"4.99\">book, and the computer, along with their\nassociated weights and values.</text><text start=\"38.5\" dur=\"3.2\">The greedy algorithm itself\nis pretty straightforward.</text><text start=\"41.7\" dur=\"3.77\">It starts with an empty knapsack\nand an empty total weight.</text><text start=\"45.47\" dur=\"6.46\">It then sorts the items in the order of\nthe metric that we want to supply.</text><text start=\"51.93\" dur=\"6.24\">So we&amp;#39;ll actually pass in a function,\nwhich will return the item&amp;#39;s metric, a</text><text start=\"58.17\" dur=\"2.63\">particular item&amp;#39;s metric, and\nwe&amp;#39;ll use that as the key</text><text start=\"60.8\" dur=\"1.88\">function here in the sort.</text><text start=\"62.68\" dur=\"5.48\">So every time the sorted routine wants\nto figure out the sort order of an</text><text start=\"68.16\" dur=\"3.76\">item, it will call the corresponding\nkey function--</text><text start=\"71.92\" dur=\"2.45\">We&amp;#39;re passing in the item\nis an argument.</text><text start=\"74.37\" dur=\"3.17\">And that&amp;#39;s the value that we&amp;#39;ll\nuse to sort of the items</text><text start=\"77.54\" dur=\"2.09\">into the correct order.</text><text start=\"79.63\" dur=\"3.89\">And finally we ask for our sort in\nreverse order so we get the biggest</text><text start=\"83.52\" dur=\"1.44\">metric first.</text><text start=\"84.96\" dur=\"1.06\">So it works pretty simply.</text><text start=\"86.02\" dur=\"4.36\">Once we have the sorted list of items,\nwe go through the list one by one.</text><text start=\"90.38\" dur=\"2.64\">We check the items, get\nthe item&amp;#39;s weight.</text><text start=\"93.02\" dur=\"3.52\">We add the item&amp;#39;s weight to\nthe total weight that&amp;#39;s</text><text start=\"96.54\" dur=\"1.33\">currently in the knapsack.</text><text start=\"97.87\" dur=\"3.56\">And if there&amp;#39;s still room in the\nknapsack, if that sum is less than the</text><text start=\"101.43\" dur=\"3.69\">maximum weight than that knapsack can\nhold, we append the item to the</text><text start=\"105.12\" dur=\"3.11\">knapsack and increase our accounting\nof total weight.</text><text start=\"108.23\" dur=\"3.49\">And when we&amp;#39;re all done we return\nthe contents of the knapsack</text><text start=\"111.72\" dur=\"1.88\">as a list of items.</text><text start=\"113.6\" dur=\"3.37\">Here are our three metric function is\nthat we wanted to try, the burglar</text><text start=\"116.97\" dur=\"0.49\">thought of.</text><text start=\"117.46\" dur=\"6.29\">He was going to try a metric which was\nthe item&amp;#39;s value, a metric, which in a</text><text start=\"123.75\" dur=\"1.82\">sense, was the item&amp;#39;s lightness--</text><text start=\"125.57\" dur=\"3.96\">What we wanted to do was come up with a\nmetric that would sort the lightest</text><text start=\"129.53\" dur=\"0.79\">item first.</text><text start=\"130.32\" dur=\"2.51\">And if we do that, if we do\nthe inverse of the weight,</text><text start=\"132.83\" dur=\"1.09\">that&amp;#39;s what we&amp;#39;ll get.</text><text start=\"133.92\" dur=\"3.81\">And finally a metric that uses the\nratio of the item&amp;#39;s value to the</text><text start=\"137.73\" dur=\"1.24\">item&amp;#39;s weight.</text><text start=\"138.97\" dur=\"2.46\">Finally, we have our usual\ntest functions.</text><text start=\"141.43\" dur=\"5.98\">We have testGreedy, whose job it is\nsimply to run the greedy algorithm</text><text start=\"147.41\" dur=\"6.23\">once using the specified metric and to\nprint out the total number of items</text><text start=\"153.64\" dur=\"4.04\">and their values in the knapsack\nthat gets built using</text><text start=\"157.68\" dur=\"1.64\">that particular metric.</text><text start=\"159.32\" dur=\"5.16\">And then finally, testGreedys allows us\nto test all three of the metrics.</text><text start=\"164.48\" dur=\"5.34\">So let&amp;#39;s save that out and then give\nit to run and see what we get.</text><text start=\"169.82\" dur=\"0.8\">And here we go.</text><text start=\"170.62\" dur=\"2.73\">There&amp;#39;s the items we want to choose\nfrom right at the top.</text><text start=\"173.35\" dur=\"6.08\">So if we look here, we see that if we\nuse the value metric, the total value</text><text start=\"179.43\" dur=\"3.87\">of the items in the bag is 200, and\nsort of what we expect because the</text><text start=\"183.3\" dur=\"4.02\">most valuable item is the computer,\nwhich is the only thing in the</text><text start=\"187.32\" dur=\"3.95\">knapsack, when we use the value metric\nbecause it has a weight of 20 which</text><text start=\"191.27\" dur=\"2.85\">fills up the entire knapsack.</text><text start=\"194.12\" dur=\"4.96\">If we use as a metric the weight and we\ntry to do the min weight first, we</text><text start=\"199.08\" dur=\"3.31\">get a total value of objects of 170.</text><text start=\"202.39\" dur=\"2.94\">And you can see here the items\nare being chosen in order</text><text start=\"205.33\" dur=\"1.72\">of increasing weight.</text><text start=\"207.05\" dur=\"5.08\">And finally if we use the ratio of the\nitem&amp;#39;s value to the item&amp;#39;s weight, we</text><text start=\"212.13\" dur=\"2.05\">end up with 255.</text></transcript>\n", "yeJJdf1sf7Y": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.22\"></text><text start=\"1.22\" dur=\"2.73\">Eric Grimson: We&amp;#39;re now going to take\nthe ideas we just saw and look at the</text><text start=\"3.95\" dur=\"2.74\">different instances of different\ncomplexity classes.</text><text start=\"6.69\" dur=\"1.499\">So what are those ideas?</text><text start=\"8.189\" dur=\"3.241\">Given an algorithm, we want to count\nwhat are the number of basic steps</text><text start=\"11.43\" dur=\"1.07\">it&amp;#39;s going to need.</text><text start=\"12.5\" dur=\"3.16\">We want to count those as a function\nof the size of the problem.</text><text start=\"15.66\" dur=\"2.67\">And we&amp;#39;re only going to worry about the\ncase when the size of that problem</text><text start=\"18.33\" dur=\"1.17\">tends to get large.</text><text start=\"19.5\" dur=\"2.98\">What is the asymptotic behavior\nas that happens?</text><text start=\"22.48\" dur=\"3.92\">We&amp;#39;re going to see, in this segment,\na set of examples of different</text><text start=\"26.4\" dur=\"1.62\">complexity classes.</text><text start=\"28.02\" dur=\"3.23\">We&amp;#39;re going to see constant time\nalgorithms, referred to as O(1).</text><text start=\"31.25\" dur=\"1.33\">We&amp;#39;re going to see logarithmic.</text><text start=\"32.58\" dur=\"1.48\">We&amp;#39;re going to see linear.</text><text start=\"34.06\" dur=\"2.9\">We&amp;#39;re going to see log-linear,\nor n times log n.</text><text start=\"36.96\" dur=\"2.93\">We&amp;#39;re going to see polynomial, and\nwe&amp;#39;re going to see exponential</text><text start=\"39.89\" dur=\"1.15\">algorithms.</text><text start=\"41.04\" dur=\"2.81\">Let me say a word about those last two\nbecause they are actually different,</text><text start=\"43.85\" dur=\"2.1\">and sometimes people get\nconfused by them.</text><text start=\"45.95\" dur=\"3.92\">The polynomial time algorithm is\nsomething whose number of steps</text><text start=\"49.87\" dur=\"4.73\">asymptotically is n, where n is the size\nof the problem, to some constant.</text><text start=\"54.6\" dur=\"4.21\">So a quadratic algorithm is n^2,\na cubic algorithm is n^3.</text><text start=\"58.81\" dur=\"3.35\">An exponential algorithm is one where\nthe number of basic steps</text><text start=\"62.16\" dur=\"3.6\">asymptotically is described\nby some constant to n,</text><text start=\"65.76\" dur=\"1.43\">the size of the problem.</text><text start=\"67.19\" dur=\"2.01\">So that could be 2^n.</text><text start=\"69.2\" dur=\"3.84\">And keep in mind that n^2 grows in\na very different manner than 2^n,</text><text start=\"73.04\" dur=\"1.41\">as we change n.</text><text start=\"74.45\" dur=\"5.11\">And in fact, this sequence is really\nlisted in roughly the order of</text><text start=\"79.56\" dur=\"1.97\">increasing complexity.</text><text start=\"81.53\" dur=\"2.37\">Each one of these classes describes\na slightly more</text><text start=\"83.9\" dur=\"2.09\">complex kind of algorithm.</text><text start=\"85.99\" dur=\"3.08\">And as a consequence, we tend\nto want to be as high up in</text><text start=\"89.07\" dur=\"1.7\">this chain as we can.</text><text start=\"90.77\" dur=\"2.92\">If I have two algorithms that solve\nthe same problem, one of them is</text><text start=\"93.69\" dur=\"3.46\">quadratic, the other one is linear,\nI want the linear one because it&amp;#39;s</text><text start=\"97.15\" dur=\"2.04\">almost certainly going\nto be more efficient.</text><text start=\"99.19\" dur=\"4.74\">If I&amp;#39;ve got an algorithm that is\nlog-linear, n log n, and another one</text><text start=\"103.93\" dur=\"2.72\">that is just logarithmic, I want\nthe log one because it&amp;#39;s</text><text start=\"106.65\" dur=\"1.82\">always going to be better.</text><text start=\"108.47\" dur=\"3.73\">Finally, we tend to be a little sloppy\nin this subject in terms of how we use</text><text start=\"112.2\" dur=\"0.81\">these terms.</text><text start=\"113.01\" dur=\"5.36\">Really what we&amp;#39;re talking about here are\nupper bounds on the complexity of</text><text start=\"118.37\" dur=\"2.36\">the algorithm, on the number of steps.</text><text start=\"120.73\" dur=\"2.22\">In many cases, it&amp;#39;s an actual\ntight bound, it&amp;#39;s both an</text><text start=\"122.95\" dur=\"1.42\">upper and lower bound.</text><text start=\"124.37\" dur=\"2.53\">But if we&amp;#39;re not certain about an\nalgorithm, we may end up saying, for</text><text start=\"126.9\" dur=\"5.13\">example, that it&amp;#39;s exponential because\nthe best analysis we can do says that</text><text start=\"132.03\" dur=\"3.35\">the running time may involve an\nexponential number of steps.</text><text start=\"135.38\" dur=\"2.95\">It may be possible to show that it&amp;#39;s\nless than that, but if we can&amp;#39;t</text><text start=\"138.33\" dur=\"3.58\">actually do it, we&amp;#39;re going to use the\nupper bound to capture the class.</text><text start=\"141.91\" dur=\"3.07\">With that, let&amp;#39;s start looking\nat some examples.</text><text start=\"144.98\" dur=\"2.58\">So the first class is\nconstant complexity.</text><text start=\"147.56\" dur=\"3.05\">That says the complexity is independent\nof the size of the input.</text><text start=\"150.61\" dur=\"3.14\">This is great, and unfortunately, there\naren&amp;#39;t very many interesting</text><text start=\"153.75\" dur=\"1.82\">algorithms in this class.</text><text start=\"155.57\" dur=\"3.33\">It says, literally, that the number of\nsteps doesn&amp;#39;t depend on the size of</text><text start=\"158.9\" dur=\"0.91\">the algorithm.</text><text start=\"159.81\" dur=\"3.58\">Now while pieces of code may satisfy\nthat, it&amp;#39;s not common for an entire</text><text start=\"163.39\" dur=\"2.32\">algorithm to have that property.</text><text start=\"165.71\" dur=\"1.88\">If you&amp;#39;ve got one, though,\nstill great.</text><text start=\"167.59\" dur=\"3.41\">And note, by the way, that even in\nthis case, you can have loops or</text><text start=\"171\" dur=\"3.12\">recursive calls, it&amp;#39;s just that the\nnumber of iterations, through the</text><text start=\"174.12\" dur=\"3.38\">loop, or the number of recursive\ncalls, is independent of</text><text start=\"177.5\" dur=\"1.82\">the size of the input.</text><text start=\"179.32\" dur=\"0.23\">All right.</text><text start=\"179.55\" dur=\"3.24\">Let&amp;#39;s move on, though, to\nmore interesting ones.</text><text start=\"182.79\" dur=\"1.84\">Logarithmic algorithms.</text><text start=\"184.63\" dur=\"4.52\">Here, the complexity of the algorithm,\nthe number of steps, grows as the log</text><text start=\"189.15\" dur=\"2.21\">of the size of one of its inputs.</text><text start=\"191.36\" dur=\"3.91\">And you&amp;#39;ve actually seen a great example\nof this, bisection search.</text><text start=\"195.27\" dur=\"1.52\">Remember when we were looking\nfor square roots?</text><text start=\"196.79\" dur=\"3.31\">We said start between 0 and\nx, take the midpoint.</text><text start=\"200.1\" dur=\"1.54\">If that&amp;#39;s close enough, we&amp;#39;re done.</text><text start=\"201.64\" dur=\"3.03\">If not, depending on the size, either\nwe&amp;#39;re going to look only in the bottom</text><text start=\"204.67\" dur=\"1.9\">range or in the top range.</text><text start=\"206.57\" dur=\"2.09\">Again, we take the input,\nthe midpoint.</text><text start=\"208.66\" dur=\"2.33\">And either we look at the bottom\nrange or the top range.</text><text start=\"210.99\" dur=\"4.58\">At each step we&amp;#39;re cutting down the set\nof possibilities of which we need</text><text start=\"215.57\" dur=\"2.23\">to look by a factor of two.</text><text start=\"217.8\" dur=\"4.69\">And that cutting down a problem in\nhalf, constantly, is a great</text><text start=\"222.49\" dur=\"2.16\">indication of, in fact, a\nlogarithmic algorithm.</text><text start=\"224.65\" dur=\"2.44\">So bisection search is\na great example.</text><text start=\"227.09\" dur=\"2.07\">You can do the same idea,\nby the way, on a list.</text><text start=\"229.16\" dur=\"4.37\">If I have a list of elements that are\nin order, and I want to decide if an</text><text start=\"233.53\" dur=\"2.84\">element&amp;#39;s in that list,\nuse the same idea.</text><text start=\"236.37\" dur=\"1.24\">Look at the midpoint.</text><text start=\"237.61\" dur=\"1.32\">If I happen to get lucky, I&amp;#39;m done.</text><text start=\"238.93\" dur=\"2.93\">If not, based on the size, either I&amp;#39;ll\njust look at the bottom half of the</text><text start=\"241.86\" dur=\"1.83\">list or the top half of the list.</text><text start=\"243.69\" dur=\"5.09\">So that kind of property is indicative\nof a logarithmic search, the</text><text start=\"248.78\" dur=\"1.51\">logarithmic algorithm.</text><text start=\"250.29\" dur=\"4.12\">Now, let me show you an example of a\npiece of code doing this, just to show</text><text start=\"254.41\" dur=\"2.46\">you how we would reason about it\nto decide whether something&amp;#39;s</text><text start=\"256.87\" dur=\"1.76\">logarithmic.</text><text start=\"258.63\" dur=\"5.05\">This is a little piece of code to\nconvert an integer into a string.</text><text start=\"263.68\" dur=\"2.73\">Don&amp;#39;t worry about the fact that Python\nwill do this for you automatically.</text><text start=\"266.41\" dur=\"3.76\">Let&amp;#39;s just see how the algorithm\nshows logarithmic complexity.</text><text start=\"270.17\" dur=\"2.29\">I&amp;#39;m going to set up an internal\nvariable called digits.</text><text start=\"272.46\" dur=\"2.38\">It&amp;#39;s just the string\nof all the digits.</text><text start=\"274.84\" dur=\"2.84\">And then given i, if it&amp;#39;s 0, I&amp;#39;m done.</text><text start=\"277.68\" dur=\"2.12\">If not, what am I going to do?</text><text start=\"279.8\" dur=\"2.47\">I&amp;#39;m going to set up a little\nvariable result that&amp;#39;s</text><text start=\"282.27\" dur=\"1.7\">initially an empty string.</text><text start=\"283.97\" dur=\"4.2\">And then I&amp;#39;m going to take that integer,\ni, and the first thing I&amp;#39;m</text><text start=\"288.17\" dur=\"3.7\">going to do is I&amp;#39;m going to take the\nremainder, which basically pulls off</text><text start=\"291.87\" dur=\"1.41\">the bottom digit.</text><text start=\"293.28\" dur=\"4.06\">I&amp;#39;m going to index in two digits to\nfind the corresponding string</text><text start=\"297.34\" dur=\"1.47\">representation.</text><text start=\"298.81\" dur=\"3.26\">And then I&amp;#39;m just going to add that to\nthe front of result, putting it in the</text><text start=\"302.07\" dur=\"2.86\">right spot on the thing\nthat I&amp;#39;m accumulating.</text><text start=\"304.93\" dur=\"2.69\">And having done that, I&amp;#39;m going to\ndivide i by 10, which throws away the</text><text start=\"307.62\" dur=\"3.89\">bottom digit, shifts everything to\nthe left, or to the right rather.</text><text start=\"311.51\" dur=\"1.7\">Then I keep doing that.</text><text start=\"313.21\" dur=\"3.35\">Now if I were to count steps here,\nwhat really matters is that loop.</text><text start=\"316.56\" dur=\"1.66\">And in fact, let&amp;#39;s look at that.</text><text start=\"318.22\" dur=\"2.26\">I only have to look at the\nloop because there are no</text><text start=\"320.48\" dur=\"1.34\">function calls here.</text><text start=\"321.82\" dur=\"2.54\">And within the loop, how\nmany steps do I have?</text><text start=\"324.36\" dur=\"1.66\">Well, I&amp;#39;ve got the remainder,\nthat&amp;#39;s 1.</text><text start=\"326.02\" dur=\"1.39\">I&amp;#39;ve got the add, that&amp;#39;s 2.</text><text start=\"327.41\" dur=\"1.71\">I&amp;#39;ve got the look up, that&amp;#39;s 3.</text><text start=\"329.12\" dur=\"1.955\">I&amp;#39;ve got the assignment, that&amp;#39;s 4.</text><text start=\"331.075\" dur=\"2.925\">I&amp;#39;ve got the division, which is 5,\nand the assignment, which is 6.</text><text start=\"334\" dur=\"3.01\">So there are 6 steps within the loop.</text><text start=\"337.01\" dur=\"1.5\">But it doesn&amp;#39;t depend\non the size of i.</text><text start=\"338.51\" dur=\"2.59\">It&amp;#39;s always the same thing,\n6 steps within the loop.</text><text start=\"341.1\" dur=\"3.86\">So really what matters is how many\ntimes do I go through the loop?</text><text start=\"344.96\" dur=\"2.54\">And for that, I have to think\nabout, so what is changing?</text><text start=\"347.5\" dur=\"4.21\">And what&amp;#39;s changing is the iteration\nvariable, or the loop variable i.</text><text start=\"351.71\" dur=\"4.06\">And at each stage through the\nloop, it gets divided by 10.</text><text start=\"355.77\" dur=\"4.3\">So how many times can I divide i\nby 10 before I get down to a</text><text start=\"360.07\" dur=\"1.45\">single digit case?</text><text start=\"361.52\" dur=\"4.76\">And the answer is a logarithmic\ntime, so this is O(log(n)).</text><text start=\"366.28\" dur=\"1.07\">Now let&amp;#39;s be careful here.</text><text start=\"367.35\" dur=\"1.43\">You might say, well, wait a minute.</text><text start=\"368.78\" dur=\"5\">Why doesn&amp;#39;t this depend on the size of\nthe integer that I pass in there?</text><text start=\"373.78\" dur=\"3.7\">And it depends, not on the size,\nbut on the number of digits.</text><text start=\"377.48\" dur=\"3.03\">Another way of saying it is-- if I have\nsome number of steps to solve a</text><text start=\"380.51\" dur=\"4.09\">problem with one version of i, and I\ntake 10 times i, I&amp;#39;m only going to go</text><text start=\"384.6\" dur=\"2.41\">through the loop one more time.</text><text start=\"387.01\" dur=\"3.09\">It&amp;#39;s the number of digits, not\nthe size of the problem.</text><text start=\"390.1\" dur=\"4.64\">And that&amp;#39;s why it&amp;#39;s logarithmic in the\nsize of i because that log gives me</text><text start=\"394.74\" dur=\"1.69\">the number of digits.</text><text start=\"396.43\" dur=\"2.03\">How about linear algorithms?</text><text start=\"398.46\" dur=\"2.64\">Well, searching a list where I just walk\nthrough it in order is a great</text><text start=\"401.1\" dur=\"2\">example of a linear time algorithm.</text><text start=\"403.1\" dur=\"2.41\">In the worst case, I&amp;#39;ve got to look\nat every element of the list.</text><text start=\"405.51\" dur=\"2.57\">So it&amp;#39;s linear in the\nsize of the problem.</text><text start=\"408.08\" dur=\"4.35\">Here&amp;#39;s another example of a linear\nalgorithm, and I want to use this to</text><text start=\"412.43\" dur=\"1.75\">look at how we measure it.</text><text start=\"414.18\" dur=\"1.94\">Suppose I&amp;#39;ve got a string\nthat&amp;#39;s assumed to be</text><text start=\"416.12\" dur=\"1.31\">composed of decimal digits.</text><text start=\"417.43\" dur=\"3.05\">I want to add up the characters of\nthe string to get a number out.</text><text start=\"420.48\" dur=\"2.03\">A trivial little thing to do,\nbut let&amp;#39;s look at what the</text><text start=\"422.51\" dur=\"1.29\">code might look like.</text><text start=\"423.8\" dur=\"4.17\">I&amp;#39;m going to start off with some\ninitial, internal variable called val.</text><text start=\"427.97\" dur=\"3.19\">And for each character in the string,\nI&amp;#39;m going to convert it into an</text><text start=\"431.16\" dur=\"3.86\">integer and add it into what I&amp;#39;ve\ngot in val in order to return</text><text start=\"435.02\" dur=\"1.58\">that overall value.</text><text start=\"436.6\" dur=\"3.15\">I don&amp;#39;t care about the computation, what\nI care about is the complexity,</text><text start=\"439.75\" dur=\"2.02\">and the complexity is pretty\nstraightforward.</text><text start=\"441.77\" dur=\"3.99\">I have to go through each element\nin the string once.</text><text start=\"445.76\" dur=\"4.05\">So this is linear in the\nlength of the string.</text><text start=\"449.81\" dur=\"2.88\">Within the loop, it&amp;#39;s a constant\nnumber of things to do.</text><text start=\"452.69\" dur=\"3.47\">So all I care about is how many times do\nI go through the loop, and that is</text><text start=\"456.16\" dur=\"2.02\">linear in the size of the problem.</text><text start=\"458.18\" dur=\"2.93\">So far we&amp;#39;ve seen examples where we&amp;#39;re\njust looking at things that have</text><text start=\"461.11\" dur=\"1.92\">loops, and we&amp;#39;re worrying about\nhow many times does it</text><text start=\"463.03\" dur=\"1.3\">go through the loop.</text><text start=\"464.33\" dur=\"3.24\">We can also have a complexity that\ndepends on the number of recursive</text><text start=\"467.57\" dur=\"3.2\">calls, and our good friend factorial\nis a great example.</text><text start=\"470.77\" dur=\"3\">There&amp;#39;s the code for factorial,\nyou&amp;#39;ve seen it before.</text><text start=\"473.77\" dur=\"2.77\">If I think about the\ncomplexity of this,</text><text start=\"476.54\" dur=\"3.93\">I could say, well, within the actual\ncode itself, there&amp;#39;s only a constant</text><text start=\"480.47\" dur=\"1.47\">number of things to do.</text><text start=\"481.94\" dur=\"1.46\">I&amp;#39;m doing a test.</text><text start=\"483.4\" dur=\"2.05\">If the test is true, I&amp;#39;m just\nreturning something.</text><text start=\"485.45\" dur=\"4.26\">Otherwise, I&amp;#39;m doing a multiplication\nand a recursive call, but in the body</text><text start=\"489.71\" dur=\"3.15\">of the procedure itself, it&amp;#39;s\na constant number of things.</text><text start=\"492.86\" dur=\"4.37\">So what matters here is, how many\ntimes do I call factorial?</text><text start=\"497.23\" dur=\"4.87\">And we can see that on each recursive\ncall, we&amp;#39;re reducing n by 1.</text><text start=\"502.1\" dur=\"3.91\">So I&amp;#39;ve got to do fact(n), then\nfact(n-1), then fact(n-2).</text><text start=\"506.01\" dur=\"3.55\">And you can see that I&amp;#39;m going\nto call factorial n times.</text><text start=\"509.56\" dur=\"4.229\">Within each call, complexity&amp;#39;s constant\nso, therefore, this is linear</text><text start=\"513.789\" dur=\"2.611\">in the size of the problem because\nthere&amp;#39;s a linear number</text><text start=\"516.4\" dur=\"1.36\">of recursive calls.</text><text start=\"517.76\" dur=\"3.85\">Algorithms with this kind of template\nare typically linear, and that&amp;#39;s a</text><text start=\"521.61\" dur=\"1.63\">handy thing to know.</text><text start=\"523.24\" dur=\"1.24\">What about log-linear?</text><text start=\"524.48\" dur=\"2.68\">Well, a lot of practical algorithms\nfall into this category.</text><text start=\"527.16\" dur=\"2.14\">They&amp;#39;re n times the logarithm of n.</text><text start=\"529.3\" dur=\"2.3\">In fact, an example we&amp;#39;re going to\nsee later on is one of the most</text><text start=\"531.6\" dur=\"4.1\">commonly-used log-linear algorithms,\nwhich is an algorithm called merge</text><text start=\"535.7\" dur=\"3.31\">sort, which is a way of sorting a list\nto get it into increasing or</text><text start=\"539.01\" dur=\"1.38\">decreasing order.</text><text start=\"540.39\" dur=\"2.39\">I just want to highlight that we\nhave algorithms of this sort.</text><text start=\"542.78\" dur=\"2.76\">We&amp;#39;re going to come back to merge sort\nlater on to see how we can do</text><text start=\"545.54\" dur=\"2.57\">reasoning to find these\nkinds of examples.</text><text start=\"548.11\" dur=\"2.12\">So let&amp;#39;s move on to polynomial.</text><text start=\"550.23\" dur=\"2.8\">Polynomial complexity says I&amp;#39;ve\ngot an algorithm that grows</text><text start=\"553.03\" dur=\"1.93\">as n to some power.</text><text start=\"554.96\" dur=\"3.26\">And most common polynomial algorithms\nare, in fact, quadratic.</text><text start=\"558.22\" dur=\"3.02\">They grow as n squared or\nsome parameter, some</text><text start=\"561.24\" dur=\"1.77\">size parameter, squared.</text><text start=\"563.01\" dur=\"4.09\">And these commonly occur when we have\nnested loops or when we have</text><text start=\"567.1\" dur=\"2.7\">particular kinds of recursive\nfunction calls.</text><text start=\"569.8\" dur=\"5.03\">So let&amp;#39;s look at an example, and this\nis probably a good example of a very</text><text start=\"574.83\" dur=\"5.2\">common kind of quadratic complexity.</text><text start=\"580.03\" dur=\"2.92\">This is a little algorithm that&amp;#39;s going\nto decide whether, given two</text><text start=\"582.95\" dur=\"2.02\">lists, one of them is a\nsubset of the other.</text><text start=\"584.97\" dur=\"3.26\">And that says-- is every\nelement of L1 in L2?</text><text start=\"588.23\" dur=\"2.06\">The code to do this we can\ndescribe pretty quickly.</text><text start=\"590.29\" dur=\"2.78\">We&amp;#39;re going to loop over\nevery element in L1.</text><text start=\"593.07\" dur=\"2.94\">We&amp;#39;re going to set up, each time through\nthe loop, to say a variable</text><text start=\"596.01\" dur=\"1.89\">match is equal to false.</text><text start=\"597.9\" dur=\"0.93\">And what am I going to do?</text><text start=\"598.83\" dur=\"3.59\">I&amp;#39;m going to loop over every element in\nL2, or almost every element in L2,</text><text start=\"602.42\" dur=\"2.91\">looking to see if I find\none that&amp;#39;s equal to e1.</text><text start=\"605.33\" dur=\"5.09\">If I find something that&amp;#39;s equal, I\nset the flag to True and I break.</text><text start=\"610.42\" dur=\"4.43\">And what that break does is it throws\nus out of this loop, this interior</text><text start=\"614.85\" dur=\"6\">loop, which means I can then skip down\nto, basically, this step here.</text><text start=\"620.85\" dur=\"3.65\">And if, in fact, matched is\nFalse, I return False.</text><text start=\"624.5\" dur=\"3.05\">But if it&amp;#39;s True, then I simply\nskip back around.</text><text start=\"627.55\" dur=\"0.32\">OK?</text><text start=\"627.87\" dur=\"3.73\">And that then says I&amp;#39;m going to\nbasically run through this loop until,</text><text start=\"631.6\" dur=\"3.1\">either I go all the way through, in\nwhich case matched is False because I</text><text start=\"634.7\" dur=\"4.85\">didn&amp;#39;t find an instance of it, or I do\nfind an instance, and I break out of</text><text start=\"639.55\" dur=\"2.862\">it and I set a value that returns.</text><text start=\"642.412\" dur=\"0.758\">All right.</text><text start=\"643.17\" dur=\"4.13\">I&amp;#39;m going to do that over all versions\nof this outer loop, e1.</text><text start=\"647.3\" dur=\"4.57\">So let&amp;#39;s look at an example to see how\nwe&amp;#39;d measure the complexity here.</text><text start=\"651.87\" dur=\"5.04\">The outer loop is executed the length\nof L1 times, so however long L1 is,</text><text start=\"656.91\" dur=\"2.64\">I&amp;#39;m going to do that outer\nloop that many times.</text><text start=\"659.55\" dur=\"2.7\">Each iteration is going to execute\nthe inner loop up to the</text><text start=\"662.25\" dur=\"2.01\">length of L2 times.</text><text start=\"664.26\" dur=\"2.28\">I have to go all the way through\nL2, the length of L2.</text><text start=\"666.54\" dur=\"2.07\">If I find something earlier,\nI break out of it.</text><text start=\"668.61\" dur=\"4.3\">So, in the worst case, this has a\ncomplexity that&amp;#39;s the product of</text><text start=\"672.91\" dur=\"3.24\">length of L1 times length of L2.</text><text start=\"676.15\" dur=\"1.39\">Now, that depends on L1 and L2.</text><text start=\"677.54\" dur=\"1.37\">What Is the actual worst case?</text><text start=\"678.91\" dur=\"2.91\">Well, the worst case is when they&amp;#39;re\nboth of the same size.</text><text start=\"681.82\" dur=\"2.51\">L1 can&amp;#39;t be bigger than L2 or\nit wouldn&amp;#39;t be a subset.</text><text start=\"684.33\" dur=\"3.81\">When they&amp;#39;re of the same size, but none\nof the elements of L1 are in L2,</text><text start=\"688.14\" dur=\"3.43\">then I&amp;#39;m going to run through this\nloop the full number of times.</text><text start=\"691.57\" dur=\"2.31\">I&amp;#39;m going to run through it L2 times.</text><text start=\"693.88\" dur=\"3.44\">In that case, the complexity\nis quadratic.</text><text start=\"697.32\" dur=\"3.35\">It&amp;#39;s the length of L1 squared.</text><text start=\"700.67\" dur=\"1.69\">It&amp;#39;s quadratic in that size.</text><text start=\"702.36\" dur=\"2.03\">Let&amp;#39;s look at another example.</text><text start=\"704.39\" dur=\"2.33\">Here&amp;#39;s another example involving two\nlists, and I want to find the</text><text start=\"706.72\" dur=\"1.57\">intersection of those two lists.</text><text start=\"708.29\" dur=\"2.98\">And here I want to show how, having\nmultiple loops, we&amp;#39;re going to focus</text><text start=\"711.27\" dur=\"2.18\">in on the one with the\nworst complexity.</text><text start=\"713.45\" dur=\"4.05\">The idea here is I want to take\ntwo lists, L1 and L2.</text><text start=\"717.5\" dur=\"2.26\">I&amp;#39;m going to set up an initial temporary\nlist, and then I&amp;#39;m going to</text><text start=\"719.76\" dur=\"2.19\">loop over everything in L1.</text><text start=\"721.95\" dur=\"3.01\">And for every element of L2,\nI&amp;#39;m going to look to see--</text><text start=\"724.96\" dur=\"3.68\">is it equal to the thing\nI&amp;#39;m looking for in L1?</text><text start=\"728.64\" dur=\"2.466\">And if it is, I&amp;#39;m going\nto add it into tmp.</text><text start=\"731.106\" dur=\"3.104\">Now because L2 might have multiple\ninstances of something, I</text><text start=\"734.21\" dur=\"0.78\">want to keep going.</text><text start=\"734.99\" dur=\"3.95\">So even if I find an instance of e1\nin L2, I&amp;#39;m going to go all the way</text><text start=\"738.94\" dur=\"3.82\">through L2 and gather each of\nthose instances together.</text><text start=\"742.76\" dur=\"2.48\">I&amp;#39;m going to do that over all\npossible versions of e1.</text><text start=\"745.24\" dur=\"2.83\">And when I&amp;#39;m done, I need to now\nstrip away the duplicates.</text><text start=\"748.07\" dur=\"3.58\">So I&amp;#39;m going to set up another\ntemporary variable, res.</text><text start=\"751.65\" dur=\"3.93\">And then I&amp;#39;m going to loop over that\nlist I just built, tmp, and basically</text><text start=\"755.58\" dur=\"4.14\">say-- if e is not in res, then\nI&amp;#39;m going to add it in.</text><text start=\"759.72\" dur=\"2.9\">But if I&amp;#39;ve already got a version of it\nthere, I&amp;#39;m simply going to ignore</text><text start=\"762.62\" dur=\"0.8\">it and keep going.</text><text start=\"763.42\" dur=\"4.23\">So that, ultimately, it&amp;#39;ll return a list\nof unique elements that are those</text><text start=\"767.65\" dur=\"2.19\">that appear in both lists.</text><text start=\"769.84\" dur=\"2.64\">Again, what&amp;#39;s the complexity here?</text><text start=\"772.48\" dur=\"5.88\">Well to see this, we can note that this\nfirst nested loop up here is very</text><text start=\"778.36\" dur=\"2.04\">similar to what we saw before.</text><text start=\"780.4\" dur=\"3.96\">It&amp;#39;s going to take the product of the\nlength of L1 and the length of L2</text><text start=\"784.36\" dur=\"1.31\">number of steps.</text><text start=\"785.67\" dur=\"4.1\">And, in fact, it&amp;#39;s going to do exactly\nthat because I go through L2 in full</text><text start=\"789.77\" dur=\"1.61\">each time around.</text><text start=\"791.38\" dur=\"2.21\">What about this loop?</text><text start=\"793.59\" dur=\"2.49\">There&amp;#39;s a second loop there,\nI have to think about that.</text><text start=\"796.08\" dur=\"4.04\">Well, that second loop takes, at most,\nthe length of L1 number of steps</text><text start=\"800.12\" dur=\"2.79\">because I&amp;#39;m simply going\nthrough that list once.</text><text start=\"802.91\" dur=\"1.97\">So I&amp;#39;ve now got two terms.</text><text start=\"804.88\" dur=\"2.66\">I&amp;#39;ve got a quadratic term, and\nI&amp;#39;ve got a linear term.</text><text start=\"807.54\" dur=\"3.33\">And, of course, we know that the\nquadratic term really dominates here.</text><text start=\"810.87\" dur=\"0.76\">It&amp;#39;s the big one.</text><text start=\"811.63\" dur=\"1.46\">It&amp;#39;s the one that really matters.</text><text start=\"813.09\" dur=\"4.26\">So I can ignore the second term, and\nbasically say that this is of order</text><text start=\"817.35\" dur=\"1.73\">length of L1 times length of L2.</text><text start=\"819.08\" dur=\"1.69\">So it&amp;#39;s quadratic.</text><text start=\"820.77\" dur=\"2.34\">The point of this is I need\nto look at the loops.</text><text start=\"823.11\" dur=\"4.29\">If I have different loops, or multiple\nloops, within a piece of code, I need</text><text start=\"827.4\" dur=\"2.55\">to find the one that has\nthe higher complexity.</text><text start=\"829.95\" dur=\"3.65\">And that will tend to be the nested\none, as it was right there.</text><text start=\"833.6\" dur=\"1.33\">OK.</text><text start=\"834.93\" dur=\"2.17\">What about exponential algorithms?</text><text start=\"837.1\" dur=\"2.13\">What characterizes an exponential\nalgorithm?</text><text start=\"839.23\" dur=\"1.92\">And an exponential algorithm,\nby the way, is usually a</text><text start=\"841.15\" dur=\"1.92\">very expensive algorithm.</text><text start=\"843.07\" dur=\"3.21\">Well, it&amp;#39;s typically a case when we&amp;#39;ve\ngot recursive functions where there&amp;#39;s</text><text start=\"846.28\" dur=\"3.78\">more than one recursive call for\neach step of the problem.</text><text start=\"850.06\" dur=\"1.39\">We saw an example earlier.</text><text start=\"851.45\" dur=\"2.72\">Towers of Hanoi has two\nrecursive calls.</text><text start=\"854.17\" dur=\"3.81\">I moved a smaller stack once, this moved\nthe bottom case and then moves</text><text start=\"857.98\" dur=\"0.95\">the smallest stack again.</text><text start=\"858.93\" dur=\"3.44\">So I had two recursive calls per\neach size of the problem.</text><text start=\"862.37\" dur=\"3.22\">And that is characteristic of\nan exponential problem.</text><text start=\"865.59\" dur=\"3.71\">But unfortunately, many important\nproblems are inherently exponential.</text><text start=\"869.3\" dur=\"3.34\">And that&amp;#39;s really unfortunate because\nthe costs can be very high.</text><text start=\"872.64\" dur=\"2.37\">And one of the things we want to see is\nthat&amp;#39;s going to lead us to consider</text><text start=\"875.01\" dur=\"4.19\">finding approximate solutions in more\nefficient time, rather than trying to</text><text start=\"879.2\" dur=\"3.59\">do something that deals with\nfinding the exact solution.</text><text start=\"882.79\" dur=\"1.84\">Nonetheless, let&amp;#39;s do one\nlast example here.</text><text start=\"884.63\" dur=\"6.31\">Let&amp;#39;s look at an example of something\nthat is exponential in complexity, and</text><text start=\"890.94\" dur=\"2.36\">look at how we would actually\nmeasure it.</text><text start=\"893.3\" dur=\"3.725\">So this is an example where I&amp;#39;ve got a\nlist of the elements, for example, it</text><text start=\"897.025\" dur=\"0.815\">might be a list of numbers.</text><text start=\"897.84\" dur=\"4.78\">And I want to generate another list of\nall of the subsets of that list.</text><text start=\"902.62\" dur=\"4.29\">So if the list is one and two, I&amp;#39;d like\na new list as output that has the</text><text start=\"906.91\" dur=\"3.93\">empty list, the list of one, the list\nof two, an the list of one and two.</text><text start=\"910.84\" dur=\"3.44\">So all of the different possible subsets\nor combinations of elements</text><text start=\"914.28\" dur=\"1.35\">out of that list.</text><text start=\"915.63\" dur=\"2.79\">Again, I&amp;#39;m not as worried about it, but\nI want to see how the complexity</text><text start=\"918.42\" dur=\"0.33\">goes there.</text><text start=\"918.75\" dur=\"1.47\">So here&amp;#39;s what the code does.</text><text start=\"920.22\" dur=\"4.3\">I&amp;#39;m going to set up a place\nto store my answer.</text><text start=\"924.52\" dur=\"4.68\">If there&amp;#39;s nothing in the list, if the\nlist is of length 0, then I want to</text><text start=\"929.2\" dur=\"4.72\">return a list that is just\na list of the empty list.</text><text start=\"933.92\" dur=\"4.2\">So there&amp;#39;s this funky-looking thing\nright here with two square brackets.</text><text start=\"938.12\" dur=\"4.15\">So it is a list whose only element is\nthe empty list because that&amp;#39;s the only</text><text start=\"942.27\" dur=\"3.07\">possible subset of a list of length 0.</text><text start=\"945.34\" dur=\"2.14\">Otherwise, how am I going\nto solve this?</text><text start=\"947.48\" dur=\"1.99\">Well, I&amp;#39;m going to use\nthat recursive idea.</text><text start=\"949.47\" dur=\"2.74\">I&amp;#39;m going to first say, let&amp;#39;s take\neverything in the list but the last</text><text start=\"952.21\" dur=\"3.66\">element, and get all the possible\nsubsets of that.</text><text start=\"955.87\" dur=\"3.44\">I&amp;#39;m going to call that\nsmaller, right here.</text><text start=\"959.31\" dur=\"4.2\">I&amp;#39;m going to get a list of just\nthe last element right</text><text start=\"963.51\" dur=\"1.38\">there, which is extra.</text><text start=\"964.89\" dur=\"1.1\">And here&amp;#39;s what I want to do.</text><text start=\"965.99\" dur=\"3.94\">I want to take all of the things in\nsmaller, and add that last element to</text><text start=\"969.93\" dur=\"3.55\">them because those are all subsets\nof the longer list.</text><text start=\"973.48\" dur=\"4.97\">And then I want to take all of the\ninstances, all of the subsets without</text><text start=\"978.45\" dur=\"4.42\">the last element, and all of the subsets\nwith the last element, and add</text><text start=\"982.87\" dur=\"0.99\">them together.</text><text start=\"983.86\" dur=\"1.12\">And I&amp;#39;m done.</text><text start=\"984.98\" dur=\"3.92\">So there&amp;#39;s a little loop where I take\neverything in the smaller one, and I</text><text start=\"988.9\" dur=\"2.79\">add that last element on to it.</text><text start=\"991.69\" dur=\"1.38\">And I create those into new.</text><text start=\"993.07\" dur=\"2.77\">And then, finally, I create a flattened\nversion, which is all of the</text><text start=\"995.84\" dur=\"3.27\">versions without the last element, all\nof the versions with the last element,</text><text start=\"999.11\" dur=\"1.41\">and I&amp;#39;m done.</text><text start=\"1000.52\" dur=\"2.26\">You can go code this up and try to\nsee that it does the right thing.</text><text start=\"1002.78\" dur=\"3.63\">What I&amp;#39;m really interested\nin is the complexity.</text><text start=\"1006.41\" dur=\"3\">So to measure that, I&amp;#39;m going to\nassume that append is actually</text><text start=\"1009.41\" dur=\"0.58\">constant time.</text><text start=\"1009.99\" dur=\"3.08\">In fact, it is, given the implementation\ninside of Python, but</text><text start=\"1013.07\" dur=\"2.93\">since it&amp;#39;s not a basic element, I\nneed to make that assumption.</text><text start=\"1016\" dur=\"2.04\">And now what do I want to look at?</text><text start=\"1018.04\" dur=\"1.35\">What&amp;#39;s the time?</text><text start=\"1019.39\" dur=\"3.02\">Well, the amount of time it&amp;#39;s going to\ntake here is basically going to be the</text><text start=\"1022.41\" dur=\"4.429\">amount of time it takes to solve this\nproblem, the smaller size problem,</text><text start=\"1026.839\" dur=\"4.471\">plus the amount of time that&amp;#39;s needed to\nmake a copy of all the elements of</text><text start=\"1031.31\" dur=\"2.73\">the smaller problem right there.</text><text start=\"1034.04\" dur=\"0.63\">OK?</text><text start=\"1034.67\" dur=\"2.1\">So how can I get at that?</text><text start=\"1036.77\" dur=\"3.579\">Well, it&amp;#39;s important to think about\nthe size of that smaller problem.</text><text start=\"1040.349\" dur=\"6.97\">And, in particular, we know that, for a\nset of size k, there are 2^k cases.</text><text start=\"1047.319\" dur=\"3.511\">There are 2^k different possible\nsubsets inside of there.</text><text start=\"1050.83\" dur=\"4.81\">So if I want to solve a problem of size\nn, I&amp;#39;m going to need to solve a</text><text start=\"1055.64\" dur=\"6.06\">problem of size n - 1, and there are\n2^n possible solutions there.</text><text start=\"1061.7\" dur=\"4.41\">And then, in the problem of size n - 2,\nthere are going to be 2^(n-1) and</text><text start=\"1066.11\" dur=\"3.62\">so on, all the way down to 2^0.</text><text start=\"1069.73\" dur=\"3.4\">Now we can actually solve this, but a\nlittle bit of math actually tells me</text><text start=\"1073.13\" dur=\"3.45\">that that sum, 2^0 + 2^1 + ...</text><text start=\"1076.58\" dur=\"2.98\">+ 2^(n-1), is 2^n.</text><text start=\"1079.56\" dur=\"5.27\">And so the math tells us that this\nis a problem of size 2^n.</text><text start=\"1084.83\" dur=\"3.38\">This is important because it looks like\nthere&amp;#39;s just one recursive call</text><text start=\"1088.21\" dur=\"2.19\">at each step, and there is.</text><text start=\"1090.4\" dur=\"5.75\">But it&amp;#39;s on a problem whose size\nis growing exponentially.</text><text start=\"1096.15\" dur=\"3.22\">And that, therefore, when I come down\nhere, and I want to walk through that</text><text start=\"1099.37\" dur=\"5.38\">list, basically adding all of them in,\nthat loop there has a size that&amp;#39;s</text><text start=\"1104.75\" dur=\"3.85\">O(2^n), for whatever the length\nof the list L is.</text><text start=\"1108.6\" dur=\"3.44\">And as a consequence, this is an\nexponential-sized algorithm.</text><text start=\"1112.04\" dur=\"0.47\">OK.</text><text start=\"1112.51\" dur=\"1.55\">So what does that give us?</text><text start=\"1114.06\" dur=\"4.58\">It says we&amp;#39;ve now seen a sequence of\ndifferent instances of classes of</text><text start=\"1118.64\" dur=\"0.92\">algorithms.</text><text start=\"1119.56\" dur=\"3.09\">We&amp;#39;ve seen characteristics or templates\nof each one of them.</text><text start=\"1122.65\" dur=\"3.95\">And we&amp;#39;ve seen, that as we go down this\nlist, they get worse and worse.</text><text start=\"1126.6\" dur=\"2.46\">As we go through the rest of the course,\nwe&amp;#39;re going to see examples of</text><text start=\"1129.06\" dur=\"0.95\">this complexity.</text><text start=\"1130.01\" dur=\"3.43\">But those templates already give you a\nway of getting a sense of what is the</text><text start=\"1133.44\" dur=\"1.79\">complexity of a particular solution.</text><text start=\"1135.23\" dur=\"1.25\"></text></transcript>\n", "lCDWElPHVa4": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.904\"></text><text start=\"0.904\" dur=\"2.856\">ERIC GRIMSON: Now, we&amp;#39;ve seen\nrecursive functions.</text><text start=\"3.76\" dur=\"2.8\">We&amp;#39;ve seen this idea of inductions,\na way of showing that</text><text start=\"6.56\" dur=\"0.84\">these functions work.</text><text start=\"7.4\" dur=\"3.56\">And we&amp;#39;ve seen this notion of recursion\nas breaking a problem down</text><text start=\"10.96\" dur=\"3.56\">into a simpler version of the problem\nplus some other work.</text><text start=\"14.52\" dur=\"1.28\">We&amp;#39;re going to use that tool a lot.</text><text start=\"15.8\" dur=\"3.7\">It&amp;#39;s a powerful tool for taking complex\nproblems and capturing them in</text><text start=\"19.5\" dur=\"1.8\">a way that is easy to think about.</text><text start=\"21.3\" dur=\"1.95\">So let&amp;#39;s look at some examples.</text><text start=\"23.25\" dur=\"3.52\">In the classic example to start\nwith is to compute factorial.</text><text start=\"26.77\" dur=\"4.45\">Factorial in math is written as n\nfollowed by an exclamation point, said</text><text start=\"31.22\" dur=\"1.82\">verbally as n bang.</text><text start=\"33.04\" dur=\"3.72\">And factorial is basically the product\nof the integers from 1 times 2 times 3</text><text start=\"36.76\" dur=\"1.83\">all the way up to n.</text><text start=\"38.59\" dur=\"3.23\">How would we think about solving\nthis recursively?</text><text start=\"41.82\" dur=\"2.42\">Well that&amp;#39;s pretty straightforward,\nright?</text><text start=\"44.24\" dur=\"0.92\">I need a base case.</text><text start=\"45.16\" dur=\"2.73\">A simple case is if n is equal to 1.</text><text start=\"47.89\" dur=\"2.54\">1 multiplied by itself,\nor just 1 is 1.</text><text start=\"50.43\" dur=\"1.37\">That&amp;#39;s simple.</text><text start=\"51.8\" dur=\"4.67\">To get the recursive case, let&amp;#39;s\nuse that same thinking.</text><text start=\"56.47\" dur=\"2.54\">To get the recursive case,\nwhat do I have?</text><text start=\"59.01\" dur=\"1.97\">I want a simpler version\nof the same problem.</text><text start=\"60.98\" dur=\"6.49\">In effect, right there that\nis n minus 1 factorial.</text><text start=\"67.47\" dur=\"5.11\">So recursively I would say if I can get\nn minus 1 factorial, then to get n</text><text start=\"72.58\" dur=\"3.83\">factorial I&amp;#39;d simply take that\nvalue and multiply it by n.</text><text start=\"76.41\" dur=\"3.82\">And that gives me that reduction\nexactly like I saw before.</text><text start=\"80.23\" dur=\"1.21\">Fantastic.</text><text start=\"81.44\" dur=\"3.03\">There&amp;#39;s a recursive definition\nfactorial.</text><text start=\"84.47\" dur=\"2.7\">Let&amp;#39;s capture it in some code.</text><text start=\"87.17\" dur=\"2.89\">And, in fact, to do it let&amp;#39;s do\nboth an iterative version</text><text start=\"90.06\" dur=\"1.68\">and a recursive version.</text><text start=\"91.74\" dur=\"3.62\">So the iterative version of factorial\nhas the form we&amp;#39;d expect.</text><text start=\"95.36\" dur=\"1.26\">I need some state variables.</text><text start=\"96.62\" dur=\"2.91\">One of them is going to be just the\nparameter n that I&amp;#39;m passing in.</text><text start=\"99.53\" dur=\"1.52\">And the other one I&amp;#39;m going\nto call result.</text><text start=\"101.05\" dur=\"3.06\">I need to keep track of the\ncomputation as I go along.</text><text start=\"104.11\" dur=\"3.36\">I&amp;#39;m going to set a result initially to\n1 because I&amp;#39;m going to do successive</text><text start=\"107.47\" dur=\"1.4\">multiplications.</text><text start=\"108.87\" dur=\"4.73\">And then the iterative version basically\nsays if you start off with n</text><text start=\"113.6\" dur=\"3.42\">that&amp;#39;s bigger than my base case, or the\nstopping point, rather, what do I</text><text start=\"117.02\" dur=\"0.51\">want to do?</text><text start=\"117.53\" dur=\"4.18\">I&amp;#39;m going to take my current value\nresult, which is 1, multiply it by n,</text><text start=\"121.71\" dur=\"1.52\">and store it away.</text><text start=\"123.23\" dur=\"1.99\">And then I&amp;#39;m going to reduce n by 1.</text><text start=\"125.22\" dur=\"3.3\">There are those update equations that\nare updating the state variables.</text><text start=\"128.52\" dur=\"2.79\">I go around again, n\nis now one smaller.</text><text start=\"131.31\" dur=\"3.37\">And again, I take the current value\nresult, which at this point was n.</text><text start=\"134.68\" dur=\"2.93\">I multiply it by the new value\nof n, which is n minus 1.</text><text start=\"137.61\" dur=\"1.03\">And I update it.</text><text start=\"138.64\" dur=\"1.83\">I reduce n by 1.</text><text start=\"140.47\" dur=\"0.93\">And I keep doing this.</text><text start=\"141.4\" dur=\"4.03\">And you can see that I want to start\nby taking n, n times n minus 1, n</text><text start=\"145.43\" dur=\"4.19\">times n minus 2, and I&amp;#39;ll keep doing\nthat until I get down to a place where</text><text start=\"149.62\" dur=\"5.13\">n is zero, in which case I stop\nand I return the result.</text><text start=\"154.75\" dur=\"1.43\">Great.</text><text start=\"156.18\" dur=\"2.68\">What about the factorial\nversion recursively?</text><text start=\"158.86\" dur=\"2.7\">Well, factR is nice and crisp.</text><text start=\"161.56\" dur=\"1.34\">Here it is.</text><text start=\"162.9\" dur=\"5.69\">It just says, if n is equal to 1, if\nyou&amp;#39;re in the base case, just return</text><text start=\"168.59\" dur=\"1.15\">that value.</text><text start=\"169.74\" dur=\"2.3\">Here I said return n, I could have said\nreturn 1, because I know it&amp;#39;s</text><text start=\"172.04\" dur=\"1.65\">going to be the same thing.</text><text start=\"173.69\" dur=\"5.45\">Otherwise, get the solution to a\nslightly smaller problem by just</text><text start=\"179.14\" dur=\"5.96\">recursively calling factR, multiply it\nby n, and just return that result.</text><text start=\"185.1\" dur=\"0.86\">Beautiful code.</text><text start=\"185.96\" dur=\"1.51\">Nice and clean and crisp.</text><text start=\"187.47\" dur=\"2.16\">And you can see that it gives\nyou a very clear sense</text><text start=\"189.63\" dur=\"1.85\">of exactly the stages--</text><text start=\"191.48\" dur=\"2.23\">my base case, my recursive case.</text><text start=\"193.71\" dur=\"3.6\">My recursive case is a recursive call\nplus one other operation, which is to</text><text start=\"197.31\" dur=\"1.59\">do multiplication.</text><text start=\"198.9\" dur=\"2.12\">Let&amp;#39;s see if it does the right thing.</text><text start=\"201.02\" dur=\"5.98\">So in IDLE, I&amp;#39;ve got a version of both\npieces of code, then let&amp;#39;s try first</text><text start=\"207\" dur=\"1.07\">theater diversion of factorial.</text><text start=\"208.07\" dur=\"2.73\">And just to be careful, let&amp;#39;s make sure\nit does the right thing on the</text><text start=\"210.8\" dur=\"1.93\">base case, or n is equal to 1.</text><text start=\"212.73\" dur=\"3.12\">If it does then let&amp;#39;s give\nit the bigger one--</text><text start=\"215.85\" dur=\"2.89\">I happen to know that 3 times\n2 times 1 ought to be 6.</text><text start=\"218.74\" dur=\"1.57\">So there we go.</text><text start=\"220.31\" dur=\"4.93\">And if I give something a little bit\nbigger, wow, it actually computes</text><text start=\"225.24\" dur=\"1.38\">factorial of 25.</text><text start=\"226.62\" dur=\"1.8\">Pretty quickly.</text><text start=\"228.42\" dur=\"1.41\">What about recursive version?</text><text start=\"229.83\" dur=\"2.07\">Well let&amp;#39;s test the same ones.</text><text start=\"231.9\" dur=\"2.48\">On 1 it does the right thing.</text><text start=\"234.38\" dur=\"4.39\">On 3 it does the right thing.</text><text start=\"238.77\" dur=\"5.25\">On 25 it does the right thing.</text><text start=\"244.02\" dur=\"2.36\">And you may notice this funny little\nform on the screen there where it&amp;#39;s</text><text start=\"246.38\" dur=\"0.89\">got an L at the end.</text><text start=\"247.27\" dur=\"2.51\">This is just telling us that Python&amp;#39;s\ngot such a big number, it&amp;#39;s</text><text start=\"249.78\" dur=\"2.47\">representing it in what&amp;#39;s\ncalled a large format.</text><text start=\"252.25\" dur=\"0.72\">Don&amp;#39;t worry about it.</text><text start=\"252.97\" dur=\"1.44\">It just says, I got a\nreally big number.</text><text start=\"254.41\" dur=\"1.4\">I gave it back to you.</text><text start=\"255.81\" dur=\"2.56\">So we didn&amp;#39;t look at stepping\nthrough it.</text><text start=\"258.37\" dur=\"0.86\">You can go do that.</text><text start=\"259.23\" dur=\"3.4\">But you can see that the recursive\nversion stops, computes the right</text><text start=\"262.63\" dur=\"4.37\">answer, and the code itself\nis nice and crisp.</text><text start=\"267\" dur=\"1.96\">OK, let&amp;#39;s look at another example.</text><text start=\"268.96\" dur=\"1.25\"></text></transcript>\n", "Zu0qEdz4Tq8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.82\"></text><text start=\"1.82\" dur=\"2.04\">SPEAKER 1: So we now have\nthis notion of iterative</text><text start=\"3.86\" dur=\"1.1\">algorithms.</text><text start=\"4.96\" dur=\"2.8\">Very powerful tool, thinking of\nthings in terms of loops is</text><text start=\"7.76\" dur=\"1.96\">a natural way of thinking\nof problems.</text><text start=\"9.72\" dur=\"2.24\">But there&amp;#39;s another way of\nthinking about problems, and</text><text start=\"11.96\" dur=\"2.93\">let&amp;#39;s go back to that idea of\ndoing multiplication by</text><text start=\"14.89\" dur=\"1.53\">successive additions.</text><text start=\"16.42\" dur=\"2.07\">Here&amp;#39;s a different way of\nthinking about this</text><text start=\"18.49\" dur=\"1.28\">computation.</text><text start=\"19.77\" dur=\"2.77\">This basically says, a times b--\nwell, that&amp;#39;s the same as</text><text start=\"22.54\" dur=\"4.82\">taking b copies of a and\nadding them together.</text><text start=\"27.36\" dur=\"5.1\">But I could also think of that\nas saying, that&amp;#39;s the same as</text><text start=\"32.46\" dur=\"4.86\">taking a and adding it to\nwhatever I get by doing that</text><text start=\"37.32\" dur=\"4.3\">accumulation of b minus\n1 copies of a.</text><text start=\"41.62\" dur=\"2.54\">Now you&amp;#39;re going, oh come on,\nthis is pretty simple.</text><text start=\"44.16\" dur=\"1.52\">You&amp;#39;re just playing\ngames here.</text><text start=\"45.68\" dur=\"1.18\">But I&amp;#39;m not.</text><text start=\"46.86\" dur=\"2.03\">It&amp;#39;s a really important\npoint here.</text><text start=\"48.89\" dur=\"6.69\">I have just reduced this problem\nto a simple operation</text><text start=\"55.58\" dur=\"2.52\">and a simpler version\nof the same problem.</text><text start=\"58.1\" dur=\"4.05\">And in fact, what is this piece\nhere, that is exactly</text><text start=\"62.15\" dur=\"5.01\">the same as a times b minus 1.</text><text start=\"67.16\" dur=\"0.95\">Ah-ha.</text><text start=\"68.11\" dur=\"2.93\">That&amp;#39;s a simpler version\nof the same problem.</text><text start=\"71.04\" dur=\"1.79\">I&amp;#39;ve now thought recursively.</text><text start=\"72.83\" dur=\"1.38\">Sounds like a highfalutin\nterm.</text><text start=\"74.21\" dur=\"0.68\">It&amp;#39;s really not.</text><text start=\"74.89\" dur=\"3.31\">It says, I have taken a problem,\nand I&amp;#39;ve essentially</text><text start=\"78.2\" dur=\"3.82\">said, let me reduce this problem\nto a simpler or easier</text><text start=\"82.02\" dur=\"3.05\">version of the same problem,\nplus some operations</text><text start=\"85.07\" dur=\"1.34\">I know how to do.</text><text start=\"86.41\" dur=\"4.615\">And so I&amp;#39;ve reduced the idea of\nmultiplying a times b into</text><text start=\"91.025\" dur=\"1.355\">a simpler problem.</text><text start=\"92.38\" dur=\"5.84\">Add a to whatever I get by\nmultiplying a times b minus 1.</text><text start=\"98.22\" dur=\"1.02\">OK.</text><text start=\"99.24\" dur=\"2.74\">That sounds nice, but what\ndoes it really mean.</text><text start=\"101.98\" dur=\"4.39\">Well as I said, this is an idea\nof a recursive algorithm.</text><text start=\"106.37\" dur=\"2.59\">And what we do when we think\nabout something recursively,</text><text start=\"108.96\" dur=\"1.35\">is we do two things.</text><text start=\"110.31\" dur=\"2.77\">We first say, how can we reduce\nthis problem to a</text><text start=\"113.08\" dur=\"3.2\">simpler or smaller version of\nthe same problem together with</text><text start=\"116.28\" dur=\"1.27\">some operations I\nknow how to do.</text><text start=\"117.55\" dur=\"2.39\">And that&amp;#39;s what we call\nthe recursive step.</text><text start=\"119.94\" dur=\"1.676\">We just saw that.</text><text start=\"121.616\" dur=\"2.574\">Of course we can&amp;#39;t keep\nunwinding that.</text><text start=\"124.19\" dur=\"2.78\">Eventually we&amp;#39;ve got to stop,\nwe&amp;#39;ve got to ground it out.</text><text start=\"126.97\" dur=\"1.87\">And that&amp;#39;s the second piece.</text><text start=\"128.84\" dur=\"2.33\">And the second piece is, we&amp;#39;re\ngoing to keep thinking about,</text><text start=\"131.17\" dur=\"3.49\">how do we reduce this until we\nreach a case that is simple</text><text start=\"134.66\" dur=\"1.99\">enough we can just solve\nit directly.</text><text start=\"136.65\" dur=\"2.16\">We call that the base case.</text><text start=\"138.81\" dur=\"1.15\">We don&amp;#39;t have to do it\nin this order, we can</text><text start=\"139.96\" dur=\"0.53\">do it either way.</text><text start=\"140.49\" dur=\"1.94\">We can think about, what&amp;#39;s the\nbase case and what&amp;#39;s the</text><text start=\"142.43\" dur=\"1.03\">recursive step.</text><text start=\"143.46\" dur=\"2.42\">But these two pieces\nare important.</text><text start=\"145.88\" dur=\"1.99\">In my case of thinking\nabout multiplication</text><text start=\"147.87\" dur=\"2.44\">then, what do I have.</text><text start=\"150.31\" dur=\"1.54\">What&amp;#39;s the base case.</text><text start=\"151.85\" dur=\"3.07\">I got a couple of choices, but\nan easy one would be to say,</text><text start=\"154.92\" dur=\"3.49\">if b is equal to 1, then\na times 1 is just a.</text><text start=\"158.41\" dur=\"2.9\">So my base case is really\nstraightforward.</text><text start=\"161.31\" dur=\"2.5\">If b is equal to 1, I&amp;#39;m done.</text><text start=\"163.81\" dur=\"3.61\">Otherwise, a recursive case\nis what I just said.</text><text start=\"167.42\" dur=\"6.82\">I&amp;#39;m going to reduce a Mul b into\na plus a Mul b minus 1.</text><text start=\"174.24\" dur=\"1.31\">OK.</text><text start=\"175.55\" dur=\"1.13\">You&amp;#39;re being a little\nskeptical, I&amp;#39;m</text><text start=\"176.68\" dur=\"0.94\">sure, saying, so what.</text><text start=\"177.62\" dur=\"1.55\">So you&amp;#39;ve played some\ngames here.</text><text start=\"179.17\" dur=\"3.21\">But I&amp;#39;ve just described a\nwonderful algorithm for a</text><text start=\"182.38\" dur=\"2.39\">different way of thinking\nabout this computation.</text><text start=\"184.77\" dur=\"3.77\">Because I could capture this\nin a recursive algorithm.</text><text start=\"188.54\" dur=\"2.54\">And let&amp;#39;s do it.</text><text start=\"191.08\" dur=\"2.59\">Here&amp;#39;s the code for a\nrecursive version of</text><text start=\"193.67\" dur=\"1.45\">multiplication.</text><text start=\"195.12\" dur=\"3.96\">And notice it just nicely\nmatches what I just described.</text><text start=\"199.08\" dur=\"4.14\">This says given two values, a\nvalue for a and a value for b,</text><text start=\"203.22\" dur=\"3.1\">check to see if b\nis equal to 1.</text><text start=\"206.32\" dur=\"1.52\">That&amp;#39;s my base case.</text><text start=\"207.84\" dur=\"2.85\">There it is, right\nthere, base case.</text><text start=\"210.69\" dur=\"3.52\">And if it is, just return\nthe value of a.</text><text start=\"214.21\" dur=\"1.93\">Simple computation.</text><text start=\"216.14\" dur=\"5.31\">Otherwise, I&amp;#39;m going to call\nthe same function with a</text><text start=\"221.45\" dur=\"2.01\">simpler argument.</text><text start=\"223.46\" dur=\"4.02\">We could do recursive Mul again\non a and b minus 1, and</text><text start=\"227.48\" dur=\"2.23\">when that computation is done,\nit&amp;#39;s going to get me back a</text><text start=\"229.71\" dur=\"3.9\">value, and I&amp;#39;m going to return\nthat value added to a.</text><text start=\"233.61\" dur=\"2.6\">And there&amp;#39;s my recursive step.</text><text start=\"236.21\" dur=\"1.86\">Nice, simple code.</text><text start=\"238.07\" dur=\"2.25\">Let&amp;#39;s check it out, make sure\nit does the right thing.</text><text start=\"240.32\" dur=\"3.03\">I go over to idle, I&amp;#39;ve got a\ndefinition of that right here,</text><text start=\"243.35\" dur=\"1.26\">and I load it up.</text><text start=\"244.61\" dur=\"1.18\">And let&amp;#39;s try the same thing.</text><text start=\"245.79\" dur=\"2.75\">So if I do recurMul--</text><text start=\"248.54\" dur=\"1.78\">if I can type, which I will--</text><text start=\"250.32\" dur=\"3.14\">Mul three and five.</text><text start=\"253.46\" dur=\"4.49\">OK, and if I do recurMul on 26\nand 35, it&amp;#39;s giving me back</text><text start=\"257.95\" dur=\"1.11\">the same answer.</text><text start=\"259.06\" dur=\"1.79\">And notice it&amp;#39;s also giving\nme an answer.</text><text start=\"260.85\" dur=\"1.64\">Which may be worrying you\nas you look at this</text><text start=\"262.49\" dur=\"2.01\">definition of the code.</text><text start=\"264.5\" dur=\"3.43\">So in the next segment, let&amp;#39;s\nlook to see why does this do</text><text start=\"267.93\" dur=\"0.79\">what it does.</text><text start=\"268.72\" dur=\"2.61\">But the key thing to see here\nis this idea that given a</text><text start=\"271.33\" dur=\"2.94\">computation, I&amp;#39;m going to break\nit down into a simpler</text><text start=\"274.27\" dur=\"2.38\">version of the same computation,\nplus some things</text><text start=\"276.65\" dur=\"2.83\">I know how to do, and I&amp;#39;m going\nto keep unwinding that</text><text start=\"279.48\" dur=\"2.21\">computation until I get\nto a base case--</text><text start=\"281.69\" dur=\"2.08\">something I can solve\ndirectly.</text><text start=\"283.77\" dur=\"1.25\">We&amp;#39;ll do that in the\nnext segment.</text><text start=\"285.02\" dur=\"1.282\"></text></transcript>\n", "f2655NqIYtA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.81\"></text><text start=\"0.81\" dur=\"3.07\">So, we&amp;#39;re ready to start\nthinking about testing.</text><text start=\"3.88\" dur=\"2\">We&amp;#39;ve written a piece of code,\nperhaps several things that</text><text start=\"5.88\" dur=\"1.29\">interact with one another.</text><text start=\"7.17\" dur=\"2.02\">And we&amp;#39;re ready to start checking\nto make sure it really</text><text start=\"9.19\" dur=\"1.7\">does the right thing.</text><text start=\"10.89\" dur=\"2.07\">Our goal, ironically--</text><text start=\"12.96\" dur=\"3.7\">or strangely, if you like-- is\nto show that bugs exist.</text><text start=\"16.66\" dur=\"1.4\">Now you may say, wait a minute.</text><text start=\"18.06\" dur=\"2.72\">Don&amp;#39;t I really want to show that\nthere are no bugs in my code?</text><text start=\"20.78\" dur=\"2.92\">And the answer is, if you could,\nthat would be great.</text><text start=\"23.7\" dur=\"1.73\">But it&amp;#39;s really hard to do.</text><text start=\"25.43\" dur=\"3.29\">It&amp;#39;s often much easier to show that\nthere is something than to show that</text><text start=\"28.72\" dur=\"1.22\">there isn&amp;#39;t something.</text><text start=\"29.94\" dur=\"2.83\">And so while, ideally, we&amp;#39;d like to show\nthat our code is bug-free, what</text><text start=\"32.77\" dur=\"3.68\">we really want to do is try and run\nenough tests to either identify that</text><text start=\"36.45\" dur=\"2.51\">there&amp;#39;s a bug, or convince ourself\nthat there&amp;#39;s a good</text><text start=\"38.96\" dur=\"1.62\">chance there isn&amp;#39;t.</text><text start=\"40.58\" dur=\"2.98\">Why can&amp;#39;t we just show\nthere are no bugs?</text><text start=\"43.56\" dur=\"4.28\">Well, part of it is that it&amp;#39;s often\nimpossible to run all possible checks.</text><text start=\"47.84\" dur=\"2.53\">If I&amp;#39;ve got a numeric function, I\nmight, in fact, actually have</text><text start=\"50.37\" dur=\"3.92\">something that has billions of tests.</text><text start=\"54.29\" dur=\"3.23\">And I don&amp;#39;t really want to spend the\ntime to do all of those tests just to</text><text start=\"57.52\" dur=\"3.89\">show that the code is\ncompletely bug free.</text><text start=\"61.41\" dur=\"1.18\">That&amp;#39;s a slight misstatement.</text><text start=\"62.59\" dur=\"2.479\">If it&amp;#39;s a really crucial piece\nof code, I might do that.</text><text start=\"65.069\" dur=\"4.391\">But in general, I just don&amp;#39;t have the\ntime to run an all possible test.</text><text start=\"69.46\" dur=\"3.487\">There are some formal methods, that is\nmathematically based methods, that can</text><text start=\"72.947\" dur=\"4.233\">sometimes help actually prove\nthat the code is bug free.</text><text start=\"77.18\" dur=\"2.64\">But they usually only work on simple\nkinds of code, and they&amp;#39;re not going</text><text start=\"79.82\" dur=\"1.91\">to be always available to us.</text><text start=\"81.73\" dur=\"3.81\">So, let&amp;#39;s think about how\ndo we do the testing.</text><text start=\"85.54\" dur=\"5.18\">Well, what we want to do is to find a\ncollection of inputs that have a high</text><text start=\"90.72\" dur=\"3.33\">likelihood of revealing bugs, but where\nthe testing is actually going to</text><text start=\"94.05\" dur=\"0.77\">be pretty efficient.</text><text start=\"94.82\" dur=\"1.71\">It&amp;#39;s not going to take a lot of time.</text><text start=\"96.53\" dur=\"1.88\">And this is called a test suite.</text><text start=\"98.41\" dur=\"4\">The idea is that we&amp;#39;re going to\npartition, or divide up the space of</text><text start=\"102.41\" dur=\"3.87\">inputs into subsets that provide\nequivalent information about the</text><text start=\"106.28\" dur=\"1.56\">correctness of the code.</text><text start=\"107.84\" dur=\"0.64\">What does it mean?</text><text start=\"108.48\" dur=\"2.65\">It says if I have a set of possible\ninputs, I&amp;#39;d like to</text><text start=\"111.13\" dur=\"1.5\">break it up into pieces.</text><text start=\"112.63\" dur=\"3.97\">And say, any input from this piece, the\nperformance is going to be pretty</text><text start=\"116.6\" dur=\"3.25\">indicative of the performance of\nother inputs from that piece.</text><text start=\"119.85\" dur=\"1.46\">Any input from this piece--</text><text start=\"121.31\" dur=\"0.68\">same thing.</text><text start=\"121.99\" dur=\"2.6\">Performance is going to be indicative\nof the performance of the things</text><text start=\"124.59\" dur=\"1.58\">inside of that piece.</text><text start=\"126.17\" dur=\"3.79\">And so what we&amp;#39;re going to do is divide\nup the set of all possible</text><text start=\"129.96\" dur=\"4.02\">inputs into a group of subsets with the\nproperty that each element of the</text><text start=\"133.98\" dur=\"3.34\">set is in exactly one subset.</text><text start=\"137.32\" dur=\"2.06\">So, all possible inputs--</text><text start=\"139.38\" dur=\"1.78\">I want to partition them up.</text><text start=\"141.16\" dur=\"3.34\">Once I&amp;#39;ve done that division, I&amp;#39;m going\nto construct a test suite that</text><text start=\"144.5\" dur=\"3.26\">contains one input from each\nelement of the partition.</text><text start=\"147.76\" dur=\"4.29\">From each different piece I&amp;#39;ll select\none input, and then I&amp;#39;ll run the test</text><text start=\"152.05\" dur=\"2.77\">suite on that to see how well it does.</text><text start=\"154.82\" dur=\"2.41\">Let&amp;#39;s look at an example.</text><text start=\"157.23\" dur=\"1.15\">Here&amp;#39;s a little piece of code.</text><text start=\"158.38\" dur=\"3.23\">In fact, I haven&amp;#39;t shown you the code,\nI&amp;#39;ve just shown you the specification.</text><text start=\"161.61\" dur=\"2.52\">Want to say, is x bigger than y.</text><text start=\"164.13\" dur=\"3.52\">And what is bigger does, is it assumes\nthat x and y are integers.</text><text start=\"167.65\" dur=\"4.43\">And it&amp;#39;s going to return true if x\nis less than y, otherwise false.</text><text start=\"172.08\" dur=\"1.63\">What&amp;#39;s the input space?</text><text start=\"173.71\" dur=\"3.49\">On the input space here is\nall pairs of integers.</text><text start=\"177.2\" dur=\"4.66\">Now that&amp;#39;s obviously a really big\nhow might I partition this up?</text><text start=\"181.86\" dur=\"2.86\">Well, I could take advantage of\nthings I know about integers.</text><text start=\"184.72\" dur=\"2.65\">And so, here&amp;#39;s a possible partition.</text><text start=\"187.37\" dur=\"5.59\">I could say, look at one part of the\nspace where both x and y are positive.</text><text start=\"192.96\" dur=\"4.1\">Look at another part of the space where\nx is negative and y is negative.</text><text start=\"197.06\" dur=\"3.96\">And then, one&amp;#39;s positive,\nthe other&amp;#39;s negative.</text><text start=\"201.02\" dur=\"3.87\">And if you think about the plane of\nintegers-- or the set of integers, all</text><text start=\"204.89\" dur=\"0.67\">possible pairs--</text><text start=\"205.56\" dur=\"1.91\">I&amp;#39;m dividing it up.</text><text start=\"207.47\" dur=\"3.3\">Now I have a couple of other special\ncases that I know were unique or</text><text start=\"210.77\" dur=\"1.15\">interesting about integers.</text><text start=\"211.92\" dur=\"5.85\">So, in particular, I can also look at\nthe case where x and y are both zero,</text><text start=\"217.77\" dur=\"6.06\">and then when x is zero but y is not,\nand y is zero but x is not.</text><text start=\"223.83\" dur=\"1.9\">So this is now dividing up the space.</text><text start=\"225.73\" dur=\"3.03\">And notice, I&amp;#39;ve got every\npossible case.</text><text start=\"228.76\" dur=\"0.88\">No, sorry.</text><text start=\"229.64\" dur=\"0.61\">Bad way of saying it.</text><text start=\"230.25\" dur=\"3.57\">I don&amp;#39;t have an example from every\npossible case, but I have taken the</text><text start=\"233.82\" dur=\"4.59\">space and divided it up so that all\npossible tests are covered by one of</text><text start=\"238.41\" dur=\"2.67\">these particular cases.</text><text start=\"241.08\" dur=\"1.12\">OK.</text><text start=\"242.2\" dur=\"1.89\">Now, why?</text><text start=\"244.09\" dur=\"1.572\">Why this partition?</text><text start=\"245.662\" dur=\"1.498\">I could have lots of other choices.</text><text start=\"247.16\" dur=\"2.58\">I might have said, look at one where\nx is prime, and y is not.</text><text start=\"249.74\" dur=\"1.43\">Where y is prime and x is not.</text><text start=\"251.17\" dur=\"2.16\">Where they&amp;#39;re both prime,\nwhere they&amp;#39;re both not.</text><text start=\"253.33\" dur=\"2.21\">That&amp;#39;s also a division of the space.</text><text start=\"255.54\" dur=\"3.239\">But it&amp;#39;s not really relevant, right?</text><text start=\"258.779\" dur=\"4.541\">This is irrelevant to the problem.</text><text start=\"263.32\" dur=\"2.7\">Knowing whether something bigger or not\nis really not going to depend on</text><text start=\"266.02\" dur=\"1.23\">whether it&amp;#39;s prime.</text><text start=\"267.25\" dur=\"3.05\">The division I made was more based\non the idea of what does</text><text start=\"270.3\" dur=\"1.75\">the space look like.</text><text start=\"272.05\" dur=\"4.71\">The second thing I did is that spaces\nof inputs often have some natural</text><text start=\"276.76\" dur=\"1.33\">boundaries.</text><text start=\"278.09\" dur=\"4.72\">Integers are either positive, they&amp;#39;re\nnegative, or they&amp;#39;re zero.</text><text start=\"282.81\" dur=\"0.92\">Ah-hah!</text><text start=\"283.73\" dur=\"2.06\">That&amp;#39;s why I use that partition.</text><text start=\"285.79\" dur=\"3.77\">In fact, I&amp;#39;d broken it up into both\npositive, both negative, one positive,</text><text start=\"289.56\" dur=\"0.93\">one negative.</text><text start=\"290.49\" dur=\"2.73\">And then the cases where\nthings were zero.</text><text start=\"293.22\" dur=\"3.22\">Actually, if you think about it from\nthis perspective, if integers can be</text><text start=\"296.44\" dur=\"3.85\">one of three kinds, shouldn&amp;#39;t\nI have nine cases?</text><text start=\"300.29\" dur=\"2.84\">Three different cases for x, three\ndifferent cases for y, and all the</text><text start=\"303.13\" dur=\"1.67\">combinations of them.</text><text start=\"304.8\" dur=\"1.56\">And the answer is probably, yes.</text><text start=\"306.36\" dur=\"4.95\">And in fact, I could really split this\ncase, where x is zero and y is not</text><text start=\"311.31\" dur=\"5.66\">equal zero, into x is zero, y is\npositive, x is zero, y is negative.</text><text start=\"316.97\" dur=\"1.94\">And the same for the other case.</text><text start=\"318.91\" dur=\"4.56\">And that would in fact, give me the nine\ncases that would make more sense.</text><text start=\"323.47\" dur=\"3.68\">What you see here is an example of\nbreaking up a partition, of built or</text><text start=\"327.15\" dur=\"4.73\">broken up the input space into\ngroups, sets, classes.</text><text start=\"331.88\" dur=\"5.01\">Now what I&amp;#39;m going to do is basically\nuse that to think about how I&amp;#39;m going</text><text start=\"336.89\" dur=\"1.74\">to build a test suite.</text><text start=\"338.63\" dur=\"3.73\">Before I do, though, let&amp;#39;s say, gee,\nwhat if there is no natural partition</text><text start=\"342.36\" dur=\"1.47\">to the input space?</text><text start=\"343.83\" dur=\"1.23\">What can I do?</text><text start=\"345.06\" dur=\"2.14\">Well, a couple of choices.</text><text start=\"347.2\" dur=\"4.71\">One is I could just do random testing,\nthat is I could simply take a bunch of</text><text start=\"351.91\" dur=\"2.15\">examples and keep trying them.</text><text start=\"354.06\" dur=\"2.72\">And use the result that the probability\nthat the code is correct</text><text start=\"356.78\" dur=\"2.01\">increases with the number of trials.</text><text start=\"358.79\" dur=\"2.29\">But really I should be able\nto, in those cases, use</text><text start=\"361.08\" dur=\"1.58\">the code to do better.</text><text start=\"362.66\" dur=\"4.44\">So, in fact, we&amp;#39;re going to split up our\ntesting into two different kinds</text><text start=\"367.1\" dur=\"1.07\">of testing.</text><text start=\"368.17\" dur=\"3.41\">One is going to use heuristics based\non exploring paths through the</text><text start=\"371.58\" dur=\"1.415\">specifications.</text><text start=\"372.995\" dur=\"2.445\">We call that black-box testing.</text><text start=\"375.44\" dur=\"2.87\">The second one is going to use\nheuristics, based on exploring paths</text><text start=\"378.31\" dur=\"1.8\">through the code itself.</text><text start=\"380.11\" dur=\"2.13\">We call that glass box testing.</text><text start=\"382.24\" dur=\"3.73\">And so, we&amp;#39;re going to take now this\nidea of partitioning up the space, and</text><text start=\"385.97\" dur=\"3.61\">couple it with these two ideas to look\nat how we actually build test suites.</text><text start=\"389.58\" dur=\"1.35\"></text></transcript>\n", "sViMNECYhZs": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.1\"></text><text start=\"1.1\" dur=\"2.27\">ERIC GRIMSON: In the last\nsection, we introduced a</text><text start=\"3.37\" dur=\"2.99\">couple concepts in terms of\nwriting programs or scripts.</text><text start=\"6.36\" dur=\"2.67\">We had straight-line programs,\nwhere we had just a linear</text><text start=\"9.03\" dur=\"2.13\">sequence of instructions\nand we executed them 1</text><text start=\"11.16\" dur=\"1.19\">at a time in order.</text><text start=\"12.35\" dur=\"2.93\">And we added the idea of\nbranching, or conditionals,</text><text start=\"15.28\" dur=\"2.73\">where we could do a test, and\ndepending on whether that test</text><text start=\"18.01\" dur=\"3.25\">was true or false, we might skip\nto 1 piece of code or a</text><text start=\"21.26\" dur=\"1.49\">different piece of code.</text><text start=\"22.75\" dur=\"3.54\">But in both cases, we&amp;#39;re doing\neach instruction at most once.</text><text start=\"26.29\" dur=\"2.35\">Useful, but not great.</text><text start=\"28.64\" dur=\"3.02\">To get to the ability to write\nprograms or scripts with</text><text start=\"31.66\" dur=\"3.87\">arbitrary complexity, we need\n1 more key concept, and that</text><text start=\"35.53\" dur=\"3.53\">concept is the idea of being\nable to reuse a piece of code</text><text start=\"39.06\" dur=\"2\">an arbitrary number of times.</text><text start=\"41.06\" dur=\"2.48\">We might have a set of things\nwe want to do once or</text><text start=\"43.54\" dur=\"2.69\">depending on some value, twice,\nor depending on some</text><text start=\"46.23\" dur=\"2.72\">value, 27 times or\n1,000 times.</text><text start=\"48.95\" dur=\"3.11\">And rather than having to copy\nthe code that many times, we&amp;#39;d</text><text start=\"52.06\" dur=\"3.56\">like to be able to have the\ncomputer automatically reuse</text><text start=\"55.62\" dur=\"2.26\">the code as many times\nas desired.</text><text start=\"57.88\" dur=\"2.61\">That notion of iteration is\ngoing to be incredibly</text><text start=\"60.49\" dur=\"2.77\">valuable, and we&amp;#39;re going to\ntalk about some constructs to</text><text start=\"63.26\" dur=\"1.4\">help us make that happen.</text><text start=\"64.66\" dur=\"1.85\">The basic idea, though,\nis straightforward.</text><text start=\"66.51\" dur=\"2.41\">Given that we have some code\nwe&amp;#39;re executing, when we get</text><text start=\"68.92\" dur=\"2.92\">to an iteration loop, which is\nthis chunk right here, we</text><text start=\"71.84\" dur=\"1.62\">start with a test.</text><text start=\"73.46\" dur=\"3.56\">That will be Boolean that will\nreturn either True or False.</text><text start=\"77.02\" dur=\"3.58\">If it&amp;#39;s True, we&amp;#39;re going to go\ndown and execute some set</text><text start=\"80.6\" dur=\"3.09\">of instructions, the body of\nthe loop, and then go back</text><text start=\"83.69\" dur=\"2.56\">around and do the test again.</text><text start=\"86.25\" dur=\"1.2\">And we&amp;#39;ll keep doing that.</text><text start=\"87.45\" dur=\"3.16\">As long as the test is True,\nwe&amp;#39;ll execute that same set of</text><text start=\"90.61\" dur=\"3.91\">instructions in the body over,\nand over, and over, until</text><text start=\"94.52\" dur=\"4.15\">finally, the test is False, in\nwhich case we skip around the</text><text start=\"98.67\" dur=\"4.29\">loop body and pick up the\ncomputation elsewhere.</text><text start=\"102.96\" dur=\"4.17\">This notice allows me, based\non this Boolean test, to be</text><text start=\"107.13\" dur=\"2.79\">able to do the code some\narbitrary number of times, and</text><text start=\"109.92\" dur=\"1.16\">that&amp;#39;s really great.</text><text start=\"111.08\" dur=\"1.46\">Let&amp;#39;s look at an example.</text><text start=\"112.54\" dur=\"2.47\">Here&amp;#39;s a simple example that\nshows that idea, and I want to</text><text start=\"115.01\" dur=\"3.362\">talk about the syntax of the\nconstruct, but also about what</text><text start=\"118.372\" dur=\"1.348\">the example&amp;#39;s going to do.</text><text start=\"119.72\" dur=\"3.04\">This is a simple piece of code\nthat squares a number.</text><text start=\"122.76\" dur=\"1.97\">I want to get x squared, but\nI&amp;#39;m going to do a by just</text><text start=\"124.73\" dur=\"3.899\">successively adding x to itself\nx times, which is of</text><text start=\"128.629\" dur=\"1.671\">course what x squared\nactually does.</text><text start=\"130.3\" dur=\"2.14\">I add x copies together.</text><text start=\"132.44\" dur=\"1.12\">Notice what we&amp;#39;ve got.</text><text start=\"133.56\" dur=\"1.38\">We&amp;#39;re going to set up\nsome value of x.</text><text start=\"134.94\" dur=\"1.61\">I&amp;#39;m going to do a\nbinding there.</text><text start=\"136.55\" dur=\"3.05\">We&amp;#39;re going to bind a variable\nans for answer, which is where</text><text start=\"139.6\" dur=\"3.07\">we&amp;#39;re going to add up all the\ninstances of x to get where we</text><text start=\"142.67\" dur=\"0.63\">want to be.</text><text start=\"143.3\" dur=\"2.4\">And we&amp;#39;re going to need to\nkeep track of how many</text><text start=\"145.7\" dur=\"2.11\">versions of x do we still\nhave to add in.</text><text start=\"147.81\" dur=\"1.81\">So we&amp;#39;re going to set up\nanother variable called</text><text start=\"149.62\" dur=\"2.34\">itersLeft, initially\nbound to x.</text><text start=\"151.96\" dur=\"2.65\">The looping construct, the\niteration construct, we have</text><text start=\"154.61\" dur=\"1.74\">is called a while loop.</text><text start=\"156.35\" dur=\"2.68\">And there&amp;#39;s the key word\nwhile, and it has the</text><text start=\"159.03\" dur=\"1.27\">following property.</text><text start=\"160.3\" dur=\"2.8\">It has a Boolean test-- in this\ncase, we&amp;#39;re checking to</text><text start=\"163.1\" dur=\"2.88\">see whether itersLeft is\nequal to 0 or not--</text><text start=\"165.98\" dur=\"3.82\">followed by a colon, and then\nit has a set of indented</text><text start=\"169.8\" dur=\"2.83\">instructions, which of course,\nare the body of the loop.</text><text start=\"172.63\" dur=\"1.96\">The way the while\nloop works is it</text><text start=\"174.59\" dur=\"2.39\">first tests that Boolean.</text><text start=\"176.98\" dur=\"3.49\">If that Boolean is True,\nitersLeft is not equal to 0 in</text><text start=\"180.47\" dur=\"2.12\">this case, it will then\nexecute each of the</text><text start=\"182.59\" dur=\"1.89\">instructions in the\nbody in sequence.</text><text start=\"184.48\" dur=\"2.69\">And when it gets to the end of\nthat sequence of instructions,</text><text start=\"187.17\" dur=\"3.31\">it&amp;#39;s going to go back up and\nretest the Boolean again.</text><text start=\"190.48\" dur=\"3.85\">So it will cycle through this\ncode multiple times until that</text><text start=\"194.33\" dur=\"2.08\">Boolean is finally False.</text><text start=\"196.41\" dur=\"2.63\">When it is False, it will skip\ndown to the end of the loop,</text><text start=\"199.04\" dur=\"2.81\">which is shown by where the\nindentation stops, and pick up</text><text start=\"201.85\" dur=\"2.29\">the new set of instructions\nand continue.</text><text start=\"204.14\" dur=\"2.72\">So there&amp;#39;s the structure, let&amp;#39;s\nsee if this does the</text><text start=\"206.86\" dur=\"1.02\">right thing.</text><text start=\"207.88\" dur=\"2.37\">Well, here&amp;#39;s my code, and let&amp;#39;s\njust walk through this.</text><text start=\"210.25\" dur=\"1.96\">We won&amp;#39;t run it on idle, we&amp;#39;ll\njust walk through it.</text><text start=\"212.21\" dur=\"3.83\">Initially, x is bound to 3,\nans is bound to 0, and</text><text start=\"216.04\" dur=\"1.56\">itersLeft is bound to 3.</text><text start=\"217.6\" dur=\"4.14\">The while loop says, test to\nsee if this is equal to 0.</text><text start=\"221.74\" dur=\"3.63\">Since it is not equal to 0,\nthe test is True, and</text><text start=\"225.37\" dur=\"2.65\">therefore, I take the current\nvalue of ans, the current</text><text start=\"228.02\" dur=\"4.46\">value of x, add them together,\nand rebind that to ans.</text><text start=\"232.48\" dur=\"3.21\">I then take itersLeft, subtract\none from it, and</text><text start=\"235.69\" dur=\"2.47\">rebind that to itersLeft.</text><text start=\"238.16\" dur=\"3.36\">So I&amp;#39;ve decremented itersLeft,\nand I&amp;#39;ve incremented ans.</text><text start=\"241.52\" dur=\"2.76\">I go back up, and\nagain, I check.</text><text start=\"244.28\" dur=\"1.19\">Is that not equal to 0?</text><text start=\"245.47\" dur=\"1.07\">It is not equal to 0.</text><text start=\"246.54\" dur=\"2.96\">Therefore, I take ans and I take\nx, I add them together,</text><text start=\"249.5\" dur=\"2.91\">and I rebind those to be\nthe new value of ans.</text><text start=\"252.41\" dur=\"1.53\">I change itersLeft by 1.</text><text start=\"253.94\" dur=\"1.61\">That&amp;#39;s my new value there.</text><text start=\"255.55\" dur=\"1.87\">And again, I go back\nthrough the loop.</text><text start=\"257.42\" dur=\"1.359\">That is not equal to 0.</text><text start=\"258.779\" dur=\"3.12\">Well, the test is still True,\nso again, I take ans, I take</text><text start=\"261.899\" dur=\"3.981\">x, add them together, create\nthat to be my new binding for</text><text start=\"265.88\" dur=\"1.73\">ans, which is 9.</text><text start=\"267.61\" dur=\"2.8\">I take itersLeft, subtract 1\nfrom it, there&amp;#39;s my new value</text><text start=\"270.41\" dur=\"1.12\">of itersLeft.</text><text start=\"271.53\" dur=\"1.82\">And again, I go back to\nthe top of the loop.</text><text start=\"273.35\" dur=\"3.95\">At this point, 0 being not\nequal to 0 is False.</text><text start=\"277.3\" dur=\"2.07\">Terrible way of saying it, but\nthat test is no longer True.</text><text start=\"279.37\" dur=\"0.73\">It&amp;#39;s False.</text><text start=\"280.1\" dur=\"3.9\">In which case, I will skip to\nthe end of this loop, and</text><text start=\"284\" dur=\"3.3\">print out that x * x,\nor if you like, 3 *</text><text start=\"287.3\" dur=\"1.56\">3, is equal to 9.</text><text start=\"288.86\" dur=\"1.06\">Cool.</text><text start=\"289.92\" dur=\"2.13\">A little slow, but it\ndoes what I want.</text><text start=\"292.05\" dur=\"4.15\">Notice I have reused this code\nan arbitrary number times.</text><text start=\"296.2\" dur=\"3.06\">And in fact, if I were to change\nx to be something else,</text><text start=\"299.26\" dur=\"1.96\">I will reuse that\npiece of code a</text><text start=\"301.22\" dur=\"1.39\">different number of times.</text><text start=\"302.61\" dur=\"2.09\">There&amp;#39;s my iteration\nthat I really want.</text><text start=\"304.7\" dur=\"1.49\">You can also see some\nproperties of</text><text start=\"306.19\" dur=\"1.31\">an iterative loop.</text><text start=\"307.5\" dur=\"2.84\">First of all, we need to set an\niteration variable outside</text><text start=\"310.34\" dur=\"0.4\">of the loop.</text><text start=\"310.74\" dur=\"3.3\">In this case, it&amp;#39;s\nx and itersLeft.</text><text start=\"314.04\" dur=\"2.61\">Actually, the one I really care\nabout here is itersLeft.</text><text start=\"316.65\" dur=\"2.63\">I also need to test\nthat variable to</text><text start=\"319.28\" dur=\"2.1\">determine when I&amp;#39;m done.</text><text start=\"321.38\" dur=\"2.65\">There&amp;#39;s the use of itersLeft\ninside of the test.</text><text start=\"324.03\" dur=\"2.06\">Now, it could be a simple\ntest, it could be a more</text><text start=\"326.09\" dur=\"2.63\">compound test, but that&amp;#39;s\nbasically what I need to test.</text><text start=\"328.72\" dur=\"3.03\">And finally, I need to be\nchanging that variable inside</text><text start=\"331.75\" dur=\"2.01\">of the loop, right there.</text><text start=\"333.76\" dur=\"2.84\">If I didn&amp;#39;t, then that test\nvalue would never change,</text><text start=\"336.6\" dur=\"2.09\">which means I would never\nstop the loop.</text><text start=\"338.69\" dur=\"1.41\">But there&amp;#39;s a property I need.</text><text start=\"340.1\" dur=\"2.73\">When I set up an iterative loop,\nI need to say what&amp;#39;s the</text><text start=\"342.83\" dur=\"4.13\">variable I&amp;#39;m setting outside,\nhow am I testing it, and am I</text><text start=\"346.96\" dur=\"3.08\">making sure to change it somehow\ninside of the loop in</text><text start=\"350.04\" dur=\"2.89\">order to ensure that I get\nthe pieces that I want.</text><text start=\"352.93\" dur=\"1.48\">So what do we have now?</text><text start=\"354.41\" dur=\"2.51\">Well, that&amp;#39;s a really\nvaluable construct.</text><text start=\"356.92\" dur=\"2.25\">We already saw that branching\nstructures, things like</text><text start=\"359.17\" dur=\"2.65\">conditionals, will let us jump\nto different pieces of code</text><text start=\"361.82\" dur=\"1.95\">based on a test.</text><text start=\"363.77\" dur=\"2.6\">Once we add in the idea of\nlooping over the code, things</text><text start=\"366.37\" dur=\"3.81\">like a while loop, that allows\nus to repeat pieces of code</text><text start=\"370.18\" dur=\"1.36\">until the condition\nis satisfied.</text><text start=\"371.54\" dur=\"3.04\">So it&amp;#39;s a generalization\nof a conditional.</text><text start=\"374.58\" dur=\"2.54\">On simple branching structures,\nwe&amp;#39;ve already said</text><text start=\"377.12\" dur=\"2.58\">that programs like that are\nconstant time, that is, we</text><text start=\"379.7\" dur=\"2.68\">execute each instruction\nat most, once.</text><text start=\"382.38\" dur=\"1.84\">With looping structures, notice</text><text start=\"384.22\" dur=\"1.32\">that things are different.</text><text start=\"385.54\" dur=\"2.23\">Now, the program is going to\ntake an amount of time that</text><text start=\"387.77\" dur=\"3.79\">depends on values of variables\nas well as the amount of code</text><text start=\"391.56\" dur=\"2.95\">or the number of instructions\ninside the loop, because it&amp;#39;s</text><text start=\"394.51\" dur=\"1.86\">going to depend how many times\nwe walk through the loop, and</text><text start=\"396.37\" dur=\"2.17\">that depends on the variable.</text><text start=\"398.54\" dur=\"2.37\">Nonetheless, these loops are\ngoing to be really valuable,</text><text start=\"400.91\" dur=\"1.38\">and we&amp;#39;re going to turn\nto that next.</text><text start=\"402.29\" dur=\"1.25\"></text></transcript>\n", "lcDQ7GqlS-M": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.6\"></text><text start=\"0.6\" dur=\"3.06\">Let&amp;#39;s apply our curve fitting technology\nto the results of another</text><text start=\"3.66\" dur=\"1.18\">experiment.</text><text start=\"4.84\" dur=\"3.32\">What we&amp;#39;re going to do is to\nfire an arrow at a target.</text><text start=\"8.16\" dur=\"4.63\">So as we notch the arrow on the bow\nspring, and we pull the arrow back,</text><text start=\"12.79\" dur=\"4.79\">getting ready to release it, the arms\nof the bow are bending, and this is</text><text start=\"17.58\" dur=\"3.08\">another example of a very\npowerful spring at work.</text><text start=\"20.66\" dur=\"3.36\">And when we release the arrow,\nit will fly to the target.</text><text start=\"24.02\" dur=\"2.35\">And what we&amp;#39;ve done is we&amp;#39;ve taken\na bunch of measurements.</text><text start=\"26.37\" dur=\"5.48\">So as the arrow flies up, and then falls\nback down and hits the target,</text><text start=\"31.85\" dur=\"7.97\">we&amp;#39;re going to be measuring the height\nof the arrow at various times during</text><text start=\"39.82\" dur=\"4.59\">its flight to the target and work\nto fit a curve to that.</text><text start=\"44.41\" dur=\"3.07\">So you can come up with a mathematical\nequation that describes the</text><text start=\"47.48\" dur=\"1.89\">flight of the arrow.</text><text start=\"49.37\" dur=\"4.665\">We&amp;#39;ll also be looking into ways of\nmeasuring how well our curve is</text><text start=\"54.035\" dur=\"1.195\">actually fitting the data.</text><text start=\"55.23\" dur=\"3.32\">Up to now we&amp;#39;ve been sort of eyeballing\nit, which was a good start,</text><text start=\"58.55\" dur=\"3.66\">but we can actually develop some\nsensible mathematical measures that</text><text start=\"62.21\" dur=\"3.61\">will tell us about the\ngoodness of the fit.</text><text start=\"65.82\" dur=\"4.37\">Here&amp;#39;s some Python code that lets us\nexperiment with the data we got from</text><text start=\"70.19\" dur=\"2.45\">firing the arrow with the bow.</text><text start=\"72.64\" dur=\"3.76\">As before, we have a procedure that\nhelps us get the data out of the data</text><text start=\"76.4\" dur=\"3.83\">file and put it into a bunch of lists.</text><text start=\"80.23\" dur=\"5.53\">In this case, what we have is a bunch\nof distances at which we made the</text><text start=\"85.76\" dur=\"4.63\">different measurements, and then for\neach distance, we have the heights at</text><text start=\"90.39\" dur=\"3.66\">that distance from four\nseparate experiments.</text><text start=\"94.05\" dur=\"3.91\">To actually do the curve fitting, here\nwe have tryFits, which is very much</text><text start=\"97.96\" dur=\"3.14\">like the routines we&amp;#39;ve\nwritten before.</text><text start=\"101.1\" dur=\"7.29\">We&amp;#39;re converting the distances which\nwere in yards into feet, and then</text><text start=\"108.39\" dur=\"6.15\">we&amp;#39;re going to process the four\nmeasurements from each of the</text><text start=\"114.54\" dur=\"3.88\">experiments into one average\nmeasurement for the</text><text start=\"118.42\" dur=\"2.14\">height at that distance.</text><text start=\"120.56\" dur=\"4.9\">With that in place, what we can do\nis to go off and plot the actual</text><text start=\"125.46\" dur=\"1.915\">observations, again, as blue circles.</text><text start=\"127.375\" dur=\"4.675\">That&amp;#39;s what that little &amp;quot;bo&amp;quot; means\nthere, is the argument to plot.</text><text start=\"132.05\" dur=\"5.5\">And we&amp;#39;re going to use polyfit as we\nhave before to do a linear fit to see</text><text start=\"137.55\" dur=\"5.13\">if there is a linear relationship\nbetween the distance this arrow has</text><text start=\"142.68\" dur=\"5.01\">flown and its height above the target.</text><text start=\"147.69\" dur=\"1.52\">We&amp;#39;re all set to go.</text><text start=\"149.21\" dur=\"5.27\">Let&amp;#39;s save this out, and then run it,\nand see what the plot looks like.</text><text start=\"154.48\" dur=\"1.7\">So here we have the data.</text><text start=\"156.18\" dur=\"7.48\">You can see it as the arrow flies from\nthe bow over here to the target, and</text><text start=\"163.66\" dur=\"8.05\">the target looks to be about at 1,080\ninches from where it was released.</text><text start=\"171.71\" dur=\"3.93\">You can see it follows a trajectory\nwhere it goes up, and then it comes</text><text start=\"175.64\" dur=\"1.82\">back down again.</text><text start=\"177.46\" dur=\"5.75\">And here&amp;#39;s a linear fit of a line to\nthat data, and it&amp;#39;s probably fair to</text><text start=\"183.21\" dur=\"4.03\">say that the hypothesis that the arrow\ntravels in a straight line from the</text><text start=\"187.24\" dur=\"2.77\">bow to the target is not\na good hypothesis.</text><text start=\"190.01\" dur=\"5.82\">You can just see that this linear fit\nseems to really bear no relationship</text><text start=\"195.83\" dur=\"2.61\">at all to the actual data points.</text><text start=\"198.44\" dur=\"5.37\">So let&amp;#39;s go back to our code, and\nlet&amp;#39;s try a parabolic fit.</text><text start=\"203.81\" dur=\"3.49\">And so, what we&amp;#39;re going to do is to\nlook for a quadratic equation that</text><text start=\"207.3\" dur=\"3.35\">relates the distance to the\naltitude of the arrow.</text><text start=\"210.65\" dur=\"4.17\">So let&amp;#39;s get this code\nback into execution.</text><text start=\"214.82\" dur=\"6.33\">This is just an addition of fitting a\nsecond degree equation to the data,</text><text start=\"221.15\" dur=\"1.49\">and let&amp;#39;s see how that goes.</text><text start=\"222.64\" dur=\"4.89\">So we&amp;#39;re going to save this out, and\nrun it again, and look at the plot.</text><text start=\"227.53\" dur=\"0.83\">And, yes.</text><text start=\"228.36\" dur=\"0.62\">Here we go.</text><text start=\"228.98\" dur=\"5.45\">So this curve here actually looks like\nit fits the data pretty well.</text><text start=\"234.43\" dur=\"3.4\">The jaggedness comes from the fact that\nwe&amp;#39;re just simply plotting the</text><text start=\"237.83\" dur=\"5.1\">parabola only at the data points at\nwhich we actually had measurements.</text><text start=\"242.93\" dur=\"5.33\">It would be possible to plot the\nparabola using many more values.</text><text start=\"248.26\" dur=\"3.1\">Since it&amp;#39;s a mathematical model, we\ncould choose other distances that we</text><text start=\"251.36\" dur=\"1.97\">didn&amp;#39;t make measurements at,\nand then the parabola would</text><text start=\"253.33\" dur=\"1.57\">look much more smooth.</text><text start=\"254.9\" dur=\"2.11\">So that looks like a pretty good fit.</text><text start=\"257.01\" dur=\"2.19\">And so, we&amp;#39;re sort of happy with that.</text><text start=\"259.2\" dur=\"2.5\">Maybe what we should do, though, is to\nthink a little bit about how do we</text><text start=\"261.7\" dur=\"1.42\">measure the goodness of a fit?</text><text start=\"263.12\" dur=\"5.96\">Is there some mathematical analysis we\ncan do that would reveal that the line</text><text start=\"269.08\" dur=\"5.105\">is a lousy predictor of the\nobservations, whereas the parabola is</text><text start=\"274.185\" dur=\"2.635\">a much better predictor?</text><text start=\"276.82\" dur=\"2.76\">So how do we measure the\ngoodness of a fit?</text><text start=\"279.58\" dur=\"5.47\">Which one of these curves actually fits\nthe data better, the quadratic</text><text start=\"285.05\" dur=\"1.63\">fit or the linear fit?</text><text start=\"286.68\" dur=\"4.03\">And we can tell by eye which one we\nseem to think is much better.</text><text start=\"290.71\" dur=\"4.36\">Let&amp;#39;s see if we can develop a\nmathematical explanation of</text><text start=\"295.07\" dur=\"2.04\">which one is better.</text><text start=\"297.11\" dur=\"3.22\">I guess the basic question is,\ndoes the model fit the data?</text><text start=\"300.33\" dur=\"4.29\">Are our predictions coming close?</text><text start=\"304.62\" dur=\"6.67\">Let&amp;#39;s start by talking about a measure\nof the size of the errors that are</text><text start=\"311.29\" dur=\"4.9\">being generated between the predictions\nand the observed points,</text><text start=\"316.19\" dur=\"2.47\">so we can talk about the\nvariability of error.</text><text start=\"318.66\" dur=\"1.5\">So, we sort of start there.</text><text start=\"320.16\" dur=\"2.86\">We can say, well, variability\nof the errors.</text><text start=\"323.02\" dur=\"3.49\">How much are the errors varying?</text><text start=\"326.51\" dur=\"2.92\">So here, we can see that\nthe errors are huge.</text><text start=\"329.43\" dur=\"7.82\">They&amp;#39;re big and they&amp;#39;re small, and so\nif we talked about a mean error, how</text><text start=\"337.25\" dur=\"1.93\">much are we varying from the mean?</text><text start=\"339.18\" dur=\"2.2\">Are the errors pretty much\nall the same, or are they</text><text start=\"341.38\" dur=\"1.44\">big, or are they small?</text><text start=\"342.82\" dur=\"2.56\">So we&amp;#39;re talking about the\nvariability of errors.</text><text start=\"345.38\" dur=\"3.84\">And a standard measure of variability\nis the variance.</text><text start=\"349.22\" dur=\"1.27\">And in fact, we&amp;#39;ve seen this.</text><text start=\"350.49\" dur=\"5.67\">This is, in fact, just exactly the least\nsquares if we look at the error,</text><text start=\"356.16\" dur=\"4.32\">which is the difference between the\nobservation and the prediction, and we</text><text start=\"360.48\" dur=\"3.97\">take the sum of the square of those\nerrors over the whole thing.</text><text start=\"364.45\" dur=\"4.95\">And then we do some sort of\nnormalization here-- so there&amp;#39;s some</text><text start=\"369.4\" dur=\"4.27\">sort of normalization constant, which\nI won&amp;#39;t bother to put in--</text><text start=\"373.67\" dur=\"4.28\">that would give us a sense of\nhow much the errors vary.</text><text start=\"377.95\" dur=\"5.71\">So if there was small errors all around,\nthen in fact, the variance of</text><text start=\"383.66\" dur=\"1.68\">the errors would be small.</text><text start=\"385.34\" dur=\"1.92\">And we can say, well,\nthat&amp;#39;s good enough.</text><text start=\"387.26\" dur=\"4.06\">We could just sort of take this number,\nand whatever its value is, a</text><text start=\"391.32\" dur=\"5.68\">small value would mean the model fit\nwell, and a large value would means</text><text start=\"397\" dur=\"2.43\">that the model wasn&amp;#39;t fitting.</text><text start=\"399.43\" dur=\"6.54\">But the trouble is that if we&amp;#39;re making\nobservations in terms of parse</text><text start=\"405.97\" dur=\"5.9\">x, the errors may be smaller in parse\nx, but as an absolute value, the</text><text start=\"411.87\" dur=\"1.51\">errors are sort of huge.</text><text start=\"413.38\" dur=\"3.89\">So really what we want to do is to\ncompare the variability of the errors</text><text start=\"417.27\" dur=\"3.64\">to the variability of\nthe original data.</text><text start=\"420.91\" dur=\"4.4\">So we can use the same sort of measure\nof variability, the variance of the</text><text start=\"425.31\" dur=\"5.74\">data, which is, again, some sort of\nnormalization factor, and we&amp;#39;re going</text><text start=\"431.05\" dur=\"5.05\">to talk about the values of the\nobservations relative to the mean</text><text start=\"436.1\" dur=\"0.69\">observation.</text><text start=\"436.79\" dur=\"2.82\">So that would be the variance\nof the data.</text><text start=\"439.61\" dur=\"5.6\">And what we want to do is to compare\nthose, make a ratio of those two</text><text start=\"445.21\" dur=\"5.41\">quantities, to get a sense of how well\nthe model is fitting the data.</text><text start=\"450.62\" dur=\"4.09\">So the fraction of the variability\nthat&amp;#39;s not explained by the model has</text><text start=\"454.71\" dur=\"3.64\">to do with the ratio of the variability\nof the errors-- which is</text><text start=\"458.35\" dur=\"2.41\">the part that we&amp;#39;re not\nexplaining with the</text><text start=\"460.76\" dur=\"1.49\">predictions that we&amp;#39;re making--</text><text start=\"462.25\" dur=\"2.94\">over the variability\nof the observation.</text><text start=\"465.19\" dur=\"2.99\">So think of this as a normalization\nfactor.</text><text start=\"468.18\" dur=\"4.23\">And so, this gives us the fraction of\nwhat we&amp;#39;re observing that&amp;#39;s not</text><text start=\"472.41\" dur=\"1.5\">explained by the model.</text><text start=\"473.91\" dur=\"3.82\">So that means that the fraction of the\nvariability that is explained by the</text><text start=\"477.73\" dur=\"5.45\">model is basically 1 minus that ratio,\nso the variance of the errors over the</text><text start=\"483.18\" dur=\"2.63\">variance of the data.</text><text start=\"485.81\" dur=\"1.68\">And this is a very useful measure.</text><text start=\"487.49\" dur=\"5.11\">This gives us a sense of how well the\nmodel is explaining the observations</text><text start=\"492.6\" dur=\"6.84\">that we&amp;#39;re making, and we hope that\nwe&amp;#39;re doing a good job that the</text><text start=\"499.44\" dur=\"4.24\">variance in the errors is small compared\nto the variance in the data,</text><text start=\"503.68\" dur=\"3.65\">which means that we&amp;#39;re explaining almost\nall the changes in the data</text><text start=\"507.33\" dur=\"1.15\">that we see.</text><text start=\"508.48\" dur=\"1.31\">We&amp;#39;re able to predict them.</text><text start=\"509.79\" dur=\"6.4\">So, this is given a name, r squared, and\nthis is called the coefficient of</text><text start=\"516.19\" dur=\"1\">determination.</text><text start=\"517.19\" dur=\"4.91\">So when the coefficient of determination\nis close to 1, that</text><text start=\"522.1\" dur=\"6.26\">means that the model is doing a good job\nof explaining the data, and when</text><text start=\"528.36\" dur=\"5.27\">the coefficient of determination is\nvery small, close to 0, that means</text><text start=\"533.63\" dur=\"3.61\">that there&amp;#39;s not much of a match at all\nbetween the model and the data.</text><text start=\"537.24\" dur=\"4.46\">And we never expect r squared to be 1,\nbecause that would mean we had no</text><text start=\"541.7\" dur=\"4.62\">error at all, and we expect most of our\nexperimental observations to have</text><text start=\"546.32\" dur=\"3.27\">some small amount of error.</text><text start=\"549.59\" dur=\"2.87\">Let&amp;#39;s put this observation\ninto some code.</text><text start=\"552.46\" dur=\"4.94\">Up here, we&amp;#39;ve written a procedure that\nwill compute the r squared value</text><text start=\"557.4\" dur=\"3.33\">given a set of measurements and\na set of predicted values.</text><text start=\"560.73\" dur=\"4.87\">And so, here we can see that we&amp;#39;re\ncalculating the sum of the squares of</text><text start=\"565.6\" dur=\"6.59\">the estimated errors, and then down here\nwe first compute the mean of the</text><text start=\"572.19\" dur=\"5.1\">observed values, and then we compute\nthe difference between the mean and</text><text start=\"577.29\" dur=\"2.77\">the measured values and the\nsum of that squared.</text><text start=\"580.06\" dur=\"5.08\">So we&amp;#39;ve left out the normalizing factor\nfor the variances, since the</text><text start=\"585.14\" dur=\"2.82\">two normalizing factors\ncancel on the ratio.</text><text start=\"587.96\" dur=\"7.42\">So finally, we form that ratio of the\nvariance of the errors over the</text><text start=\"595.38\" dur=\"4.09\">variance of the data, and then we\nsubtract that from 1 to get the r</text><text start=\"599.47\" dur=\"1.4\">squared value.</text><text start=\"600.87\" dur=\"4.77\">And then down here, what we&amp;#39;ve done is\nto modify tryFits into tryFits1, and</text><text start=\"605.64\" dur=\"4.49\">we&amp;#39;ve simply gone ahead and calculated\nthe r squared value for each of the</text><text start=\"610.13\" dur=\"2.46\">two fits, and put that on our plot.</text><text start=\"612.59\" dur=\"1.55\">So we&amp;#39;re all ready to run that.</text><text start=\"614.14\" dur=\"1.6\">That&amp;#39;s the code down here.</text><text start=\"615.74\" dur=\"5.46\">So let&amp;#39;s save this out, and then\nrun it, and see what we get.</text><text start=\"621.2\" dur=\"4.47\">So now, the plot is exactly the same as\nbefore, except that we&amp;#39;ve reported</text><text start=\"625.67\" dur=\"3.46\">the r squared value for each\nof the two models.</text><text start=\"629.13\" dur=\"3.74\">You see the linear model, which we sort\nof suspected wasn&amp;#39;t a good fit at</text><text start=\"632.87\" dur=\"3\">all, actually is a very,\nvery poor r squared.</text><text start=\"635.87\" dur=\"3.87\">The variability of the data is\nnot explained well at all</text><text start=\"639.74\" dur=\"1.56\">by the linear model.</text><text start=\"641.3\" dur=\"4\">However, the quadratic model actually\nhas a very good r squared.</text><text start=\"645.3\" dur=\"3.98\">So that means that, in fact, the\nquadratic model is explaining most of</text><text start=\"649.28\" dur=\"4\">the changes that we see in the\nobservation, so the model predicts</text><text start=\"653.28\" dur=\"1.37\">those changes.</text><text start=\"654.65\" dur=\"4.02\">And there&amp;#39;s a small amount of variance\nin the observations that&amp;#39;s not being</text><text start=\"658.67\" dur=\"4.64\">explained, and that comes from\nthe observational errors.</text><text start=\"663.31\" dur=\"4.12\">So the conclusion is that we can use the\nr squared value to give us a sense</text><text start=\"667.43\" dur=\"4.26\">of whether our model is doing a good\njob of predicting what the data is</text><text start=\"671.69\" dur=\"1.43\">actually doing.</text><text start=\"673.12\" dur=\"3.39\">If r squared is close to 1, the\nprediction is good, and if it&amp;#39;s not</text><text start=\"676.51\" dur=\"3.61\">close to 1, then the prediction is\nless good, and maybe we should</text><text start=\"680.12\" dur=\"1.9\">continue our search for a better model.</text><text start=\"682.02\" dur=\"1.25\"></text></transcript>\n", "WntLU2CrfdE": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.92\"></text><text start=\"0.92\" dur=\"3.94\">Let&amp;#39;s visualize what happens with a\nFibonacci series, using the original</text><text start=\"4.86\" dur=\"1.8\">idea from Leonardo.</text><text start=\"6.66\" dur=\"2.4\">We start off with the single female.</text><text start=\"9.06\" dur=\"2\">At the end of one month,\nshe&amp;#39;s pregnant.</text><text start=\"11.06\" dur=\"3.44\">Which means at the end of the next\nmonth, she&amp;#39;s still there, but she&amp;#39;s</text><text start=\"14.5\" dur=\"2.52\">given birth or whelped another female.</text><text start=\"17.02\" dur=\"3.21\">At the end of the next month,\nthat first female again has</text><text start=\"20.23\" dur=\"0.95\">whelped one more time.</text><text start=\"21.18\" dur=\"2.38\">The first offspring is now pregnant.</text><text start=\"23.56\" dur=\"2.64\">And there are now three rabbits\nrunning around.</text><text start=\"26.2\" dur=\"3.65\">And at each stage you can see that\nafter one month of growth, if you</text><text start=\"29.85\" dur=\"2.49\">like, each new rabbit produces\nanother one.</text><text start=\"32.34\" dur=\"3.54\">So at this next stage two of them whelp,\nat the next stage three of them</text><text start=\"35.88\" dur=\"2.36\">whelp, at the next stage\nfive of them whelp.</text><text start=\"38.24\" dur=\"2.23\">And you can see we&amp;#39;re going to have\na ton of rabbits in a hurry.</text><text start=\"40.47\" dur=\"1.25\"></text></transcript>\n", "gAj5vgOzJB0": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"3.91\">PROFESSOR: So we talked about what\nyou&amp;#39;ve done, where you&amp;#39;ve been, what</text><text start=\"3.91\" dur=\"1.28\">you&amp;#39;ve learned.</text><text start=\"5.19\" dur=\"2.56\">Think about it-- you&amp;#39;ve actually\ncovered a great deal</text><text start=\"7.75\" dur=\"1.99\">throughout this course.</text><text start=\"9.74\" dur=\"2.82\">Let&amp;#39;s wrap up by talking about\nwhere you&amp;#39;re headed.</text><text start=\"12.56\" dur=\"3.37\">First, let me start by pointing out that\nwe know that many, if not all of</text><text start=\"15.93\" dur=\"4.27\">you, worked incredibly hard, often\njuggling other time constraints in</text><text start=\"20.2\" dur=\"1.9\">order to spend time on this course.</text><text start=\"22.1\" dur=\"1.66\">And we really appreciate it.</text><text start=\"23.76\" dur=\"3.39\">We&amp;#39;ve also worked hard to try and refine\nthe course as we&amp;#39;ve gone along,</text><text start=\"27.15\" dur=\"2.55\">since it&amp;#39;s our first time through it,\nto try to make sure that it really</text><text start=\"29.7\" dur=\"0.65\">worked well.</text><text start=\"30.35\" dur=\"3.34\">But we greatly appreciate the\neffort that you put in.</text><text start=\"33.69\" dur=\"3.54\">I think the key thing I would like you\nthink about is, what&amp;#39;s your return on</text><text start=\"37.23\" dur=\"0.97\">investment.</text><text start=\"38.2\" dur=\"2.22\">You&amp;#39;re the only one that\nreally knows it.</text><text start=\"40.42\" dur=\"3.29\">But I really would suggest that it&amp;#39;s\nhandy for you to go back and take a</text><text start=\"43.71\" dur=\"3.72\">look at some of the first problem sets\nand realize how straightforward they</text><text start=\"47.43\" dur=\"1.65\">are for you to solve now.</text><text start=\"49.08\" dur=\"3.54\">And yet, remember that maybe when you\nstarted, they looked a little scary.</text><text start=\"52.62\" dur=\"4.15\">Look at this sophistication of the\nproblem sets throughout the term and</text><text start=\"56.77\" dur=\"3.66\">realize just how quickly you&amp;#39;ve come up\nto speed in terms of being able to</text><text start=\"60.43\" dur=\"1.78\">think computationally.</text><text start=\"62.21\" dur=\"2.38\">And in particular, think about what\nyou&amp;#39;d be willing to tackle now.</text><text start=\"64.59\" dur=\"3.26\">And compare it to where you were several\nweeks or several months ago</text><text start=\"67.85\" dur=\"1.91\">when you started this course.</text><text start=\"69.76\" dur=\"1.37\">You&amp;#39;ve put in the effort.</text><text start=\"71.13\" dur=\"2.87\">We really hope that your return on\ninvestment is high, but we think that</text><text start=\"74\" dur=\"3.8\">it&amp;#39;s likely that you can now solve a\nwide range of problems much more</text><text start=\"77.8\" dur=\"3.5\">sophisticated than what it was when\nyou started with this class.</text><text start=\"81.3\" dur=\"4.14\">And we&amp;#39;d like you to remember that in\nparticular, you&amp;#39;ve now got a set of</text><text start=\"85.44\" dur=\"2.86\">tools that can give you\nanswers to problems.</text><text start=\"88.3\" dur=\"4\">Computational thinking is the new arrow\nin your quiver, if you like.</text><text start=\"92.3\" dur=\"1.72\">We&amp;#39;ve taught you a set of algorithms--</text><text start=\"94.02\" dur=\"1.59\">basic classes of algorithms.</text><text start=\"95.61\" dur=\"2.26\">But you can use them in\nany way you&amp;#39;d like.</text><text start=\"97.87\" dur=\"3.796\">So we really hope that you take these\nideas and when you now sit down and</text><text start=\"101.666\" dur=\"3.254\">are faced with the problem, one of the\nfirst things you say is, how can I</text><text start=\"104.92\" dur=\"2.52\">turn this into something\ncomputational.</text><text start=\"107.44\" dur=\"2.56\">What kind of algorithm would\nbest tackle this?</text><text start=\"110\" dur=\"2.01\">What are the abstractions that\nwould really be important</text><text start=\"112.01\" dur=\"1.35\">to think about this?</text><text start=\"113.36\" dur=\"3.6\">How can I suppress detail and focus\non the key elements of it?</text><text start=\"116.96\" dur=\"3.18\">How could I write code that helps\nme give answers to things?</text><text start=\"120.14\" dur=\"4.26\">So that when you get a new problem,\nfirst question you ask is, could I</text><text start=\"124.4\" dur=\"4.19\">capture this computationally, and if I\ncan, how quickly could I write a piece</text><text start=\"128.59\" dur=\"4.25\">of code that will give me a good\napproximation the answer that I want.</text><text start=\"132.84\" dur=\"1.27\">That&amp;#39;s where you&amp;#39;ve come to.</text><text start=\"134.11\" dur=\"0.77\">That&amp;#39;s where you&amp;#39;re headed.</text><text start=\"134.88\" dur=\"3.88\">You now have those tools, and you&amp;#39;re\nready to run with them.</text><text start=\"138.76\" dur=\"1.25\">What else could you do with it?</text><text start=\"140.01\" dur=\"3.35\">Well we hope that you&amp;#39;ve also now got\na basis for computational thinking</text><text start=\"143.36\" dur=\"4.05\">that sets you up to explore other ideas,\nwhether it&amp;#39;s another course</text><text start=\"147.41\" dur=\"2.96\">online, or whether it&amp;#39;s reading,\nor in other ways.</text><text start=\"150.37\" dur=\"3.29\">But indeed, you are now set to\nthink about other things.</text><text start=\"153.66\" dur=\"3.26\">And here are four suggestions of\ndifferent areas you might head.</text><text start=\"156.92\" dur=\"3.61\">You&amp;#39;re certainly now prepared to think\nmore in detail about algorithms and</text><text start=\"160.53\" dur=\"1.5\">data structures.</text><text start=\"162.03\" dur=\"1.15\">You knew a lot of basic things.</text><text start=\"163.18\" dur=\"3.43\">You got an amazing setup of tools\nalready in place, but there&amp;#39;s a whole</text><text start=\"166.61\" dur=\"4.66\">wealth of more sophisticated and\ncomplicated algorithms that can tackle</text><text start=\"171.27\" dur=\"2.35\">a wider range of problems\navailable to you.</text><text start=\"173.62\" dur=\"2.01\">And you might think about\nexploring those ideas.</text><text start=\"175.63\" dur=\"3.71\">Again, whether it&amp;#39;s reading a book,\nreading some articles, or trying</text><text start=\"179.34\" dur=\"2.1\">another online course.</text><text start=\"181.44\" dur=\"3.88\">There&amp;#39;s a whole other range of areas\ncalled AI-- artificial intelligence,</text><text start=\"185.32\" dur=\"1.49\">smart machines.</text><text start=\"186.81\" dur=\"4.43\">And you now have the basis to start\nusing the tools that you have in order</text><text start=\"191.24\" dur=\"2.33\">to start thinking about those\nkinds of problems.</text><text start=\"193.57\" dur=\"3.31\">There&amp;#39;s a lot of nice courses that\nintroduce you to the notions of AI--</text><text start=\"196.88\" dur=\"3.97\">reasoning about things and under\nuncertainty in order to deduce new</text><text start=\"200.85\" dur=\"1.09\">information.</text><text start=\"201.94\" dur=\"4.45\">Machine learning, being another very\ncommon problem or technique here, that</text><text start=\"206.39\" dur=\"2.18\">I would suggest is now\navailable to you.</text><text start=\"208.57\" dur=\"3.3\">You have the basis to start thinking\nabout machine learning problems, an</text><text start=\"211.87\" dur=\"3.33\">area that&amp;#39;s becoming very widespread\nthroughout the world and something</text><text start=\"215.2\" dur=\"1.605\">that you&amp;#39;ll learn more about.</text><text start=\"216.805\" dur=\"3.295\">Of course, you could build more on\nprogramming by taking an additional</text><text start=\"220.1\" dur=\"1.96\">course in software engineering.</text><text start=\"222.06\" dur=\"3.64\">Or you might decide you really want to\nunderstand what is inside the machine.</text><text start=\"225.7\" dur=\"2.76\">We talked about that interpreter,\nthat evaluator, but how do you</text><text start=\"228.46\" dur=\"1.24\">really build one.</text><text start=\"229.7\" dur=\"3.24\">And you could dive inside the machine\nto think about how does a computer</text><text start=\"232.94\" dur=\"4.22\">actually put the pieces together and\nfocus on computer architecture.</text><text start=\"237.16\" dur=\"3.26\">Finally, what I&amp;#39;d really like to say to\nyou, and all the staff would like</text><text start=\"240.42\" dur=\"3.85\">to say to you is, good luck.</text><text start=\"244.27\" dur=\"2.55\">You started a journey on computation.</text><text start=\"246.82\" dur=\"2.23\">We hope that journey takes\nyou many places.</text><text start=\"249.05\" dur=\"2.9\">And we hope that you find that the tools\nyou&amp;#39;ve learned in this course</text><text start=\"251.95\" dur=\"4.5\">are really of value to you, almost\nanywhere in any domain in</text><text start=\"256.45\" dur=\"1.22\">which you&amp;#39;re working.</text><text start=\"257.67\" dur=\"2.859\">And that when you are faced with\na problem, you say, I know</text><text start=\"260.529\" dur=\"0.941\">how to solve that.</text><text start=\"261.47\" dur=\"2.45\">I can turn that into a computational\nsolution.</text><text start=\"263.92\" dur=\"3.29\">And I&amp;#39;ll write code that gives\nme the answer I want.</text><text start=\"267.21\" dur=\"1.25\">So good luck.</text><text start=\"268.46\" dur=\"0.96\"></text></transcript>\n", "jq7Sujh5uDA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"1.221\" dur=\"3.649\">ERIC GRIMSON: So we&amp;#39;ve now seen some nice examples of</text><text start=\"4.87\" dur=\"3.56\">using guess-and-check methods to find answers to things.</text><text start=\"8.43\" dur=\"1.77\">But we want to take a slight to detour.</text><text start=\"10.2\" dur=\"2.67\">We&amp;#39;d like to use guess and check but not just for</text><text start=\"12.87\" dur=\"1.46\">integers value, not just finding</text><text start=\"14.33\" dur=\"1.54\">cube roots of integers.</text><text start=\"15.87\" dur=\"2.72\">We might like to try and find them for other values.</text><text start=\"18.59\" dur=\"2\">But to do that, we have to think about using floating</text><text start=\"20.59\" dur=\"1.67\">point numbers or float.</text><text start=\"22.26\" dur=\"2.62\">And to do that, we also then need to take a little bit of a</text><text start=\"24.88\" dur=\"2.79\">detour to understand how floats are represented inside</text><text start=\"27.67\" dur=\"2\">of the computer.</text><text start=\"29.67\" dur=\"1.4\">So bear with me for just a little bit.</text><text start=\"31.07\" dur=\"2.15\">We&amp;#39;re going to talk about floating point representations</text><text start=\"33.22\" dur=\"2.2\">and then bring that back to see how we can still use those</text><text start=\"35.42\" dur=\"3.01\">ideas to find approximation algorithms to get solutions</text><text start=\"38.43\" dur=\"2.15\">using guess-and-check methods.</text><text start=\"40.58\" dur=\"2.88\">So floats approximate real numbers, but how do they</text><text start=\"43.46\" dur=\"1.38\">actually do this?</text><text start=\"44.84\" dur=\"2.1\">And let&amp;#39;s think for a second though, what is a decimal</text><text start=\"46.94\" dur=\"2.2\">number, the kind of number we normally deal with?</text><text start=\"49.14\" dur=\"9.617\">Well, 302 is really 3 * 10^2 + 0 * 10^1 + 2 * 10^0 which of</text><text start=\"58.757\" dur=\"0.683\">course is just 1.</text><text start=\"59.44\" dur=\"5.829\">So it&amp;#39;s 3 * 100 + 0 * 10 + 2 * 1.</text><text start=\"65.269\" dur=\"4.121\">That&amp;#39;s because we&amp;#39;re using base 10, handy because we got</text><text start=\"69.39\" dur=\"3.08\">10 fingers and 10 toes is an easy way to do counting.</text><text start=\"72.47\" dur=\"2.47\">Computers, not having fingers or toes, do things a little</text><text start=\"74.94\" dur=\"1.22\">differently.</text><text start=\"76.16\" dur=\"3.27\">They represent things in terms of binary numbers or powers of</text><text start=\"79.43\" dur=\"3.09\">2, basically because in electronics it&amp;#39;s easy to have</text><text start=\"82.52\" dur=\"3.01\">a switch either be on or off, have a 0 or a 1.</text><text start=\"85.53\" dur=\"3.38\">So a binary number will be a sequence of 1&amp;#39;s and 0&amp;#39;s that</text><text start=\"88.91\" dur=\"0.97\">has the same form.</text><text start=\"89.88\" dur=\"6.17\">So the binary number 1, 0, 0, 1, 1 is the same as 1 * 2^4 +</text><text start=\"96.05\" dur=\"8.22\">0 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0, which of course is 1.</text><text start=\"104.27\" dur=\"2.59\">So if we wanted to convert it to decimal, that&amp;#39;s basically</text><text start=\"106.86\" dur=\"3.56\">16 + 2 + 1 is equal to 19.</text><text start=\"110.42\" dur=\"4.27\">So decimals, base 10, binary numbers, base 2.</text><text start=\"114.69\" dur=\"1.92\">Internally, the computer represents</text><text start=\"116.61\" dur=\"2.19\">numbers in binary form.</text><text start=\"118.8\" dur=\"2.33\">So one of the things we&amp;#39;d like to figure out is so how does</text><text start=\"121.13\" dur=\"3.73\">it actually get to that kind of a stage.</text><text start=\"124.86\" dur=\"2.37\">So let&amp;#39;s look at that.</text><text start=\"127.23\" dur=\"2.14\">What does it mean to think about converting a decimal</text><text start=\"129.37\" dur=\"2.16\">that we type in into a binary form?</text><text start=\"131.53\" dur=\"2.16\">How does the computer convert it into a form it can use?</text><text start=\"133.69\" dur=\"2.27\">And then how are we going to think about that?</text><text start=\"135.96\" dur=\"1.03\">Well, let&amp;#39;s take an example.</text><text start=\"136.99\" dur=\"1.76\">Suppose we give the computer some number.</text><text start=\"138.75\" dur=\"1.19\">We&amp;#39;ll call it x.</text><text start=\"139.94\" dur=\"3.87\">And it turns out x is actually 1, 0, 0, 1, 1 in binary.</text><text start=\"143.81\" dur=\"0.75\">But we don&amp;#39;t know that.</text><text start=\"144.56\" dur=\"1.97\">We want to figure that out.</text><text start=\"146.53\" dur=\"2.44\">Well, knowing that it has some form like that,</text><text start=\"148.97\" dur=\"1.3\">what could we do?</text><text start=\"150.27\" dur=\"3.3\">The first thing we can do is if we take the remainder of x</text><text start=\"153.57\" dur=\"2.87\">with respect to 2.</text><text start=\"156.44\" dur=\"0.67\">What does that say?</text><text start=\"157.11\" dur=\"2.02\">Well, that&amp;#39;s says if we&amp;#39;re going to divide each of these</text><text start=\"159.13\" dur=\"2.32\">elements by 2 since x is this sum, we can</text><text start=\"161.45\" dur=\"2.03\">divide that by 2 evenly.</text><text start=\"163.48\" dur=\"2.72\">We can divide that by 2 evenly, that by 2 evenly, that</text><text start=\"166.2\" dur=\"0.91\">by 2 evenly.</text><text start=\"167.11\" dur=\"1.26\">But this only cannot.</text><text start=\"168.37\" dur=\"3\">So when we do that, the remainder that&amp;#39;s left is</text><text start=\"171.37\" dur=\"2.2\">whatever that bit is.</text><text start=\"173.57\" dur=\"4.82\">And that gives us the last binary bit, which is a 1.</text><text start=\"178.39\" dur=\"0.865\">That&amp;#39;s cool.</text><text start=\"179.255\" dur=\"3.225\">So taking the remainder back with respect to 2 gives us the</text><text start=\"182.48\" dur=\"1.56\">lowest order bit.</text><text start=\"184.04\" dur=\"4.17\">If we then divide x by 2, what we really do is we just shift</text><text start=\"188.21\" dur=\"0.61\">the bits left.</text><text start=\"188.82\" dur=\"2.55\">You see that if we divide x by 2 that&amp;#39;s going to change that</text><text start=\"191.37\" dur=\"4.3\">to a 3, that to a 2, that to a 1, that to a 0.</text><text start=\"195.67\" dur=\"2.21\">This goes away because remember we lose it.</text><text start=\"197.88\" dur=\"2.78\">And what we&amp;#39;ve done, oh, just get exactly that form.</text><text start=\"200.66\" dur=\"3.53\">We&amp;#39;ve shifted all the bits left by 1.</text><text start=\"204.19\" dur=\"1.47\">And we can now do the same thing.</text><text start=\"205.66\" dur=\"2.95\">If we take this new value and get the remainder of that with</text><text start=\"208.61\" dur=\"2.09\">respect to 2, it&amp;#39;s going to give me that, which</text><text start=\"210.7\" dur=\"1.73\">gives me a second 1.</text><text start=\"212.43\" dur=\"5.49\">And then shifting left will reduce that to 1, that to 0,</text><text start=\"217.92\" dur=\"1.1\">then I&amp;#39;ll keep going.</text><text start=\"219.02\" dur=\"4.19\">And that will allow me to successively peel off each of</text><text start=\"223.21\" dur=\"2.34\">the bits in order.</text><text start=\"225.55\" dur=\"6.23\">So we can convert any decimal number into a binary form.</text><text start=\"231.78\" dur=\"1.84\">Here&amp;#39;s a little piece of code to do it.</text><text start=\"233.62\" dur=\"1.63\">Let&amp;#39;s just walk through it very quickly.</text><text start=\"235.25\" dur=\"2.5\">This part up here I&amp;#39;m just going to let you look at it,</text><text start=\"237.75\" dur=\"0.92\">but it&amp;#39;s pretty straightforward.</text><text start=\"238.67\" dur=\"2.76\">It&amp;#39;s basically saying if the number I&amp;#39;m trying to convert</text><text start=\"241.43\" dur=\"2.2\">is negative I&amp;#39;m going to take the absolute value, but I&amp;#39;ll</text><text start=\"243.63\" dur=\"2.835\">keep track of that so I can put the negative sign back out</text><text start=\"246.465\" dur=\"0.985\">in front when I&amp;#39;m done.</text><text start=\"247.45\" dur=\"1.55\">And then what does this piece in here do?</text><text start=\"249\" dur=\"2.32\">Well, it basically walks through what I just said.</text><text start=\"251.32\" dur=\"2.5\">It says I&amp;#39;m going to set result initially to be an</text><text start=\"253.82\" dur=\"0.72\">empty string.</text><text start=\"254.54\" dur=\"1.66\">I&amp;#39;m going to gather up the bits.</text><text start=\"256.2\" dur=\"4.92\">And then if the number is 0, I just return 0.</text><text start=\"261.12\" dur=\"3.45\">Otherwise, oh, there is one of those little iterative loops.</text><text start=\"264.57\" dur=\"3.16\">It essentially says, let me strip off the bottom order</text><text start=\"267.73\" dur=\"2.3\">bit, put it onto the result.</text><text start=\"270.03\" dur=\"3.52\">There&amp;#39;s a concatenation of the string, puts it to the left of</text><text start=\"273.55\" dur=\"1.49\">whatever I&amp;#39;ve already gotten.</text><text start=\"275.04\" dur=\"3.19\">Change number by dividing by 2, which shifts the bits left.</text><text start=\"278.23\" dur=\"0.95\">And keep going.</text><text start=\"279.18\" dur=\"4.36\">So this is getting me the next bit.</text><text start=\"283.54\" dur=\"2.69\">This is just shifting left.</text><text start=\"286.23\" dur=\"3.775\">And I do that, OK, until I get a number that&amp;#39;s less than 2.</text><text start=\"290.005\" dur=\"2.495\">And when I do, I&amp;#39;m done.</text><text start=\"292.5\" dur=\"2.2\">result holds the thing I want.</text><text start=\"294.7\" dur=\"2.84\">And all I need to do is just put a negative sign out in</text><text start=\"297.54\" dur=\"2.06\">front if in fact what I started with</text><text start=\"299.6\" dur=\"1.45\">was something negative.</text><text start=\"301.05\" dur=\"4.73\">So this is just doing a conversion back.</text><text start=\"305.78\" dur=\"1.01\">Cool.</text><text start=\"306.79\" dur=\"0.83\">Let&amp;#39;s take a check of this.</text><text start=\"307.62\" dur=\"1.37\">See what it does.</text><text start=\"308.99\" dur=\"2.17\">So here in IDLE, I&amp;#39;ve got an example of that.</text><text start=\"311.16\" dur=\"2.16\">I&amp;#39;ve set a number to be 302.</text><text start=\"313.32\" dur=\"4.21\">And let&amp;#39;s look at what happens if I do that conversion.</text><text start=\"317.53\" dur=\"1.17\">I type it in.</text><text start=\"318.7\" dur=\"0.8\">Huh.</text><text start=\"319.5\" dur=\"1.18\">Nothing showed up.</text><text start=\"320.68\" dur=\"0.58\">That&amp;#39;s right.</text><text start=\"321.26\" dur=\"1.55\">Because I didn&amp;#39;t ask it to print anything out.</text><text start=\"322.81\" dur=\"3.8\">But I know that result now holds the value I want.</text><text start=\"326.61\" dur=\"3.85\">And it says as a string there is 302 in decimal converted</text><text start=\"330.46\" dur=\"2.02\">into a binary form.</text><text start=\"332.48\" dur=\"2.878\">I could change to something else.</text><text start=\"335.358\" dur=\"2.412\">Make it 256.</text><text start=\"337.77\" dur=\"1.88\">And do the same thing.</text><text start=\"339.65\" dur=\"1.43\">Save it away.</text><text start=\"341.08\" dur=\"1.99\">And again, I need to see where the result is.</text><text start=\"343.07\" dur=\"2.71\">I can do that over here.</text><text start=\"345.78\" dur=\"2.82\">And go back down to where it was.</text><text start=\"348.6\" dur=\"3.06\">Here is the result.</text><text start=\"351.66\" dur=\"3.33\">And since I know 256 is a power of 2, that form looks</text><text start=\"354.99\" dur=\"1.68\">roughly right.</text><text start=\"356.67\" dur=\"1.21\">So what are we doing?</text><text start=\"357.88\" dur=\"3.59\">Given a decimal number, we can convert it into binary form.</text><text start=\"361.47\" dur=\"2.63\">And that&amp;#39;s literally what the machine will do inside.</text><text start=\"364.1\" dur=\"3.08\">Now let&amp;#39;s think about what this says.</text><text start=\"367.18\" dur=\"1.94\">First of all, I want to be able to get good</text><text start=\"369.12\" dur=\"1.1\">approximations to things.</text><text start=\"370.22\" dur=\"1.3\">So what about fractions?</text><text start=\"371.52\" dur=\"2.52\">Why don&amp;#39;t we deal with a fraction?</text><text start=\"374.04\" dur=\"3.26\">Well, let&amp;#39;s think about a number like 3/8.</text><text start=\"377.3\" dur=\"4.46\">In binary, it would be 0.375, which would be 3 * 10^-1, or</text><text start=\"381.76\" dur=\"4.93\">1/10, + 2 * 1/100 + 5 * 1/1,000.</text><text start=\"386.69\" dur=\"2.29\">So it has the same form.</text><text start=\"388.98\" dur=\"2.33\">Now how could we figure out how to</text><text start=\"391.31\" dur=\"1.62\">convert this into binary?</text><text start=\"392.93\" dur=\"3.41\">Well, suppose we could find a power of 2 big enough so that</text><text start=\"396.34\" dur=\"2.34\">when we multiplied it by this fraction it turned it into a</text><text start=\"398.68\" dur=\"1.176\">whole number?</text><text start=\"399.856\" dur=\"2.404\">If we can do that, then we could take the whole number,</text><text start=\"402.26\" dur=\"3.32\">convert it into binary using the method we just had, and</text><text start=\"405.58\" dur=\"2.81\">then when we&amp;#39;re done divide by the same power of 2.</text><text start=\"408.39\" dur=\"2.53\">It&amp;#39;s just going to shift to the right.</text><text start=\"410.92\" dur=\"2.99\">So, for example, 0.375 we kind of know this.</text><text start=\"413.91\" dur=\"1.16\">We multiply it by 8.</text><text start=\"415.07\" dur=\"1.66\">It gives me 3.</text><text start=\"416.73\" dur=\"1.21\">That&amp;#39;s in decimal form.</text><text start=\"417.94\" dur=\"2.65\">I could convert 3 to binary form, which we know</text><text start=\"420.59\" dur=\"2.43\">is just 0, 1, 1.</text><text start=\"423.02\" dur=\"3.38\">And now that I&amp;#39;ve got that, I could just divide by 8, which</text><text start=\"426.4\" dur=\"3.19\">is equivalent to shifting the binary point, if you like,</text><text start=\"429.59\" dur=\"3.335\">three slots over to get 0.011.</text><text start=\"432.925\" dur=\"1.225\">Cool.</text><text start=\"434.15\" dur=\"2.52\">Let&amp;#39;s do that.</text><text start=\"436.67\" dur=\"1.25\">Here&amp;#39;s my code.</text><text start=\"437.92\" dur=\"2.3\">And it&amp;#39;s really got almost exactly the same form.</text><text start=\"440.22\" dur=\"1.87\">It&amp;#39;s a little bit more than we had before, but let&amp;#39;s just</text><text start=\"442.09\" dur=\"0.595\">look at it.</text><text start=\"442.685\" dur=\"2.145\">I&amp;#39;ve got something up here that&amp;#39;s just going to input an</text><text start=\"444.83\" dur=\"2.55\">x so I&amp;#39;m not having to type new values in.</text><text start=\"447.38\" dur=\"4.05\">And here&amp;#39;s a little iterative loop that simply looks for the</text><text start=\"451.43\" dur=\"3.14\">power of 2 that converts it into a whole number.</text><text start=\"454.57\" dur=\"3.38\">So it&amp;#39;s just going to loop over p, looking for a value of</text><text start=\"457.95\" dur=\"5.65\">p such that 2^p * x is a whole number.</text><text start=\"463.6\" dur=\"3.15\">Its remainder with respect 1 is equal to 0.</text><text start=\"466.75\" dur=\"1.01\">Cool little check.</text><text start=\"467.76\" dur=\"2.19\">I&amp;#39;ll just do that.</text><text start=\"469.95\" dur=\"2.53\">Once I can do that, then I&amp;#39;ll take x and I&amp;#39;ll</text><text start=\"472.48\" dur=\"1.47\">multiply it by 2^p.</text><text start=\"473.95\" dur=\"2.6\">I&amp;#39;ve converted it now into a whole number.</text><text start=\"476.55\" dur=\"3.59\">And there, I just did what I did before, simply run through</text><text start=\"480.14\" dur=\"2.39\">that test to see how do I convert it back</text><text start=\"482.53\" dur=\"2.27\">into a binary form.</text><text start=\"484.8\" dur=\"3.01\">And once I&amp;#39;m done, then the last piece is I need to make</text><text start=\"487.81\" dur=\"3.89\">sure I put enough zeroes out front by looking at how many</text><text start=\"491.7\" dur=\"3.5\">values are there between the size of p and the length of</text><text start=\"495.2\" dur=\"0.98\">the result.</text><text start=\"496.18\" dur=\"3.12\">And then having done that, I just need to find the right</text><text start=\"499.3\" dur=\"2.21\">place to put the decimal point.</text><text start=\"501.51\" dur=\"1.88\">And there&amp;#39;s a funky little piece of code that is</text><text start=\"503.39\" dur=\"3.73\">basically finding the spot in between p where</text><text start=\"507.12\" dur=\"1.25\">we want to do it.</text><text start=\"508.37\" dur=\"1.38\">We&amp;#39;ll let you look at the details of it.</text><text start=\"509.75\" dur=\"3.36\">But that&amp;#39;s basically what this code does, finds the power of</text><text start=\"513.109\" dur=\"2.856\">p to make it a whole number, does the conversion, and then</text><text start=\"515.964\" dur=\"1.526\">converts it back.</text><text start=\"517.49\" dur=\"0.89\">OK.</text><text start=\"518.38\" dur=\"1.91\">So let&amp;#39;s see what we got here.</text><text start=\"520.29\" dur=\"1.465\">Go over to my IDLE.</text><text start=\"521.755\" dur=\"3.756\">And I&amp;#39;ve got a piece of code that captures that.</text><text start=\"525.511\" dur=\"2.309\">All right.</text><text start=\"527.82\" dur=\"2.24\">There&amp;#39;s the piece of code right there.</text><text start=\"530.06\" dur=\"2.675\">And let&amp;#39;s run it and see what happens.</text><text start=\"532.735\" dur=\"1.865\">I&amp;#39;m going to run that piece of code.</text><text start=\"534.6\" dur=\"1.48\">It says give me a decimal number.</text><text start=\"536.08\" dur=\"2.46\">In this case between 0 and 1 because that&amp;#39;s where I&amp;#39;m going</text><text start=\"538.54\" dur=\"1.02\">to deal with it.</text><text start=\"539.56\" dur=\"3.88\">Well, let&amp;#39;s try 0.375.</text><text start=\"543.44\" dur=\"0.82\">Ahh.</text><text start=\"544.26\" dur=\"2.22\">Runs through three steps to get the remainders, and it</text><text start=\"546.48\" dur=\"1.91\">converts it into that binary form which</text><text start=\"548.39\" dur=\"2.75\">we saw before, 0.011.</text><text start=\"551.14\" dur=\"1.4\">Sounds cool.</text><text start=\"552.54\" dur=\"1.25\">Let&amp;#39;s try it again.</text><text start=\"556.33\" dur=\"2.26\">We enter this-- oh, I don&amp;#39;t know, something simple, 0.1.</text><text start=\"561.43\" dur=\"2.8\">Ohh, it&amp;#39;s working away here.</text><text start=\"564.23\" dur=\"3.51\">And it&amp;#39;s working away really hard trying to find something.</text><text start=\"567.74\" dur=\"4.11\">And it says, my goodness, the binary representation of the</text><text start=\"571.85\" dur=\"2.67\">decimal 0.1 is-- ohh, look at that--</text><text start=\"574.52\" dur=\"4.84\">0.0001100110011001.</text><text start=\"579.36\" dur=\"1.02\">Well, you get the idea.</text><text start=\"580.38\" dur=\"2.59\">It&amp;#39;s really boring and repetitive.</text><text start=\"582.97\" dur=\"1.33\">Ha.</text><text start=\"584.3\" dur=\"1.52\">So what happened here?</text><text start=\"585.82\" dur=\"0.83\">That&amp;#39;s a little different.</text><text start=\"586.65\" dur=\"2.89\">We didn&amp;#39;t get some nice, crisp, clean form.</text><text start=\"589.54\" dur=\"2.58\">And in fact that&amp;#39;s going to be an important factor when we</text><text start=\"592.12\" dur=\"2.85\">think about binary numbers and decimal numbers</text><text start=\"594.97\" dur=\"2.39\">and especially fractions.</text><text start=\"597.36\" dur=\"1.47\">So what&amp;#39;s one of the implications?</text><text start=\"598.83\" dur=\"5.05\">If there is no integer p such that x * 2^p is a whole</text><text start=\"603.88\" dur=\"3.19\">number, then the internal representation is always going</text><text start=\"607.07\" dur=\"0.98\">to be an approximation.</text><text start=\"608.05\" dur=\"3.72\">And in fact what happened here was that the Python system</text><text start=\"611.77\" dur=\"3.15\">eventually stopped trying to expand it out any further and</text><text start=\"614.92\" dur=\"2.46\">simply gave us a representation out to some</text><text start=\"617.38\" dur=\"2.6\">arbitrary number of bits that are set by the internals of</text><text start=\"619.98\" dur=\"1.55\">the Python system.</text><text start=\"621.53\" dur=\"2.84\">So if it&amp;#39;s not something that can be turned into a whole</text><text start=\"624.37\" dur=\"2.54\">number by a power of p, it&amp;#39;s always going to be an</text><text start=\"626.91\" dur=\"1.38\">approximation.</text><text start=\"628.29\" dur=\"1.41\">This has an important implication.</text><text start=\"629.7\" dur=\"3.26\">It says, when I want to test two floats to see if they&amp;#39;re</text><text start=\"632.96\" dur=\"4.27\">the same I shouldn&amp;#39;t use something like this because it</text><text start=\"637.23\" dur=\"1.88\">might not be true because the approximations</text><text start=\"639.11\" dur=\"1.44\">may be slightly different.</text><text start=\"640.55\" dur=\"2.76\">I&amp;#39;m always better basically saying, is the absolute</text><text start=\"643.31\" dur=\"1.46\">difference between them smaller than</text><text start=\"644.77\" dur=\"1.882\">some arbitrary amount.</text><text start=\"646.652\" dur=\"1.488\">And we&amp;#39;re going to use that a lot.</text><text start=\"648.14\" dur=\"2.33\">This is a standard place where people get into trouble by</text><text start=\"650.47\" dur=\"2.27\">trying to test the quality of two floats and then being</text><text start=\"652.74\" dur=\"1.74\">surprised when in fact the code doesn&amp;#39;t</text><text start=\"654.48\" dur=\"1.75\">do what they&amp;#39;d like.</text><text start=\"656.23\" dur=\"2.21\">One of the things you could ask is, so why does print of</text><text start=\"658.44\" dur=\"4.83\">0.1 give us back 0.1 if in fact 0.1 is represented as</text><text start=\"663.27\" dur=\"2.31\">this long, funky kind of thing?</text><text start=\"665.58\" dur=\"2.38\">And the answer is because the designers of Python decided to</text><text start=\"667.96\" dur=\"3\">set it up this way, that it automatically rounds to some</text><text start=\"670.96\" dur=\"1.67\">number of bits in order to give</text><text start=\"672.63\" dur=\"1.35\">something that&amp;#39;s much crisper.</text><text start=\"673.98\" dur=\"3.71\">But in fact 0.1 is not represented as 0.1 inside of</text><text start=\"677.69\" dur=\"1.26\">the machine.</text><text start=\"678.95\" dur=\"2.22\">That&amp;#39;s going to be important now as we think about taking</text><text start=\"681.17\" dur=\"2.15\">this idea of iterative algorithms, especially</text><text start=\"683.32\" dur=\"2.85\">guess-and-check algorithms, but dealing with floating</text><text start=\"686.17\" dur=\"1.25\">point numbers.</text><text start=\"687.42\" dur=\"1.34\">And we&amp;#39;re going to do that in the next segment.</text></transcript>\n", "CqeyFtxCqqE": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.77\"></text><text start=\"0.77\" dur=\"3.15\">CHRIS TERMAN: Early programming\nlanguages didn&amp;#39;t offer much support</text><text start=\"3.92\" dur=\"1.93\">for structuring complex programs.</text><text start=\"5.85\" dur=\"5.24\">They gave local variables and global\nvariables and not much else.</text><text start=\"11.09\" dur=\"4.58\">As programs became more complex, we\nneeded to find a way to control which</text><text start=\"15.67\" dur=\"2.47\">procedures could access which data.</text><text start=\"18.14\" dur=\"4.28\">Procedures that willy-nilly made access\nto whatever data they could get</text><text start=\"22.42\" dur=\"4.39\">their hands on lead to\nhard to find bugs.</text><text start=\"26.81\" dur=\"2.46\">So we needed a more organized way.</text><text start=\"29.27\" dur=\"4.26\">And we came up with the idea of bundling\ndata and the associated</text><text start=\"33.53\" dur=\"6.24\">procedures into an object with\na well defined interface.</text><text start=\"39.77\" dur=\"3.19\">Early object-oriented programming\nlanguages started appearing in the</text><text start=\"42.96\" dur=\"1.91\">&amp;#39;60s and &amp;#39;70s.</text><text start=\"44.87\" dur=\"3.44\">And by the &amp;#39;90s, most programmers\nhad adopted the object-oriented</text><text start=\"48.31\" dur=\"3.98\">programming style because it was an\nefficient way to write and debug</text><text start=\"52.29\" dur=\"3.04\">complex programming systems.</text><text start=\"55.33\" dur=\"3.39\">Over the next two lectures, we&amp;#39;re going\nto explore Python support for</text><text start=\"58.72\" dur=\"1.58\">object-oriented programming.</text><text start=\"60.3\" dur=\"2.52\">Python supports many different\nkinds of data.</text><text start=\"62.82\" dur=\"3.37\">There&amp;#39;s integers, and floating point\nnumbers, and strings, and lists, and</text><text start=\"66.19\" dur=\"1.09\">dictionaries.</text><text start=\"67.28\" dur=\"2.73\">And you&amp;#39;ve been using these data\nstructures as you&amp;#39;ve been</text><text start=\"70.01\" dur=\"1.54\">writing your programs.</text><text start=\"71.55\" dur=\"3.87\">From a Python point of view,\neach of these is an object.</text><text start=\"75.42\" dur=\"2.02\">What, you ask, is an object?</text><text start=\"77.44\" dur=\"2.09\">Well, objects have a type.</text><text start=\"79.53\" dur=\"3.23\">And a particular object is said\nto be an instance of a type.</text><text start=\"82.76\" dur=\"1.65\">So here&amp;#39;s the type of all\nthe objects above.</text><text start=\"84.41\" dur=\"4.64\">And one, two, three, four is an\ninstance of type integer.</text><text start=\"89.05\" dur=\"5.66\">Why we introduce the notion of types is\nto that the behavior of an object</text><text start=\"94.71\" dur=\"2.54\">is actually associated with the type.</text><text start=\"97.25\" dur=\"4.22\">In other words, how integers work when\nyou add them together-- use the plus</text><text start=\"101.47\" dur=\"1.33\">operator on them--</text><text start=\"102.8\" dur=\"4.08\">that&amp;#39;s actually different with integers\nthan it is for floats, or</text><text start=\"106.88\" dur=\"1.69\">strings, or lists.</text><text start=\"108.57\" dur=\"4.55\">And so, associated with each type is the\ninformation that&amp;#39;s needed to say</text><text start=\"113.12\" dur=\"3.63\">how do I do a plus operation,\nfor example?</text><text start=\"116.75\" dur=\"3.3\">Associated with each object is an\ninternal data representation.</text><text start=\"120.05\" dur=\"3.37\">Some objects, like integers and floats\nand strings, are primitive.</text><text start=\"123.42\" dur=\"3.53\">In other words, they hold\nsome data and that&amp;#39;s it.</text><text start=\"126.95\" dur=\"3.4\">They don&amp;#39;t have much in the\nway of internal structure.</text><text start=\"130.35\" dur=\"4.49\">Other objects like lists and\ndictionaries are composite objects.</text><text start=\"134.84\" dur=\"3.76\">They actually are a collection of\nother objects in the system.</text><text start=\"138.6\" dur=\"4.04\">And they organize that collection\nin particularly convenient ways.</text><text start=\"142.64\" dur=\"2.65\">Finally, each object has\na set of procedures for</text><text start=\"145.29\" dur=\"1.44\">interacting with the object.</text><text start=\"146.73\" dur=\"3.8\">So for example, ints have a procedure\nfor dealing with adding two ints</text><text start=\"150.53\" dur=\"2.52\">together, and lists have a\nseparate procedure for</text><text start=\"153.05\" dur=\"1.27\">adding two lists together.</text><text start=\"154.32\" dur=\"3.39\">In the case of lists that means\nto concatenate them.</text><text start=\"157.71\" dur=\"1.86\">Let&amp;#39;s look at this more closely.</text><text start=\"159.57\" dur=\"3.07\">So here&amp;#39;s an example data object--\nthe list, one, two, three, four.</text><text start=\"162.64\" dur=\"4.52\">So the Python type of that\ndata object is list.</text><text start=\"167.16\" dur=\"2.25\">There&amp;#39;s an internal data\nrepresentation.</text><text start=\"169.41\" dur=\"2.87\">And we have some choices to make\nas an implementer of list.</text><text start=\"172.28\" dur=\"4.21\">For example, we could store the\ncomponents of a list in a little,</text><text start=\"176.49\" dur=\"4.78\">sequential array of memory locations,\neach of which holds a pointer to an</text><text start=\"181.27\" dur=\"5.14\">object and associate with that array,\na particular length, l of the list.</text><text start=\"186.41\" dur=\"3.08\">In our particular example,\nthe length would be four.</text><text start=\"189.49\" dur=\"2.9\">And so long as there&amp;#39;s enough room in\nthe array to store four elements,</text><text start=\"192.39\" dur=\"1.7\">we&amp;#39;re all set to go.</text><text start=\"194.09\" dur=\"4.39\">Alternatively, we might choose to\nstore a list as a linked list of</text><text start=\"198.48\" dur=\"1.07\">individual cells.</text><text start=\"199.55\" dur=\"3.35\">So we&amp;#39;d have a cell holding one, and a\ncell holding two, and a cell holding</text><text start=\"202.9\" dur=\"1.96\">three, and a cell holding four.</text><text start=\"204.86\" dur=\"4.48\">And the other half of each cell would\nbe a pointer to the next cell, so a</text><text start=\"209.34\" dur=\"4.22\">little daisy chain of these cells,\none for each element of the list.</text><text start=\"213.56\" dur=\"2.85\">Why would you choose one implementation\nover the other?</text><text start=\"216.41\" dur=\"3.765\">Well, one of the considerations\nis what operations do</text><text start=\"220.175\" dur=\"1.055\">you want to be efficient?</text><text start=\"221.23\" dur=\"3.44\">For instance, suppose you wanted\nto take the length of the list.</text><text start=\"224.67\" dur=\"3.51\">Well in the top representation,\nthe length is explicit.</text><text start=\"228.18\" dur=\"3.25\">It&amp;#39;s actually stored as an integer\nas part of the internal data.</text><text start=\"231.43\" dur=\"3.51\">And when a user asks for the length\nof a list, just look up that</text><text start=\"234.94\" dur=\"1.07\">integer and return it.</text><text start=\"236.01\" dur=\"1.62\">Very quick, very efficient.</text><text start=\"237.63\" dur=\"3.67\">If you ask for the length of the link\nlist, you&amp;#39;d actually have to go down</text><text start=\"241.3\" dur=\"3.87\">that list, counting as you go, to count\nthe number of cells that have</text><text start=\"245.17\" dur=\"1.15\">been linked together.</text><text start=\"246.32\" dur=\"2.96\">So the linked operation is very\ninexpensive with the top</text><text start=\"249.28\" dur=\"1.5\">representation.</text><text start=\"250.78\" dur=\"4.22\">And more expensive with the\nbottom representation.</text><text start=\"255\" dur=\"3.769\">But now suppose that an important\noperation is inserting something at</text><text start=\"258.769\" dur=\"1.961\">the beginning of a list.</text><text start=\"260.73\" dur=\"4.61\">With the array, we&amp;#39;d actually have\nto spend the time to copy all the</text><text start=\"265.34\" dur=\"2.74\">elements in the array up one index.</text><text start=\"268.08\" dur=\"2.7\">And then we&amp;#39;d have room to drop\nthe new object at the</text><text start=\"270.78\" dur=\"1.13\">beginning of the array.</text><text start=\"271.91\" dur=\"2.48\">That is potentially an\nexpensive operation.</text><text start=\"274.39\" dur=\"4.06\">We actually have to move everything\naround inside the internal data</text><text start=\"278.45\" dur=\"1.45\">representation.</text><text start=\"279.9\" dur=\"5.54\">With a link list, we simply have to\ncreate a new cell and make the pointer</text><text start=\"285.44\" dur=\"2.65\">in that first cell now point\nto the rest of the list.</text><text start=\"288.09\" dur=\"3.67\">So inserting at the beginning of a list\nis actually very simple with the</text><text start=\"291.76\" dur=\"2.03\">second representation.</text><text start=\"293.79\" dur=\"3.27\">There&amp;#39;s a struggle implementers go\nthrough when they choose internal</text><text start=\"297.06\" dur=\"0.83\">representations.</text><text start=\"297.89\" dur=\"4.03\">They have to think about what they want\nto be efficient and what things</text><text start=\"301.92\" dur=\"2.21\">they want to be easy.</text><text start=\"304.13\" dur=\"3.93\">The internal representation is meant to\nbe private in the sense that users</text><text start=\"308.06\" dur=\"3.28\">of the object shouldn&amp;#39;t rely\non any particular details.</text><text start=\"311.34\" dur=\"4.71\">So for example, a user should use some\nsort of procedure that&amp;#39;s associated</text><text start=\"316.05\" dur=\"1.18\">with a list to get its link.</text><text start=\"317.23\" dur=\"4.62\">They shouldn&amp;#39;t assume that can reach\nin and grab an internal integer and</text><text start=\"321.85\" dur=\"1.96\">simply use that as the length.</text><text start=\"323.81\" dur=\"5.38\">And so correct behavior of the objects\nmight be compromised if you actually</text><text start=\"329.19\" dur=\"3.67\">make some assumptions about\nthe internal data.</text><text start=\"332.86\" dur=\"2.08\">Lists have a lot of procedures\nassociated with them.</text><text start=\"334.94\" dur=\"3.92\">There&amp;#39;s procedures for indexing into\na list, or creating sub-lists for</text><text start=\"338.86\" dur=\"1.76\">concatenating or replicating the list.</text><text start=\"340.62\" dur=\"1.71\">That&amp;#39;s the plus and the star.</text><text start=\"342.33\" dur=\"1.79\">We can ask many things about the list.</text><text start=\"344.12\" dur=\"1.42\">We can find the minimum element.</text><text start=\"345.54\" dur=\"2.11\">We can search for a particular\nelement.</text><text start=\"347.65\" dur=\"1.93\">We can ask for the length of the list.</text><text start=\"349.58\" dur=\"2.68\">We can remove elements from the\nlist, so forth and so on.</text><text start=\"352.26\" dur=\"3.35\">So all the behaviors that are available\nto the programmer are really</text><text start=\"355.61\" dur=\"2.54\">described by this list of procedures.</text><text start=\"358.15\" dur=\"3.21\">And the procedures know about the\ninternal data representation.</text><text start=\"361.36\" dur=\"4.31\">But a user of lists should restrict\nthemselves to the functionality</text><text start=\"365.67\" dur=\"4.9\">provided by the operators\nand procedures.</text><text start=\"370.57\" dur=\"2.98\">Let&amp;#39;s pop up a level and talk\nabout object-oriented</text><text start=\"373.55\" dur=\"1.65\">programming in general.</text><text start=\"375.2\" dur=\"3.82\">Object-oriented programming is sort\nof affectionately known as OOP.</text><text start=\"379.02\" dur=\"1.93\">Oop.</text><text start=\"380.95\" dur=\"3.03\">First off, in an object-oriented\nprogramming view of the world,</text><text start=\"383.98\" dur=\"2.43\">everything is an object\nand has a type.</text><text start=\"386.41\" dur=\"3.04\">For example, the presentation that\nyou&amp;#39;re watching would be represented</text><text start=\"389.45\" dur=\"0.98\">as an object.</text><text start=\"390.43\" dur=\"4\">And somewhere inside of its internal\nrepresentation would be a list of</text><text start=\"394.43\" dur=\"3.36\">slide objects, one for each\nslide in the presentation.</text><text start=\"397.79\" dur=\"5.13\">And each slide object would have\ninternally, perhaps, a list of text</text><text start=\"402.92\" dur=\"5.07\">boxes that represent each of the little\ngroups of text on the slide, so</text><text start=\"407.99\" dur=\"0.62\">forth and so on.</text><text start=\"408.61\" dur=\"4.13\">So what we&amp;#39;ve done is to break a\nfairly complicated idea of a</text><text start=\"412.74\" dur=\"4.59\">presentation down into this hierarchy\nof objects, which sort of makes it a</text><text start=\"417.33\" dur=\"3.14\">little simpler to, sort of, think about\nhow to actually organize the</text><text start=\"420.47\" dur=\"3.65\">program that produces presentations.</text><text start=\"424.12\" dur=\"4.47\">Objects are a data abstraction that\nencapsulate an internal representation</text><text start=\"428.59\" dur=\"2.8\">in an interface for interacting\nwith the object.</text><text start=\"431.39\" dur=\"2.62\">So remember that the interface\ndefines behaviors.</text><text start=\"434.01\" dur=\"3.95\">For instance, length or display on\nscreen, or something like that.</text><text start=\"437.96\" dur=\"5.63\">But the details are hidden inside the\nactual implementation that lies behind</text><text start=\"443.59\" dur=\"0.95\">the interface.</text><text start=\"444.54\" dur=\"4.01\">The way you interact with the object is\nsimply to ask the appropriate piece</text><text start=\"448.55\" dur=\"3.9\">of the interface to perform\nthe desired operation.</text><text start=\"452.45\" dur=\"3.89\">In Python, the interface is actually\nrepresented as a set of attributes.</text><text start=\"456.34\" dur=\"4.19\">And there&amp;#39;s a data attributes and\nprocedural attributes, which we give</text><text start=\"460.53\" dur=\"4.43\">the special name to of methods.</text><text start=\"464.96\" dur=\"3.76\">Some languages have support for data\nhiding, which prevents access to</text><text start=\"468.72\" dur=\"1.11\">private attributes.</text><text start=\"469.83\" dur=\"3.44\">So in implementing behavior, some of\nthe attributes may be intended for</text><text start=\"473.27\" dur=\"4.02\">public consumption and other attributes\nmay actually only be for</text><text start=\"477.29\" dur=\"3.52\">the internal use of the\nimplementation.</text><text start=\"480.81\" dur=\"2.12\">In some languages, you can\ndeclare some attributes</text><text start=\"482.93\" dur=\"1.69\">private and others public.</text><text start=\"484.62\" dur=\"2.04\">Python doesn&amp;#39;t have that distinction.</text><text start=\"486.66\" dur=\"4.7\">So when you read a particular type of\nobject, you will get a list of things</text><text start=\"491.36\" dur=\"1.41\">that you&amp;#39;re allowed to do--</text><text start=\"492.77\" dur=\"1.63\">attributes you&amp;#39;re allowed to use.</text><text start=\"494.4\" dur=\"2.67\">And so, you&amp;#39;re just expected to play\nby the rules, even if you know</text><text start=\"497.07\" dur=\"4.5\">something more about other attributes\nthat might be available.</text><text start=\"501.57\" dur=\"2.53\">Of course, one can create new\ninstances of objects, either</text><text start=\"504.1\" dur=\"0.72\">explicitly--</text><text start=\"504.82\" dur=\"1.69\">and we&amp;#39;ll show you how to\ndo that in a minute--</text><text start=\"506.51\" dur=\"1.37\">or often using literals.</text><text start=\"507.88\" dur=\"5.39\">So when I typed in the text, one, two,\nthree, four, in my Python program, the</text><text start=\"513.27\" dur=\"3.94\">Python interpreter knows how to take\nthose characters and convert them into</text><text start=\"517.21\" dur=\"1.61\">an integer object.</text><text start=\"518.82\" dur=\"1.5\">And we can destroy objects.</text><text start=\"520.32\" dur=\"5.62\">We can destroy them explicitly using the\ndelete operation in Python, or we</text><text start=\"525.94\" dur=\"1.05\">can just forget about them.</text><text start=\"526.99\" dur=\"1.65\">We can sort of lose our\nhandle to them.</text><text start=\"528.64\" dur=\"4.43\">So if we say a equals some list, and\nthen later, on we say a equals some</text><text start=\"533.07\" dur=\"2.52\">other list, that first\nlist disappeared.</text><text start=\"535.59\" dur=\"2.31\">In other words, it used to be\nthe value of a and that&amp;#39;s</text><text start=\"537.9\" dur=\"1\">how it got to it.</text><text start=\"538.9\" dur=\"2.86\">But now that the value of a has\nchanged, we can no longer</text><text start=\"541.76\" dur=\"1.84\">get to that old list.</text><text start=\"543.6\" dur=\"3.92\">So Python system will actually reclaim\ndestroyed or inaccessible objects.</text><text start=\"547.52\" dur=\"3.58\">It will go take that first list and\nreturn it back to its storage pool</text><text start=\"551.1\" dur=\"2.4\">since no one can actually\naccess it anymore.</text><text start=\"553.5\" dur=\"4.185\">And that process, quite appropriately,\nis called garbage collection.</text><text start=\"557.685\" dur=\"3.795\">What are the advantages of\nobject-oriented programming?</text><text start=\"561.48\" dur=\"3.1\">I suggest you actually Google\nfor advantages of OOP.</text><text start=\"564.58\" dur=\"4.18\">You&amp;#39;ll find a bunch of very interesting\narticles that describe why</text><text start=\"568.76\" dur=\"4.4\">object-oriented programming has taken\nthe programming world by storm.</text><text start=\"573.16\" dur=\"1.9\">Here&amp;#39;s some thoughts that I have.</text><text start=\"575.06\" dur=\"3.64\">It provides a way of doing divide\nand conquer development.</text><text start=\"578.7\" dur=\"4.07\">What I can do is to go off and implement\nand test the behavior of</text><text start=\"582.77\" dur=\"3.04\">each of my classes of objects\nindividually.</text><text start=\"585.81\" dur=\"3.6\">So I can think about when I, for\ninstance, implementing presentation</text><text start=\"589.41\" dur=\"2.55\">program, I can think about\nas the presentation as a</text><text start=\"591.96\" dur=\"1.4\">collection of slides.</text><text start=\"593.36\" dur=\"4.82\">And I&amp;#39;ll think of making an actual slide\nshow as sort of going through</text><text start=\"598.18\" dur=\"4.51\">and displaying each slide individually,\none at a time.</text><text start=\"602.69\" dur=\"3.42\">And then, each slide, when it&amp;#39;s asked\nto display itself, might go through</text><text start=\"606.11\" dur=\"3.602\">and say to each text box, please display\nyourself at your location on</text><text start=\"609.712\" dur=\"1.728\">the screen.</text><text start=\"611.44\" dur=\"3.64\">What I can do is work, sort of, from\nthe bottom up of implementing the</text><text start=\"615.08\" dur=\"4.58\">display of text boxes, and then a\ndisplay of slides, and finally the</text><text start=\"619.66\" dur=\"2.08\">display of the entire presentation.</text><text start=\"621.74\" dur=\"2.87\">And I can work on each of those\nbehaviors separately, assuming that</text><text start=\"624.61\" dur=\"2.76\">the other behaviors have been\nimplemented correctly.</text><text start=\"627.37\" dur=\"3.33\">So this increases the modularity and\nreally reduces the complexity.</text><text start=\"630.7\" dur=\"3.48\">The complexity of doing a slide show\nfrom the presentation point of view</text><text start=\"634.18\" dur=\"4.79\">really is as simple as individually\npresenting each of the slides in turn.</text><text start=\"638.97\" dur=\"2.6\">So classes make it easy to reuse code.</text><text start=\"641.57\" dur=\"3.123\">And, in fact, many of the Python modules\nyou&amp;#39;ve been using, really the</text><text start=\"644.693\" dur=\"4.227\">way they deliver the functionality is\nthey define new classes, and all the</text><text start=\"648.92\" dur=\"4.59\">methods, and internal data that they\nhave, and you basically, interface</text><text start=\"653.51\" dur=\"2.83\">with those classes to access\nthe functionality</text><text start=\"656.34\" dur=\"2.54\">implemented by the module.</text><text start=\"658.88\" dur=\"1.77\">Each class has a separate name space.</text><text start=\"660.65\" dur=\"2.54\">So there&amp;#39;s no collision\non function names.</text><text start=\"663.19\" dur=\"2.28\">I don&amp;#39;t have to have a separate\nprocedure called integer</text><text start=\"665.47\" dur=\"2.02\">plus and list plus.</text><text start=\"667.49\" dur=\"4.13\">I can basically look inside\na class and say please</text><text start=\"671.62\" dur=\"1.35\">use your plus procedure.</text><text start=\"672.97\" dur=\"5.77\">And that&amp;#39;s completely a unique way\nof specifying which plus I need.</text><text start=\"678.74\" dur=\"2.53\">And finally, inheritance\nallowed sub-classes--</text><text start=\"681.27\" dur=\"1.22\">which we&amp;#39;ll meet in a minute--</text><text start=\"682.49\" dur=\"4.59\">to refine or extend a selected subset\nof a superclass&amp;#39; behavior.</text><text start=\"687.08\" dur=\"4.88\">What I&amp;#39;ll be able to do is to say, look,\nI want to design a special MIT</text><text start=\"691.96\" dur=\"3.85\">presentation, which is just like a\nnormal presentation but has a little</text><text start=\"695.81\" dur=\"2.34\">MIT symbol in the bottom\nleft-hand corner.</text><text start=\"698.15\" dur=\"4.92\">So I can change one aspect of, for\ninstance, the display routine to build</text><text start=\"703.07\" dur=\"1.96\">that extra piece of functionality in.</text><text start=\"705.03\" dur=\"3.44\">But I can inherit all the functionality\nthat&amp;#39;s inherent in the</text><text start=\"708.47\" dur=\"4.33\">base presentation code to do slide\nshows, so forth and so on.</text><text start=\"712.8\" dur=\"1.25\"></text></transcript>\n", "Gt8RHv3oTSA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.465\"></text><text start=\"0.465\" dur=\"2.555\">CHRIS TERMAN: Finally, let&amp;#39;s\ntalk about exceptions.</text><text start=\"3.02\" dur=\"3.28\">Exceptions are an important feature of\nmany programming languages that allow</text><text start=\"6.3\" dur=\"4.5\">the program to signal when it can&amp;#39;t\nproceed and get the correct answer.</text><text start=\"10.8\" dur=\"2.18\">There&amp;#39;s something wrong with the\ndata that it&amp;#39;s manipulating.</text><text start=\"12.98\" dur=\"2.65\">It&amp;#39;s detected an error condition.</text><text start=\"15.63\" dur=\"3.12\">In Python, you can not only raise\nexceptions, but you can handle them.</text><text start=\"18.75\" dur=\"3.67\">You can wrap a particular piece of\ncode up in such a way that any</text><text start=\"22.42\" dur=\"3.74\">exception that is generated transfers\ncontrol to special code that you&amp;#39;ve</text><text start=\"26.16\" dur=\"1.5\">written to deal with the exception.</text><text start=\"27.66\" dur=\"2.89\">That&amp;#39;s a pretty handy feature,\nas you&amp;#39;ll see.</text><text start=\"30.55\" dur=\"3.42\">Our Python programs have been dealing\nwith exceptions for a while now.</text><text start=\"33.97\" dur=\"3.39\">Let&amp;#39;s talk in detail about\nhow that works.</text><text start=\"37.36\" dur=\"4.4\">So the basic question we have is, what\nshould we do when our procedure has to</text><text start=\"41.76\" dur=\"3.8\">stop execution because there&amp;#39;s\nsome sort of error condition?</text><text start=\"45.56\" dur=\"2.44\">We have three choices available to us.</text><text start=\"48\" dur=\"1.42\">One is we can fail silently.</text><text start=\"49.42\" dur=\"4.12\">We can substitute in the appropriate\ndefault values and continue execution.</text><text start=\"53.54\" dur=\"3.12\">And the advantage of that is that\nthe program never fails.</text><text start=\"56.66\" dur=\"1.73\">I always get some answer back.</text><text start=\"58.39\" dur=\"3.08\">But basically that&amp;#39;s\na really bad idea.</text><text start=\"61.47\" dur=\"1.42\">The user gets an answer.</text><text start=\"62.89\" dur=\"1.42\">That&amp;#39;s OK.</text><text start=\"64.31\" dur=\"3.71\">But they get also get no indication that\nthe result that they got may be</text><text start=\"68.02\" dur=\"2.94\">suspect because of some error condition\nand the substitution of</text><text start=\"70.96\" dur=\"1.11\">default values.</text><text start=\"72.07\" dur=\"3.282\">So in general, that&amp;#39;s not\nthe way we should go.</text><text start=\"75.352\" dur=\"4.368\">A slightly more tasteful approach is\nto return a special error value.</text><text start=\"79.72\" dur=\"3.54\">For example, if I had a procedure that\nwas expecting to produce a number, I</text><text start=\"83.26\" dur=\"4.89\">could instead produce the Python object\nNone to indicate that no number</text><text start=\"88.15\" dur=\"5\">was available, that some error happened\nand here&amp;#39;s my indication, a</text><text start=\"93.15\" dur=\"1.75\">special return value.</text><text start=\"94.9\" dur=\"3.97\">It can sometimes be a challenge to\nfigure out what special return value</text><text start=\"98.87\" dur=\"2.79\">is distinguished from all the other\npossible return values.</text><text start=\"101.66\" dur=\"5.91\">But assuming you solve that problem,\nthere&amp;#39;s a bigger issue, because if I</text><text start=\"107.57\" dur=\"3.89\">have a procedure that can return one of\nthese special values, then whenever</text><text start=\"111.46\" dur=\"8.49\">I call that procedure, I have to include\ncode in my own body which has</text><text start=\"119.95\" dur=\"2.99\">to check for the special value and\nthen deal with whatever the</text><text start=\"122.94\" dur=\"1.34\">consequences are.</text><text start=\"124.28\" dur=\"2.78\">And maybe what I have to do is say,\nwell, I don&amp;#39;t know what to do with it.</text><text start=\"127.06\" dur=\"2.949\">It must be an error that\nI&amp;#39;ll give to my caller.</text><text start=\"130.009\" dur=\"3.141\">So I generate my own special value,\nwhatever that is, and</text><text start=\"133.15\" dur=\"1.96\">return that to my caller.</text><text start=\"135.11\" dur=\"4.93\">And so what happens is that all the\nprocedure calls get surrounded by</text><text start=\"140.04\" dur=\"3.83\">special &amp;quot;if&amp;quot; tests to check the results\nand deal with any error</text><text start=\"143.87\" dur=\"2.16\">conditions reported in this way.</text><text start=\"146.03\" dur=\"1.86\">So it really complicates the program.</text><text start=\"147.89\" dur=\"3.95\">Instead of this very simple program of\nnested procedure calls, I end up with</text><text start=\"151.84\" dur=\"3.43\">a lot of code that is checking\nfor special case values.</text><text start=\"155.27\" dur=\"4.27\">So it gets the job done, but it&amp;#39;s really\na burden on the programmer.</text><text start=\"159.54\" dur=\"2.83\">Happily, Python provides us\na tasteful alternative.</text><text start=\"162.37\" dur=\"2.04\">We can raise an exception.</text><text start=\"164.41\" dur=\"4.55\">So this is a condition that will\nbasically propagate up through all the</text><text start=\"168.96\" dur=\"1.75\">nested procedure calls.</text><text start=\"170.71\" dur=\"3.79\">And each procedure call will have a\nchance to deal with the exception.</text><text start=\"174.5\" dur=\"6.96\">If none of the nested procedure calls\ndeals with the exception that was</text><text start=\"181.46\" dur=\"3.73\">created, then in fact the Python\ninterpreter will do the right thing</text><text start=\"185.19\" dur=\"3.67\">and create this nice little error\nmessage to the user, giving a</text><text start=\"188.86\" dur=\"5.09\">backtrace, showing exactly where we were\nin the execution of the program</text><text start=\"193.95\" dur=\"3.24\">and print out this descriptive string.</text><text start=\"197.19\" dur=\"3.54\">So the way we actually create an\nException inside Python is we use the</text><text start=\"200.73\" dur=\"7.25\">raise keyword followed by the creation\nof whatever type of Exception we&amp;#39;re</text><text start=\"207.98\" dur=\"0.74\">trying to raise.</text><text start=\"208.72\" dur=\"2.39\">In this case, just a\ngeneric Exception.</text><text start=\"211.11\" dur=\"9\">And all the Exceptions here take as\ntheir argument a descriptive string.</text><text start=\"220.11\" dur=\"3.5\">If we wish, we can provide\nhandlers for Exceptions.</text><text start=\"223.61\" dur=\"3.28\">So for example, if I&amp;#39;m going to do an\noperation which might create an</text><text start=\"226.89\" dur=\"5.47\">Exception and I&amp;#39;m willing to deal with\nthat, what I can do is embed those</text><text start=\"232.36\" dur=\"7.17\">statements inside of the body of a try\nstatement, followed by some code that</text><text start=\"239.53\" dur=\"2.26\">will deal with the exception.</text><text start=\"241.79\" dur=\"5.2\">So the way this works is that as I&amp;#39;m\nexecuting statements in the body of</text><text start=\"246.99\" dur=\"4.29\">the try, if any one of them throws an\nException, Python will look in the</text><text start=\"251.28\" dur=\"3.34\">list of exception handlers to\nsee if one of them will</text><text start=\"254.62\" dur=\"1.01\">actually deal with it.</text><text start=\"255.63\" dur=\"3.63\">In this case, I&amp;#39;m willing to deal\nwith any possible exception.</text><text start=\"259.26\" dur=\"4.34\">And so any exception that happens in the\nbody of this code will result in</text><text start=\"263.6\" dur=\"3.39\">the execution of this\nPython statement.</text><text start=\"266.99\" dur=\"4.73\">So just to summarize, exceptions inside\nthe body of the try will then</text><text start=\"271.72\" dur=\"3.76\">cause Python to look through the\nexception handlers listed after the</text><text start=\"275.48\" dur=\"4.06\">try statement, and whichever one matches\nfirst, it will then start</text><text start=\"279.54\" dur=\"3.87\">executing statements from the body\nof the exception handler.</text><text start=\"283.41\" dur=\"5.68\">In this particular case, what can happen\nis that the open statement can</text><text start=\"289.09\" dur=\"5.03\">discover the file doesn&amp;#39;t exist and\ncreate an I/O error exception.</text><text start=\"294.12\" dur=\"4.26\">What happens is that I want to catch\nthat exception in my code, and instead</text><text start=\"298.38\" dur=\"3.59\">of getting some sort of obscure I/O\nerror, I turn it into a generic</text><text start=\"301.97\" dur=\"2.41\">exception with a more sensible\nerror message saying,</text><text start=\"304.38\" dur=\"2.17\">can&amp;#39;t open grades file.</text><text start=\"306.55\" dur=\"5.87\">If you&amp;#39;d like to see more about how try\nand except works, you can look in</text><text start=\"312.42\" dur=\"3.29\">Section 8 of the Python tutorial.</text><text start=\"315.71\" dur=\"2.38\">So usually a handler is only\nmeant to deal with a</text><text start=\"318.09\" dur=\"2.28\">particular type of exception.</text><text start=\"320.37\" dur=\"4.26\">And sometimes we need to deal with\ncleanup actions before continuing.</text><text start=\"324.63\" dur=\"5.04\">So in this case, I&amp;#39;ve refined my example\na little bit further to say,</text><text start=\"329.67\" dur=\"3.65\">look, I have an I/O error here.</text><text start=\"333.32\" dur=\"3.83\">I want to deal with the fact that, if\nthis open fails, I know the type of</text><text start=\"337.15\" dur=\"0.86\">error I&amp;#39;m going to get.</text><text start=\"338.01\" dur=\"1.61\">I&amp;#39;m going to get an I/O error.</text><text start=\"339.62\" dur=\"3.42\">And in that case, I&amp;#39;m going to print out\na very specific error message and</text><text start=\"343.04\" dur=\"2.27\">cease execution of my program.</text><text start=\"345.31\" dur=\"2.92\">And what I&amp;#39;ve done is I say, look,\nI can&amp;#39;t open the grades file.</text><text start=\"348.23\" dur=\"7.18\">And I&amp;#39;ve also captured the actual\nexception object that was created by</text><text start=\"355.41\" dur=\"3.33\">whatever the low-level exception was,\nand I report that as well as my</text><text start=\"358.74\" dur=\"1.59\">generic error message.</text><text start=\"360.33\" dur=\"3.25\">Separately, there may be some arithmetic\ncalculations on the errors</text><text start=\"363.58\" dur=\"3.45\">later on, and I can catch those and\nprint out another informative error</text><text start=\"367.03\" dur=\"3.45\">message, in this case saying, oh,\nthere was a bug in the grade</text><text start=\"370.48\" dur=\"1.05\">calculation.</text><text start=\"371.53\" dur=\"3.41\">So this differs, because it&amp;#39;s a much\nmore nuanced handling of errors.</text><text start=\"374.94\" dur=\"3.47\">I&amp;#39;m distinguishing I/O errors that\ncome from the open statement from</text><text start=\"378.41\" dur=\"7.47\">arithmetic errors that come from the\ncode that&amp;#39;s processing the grades.</text><text start=\"385.88\" dur=\"3.61\">And I can have as many different except\nstatements as I want, dealing</text><text start=\"389.49\" dur=\"3.89\">with the different types of errors\nthat I expect to get.</text><text start=\"393.38\" dur=\"1.53\">We&amp;#39;ve seen a lot of the common errors.</text><text start=\"394.91\" dur=\"1.2\">You get syntax errors.</text><text start=\"396.11\" dur=\"2.68\">That&amp;#39;s when your Python\ncan&amp;#39;t parse a program.</text><text start=\"398.79\" dur=\"4.13\">A name error, when local or global\nname can&amp;#39;t be found.</text><text start=\"402.92\" dur=\"2.48\">An attribute error, which is\nwhen we have an attribute</text><text start=\"405.4\" dur=\"1.05\">reference that fails.</text><text start=\"406.45\" dur=\"3.16\">We&amp;#39;ve asked for an attribute of\nan object that doesn&amp;#39;t exist.</text><text start=\"409.61\" dur=\"1.35\">We get a type error.</text><text start=\"410.96\" dur=\"2.71\">That&amp;#39;s when the operand doesn&amp;#39;t\nhave a correct type.</text><text start=\"413.67\" dur=\"3.23\">So I&amp;#39;m asking to add a string\nand a number together.</text><text start=\"416.9\" dur=\"3.6\">And the plus operator doesn&amp;#39;t know\nhow to do that, so it&amp;#39;s an</text><text start=\"420.5\" dur=\"3.17\">illegal type of operand.</text><text start=\"423.67\" dur=\"3.13\">A value error, in which the\noperand types are OK, but</text><text start=\"426.8\" dur=\"0.94\">the value is illegal.</text><text start=\"427.74\" dur=\"1.44\">For instance, division by zero.</text><text start=\"429.18\" dur=\"3.23\">I mean, zero&amp;#39;s a perfectly good number,\nso it&amp;#39;s in general a legal</text><text start=\"432.41\" dur=\"1.11\">operand to divide.</text><text start=\"433.52\" dur=\"6.75\">It&amp;#39;s just that it&amp;#39;s particular value of\nzero in the denominator causes us</text><text start=\"440.27\" dur=\"2.96\">to say, aha, we can&amp;#39;t do this\nparticular division.</text><text start=\"443.23\" dur=\"2.59\">And we just talked about I/O error.</text><text start=\"445.82\" dur=\"3.04\">And if you want to see a list of all the\ndifferent kinds of errors and what</text><text start=\"448.86\" dur=\"4.8\">they mean, you can look in Section\n6 of The Python Standard Library.</text><text start=\"453.66\" dur=\"2.13\">There&amp;#39;s a couple other handy\nextensions to try.</text><text start=\"455.79\" dur=\"3.3\">We&amp;#39;ve talked about the except statements\nthat can follow try.</text><text start=\"459.09\" dur=\"4.37\">We can also have an else clause\nafter a try statement.</text><text start=\"463.46\" dur=\"4.57\">And this will be executed when the\nexecution of the associated try body</text><text start=\"468.03\" dur=\"2.48\">completes with no exceptions.</text><text start=\"470.51\" dur=\"4.24\">So this is what we would do if the\ntry body completes successfully.</text><text start=\"474.75\" dur=\"2.33\">And finally, there&amp;#39;s\nthe finally clause.</text><text start=\"477.08\" dur=\"5.44\">So this is a clause that&amp;#39;s always\nexecuted after the try statement and</text><text start=\"482.52\" dur=\"3.46\">all the else statements and\nexcept clauses that apply.</text><text start=\"485.98\" dur=\"2.27\">And even when one of these clauses--</text><text start=\"488.25\" dur=\"5.39\">either the try or the else clause or\nthe except clauses, which might be</text><text start=\"493.64\" dur=\"2.78\">inside a loop of some sort, or\ninside a procedure call--</text><text start=\"496.42\" dur=\"3.56\">they may have executed a break\nor a continue or a return.</text><text start=\"499.98\" dur=\"0.72\">That&amp;#39;s fine.</text><text start=\"500.7\" dur=\"1.11\">They&amp;#39;re allowed to do that.</text><text start=\"501.81\" dur=\"4.81\">But before we actually finish the\nexecution of this particular try</text><text start=\"506.62\" dur=\"3.56\">statement and all of its clauses, the\nbody of the finally will be run.</text><text start=\"510.18\" dur=\"2.91\">So we often put in cleanup code\nthere that should be run--</text><text start=\"513.09\" dur=\"2.66\">for example, closing any open\nfiles that we created--</text><text start=\"515.75\" dur=\"2.94\">no matter what else happens,\nerrors or not.</text><text start=\"518.69\" dur=\"3.189\">To see how this works, let&amp;#39;s\nlook at a little example.</text><text start=\"521.879\" dur=\"3.881\">I&amp;#39;ve created a divide routine which is\ngoing to attempt to divide the two</text><text start=\"525.76\" dur=\"2.69\">operands and return the result.</text><text start=\"528.45\" dur=\"2.59\">So because that may fail--</text><text start=\"531.04\" dur=\"2\">particularly if y is 0--</text><text start=\"533.04\" dur=\"5.08\">what I&amp;#39;m going to do is embed the\noperation that I know might raise an</text><text start=\"538.12\" dur=\"2.51\">exception inside a try statement.</text><text start=\"540.63\" dur=\"5.9\">And then, in the case of a division by\nzero detected by the low-level Python</text><text start=\"546.53\" dur=\"3.99\">divide routine, I&amp;#39;m going to print\nout-- division by zero is</text><text start=\"550.52\" dur=\"2.06\">the message I return.</text><text start=\"552.58\" dur=\"6.3\">Otherwise, if I successfully complete\nthe divide operation, I&amp;#39;m going to</text><text start=\"558.88\" dur=\"1.96\">print out what the answer is.</text><text start=\"560.84\" dur=\"4.82\">And finally, in either case, I&amp;#39;m\ngoing to hopefully execute</text><text start=\"565.66\" dur=\"1.41\">this finally clause.</text><text start=\"567.07\" dur=\"1.87\">So let&amp;#39;s see how this works.</text><text start=\"568.94\" dur=\"4.72\">So I&amp;#39;m going to go off and\nsay divide of 2 and 1.</text><text start=\"573.66\" dur=\"5.2\">So in this case, because there were\nno errors, this thing completed</text><text start=\"578.86\" dur=\"1.45\">successfully.</text><text start=\"580.31\" dur=\"5.04\">We actually put a legitimate value\ninto the divide local variable.</text><text start=\"585.35\" dur=\"3.37\">And after the completion of the try\nstatement, since there were no</text><text start=\"588.72\" dur=\"4.38\">exceptions, we executed the else clause,\nwhich basically says, print</text><text start=\"593.1\" dur=\"1.51\">out this answer and return.</text><text start=\"594.61\" dur=\"3.09\">So result is 2, is what\nit printed out.</text><text start=\"597.7\" dur=\"4.82\">And then after I finish the else clause,\nthis will be executed here.</text><text start=\"602.52\" dur=\"3.9\">And we can see we actually executed the\nbody of the finally clause, which</text><text start=\"606.42\" dur=\"4.32\">printed out the executing finally\nclause statement.</text><text start=\"610.74\" dur=\"4.21\">Now let&amp;#39;s do a divide that\nwill cause an exception.</text><text start=\"614.95\" dur=\"5.08\">So in this case, execution of the body\ndid not complete successfully.</text><text start=\"620.03\" dur=\"3.85\">It raised a zero division error, which\nI actually have a handler for.</text><text start=\"623.88\" dur=\"6.99\">So when the body of the try raised an\nerror, Python looked down my clauses</text><text start=\"630.87\" dur=\"4.56\">following the try and discovered that\nI declared an exception handler for</text><text start=\"635.43\" dur=\"3.01\">the zero division error, which\nprints out division by zero.</text><text start=\"638.44\" dur=\"1.16\">So it does that.</text><text start=\"639.6\" dur=\"4.26\">It&amp;#39;s now done with the try, and it&amp;#39;s\ngoing to return, but before doing so,</text><text start=\"643.86\" dur=\"2.06\">it once again executes the\nfinally statement.</text><text start=\"645.92\" dur=\"4\">So finally gets executed whether\nor not there was an exception.</text><text start=\"649.92\" dur=\"2.55\">Now let&amp;#39;s try one final experiment.</text><text start=\"652.47\" dur=\"5.48\">Let&amp;#39;s try some operations that we would\nassume will raise a type error.</text><text start=\"657.95\" dur=\"3.29\">And in fact, we do get\na type error like so.</text><text start=\"661.24\" dur=\"5.83\">And since that error is not caught\nanywhere, it actually will percolate</text><text start=\"667.07\" dur=\"3.06\">all the way up to the Python\ninterpreter, and we get the standard</text><text start=\"670.13\" dur=\"4.32\">error result where we get a little\ntraceback of where we were, followed</text><text start=\"674.45\" dur=\"6.54\">by the little descriptive string that\nwas part of the creation of the type</text><text start=\"680.99\" dur=\"4.05\">error object that we created,\nwhich was a description of</text><text start=\"685.04\" dur=\"1.36\">what the problem was.</text><text start=\"686.4\" dur=\"3.91\">But notice, before we got the traceback,\neven though we had no</text><text start=\"690.31\" dur=\"3.72\">exception handler, so we weren&amp;#39;t going\nto do any except clauses--</text><text start=\"694.03\" dur=\"3.38\">and since it didn&amp;#39;t compete\nsuccessfully, we weren&amp;#39;t going to do</text><text start=\"697.41\" dur=\"1.15\">the else clause--</text><text start=\"698.56\" dur=\"3.69\">we still nonetheless executed\nthe finally clause and</text><text start=\"702.25\" dur=\"1.25\">printed out our message.</text><text start=\"703.5\" dur=\"0.8\"></text></transcript>\n", "oJa01jCfTCU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"1.2\" dur=\"3\">ERIC GRIMSON: So now we&amp;#39;ve seen arithmetic expressions.</text><text start=\"4.2\" dur=\"1.28\">We&amp;#39;ve seen giving names to those.</text><text start=\"5.48\" dur=\"3.02\">We&amp;#39;ve seen how we can combine those together using names and</text><text start=\"8.5\" dur=\"1.68\">places where we would use values.</text><text start=\"10.18\" dur=\"2.61\">We can start doing some simple computations.</text><text start=\"12.79\" dur=\"3.89\">But those are all dealing with scalar objects, numbers.</text><text start=\"16.68\" dur=\"2.42\">Let&amp;#39;s talk briefly about other kinds of objects.</text><text start=\"19.1\" dur=\"2.09\">We&amp;#39;ll come back to them later on, but we want to see what we</text><text start=\"21.19\" dur=\"1.15\">can do here.</text><text start=\"22.34\" dur=\"3.22\">So non-scalar objects are compound things, things whose</text><text start=\"25.56\" dur=\"2.72\">proportions or components we can get at.</text><text start=\"28.28\" dur=\"2.8\">We&amp;#39;ll see a lot of these throughout the course of this</text><text start=\"31.08\" dur=\"2.95\">subject, but the simplest one to start with are what are</text><text start=\"34.03\" dur=\"2.31\">called strings, or objects that have a</text><text start=\"36.34\" dur=\"1.78\">type str for string.</text><text start=\"38.12\" dur=\"3.79\">And these are literally just sequences of characters that</text><text start=\"41.91\" dur=\"2.44\">are all concatenated together.</text><text start=\"44.35\" dur=\"1.59\">So how do we write them?</text><text start=\"45.94\" dur=\"2.64\">Well literals of this type can be written either by putting</text><text start=\"48.58\" dur=\"2.7\">them inside of a single quote or putting them inside of</text><text start=\"51.28\" dur=\"1.32\">double quotes.</text><text start=\"52.6\" dur=\"4.72\">And so if I go to my Python shell, for example, we can see</text><text start=\"57.32\" dur=\"3.85\">that we can put things within a single quote.</text><text start=\"61.17\" dur=\"2.78\">And that gives us that string back.</text><text start=\"63.95\" dur=\"4.13\">By the way, we can give names to those things.</text><text start=\"68.08\" dur=\"4.33\">So we can say, what&amp;#39;s the value of foo, and, in fact, we</text><text start=\"72.41\" dur=\"3.25\">can look at the type and we&amp;#39;ll see that it gives us back</text><text start=\"75.66\" dur=\"2.88\">something of type string or str.</text><text start=\"78.54\" dur=\"3.2\">And, by the way, we can also put quotes around numbers.</text><text start=\"81.74\" dur=\"3.15\">So this is a string.</text><text start=\"84.89\" dur=\"4.15\">And just to see that, let&amp;#39;s ask for the type of that.</text><text start=\"89.04\" dur=\"3.23\">The type of that sequence of characters, numeral one,</text><text start=\"92.27\" dur=\"1.58\">numeral two, numeral three, inside of the</text><text start=\"93.85\" dur=\"2.16\">quotes is a string.</text><text start=\"96.01\" dur=\"4.15\">And that is different than the type of the number itself</text><text start=\"100.16\" dur=\"1.87\">which is in int.</text><text start=\"102.03\" dur=\"2.77\">So we can put together strings.</text><text start=\"104.8\" dur=\"2.64\">If we can put them together we&amp;#39;d like to be able to do</text><text start=\"107.44\" dur=\"0.39\">things with them.</text><text start=\"107.83\" dur=\"2.58\">And I want to show you some examples of those.</text><text start=\"110.41\" dur=\"4.87\">So we can provide different operations on strings.</text><text start=\"115.28\" dur=\"1.6\">Now some of these maybe a little surprising.</text><text start=\"116.88\" dur=\"0.86\">So let&amp;#39;s walk through them.</text><text start=\"117.74\" dur=\"5.96\">The first one is we can ask for taking the string a and</text><text start=\"123.7\" dur=\"1.42\">multiplying it by the number three.</text><text start=\"125.12\" dur=\"1.64\">And that may sound strange.</text><text start=\"126.76\" dur=\"2.89\">But what it gives us is a string with three copies of</text><text start=\"129.65\" dur=\"2.03\">a&amp;#39;s stuck together.</text><text start=\"131.68\" dur=\"3.34\">Or, if you like, I could do it with a slightly more</text><text start=\"135.02\" dur=\"1.73\">complicated string.</text><text start=\"136.75\" dur=\"3.42\">And it literally is just concatenating or copying those</text><text start=\"140.17\" dur=\"2.15\">versions of those strings together.</text><text start=\"142.32\" dur=\"5.89\">We can put two strings together using addition to</text><text start=\"148.21\" dur=\"3.23\">give us this concatenated string of a and b.</text><text start=\"151.44\" dur=\"4.36\">And we can, of course, also concatenate together strings</text><text start=\"155.8\" dur=\"1.43\">if we want to make sure that they are</text><text start=\"157.23\" dur=\"1.03\">converted into strings.</text><text start=\"158.26\" dur=\"2.73\">So we can take a number, convert it to a string and</text><text start=\"160.99\" dur=\"4.81\">concatenate that together gives us the string a123.</text><text start=\"165.8\" dur=\"3.46\">These are just different ways of dealing with strings and</text><text start=\"169.26\" dur=\"1.07\">putting them together.</text><text start=\"170.33\" dur=\"2.46\">It seems a little odd that we&amp;#39;re using operators that</text><text start=\"172.79\" dur=\"1.73\">don&amp;#39;t normally deal with numbers.</text><text start=\"174.52\" dur=\"2.68\">And this is an instance of what we call operator</text><text start=\"177.2\" dur=\"1.25\">overloading.</text><text start=\"180.5\" dur=\"7.47\">In which what we are doing here, here, here, is we are</text><text start=\"187.97\" dur=\"2.5\">using the same operator to do different things.</text><text start=\"190.47\" dur=\"2.78\">If we give them numbers it&amp;#39;ll do one thing.</text><text start=\"193.25\" dur=\"2.62\">If we give them a number and a string in the case of</text><text start=\"195.87\" dur=\"1.63\">multiplication it will do something different.</text><text start=\"197.5\" dur=\"2.53\">If we give them two strings it will do something different.</text><text start=\"200.03\" dur=\"3.5\">So we&amp;#39;re letting the operator use the type of the object to</text><text start=\"203.53\" dur=\"2.45\">decide what the right operation is to do.</text><text start=\"205.98\" dur=\"2.88\">The last one we show here is that given we say we now have</text><text start=\"208.86\" dur=\"3.38\">a non-scalar object we need to know how many portions are</text><text start=\"212.24\" dur=\"0.86\">there inside of it.</text><text start=\"213.1\" dur=\"2.61\">And for that there&amp;#39;s a built-in Python function</text><text start=\"215.71\" dur=\"1.77\">called len for length.</text><text start=\"217.48\" dur=\"6.31\">And if I want to ask for the length of a particular string</text><text start=\"223.79\" dur=\"2.75\">it gives me back that answer.</text><text start=\"226.54\" dur=\"4.06\">So I now have compound objects that I can do things with.</text><text start=\"230.6\" dur=\"1.89\">Well obviously one of the things I&amp;#39;d like to do is not</text><text start=\"232.49\" dur=\"0.81\">just put them together.</text><text start=\"233.3\" dur=\"2.42\">I&amp;#39;d like to get parts out of them.</text><text start=\"235.72\" dur=\"2.53\">So that leads to the interesting question of how do</text><text start=\"238.25\" dur=\"3.78\">I get out elements of a compound object like a string.</text><text start=\"242.03\" dur=\"2.84\">And here I want to show two examples.</text><text start=\"244.87\" dur=\"2.395\">The first one is we can do what&amp;#39;s called the indexing.</text><text start=\"247.265\" dur=\"2.435\">And let me show you an instance of this.</text><text start=\"249.7\" dur=\"2.67\">If I give the string &amp;#39;abc&amp;#39;.</text><text start=\"252.37\" dur=\"2.71\">Notice the single quotes around it so that is a string.</text><text start=\"255.08\" dur=\"3.98\">And in square brackets are braces after it I give it an</text><text start=\"259.06\" dur=\"4.7\">integer, like 0, it&amp;#39;s going to give me out the element of the</text><text start=\"263.76\" dur=\"2.89\">string corresponding to that index.</text><text start=\"266.65\" dur=\"1.3\">Now how does it do this?</text><text start=\"267.95\" dur=\"1.04\">Well it starts--</text><text start=\"268.99\" dur=\"1.78\">well, if you want to think of it this way of</text><text start=\"270.77\" dur=\"2.15\">counting from 0.</text><text start=\"272.92\" dur=\"1.85\">So there&amp;#39;s the string.</text><text start=\"274.77\" dur=\"2.48\">The zeroth element is that one.</text><text start=\"277.25\" dur=\"2.39\">And it will return that value.</text><text start=\"279.64\" dur=\"3.31\">Similarly if I say from the string &amp;#39;abc&amp;#39; give me the</text><text start=\"282.95\" dur=\"4.4\">second element it starts at 0,1,2</text><text start=\"287.35\" dur=\"1.66\">there&amp;#39;s the second element.</text><text start=\"289.01\" dur=\"4.17\">And it returns that string.</text><text start=\"293.18\" dur=\"1.9\">Now you have to be careful.</text><text start=\"295.08\" dur=\"1.8\">If I ask for the third element.</text><text start=\"296.88\" dur=\"2.14\">Remember, I start counting at 0.</text><text start=\"299.02\" dur=\"2.34\">There&amp;#39;s 0, 1, 2.</text><text start=\"301.36\" dur=\"2.3\">The third element, oh, there isn&amp;#39;t one.</text><text start=\"303.66\" dur=\"2.13\">And we get out an error.</text><text start=\"305.79\" dur=\"1.19\">And we can seen this over here.</text><text start=\"306.98\" dur=\"4.5\">If I, for example, just type it into Python.</text><text start=\"311.48\" dur=\"3.31\">I can say give me the string &amp;#39;abc.&amp;#39; And I&amp;#39;ll take, in this</text><text start=\"314.79\" dur=\"2.052\">case, the first element.</text><text start=\"316.842\" dur=\"2.218\">And that will give me b.</text><text start=\"319.06\" dur=\"3.03\">Because I start at 0 and go to 1.</text><text start=\"322.09\" dur=\"3.79\">Now I can also though go backwards.</text><text start=\"325.88\" dur=\"3.06\">So if I have a string &amp;#39;abc&amp;#39; and I give it in square</text><text start=\"328.94\" dur=\"4.46\">brackets or braces a negative number, it basically starts at</text><text start=\"333.4\" dur=\"5.68\">0 and then counts backwards to minus 1 and then to minus 2.</text><text start=\"339.08\" dur=\"3.1\">So that minus 1 index will return as the c.</text><text start=\"342.18\" dur=\"3.72\">So it basically starts at the back end and counts backward.</text><text start=\"345.9\" dur=\"3.13\">So we get out components of strings which is good.</text><text start=\"349.03\" dur=\"2.11\">Now sometimes we&amp;#39;ll want to get out not just a single</text><text start=\"351.14\" dur=\"3.43\">element, we&amp;#39;ll want to get out a substring of a string.</text><text start=\"354.57\" dur=\"3.41\">And for that we have a technique called slicing.</text><text start=\"357.98\" dur=\"5.03\">So we have a string called s, then this expression here</text><text start=\"363.01\" dur=\"2.88\">where we have two expressions, a start and an end that are</text><text start=\"365.89\" dur=\"3.06\">both integers or their values are integers that denotes the</text><text start=\"368.95\" dur=\"5.26\">substring that starts at the index pointed to by start and</text><text start=\"374.21\" dur=\"4.38\">stops just before the index pointed to by end.</text><text start=\"378.59\" dur=\"1.09\">So just to see that.</text><text start=\"379.68\" dur=\"3.57\">If I again take my string &amp;#39;abc&amp;#39; and I say give me</text><text start=\"383.25\" dur=\"3.23\">everything starting at one and stopping before the third</text><text start=\"386.48\" dur=\"4.58\">index it returns for me the string bc.</text><text start=\"391.06\" dur=\"1.6\">We&amp;#39;re going to come back to doing things with strings</text><text start=\"392.66\" dur=\"3.01\">later on, but we wanted to let you see that given compound or</text><text start=\"395.67\" dur=\"3.68\">non-scalar objects like strings, not only can we</text><text start=\"399.35\" dur=\"2.79\">combine together but we can also get out pieces of them.</text><text start=\"402.14\" dur=\"3.07\">Either individual elements or subcomponents of them.</text><text start=\"405.21\" dur=\"2.03\">And we&amp;#39;ll use that as we start doing more interesting</text><text start=\"407.24\" dur=\"1.25\">things moving on.</text></transcript>\n", "kB6-nallVQ4": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.36\"></text><text start=\"0.36\" dur=\"2.15\">If you want to have a persistent\nand organized</text><text start=\"2.51\" dur=\"3.03\">reference, collaboratively\ncollected and edited by the</text><text start=\"5.54\" dur=\"3.84\">students of your course, you\ncan use the edX wiki.</text><text start=\"9.38\" dur=\"3.15\">You can create a new article\nby linking to it from an</text><text start=\"12.53\" dur=\"3.22\">existing article and then\nclicking on the link.</text><text start=\"15.75\" dur=\"1.82\">You can also create an\narticle from the</text><text start=\"17.57\" dur=\"1.72\">generic children listing.</text><text start=\"19.29\" dur=\"3.01\">However, your fellow students\nare more likely to see</text><text start=\"22.3\" dur=\"3.14\">articles that are linked to from\nother articles, because</text><text start=\"25.44\" dur=\"2.75\">that linking allows you readers\nto see how your</text><text start=\"28.19\" dur=\"2.68\">information is relevant to\nwhat they are already</text><text start=\"30.87\" dur=\"3.11\">interested in and reading about,\nmaking them more likely</text><text start=\"33.98\" dur=\"1.9\">to be interested in the\ninformation that you are</text><text start=\"35.88\" dur=\"1.53\">putting together.</text><text start=\"37.41\" dur=\"2.97\">The edX Wiki Editing Guide\ncontains the most up-to-date</text><text start=\"40.38\" dur=\"3.82\">details on how to add formatting\nfor standard text,</text><text start=\"44.2\" dur=\"5.47\">math, schematics, tables,\ncode, and any other new</text><text start=\"49.67\" dur=\"2.34\">features that were added\nto the wiki.</text></transcript>\n", "l8Hw2V1tXmc": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.93\"></text><text start=\"0.93\" dur=\"3.4\">We&amp;#39;re going to talk about partitioning\nup the space of inputs to create a</text><text start=\"4.33\" dur=\"3.28\">good test suite, a set of examples we&amp;#39;re\ngoing to use to try to decide</text><text start=\"7.61\" dur=\"2.4\">whether or not our code is bug free.</text><text start=\"10.01\" dur=\"3.85\">First tool we have is what we\ncall black-box testing.</text><text start=\"13.86\" dur=\"4.49\">And black-box refers to the fact that\nit&amp;#39;s just a box covered in black so we</text><text start=\"18.35\" dur=\"1.56\">can&amp;#39;t see inside of it.</text><text start=\"19.91\" dur=\"4.65\">So here the test suite is designed\nwithout actually looking at the code.</text><text start=\"24.56\" dur=\"2.55\">Nice thing about this is it can be\ndone by someone other than the</text><text start=\"27.11\" dur=\"0.88\">implementer.</text><text start=\"27.99\" dur=\"2.63\">So we could have quality assurance group\nthat is actually going to design</text><text start=\"30.62\" dur=\"1.26\">the test suite here.</text><text start=\"31.88\" dur=\"3.37\">And one of the nice advantages there is\nthat that often can help us avoid</text><text start=\"35.25\" dur=\"1.82\">inherent biases.</text><text start=\"37.07\" dur=\"2.95\">As an implementer, when I design code,\nI may be assuming that I&amp;#39;m always</text><text start=\"40.02\" dur=\"2.84\">going to run this on positive\nvalues, for example.</text><text start=\"42.86\" dur=\"3.52\">But if I don&amp;#39;t build that into the\nspecification and I don&amp;#39;t build in</text><text start=\"46.38\" dur=\"3.24\">checks for that, somebody else may come\nalong and try it on a negative</text><text start=\"49.62\" dur=\"3.35\">value and expose the fact that I\nhave a bug inside of my code.</text><text start=\"52.97\" dur=\"3.2\">So that lack of bias, that\nlack of implicit bias is</text><text start=\"56.17\" dur=\"2.11\">actually a great plus.</text><text start=\"58.28\" dur=\"3.1\">Another thing that&amp;#39;s nice is that the\ntesting is designed without knowledge</text><text start=\"61.38\" dur=\"1.21\">of the implementation.</text><text start=\"62.59\" dur=\"3.74\">Since it&amp;#39;s built just on looking at the\nspecifications for the problem--</text><text start=\"66.33\" dur=\"1.92\">I don&amp;#39;t know how it&amp;#39;s\nactually encoded--</text><text start=\"68.25\" dur=\"3.77\">that means that that same test suite\ncan be reused, even if I change the</text><text start=\"72.02\" dur=\"1.34\">implementation.</text><text start=\"73.36\" dur=\"2.91\">And that&amp;#39;s actually nice, that sort of\nseparation of the details of the</text><text start=\"76.27\" dur=\"2.54\">implementation from the use\nof the implementation.</text><text start=\"78.81\" dur=\"3.59\">That abstraction is an important\npart of how we build modules.</text><text start=\"82.4\" dur=\"2.05\">And testing should take\nadvantage of that.</text><text start=\"84.45\" dur=\"2.49\">And, indeed, black-box testing will.</text><text start=\"86.94\" dur=\"4.12\">All right, now let&amp;#39;s look at what does\nit mean to do some black-box testing.</text><text start=\"91.06\" dur=\"2.83\">So let&amp;#39;s think about a specification.</text><text start=\"93.89\" dur=\"1.78\">Here&amp;#39;s a piece of code.</text><text start=\"95.67\" dur=\"2.89\">And again, here I&amp;#39;m actually\njust showing you the spec.</text><text start=\"98.56\" dur=\"1.42\">I don&amp;#39;t know the details of it.</text><text start=\"99.98\" dur=\"1.39\">It&amp;#39;s a square root.</text><text start=\"101.37\" dur=\"3.49\">And it says sqrt takes in two\nvalues, x and epsilon.</text><text start=\"104.86\" dur=\"4.12\">And it assumes they&amp;#39;re both floats, that\nx is greater than or equal to 0,</text><text start=\"108.98\" dur=\"3.07\">epsilon is greater than 0, and it&amp;#39;s\ngoing to return a result with a</text><text start=\"112.05\" dur=\"2.44\">particular condition on the end.</text><text start=\"114.49\" dur=\"4.13\">OK, what are the paths through\nthe specification?</text><text start=\"118.62\" dur=\"4.23\">Well if I look at this spec,\nI can see that x--</text><text start=\"122.85\" dur=\"1.51\">there are two conditions, basically.</text><text start=\"124.36\" dur=\"4.3\">I can separate out when x is equal to\n0 from where x is greater than 0.</text><text start=\"128.66\" dur=\"3.78\">And I could, in principle, just\ncreate two test cases, one</text><text start=\"132.44\" dur=\"1.74\">for each one of those.</text><text start=\"134.18\" dur=\"2.49\">But I kind of know that&amp;#39;s not enough.</text><text start=\"136.67\" dur=\"4.6\">So the spec itself is simply giving\nme a first pass of how I might</text><text start=\"141.27\" dur=\"0.67\">try and test it.</text><text start=\"141.94\" dur=\"2.38\">But I might want to think about\nother places in which I want</text><text start=\"144.32\" dur=\"2.58\">to refine that idea.</text><text start=\"146.9\" dur=\"2.06\">OK what does that mean?</text><text start=\"148.96\" dur=\"2.56\">Well, let&amp;#39;s think about this.</text><text start=\"151.52\" dur=\"4.28\">It&amp;#39;s often good not only when I&amp;#39;m\nthinking about paths through the</text><text start=\"155.8\" dur=\"4.15\">specification to think about just the\npossible paths, but to think about the</text><text start=\"159.95\" dur=\"1.92\">boundary cases.</text><text start=\"161.87\" dur=\"4.17\">As an aside, if I have an input that&amp;#39;s a\nlist, what are the boundary cases we</text><text start=\"166.04\" dur=\"1.16\">might want to think about here?</text><text start=\"167.2\" dur=\"1.4\">Well the list could be empty.</text><text start=\"168.6\" dur=\"1.89\">The list could have one element.</text><text start=\"170.49\" dur=\"2.43\">Or the list could have many elements.</text><text start=\"172.92\" dur=\"2.57\">Difference between 2, 3, 4--\nprobably not as crucial.</text><text start=\"175.49\" dur=\"2.99\">But the difference between\n0, 1, and many--</text><text start=\"178.48\" dur=\"3.1\">that&amp;#39;s a nice set of boundary\nconditions to think about.</text><text start=\"181.58\" dur=\"1.99\">For numbers, we can do similar things.</text><text start=\"183.57\" dur=\"1.89\">It&amp;#39;s not just is it 0 or positive.</text><text start=\"185.46\" dur=\"3.33\">It&amp;#39;s also what happens if\nthe number&amp;#39;s very small?</text><text start=\"188.79\" dur=\"1.71\">What happens if the number&amp;#39;s\nvery large?</text><text start=\"190.5\" dur=\"1.85\">And what happens in the typical case?</text><text start=\"192.35\" dur=\"2.19\">And I&amp;#39;m going to put quotes around\ntypical, because I&amp;#39;m going to have to</text><text start=\"194.54\" dur=\"3.79\">think about different variations, what\nit means to be typical, based on the</text><text start=\"198.33\" dur=\"2.58\">specifications of the problem.</text><text start=\"200.91\" dur=\"4.08\">So if we go back to my square root\nexample, we can actually</text><text start=\"204.99\" dur=\"1.41\">think about this then.</text><text start=\"206.4\" dur=\"3.1\">What might be good test\ncases to use here?</text><text start=\"209.5\" dur=\"1.75\">Well I&amp;#39;ve put a little\ntable together here.</text><text start=\"211.25\" dur=\"5.14\">And these first four are what I would\nthink of as typical cases.</text><text start=\"216.39\" dur=\"1.06\">OK?</text><text start=\"217.45\" dur=\"3.95\">Notice in all cases I&amp;#39;m using epsilon\nto be pretty small because I want to</text><text start=\"221.4\" dur=\"2.86\">get answers that are close\nto the right answer.</text><text start=\"224.26\" dur=\"1.7\">That was part of that specification--</text><text start=\"225.96\" dur=\"4.37\">that the difference between the actual\nvalue and the value I guessed at</text><text start=\"230.33\" dur=\"2.45\">should be very close to what I want.</text><text start=\"232.78\" dur=\"1.08\">And then notice what I&amp;#39;ve got.</text><text start=\"233.86\" dur=\"5.03\">I&amp;#39;ve got, from the spec, the case of 0\nand then the case of positive things.</text><text start=\"238.89\" dur=\"1.2\">And I&amp;#39;ve picked out other things.</text><text start=\"240.09\" dur=\"2.4\">I&amp;#39;ve picked out a perfect square.</text><text start=\"242.49\" dur=\"4.56\">I&amp;#39;ve picked out a square whose\nroot is irrational.</text><text start=\"247.05\" dur=\"4.12\">And I&amp;#39;ve picked out one where the input\nis less than 1 because I know</text><text start=\"251.17\" dur=\"3.02\">for numbers, and especially for square\nroots, there&amp;#39;s often a difference</text><text start=\"254.19\" dur=\"3.24\">between fractions and numbers\nbigger than 1.</text><text start=\"257.43\" dur=\"3.38\">I&amp;#39;ve selected four good\ntypical examples.</text><text start=\"260.81\" dur=\"4.09\">The second thing I&amp;#39;ve done is I&amp;#39;ve\nlooked at some examples that are a</text><text start=\"264.9\" dur=\"1.09\">little bit different.</text><text start=\"265.99\" dur=\"2.8\">And the first one, right here,\nis one where I&amp;#39;m still</text><text start=\"268.79\" dur=\"1.88\">taking a simple example.</text><text start=\"270.67\" dur=\"4.6\">But I&amp;#39;m taking a very small epsilon.</text><text start=\"275.27\" dur=\"1.86\">That is likely to stretch my code.</text><text start=\"277.13\" dur=\"3.23\">What happens if I have something\nthat is really, really small?</text><text start=\"280.36\" dur=\"0.97\">OK?</text><text start=\"281.33\" dur=\"4.64\">And then I&amp;#39;m looking at examples where\nI&amp;#39;m either taking really large or</text><text start=\"285.97\" dur=\"4.42\">really small values, both\nfor x and for epsilon.</text><text start=\"290.39\" dur=\"1.22\">And I&amp;#39;m trying those out.</text><text start=\"291.61\" dur=\"4.85\">So that&amp;#39;s into that very small, very\nlarge, as opposed to the typical case.</text><text start=\"296.46\" dur=\"5.14\">Now in these last five extremes here, if\nI, in fact, find a bug, one of the</text><text start=\"301.6\" dur=\"4.78\">things that will be interesting is that\nthe bug might be inside the code.</text><text start=\"306.38\" dur=\"1.45\">Or it might be in the spec.</text><text start=\"307.83\" dur=\"4.25\">For example, don&amp;#39;t try and find a\nroot if epsilon is really tiny.</text><text start=\"312.08\" dur=\"3.68\">But it&amp;#39;ll at least expose do\nI have a problem or not.</text><text start=\"315.76\" dur=\"1.59\">So there&amp;#39;s a partition.</text><text start=\"317.35\" dur=\"4.9\">This right here is a nice partition\nof the input space.</text><text start=\"322.25\" dur=\"5.44\">And it has both typical examples\nand boundary case examples.</text><text start=\"327.69\" dur=\"4.17\">And that is a nice example, just based\non black-box testing of looking at</text><text start=\"331.86\" dur=\"2.38\">what is the specification,\nwhat might I do.</text><text start=\"334.24\" dur=\"1.25\"></text></transcript>\n", "waIE0L9vfiI": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.1\"></text><text start=\"1.1\" dur=\"2.27\">ERIC GRIMSON: In the last\nsection, we introduced a</text><text start=\"3.37\" dur=\"2.99\">couple concepts in terms of\nwriting programs or scripts.</text><text start=\"6.36\" dur=\"2.67\">We had straight-line programs,\nwhere we had just a linear</text><text start=\"9.03\" dur=\"2.13\">sequence of instructions\nand we executed them 1</text><text start=\"11.16\" dur=\"1.19\">at a time in order.</text><text start=\"12.35\" dur=\"2.93\">And we added the idea of\nbranching, or conditionals,</text><text start=\"15.28\" dur=\"2.73\">where we could do a test, and\ndepending on whether that test</text><text start=\"18.01\" dur=\"3.25\">was true or false, we might skip\nto 1 piece of code or a</text><text start=\"21.26\" dur=\"1.49\">different piece of code.</text><text start=\"22.75\" dur=\"3.54\">But in both cases, we&amp;#39;re doing\neach instruction at most once.</text><text start=\"26.29\" dur=\"2.35\">Useful, but not great.</text><text start=\"28.64\" dur=\"3.02\">To get to the ability to write\nprograms or scripts with</text><text start=\"31.66\" dur=\"3.87\">arbitrary complexity, we need\n1 more key concept, and that</text><text start=\"35.53\" dur=\"3.53\">concept is the idea of being\nable to reuse a piece of code</text><text start=\"39.06\" dur=\"2\">an arbitrary number of times.</text><text start=\"41.06\" dur=\"2.48\">We might have a set of things\nwe want to do once or</text><text start=\"43.54\" dur=\"2.69\">depending on some value, twice,\nor depending on some</text><text start=\"46.23\" dur=\"2.72\">value, 27 times or\n1,000 times.</text><text start=\"48.95\" dur=\"3.11\">And rather than having to copy\nthe code that many times, we&amp;#39;d</text><text start=\"52.06\" dur=\"3.56\">like to be able to have the\ncomputer automatically reuse</text><text start=\"55.62\" dur=\"2.26\">the code as many times\nas desired.</text><text start=\"57.88\" dur=\"2.61\">That notion of iteration is\ngoing to be incredibly</text><text start=\"60.49\" dur=\"2.77\">valuable, and we&amp;#39;re going to\ntalk about some constructs to</text><text start=\"63.26\" dur=\"1.4\">help us make that happen.</text><text start=\"64.66\" dur=\"1.85\">The basic idea, though,\nis straightforward.</text><text start=\"66.51\" dur=\"2.41\">Given that we have some code\nwe&amp;#39;re executing, when we get</text><text start=\"68.92\" dur=\"2.92\">to an iteration loop, which is\nthis chunk right here, we</text><text start=\"71.84\" dur=\"1.62\">start with a test.</text><text start=\"73.46\" dur=\"3.56\">That will be Boolean that will\nreturn either True or False.</text><text start=\"77.02\" dur=\"3.58\">If it&amp;#39;s True, we&amp;#39;re going to go\ndown and execute some set</text><text start=\"80.6\" dur=\"3.09\">of instructions, the body of\nthe loop, and then go back</text><text start=\"83.69\" dur=\"2.56\">around and do the test again.</text><text start=\"86.25\" dur=\"1.2\">And we&amp;#39;ll keep doing that.</text><text start=\"87.45\" dur=\"3.16\">As long as the test is True,\nwe&amp;#39;ll execute that same set of</text><text start=\"90.61\" dur=\"3.91\">instructions in the body over,\nand over, and over, until</text><text start=\"94.52\" dur=\"4.15\">finally, the test is False, in\nwhich case we skip around the</text><text start=\"98.67\" dur=\"4.29\">loop body and pick up the\ncomputation elsewhere.</text><text start=\"102.96\" dur=\"4.17\">This notice allows me, based\non this Boolean test, to be</text><text start=\"107.13\" dur=\"2.79\">able to do the code some\narbitrary number of times, and</text><text start=\"109.92\" dur=\"1.16\">that&amp;#39;s really great.</text><text start=\"111.08\" dur=\"1.46\">Let&amp;#39;s look at an example.</text><text start=\"112.54\" dur=\"2.47\">Here&amp;#39;s a simple example that\nshows that idea, and I want to</text><text start=\"115.01\" dur=\"3.362\">talk about the syntax of the\nconstruct, but also about what</text><text start=\"118.372\" dur=\"1.348\">the example&amp;#39;s going to do.</text><text start=\"119.72\" dur=\"3.04\">This is a simple piece of code\nthat squares a number.</text><text start=\"122.76\" dur=\"1.97\">I want to get x squared, but\nI&amp;#39;m going to do a by just</text><text start=\"124.73\" dur=\"3.899\">successively adding x to itself\nx times, which is of</text><text start=\"128.629\" dur=\"1.671\">course what x squared\nactually does.</text><text start=\"130.3\" dur=\"2.14\">I add x copies together.</text><text start=\"132.44\" dur=\"1.12\">Notice what we&amp;#39;ve got.</text><text start=\"133.56\" dur=\"1.38\">We&amp;#39;re going to set up\nsome value of x.</text><text start=\"134.94\" dur=\"1.61\">I&amp;#39;m going to do a\nbinding there.</text><text start=\"136.55\" dur=\"3.05\">We&amp;#39;re going to bind a variable\nans for answer, which is where</text><text start=\"139.6\" dur=\"3.07\">we&amp;#39;re going to add up all the\ninstances of x to get where we</text><text start=\"142.67\" dur=\"0.63\">want to be.</text><text start=\"143.3\" dur=\"2.4\">And we&amp;#39;re going to need to\nkeep track of how many</text><text start=\"145.7\" dur=\"2.11\">versions of x do we still\nhave to add in.</text><text start=\"147.81\" dur=\"1.81\">So we&amp;#39;re going to set up\nanother variable called</text><text start=\"149.62\" dur=\"2.34\">itersLeft, initially\nbound to x.</text><text start=\"151.96\" dur=\"2.65\">The looping construct, the\niteration construct, we have</text><text start=\"154.61\" dur=\"1.74\">is called a while loop.</text><text start=\"156.35\" dur=\"2.68\">And there&amp;#39;s the key word\nwhile, and it has the</text><text start=\"159.03\" dur=\"1.27\">following property.</text><text start=\"160.3\" dur=\"2.8\">It has a Boolean test-- in this\ncase, we&amp;#39;re checking to</text><text start=\"163.1\" dur=\"2.88\">see whether itersLeft is\nequal to 0 or not--</text><text start=\"165.98\" dur=\"3.82\">followed by a colon, and then\nit has a set of indented</text><text start=\"169.8\" dur=\"2.83\">instructions, which of course,\nare the body of the loop.</text><text start=\"172.63\" dur=\"1.96\">The way the while\nloop works is it</text><text start=\"174.59\" dur=\"2.39\">first tests that Boolean.</text><text start=\"176.98\" dur=\"3.49\">If that Boolean is True,\nitersLeft is not equal to 0 in</text><text start=\"180.47\" dur=\"2.12\">this case, it will then\nexecute each of the</text><text start=\"182.59\" dur=\"1.89\">instructions in the\nbody in sequence.</text><text start=\"184.48\" dur=\"2.69\">And when it gets to the end of\nthat sequence of instructions,</text><text start=\"187.17\" dur=\"3.31\">it&amp;#39;s going to go back up and\nretest the Boolean again.</text><text start=\"190.48\" dur=\"3.85\">So it will cycle through this\ncode multiple times until that</text><text start=\"194.33\" dur=\"2.08\">Boolean is finally False.</text><text start=\"196.41\" dur=\"2.63\">When it is False, it will skip\ndown to the end of the loop,</text><text start=\"199.04\" dur=\"2.81\">which is shown by where the\nindentation stops, and pick up</text><text start=\"201.85\" dur=\"2.29\">the new set of instructions\nand continue.</text><text start=\"204.14\" dur=\"2.72\">So there&amp;#39;s the structure, let&amp;#39;s\nsee if this does the</text><text start=\"206.86\" dur=\"1.02\">right thing.</text><text start=\"207.88\" dur=\"2.37\">Well, here&amp;#39;s my code, and let&amp;#39;s\njust walk through this.</text><text start=\"210.25\" dur=\"1.96\">We won&amp;#39;t run it on idle, we&amp;#39;ll\njust walk through it.</text><text start=\"212.21\" dur=\"3.83\">Initially, x is bound to 3,\nans is bound to 0, and</text><text start=\"216.04\" dur=\"1.56\">itersLeft is bound to 3.</text><text start=\"217.6\" dur=\"4.14\">The while loop says, test to\nsee if this is equal to 0.</text><text start=\"221.74\" dur=\"3.63\">Since it is not equal to 0,\nthe test is True, and</text><text start=\"225.37\" dur=\"2.65\">therefore, I take the current\nvalue of ans, the current</text><text start=\"228.02\" dur=\"4.46\">value of x, add them together,\nand rebind that to ans.</text><text start=\"232.48\" dur=\"3.21\">I then take itersLeft, subtract\none from it, and</text><text start=\"235.69\" dur=\"2.47\">rebind that to itersLeft.</text><text start=\"238.16\" dur=\"3.36\">So I&amp;#39;ve decremented itersLeft,\nand I&amp;#39;ve incremented ans.</text><text start=\"241.52\" dur=\"2.76\">I go back up, and\nagain, I check.</text><text start=\"244.28\" dur=\"1.19\">Is that not equal to 0?</text><text start=\"245.47\" dur=\"1.07\">It is not equal to 0.</text><text start=\"246.54\" dur=\"2.96\">Therefore, I take ans and I take\nx, I add them together,</text><text start=\"249.5\" dur=\"2.91\">and I rebind those to be\nthe new value of ans.</text><text start=\"252.41\" dur=\"1.53\">I change itersLeft by 1.</text><text start=\"253.94\" dur=\"1.61\">That&amp;#39;s my new value there.</text><text start=\"255.55\" dur=\"1.87\">And again, I go back\nthrough the loop.</text><text start=\"257.42\" dur=\"1.359\">That is not equal to 0.</text><text start=\"258.779\" dur=\"3.12\">Well, the test is still True,\nso again, I take ans, I take</text><text start=\"261.899\" dur=\"3.981\">x, add them together, create\nthat to be my new binding for</text><text start=\"265.88\" dur=\"1.73\">ans, which is 9.</text><text start=\"267.61\" dur=\"2.8\">I take itersLeft, subtract 1\nfrom it, there&amp;#39;s my new value</text><text start=\"270.41\" dur=\"1.12\">of itersLeft.</text><text start=\"271.53\" dur=\"1.82\">And again, I go back to\nthe top of the loop.</text><text start=\"273.35\" dur=\"3.95\">At this point, 0 being not\nequal to 0 is False.</text><text start=\"277.3\" dur=\"2.07\">Terrible way of saying it, but\nthat test is no longer True.</text><text start=\"279.37\" dur=\"0.73\">It&amp;#39;s False.</text><text start=\"280.1\" dur=\"3.9\">In which case, I will skip to\nthe end of this loop, and</text><text start=\"284\" dur=\"3.3\">print out that x * x,\nor if you like, 3 *</text><text start=\"287.3\" dur=\"1.56\">3, is equal to 9.</text><text start=\"288.86\" dur=\"1.06\">Cool.</text><text start=\"289.92\" dur=\"2.13\">A little slow, but it\ndoes what I want.</text><text start=\"292.05\" dur=\"4.15\">Notice I have reused this code\nan arbitrary number times.</text><text start=\"296.2\" dur=\"3.06\">And in fact, if I were to change\nx to be something else,</text><text start=\"299.26\" dur=\"1.96\">I will reuse that\npiece of code a</text><text start=\"301.22\" dur=\"1.39\">different number of times.</text><text start=\"302.61\" dur=\"2.09\">There&amp;#39;s my iteration\nthat I really want.</text><text start=\"304.7\" dur=\"1.49\">You can also see some\nproperties of</text><text start=\"306.19\" dur=\"1.31\">an iterative loop.</text><text start=\"307.5\" dur=\"2.84\">First of all, we need to set an\niteration variable outside</text><text start=\"310.34\" dur=\"0.4\">of the loop.</text><text start=\"310.74\" dur=\"3.3\">In this case, it&amp;#39;s\nx and itersLeft.</text><text start=\"314.04\" dur=\"2.61\">Actually, the one I really care\nabout here is itersLeft.</text><text start=\"316.65\" dur=\"2.63\">I also need to test\nthat variable to</text><text start=\"319.28\" dur=\"2.1\">determine when I&amp;#39;m done.</text><text start=\"321.38\" dur=\"2.65\">There&amp;#39;s the use of itersLeft\ninside of the test.</text><text start=\"324.03\" dur=\"2.06\">Now, it could be a simple\ntest, it could be a more</text><text start=\"326.09\" dur=\"2.63\">compound test, but that&amp;#39;s\nbasically what I need to test.</text><text start=\"328.72\" dur=\"3.03\">And finally, I need to be\nchanging that variable inside</text><text start=\"331.75\" dur=\"2.01\">of the loop, right there.</text><text start=\"333.76\" dur=\"2.84\">If I didn&amp;#39;t, then that test\nvalue would never change,</text><text start=\"336.6\" dur=\"2.09\">which means I would never\nstop the loop.</text><text start=\"338.69\" dur=\"1.41\">But there&amp;#39;s a property I need.</text><text start=\"340.1\" dur=\"2.73\">When I set up an iterative loop,\nI need to say what&amp;#39;s the</text><text start=\"342.83\" dur=\"4.13\">variable I&amp;#39;m setting outside,\nhow am I testing it, and am I</text><text start=\"346.96\" dur=\"3.08\">making sure to change it somehow\ninside of the loop in</text><text start=\"350.04\" dur=\"2.89\">order to ensure that I get\nthe pieces that I want.</text><text start=\"352.93\" dur=\"1.48\">So what do we have now?</text><text start=\"354.41\" dur=\"2.51\">Well, that&amp;#39;s a really\nvaluable construct.</text><text start=\"356.92\" dur=\"2.25\">We already saw that branching\nstructures, things like</text><text start=\"359.17\" dur=\"2.65\">conditionals, will let us jump\nto different pieces of code</text><text start=\"361.82\" dur=\"1.95\">based on a test.</text><text start=\"363.77\" dur=\"2.6\">Once we add in the idea of\nlooping over the code, things</text><text start=\"366.37\" dur=\"3.81\">like a while loop, that allows\nus to repeat pieces of code</text><text start=\"370.18\" dur=\"1.36\">until the condition\nis satisfied.</text><text start=\"371.54\" dur=\"3.04\">So it&amp;#39;s a generalization\nof a conditional.</text><text start=\"374.58\" dur=\"2.54\">On simple branching structures,\nwe&amp;#39;ve already said</text><text start=\"377.12\" dur=\"2.58\">that programs like that are\nconstant time, that is, we</text><text start=\"379.7\" dur=\"2.68\">execute each instruction\nat most, once.</text><text start=\"382.38\" dur=\"1.84\">With looping structures, notice</text><text start=\"384.22\" dur=\"1.32\">that things are different.</text><text start=\"385.54\" dur=\"2.23\">Now, the program is going to\ntake an amount of time that</text><text start=\"387.77\" dur=\"3.79\">depends on values of variables\nas well as the amount of code</text><text start=\"391.56\" dur=\"2.95\">or the number of instructions\ninside the loop, because it&amp;#39;s</text><text start=\"394.51\" dur=\"1.86\">going to depend how many times\nwe walk through the loop, and</text><text start=\"396.37\" dur=\"2.17\">that depends on the variable.</text><text start=\"398.54\" dur=\"2.37\">Nonetheless, these loops are\ngoing to be really valuable,</text><text start=\"400.91\" dur=\"1.38\">and we&amp;#39;re going to turn\nto that next.</text><text start=\"402.29\" dur=\"1.25\"></text></transcript>\n", "Vt6MxpUBz_k": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.65\"></text><text start=\"1.65\" dur=\"3.11\">ERIC GRIMSON: We&amp;#39;ve now added tuples,\ngeneralization of strengths, an</text><text start=\"4.76\" dur=\"3.67\">ordered sequence of elements, where\nthe elements can be any structure.</text><text start=\"8.43\" dur=\"3.2\">And we&amp;#39;ve already seen that a lot of the\noperations we wanted on strings,</text><text start=\"11.63\" dur=\"1.88\">we&amp;#39;re going to have on tuples.</text><text start=\"13.51\" dur=\"4.07\">We&amp;#39;re going to add another kind\nof structure called a list.</text><text start=\"17.58\" dur=\"2.41\">And it looks a lot like tuples.</text><text start=\"19.99\" dur=\"2.8\">And again, lists are ordered\nsequences of values.</text><text start=\"22.79\" dur=\"3.05\">Each one&amp;#39;s identified by an index, so\nit&amp;#39;s going to support all the same</text><text start=\"25.84\" dur=\"2.31\">kinds of operations I saw before.</text><text start=\"28.15\" dur=\"5.02\">The difference here is we&amp;#39;re going to\nuse these square brackets rather than</text><text start=\"33.17\" dur=\"4.61\">the parentheses to distinguish a\nlist or to create a list, as</text><text start=\"37.78\" dur=\"1.26\">opposed to a tuple.</text><text start=\"39.04\" dur=\"2.62\">So they are a little different in terms\nof how they&amp;#39;re going to look.</text><text start=\"41.66\" dur=\"2.75\">And as a consequence, and one nice\nthing, is that singletons are now</text><text start=\"44.41\" dur=\"0.86\">pretty straightforward.</text><text start=\"45.27\" dur=\"3.43\">It&amp;#39;s just a square bracket, the entry,\nand another square bracket.</text><text start=\"48.7\" dur=\"3.11\">I don&amp;#39;t have to put that annoying comma\nin that I had to do with tuples</text><text start=\"51.81\" dur=\"3.85\">in order to distinguish between an\narithmetic expression and a tuple with</text><text start=\"55.66\" dur=\"1.53\">just one element.</text><text start=\"57.19\" dur=\"0.78\">Looks much the same.</text><text start=\"57.97\" dur=\"1.44\">So what&amp;#39;s the big deal?</text><text start=\"59.41\" dur=\"3.86\">Well, there&amp;#39;s one very big difference,\nand it&amp;#39;s a really important one.</text><text start=\"63.27\" dur=\"2.29\">Which is that lists are mutable.</text><text start=\"65.56\" dur=\"0.9\">And what does that mean?</text><text start=\"66.46\" dur=\"1.91\">It means we can change them.</text><text start=\"68.37\" dur=\"1.11\">What does that mean?</text><text start=\"69.48\" dur=\"4.735\">Well, things like ints, floats, strings,\nand tuples are immutable.</text><text start=\"74.215\" dur=\"3.965\">And that means that we can&amp;#39;t go in and\nchange an element inside of them.</text><text start=\"78.18\" dur=\"2.32\">Now for ints and floats,\nthat&amp;#39;s obvious.</text><text start=\"80.5\" dur=\"2.95\">And tuples, we just introduced, so we\nsort of have to accept that on faith.</text><text start=\"83.45\" dur=\"3.38\">But if you think about strings, you can\nget elements of strings out-- you</text><text start=\"86.83\" dur=\"1.13\">can slice into strings--</text><text start=\"87.96\" dur=\"4.56\">but you can&amp;#39;t go in and directly change\none character in a string.</text><text start=\"92.52\" dur=\"1.19\">They&amp;#39;re not mutable.</text><text start=\"93.71\" dur=\"0.69\">They&amp;#39;re immutable.</text><text start=\"94.4\" dur=\"0.985\">They don&amp;#39;t change.</text><text start=\"95.385\" dur=\"3.735\">On the other hand, lists can be modified\nafter they&amp;#39;re created.</text><text start=\"99.12\" dur=\"2.06\">And why would we want to do that?</text><text start=\"101.18\" dur=\"3.23\">Well, in part because there are going\nto be some problems where that&amp;#39;s</text><text start=\"104.41\" dur=\"1.25\">really valuable.</text><text start=\"105.66\" dur=\"1.32\">So what does that mean?</text><text start=\"106.98\" dur=\"2.66\">Some data objects, we really\nwant to treat as if fixed.</text><text start=\"109.64\" dur=\"3.59\">It says we create new versions of them,\nwe combine variables to them,</text><text start=\"113.23\" dur=\"1.92\">but we don&amp;#39;t want to change them.</text><text start=\"115.15\" dur=\"3.21\">And this is usually valuable when those\ndata objects are going to be</text><text start=\"118.36\" dur=\"4.18\">frequently referenced, but where the\npieces inside of them don&amp;#39;t change.</text><text start=\"122.54\" dur=\"2.62\">Why would we want to support having\nability to change them, because that</text><text start=\"125.16\" dur=\"1.64\">could just lead to bugs?</text><text start=\"126.8\" dur=\"3.14\">On the other hand, there&amp;#39;s going to be\nsome instances where the data objects</text><text start=\"129.94\" dur=\"4.27\">may want to support modifications\nto elements inside of them.</text><text start=\"134.21\" dur=\"1.45\">Why might that happen?</text><text start=\"135.66\" dur=\"2.97\">Imagine you&amp;#39;ve got a really large\ndatabase of personnel information and</text><text start=\"138.63\" dur=\"2.18\">you want to do things like\nchange salaries.</text><text start=\"140.81\" dur=\"3.43\">You don&amp;#39;t want to have to make an\nentirely new copy of the database just</text><text start=\"144.24\" dur=\"1.46\">to add in a new salary.</text><text start=\"145.7\" dur=\"3.2\">You&amp;#39;d like to be able to go inside\nand change a piece of that.</text><text start=\"148.9\" dur=\"4.32\">So lists are going to support that kind\nof operation by enabling us to go</text><text start=\"153.22\" dur=\"3.85\">in and mutate, or alter,\nelements of the pieces.</text><text start=\"157.07\" dur=\"3.33\">One issue to keep in mind is that, while\nmutable structures give us more</text><text start=\"160.4\" dur=\"3.99\">flexibility, they also are more\nprone to programming errors.</text><text start=\"164.39\" dur=\"4.52\">If I&amp;#39;ve got two different pieces of code\nboth pointing to the same list,</text><text start=\"168.91\" dur=\"4.38\">and I have one piece of code change or\nmutate a portion of the list, I want</text><text start=\"173.29\" dur=\"2.14\">to make sure that that other piece\nof code is aware of that.</text><text start=\"175.43\" dur=\"3.5\">If not, I can get myself into some\nreally interesting bugs.</text><text start=\"178.93\" dur=\"3.72\">So there&amp;#39;s a cost, but\nthere&amp;#39;s a bonus.</text><text start=\"182.65\" dur=\"2.62\">Let&amp;#39;s look at an example\nof what this means.</text><text start=\"185.27\" dur=\"1.65\">So let&amp;#39;s create a couple of lists.</text><text start=\"186.92\" dur=\"4.11\">And in fact, over here in my IDLE\nshell, I&amp;#39;m going to do that.</text><text start=\"191.03\" dur=\"2.91\">Let me just create a couple of lists.</text><text start=\"193.94\" dur=\"3.69\">And I&amp;#39;m going to call Techs\nas a name for a couple of</text><text start=\"197.63\" dur=\"2.64\">great technical schools.</text><text start=\"200.27\" dur=\"2.67\">And notice the angle braces\nto get them for me.</text><text start=\"202.94\" dur=\"1.59\">And I&amp;#39;m going to create Ivys.</text><text start=\"204.53\" dur=\"3.03\">I&amp;#39;m not going to do all of them,\nbut I will again create a list</text><text start=\"207.56\" dur=\"2.7\">of some great schools.</text><text start=\"210.26\" dur=\"0.9\">We&amp;#39;ll do Harvard.</text><text start=\"211.16\" dur=\"0.89\">We&amp;#39;ll do Yale.</text><text start=\"212.05\" dur=\"2.16\">And we&amp;#39;ll do Brown.</text><text start=\"214.21\" dur=\"2.99\">And if I print them out, I can say,\nwhat is the value of Techs?</text><text start=\"217.2\" dur=\"2.27\">And it just gives me that list.</text><text start=\"219.47\" dur=\"2.61\">On my slide, I&amp;#39;ve given you\na visualization of that.</text><text start=\"222.08\" dur=\"4.29\">So think of this as Techs and Ivys\nsitting up in that global environment.</text><text start=\"226.37\" dur=\"3.29\">After all, I just typed them\ninto the shell for Python.</text><text start=\"229.66\" dur=\"0.67\">And what do they do?</text><text start=\"230.33\" dur=\"4.28\">Well, they point to a structure in\nmemory somewhere that has that</text><text start=\"234.61\" dur=\"3.49\">sequence of elements inside of it.</text><text start=\"238.1\" dur=\"3.42\">As I&amp;#39;ve said, I can treat this as if\nthey were just an order of sequences.</text><text start=\"241.52\" dur=\"3.89\">So I could say something like, what\nis the first element of the Ivys?</text><text start=\"245.41\" dur=\"2.54\">Remember, we start indexing at\n0, so that gives me back</text><text start=\"247.95\" dur=\"1.79\">Yale, which is nice.</text><text start=\"249.74\" dur=\"1.64\">And I could slice if I wanted to.</text><text start=\"251.38\" dur=\"5.899\">I could say give me back the Ivys,\neverything up to the second one.</text><text start=\"257.279\" dur=\"1.921\">And that gives me the zeroth\nand first elements.</text><text start=\"259.2\" dur=\"2.46\">I can do things I&amp;#39;d expect\nto do on that.</text><text start=\"261.66\" dur=\"2.84\">Let&amp;#39;s see what happens when we start\nputting things together.</text><text start=\"264.5\" dur=\"2.38\">So I&amp;#39;ve got two lists-- a\nlist of tech schools.</text><text start=\"266.88\" dur=\"1.59\">I&amp;#39;ve got a list of Ivys.</text><text start=\"268.47\" dur=\"3.52\">Let&amp;#39;s now create what looks like two\ndifferent lists of universities.</text><text start=\"271.99\" dur=\"2.68\">So the first one, I&amp;#39;m going to\ncall Univs, for universities.</text><text start=\"274.67\" dur=\"3.33\">And it&amp;#39;s going to be a list\nof the Techs and the Ivys.</text><text start=\"278\" dur=\"2.27\">And I&amp;#39;m going to create what\nlooks like the same thing.</text><text start=\"280.27\" dur=\"2.71\">I&amp;#39;m going to call it Univs1,\nand I&amp;#39;m simply going to</text><text start=\"282.98\" dur=\"3.01\">re-create that sequence.</text><text start=\"285.99\" dur=\"2.32\">Cal Tech was the first one.</text><text start=\"288.31\" dur=\"3.475\">And since I&amp;#39;m creating a list of these\nlists, I&amp;#39;m going to put a comma in</text><text start=\"291.785\" dur=\"5.965\">there, and then I&amp;#39;m going to do\nHarvard, Yale, and Brown.</text><text start=\"297.75\" dur=\"1.46\">Are these the same thing?</text><text start=\"299.21\" dur=\"1.25\">Well, let&amp;#39;s print them out.</text><text start=\"300.46\" dur=\"3.25\">If I look at Univs, yeah, nice.</text><text start=\"303.71\" dur=\"3.48\">It&amp;#39;s a list of two elements, the first\nof which is a list of two elements.</text><text start=\"307.19\" dur=\"2.12\">Second of which is a list\nof three elements.</text><text start=\"309.31\" dur=\"5\">And if I look at Univs1, it\nlooks exactly the same.</text><text start=\"314.31\" dur=\"1.32\">They certainly print the same.</text><text start=\"315.63\" dur=\"5.11\">So it is easy to think that these might,\nin fact, be the same thing.</text><text start=\"320.74\" dur=\"1.43\">But they&amp;#39;re not.</text><text start=\"322.17\" dur=\"2.67\">And let me show how I can test that.</text><text start=\"324.84\" dur=\"5.64\">Let&amp;#39;s evaluate the following\nlittle command up here.</text><text start=\"330.48\" dur=\"2.52\">An append is a method associated\nwith lists.</text><text start=\"333\" dur=\"1.33\">We&amp;#39;ll come back to methods later on.</text><text start=\"334.33\" dur=\"4.41\">That dot notation basically says,\nif I type in Techs, it&amp;#39;s a list.</text><text start=\"338.74\" dur=\"2.71\">The dot says get the method\nappend associated with it.</text><text start=\"341.45\" dur=\"4.25\">Don&amp;#39;t worry what a method is, but\nbasically think of it as a function</text><text start=\"345.7\" dur=\"2.03\">that is going to take an argument--</text><text start=\"347.73\" dur=\"3.94\">in this case, a single element, RPI--</text><text start=\"351.67\" dur=\"5.67\">and it is going to attach that element\nto the end of the list text.</text><text start=\"357.34\" dur=\"2.69\">So, what does it do?</text><text start=\"360.03\" dur=\"0.85\">It&amp;#39;s an important thing here.</text><text start=\"360.88\" dur=\"1.4\">It doesn&amp;#39;t create a new list.</text><text start=\"362.28\" dur=\"3.14\">It mutates the existing one.</text><text start=\"365.42\" dur=\"2.65\">It takes Techs as a list\nand changes it.</text><text start=\"368.07\" dur=\"4.18\">It mutates it to add a new element to\nthe end, extending the list by one.</text><text start=\"372.25\" dur=\"6.94\">Now, as a consequence, if we print out\nUnivs, notice we now have in that</text><text start=\"379.19\" dur=\"2.54\">first element MIT, Cal Tech, and RPI.</text><text start=\"381.73\" dur=\"1.83\">We have changed what&amp;#39;s\ninside of there.</text><text start=\"383.56\" dur=\"2.8\">We have mutated Techs, not Univs.</text><text start=\"386.36\" dur=\"1.15\">In fact, let&amp;#39;s just check it.</text><text start=\"387.51\" dur=\"3.17\">Let&amp;#39;s go look at Techs,\nand there&amp;#39;s Techs.</text><text start=\"390.68\" dur=\"2.05\">But again, if I go back\nto Univs, there it is.</text><text start=\"392.73\" dur=\"2.83\">And now what happened to Univs1?</text><text start=\"395.56\" dur=\"1.24\">Aha!</text><text start=\"396.8\" dur=\"1.48\">It didn&amp;#39;t change.</text><text start=\"398.28\" dur=\"1.4\">And that&amp;#39;s an important point.</text><text start=\"399.68\" dur=\"1.72\">Look at the form of Univs1.</text><text start=\"401.4\" dur=\"2.96\">It has just the first\ntwo pieces to it.</text><text start=\"404.36\" dur=\"3.69\">And, in fact, if I go to the next\nslide, we&amp;#39;ve captured that.</text><text start=\"408.05\" dur=\"5.04\">If I print out Univs, I get out MIT,\nCal Tech, RPI, followed by Harvard,</text><text start=\"413.09\" dur=\"1.13\">Yale, Brown.</text><text start=\"414.22\" dur=\"5.29\">But for Univs1, I just get MIT, Cal\nTech, and then Harvard, Yale, Brown.</text><text start=\"419.51\" dur=\"0.92\">Why?</text><text start=\"420.43\" dur=\"2.32\">Well, this is where the\nmutability comes in.</text><text start=\"422.75\" dur=\"3.35\">So let&amp;#39;s think carefully\nabout what we had.</text><text start=\"426.1\" dur=\"3.53\">Before I did that append, I&amp;#39;d had\na binding for Techs, and I had</text><text start=\"429.63\" dur=\"0.83\">a binding for Ivys.</text><text start=\"430.46\" dur=\"0.64\">We created those.</text><text start=\"431.1\" dur=\"1.13\">They said we&amp;#39;re lists.</text><text start=\"432.23\" dur=\"0.82\">And then what did I do?</text><text start=\"433.05\" dur=\"1.9\">I said, let Univs equal--</text><text start=\"434.95\" dur=\"1.8\">and in fact, let me just\nwrite it out here--</text><text start=\"436.75\" dur=\"3.38\">I bound Univs to Techs and Ivys.</text><text start=\"440.13\" dur=\"0.91\">And what does that say?</text><text start=\"441.04\" dur=\"3.19\">It says make a list.</text><text start=\"444.23\" dur=\"0.63\">So there&amp;#39;s Univs.</text><text start=\"444.86\" dur=\"1.04\">It&amp;#39;s going to make a list.</text><text start=\"445.9\" dur=\"2.35\">And it says the value of the first\nelement is going to be</text><text start=\"448.25\" dur=\"0.9\">the value of Techs.</text><text start=\"449.15\" dur=\"1.13\">So aha.</text><text start=\"450.28\" dur=\"3.33\">It&amp;#39;s just a pointer to that list.</text><text start=\"453.61\" dur=\"4.3\">And the value of the second argument,\nor the second element, is just the</text><text start=\"457.91\" dur=\"0.91\">value of Ivys.</text><text start=\"458.82\" dur=\"3.43\">So aha, it&amp;#39;s just pointing to there.</text><text start=\"462.25\" dur=\"5.12\">So Univs is a list whose elements are\njust pointers to other lists.</text><text start=\"467.37\" dur=\"3.29\">On the other hand, what did I\ndo when I created Univs1?</text><text start=\"470.66\" dur=\"2.48\">If you look back, you&amp;#39;ll see that,\nin fact, I created it by</text><text start=\"473.14\" dur=\"2.85\">actually typing out lists.</text><text start=\"475.99\" dur=\"1.04\">I said Univs1--</text><text start=\"477.03\" dur=\"1.26\">just to say a little bit of it--</text><text start=\"478.29\" dur=\"4.12\">I said Univs1 was going to be,\nand then I said quote MIT,</text><text start=\"482.41\" dur=\"1.5\">quote Cal Tech, comma.</text><text start=\"483.91\" dur=\"1.4\">And then I did a bunch\nof other things.</text><text start=\"485.31\" dur=\"1.59\">I&amp;#39;m not going to do all of it.</text><text start=\"486.9\" dur=\"5.57\">But this is telling Python, create a\nlist with those strings inside of it.</text><text start=\"492.47\" dur=\"3.442\">So in fact, that&amp;#39;s exactly\nwhat it did.</text><text start=\"495.912\" dur=\"6.648\">Univs1 is going to create a list, but\nit creates it with a new version.</text><text start=\"502.56\" dur=\"1.28\">Right there.</text><text start=\"503.84\" dur=\"2.26\">Notice Techs is not pointing to this.</text><text start=\"506.1\" dur=\"1.58\">There&amp;#39;s a new version right there.</text><text start=\"507.68\" dur=\"3.58\">Ivys is not pointing to this because I\ncreated them and inserted them inside</text><text start=\"511.26\" dur=\"1.19\">of this larger list.</text><text start=\"512.45\" dur=\"3.12\">That&amp;#39;s important, because now\nwhen I did that append on</text><text start=\"515.57\" dur=\"1.05\">Techs, what did it do?</text><text start=\"516.62\" dur=\"2.5\">It went over here and changed that.</text><text start=\"519.12\" dur=\"2.21\">It added that into the end of it.</text><text start=\"521.33\" dur=\"4.48\">That means that Univs changes\nbecause it sees that.</text><text start=\"525.81\" dur=\"1.84\">But what about Univs1?</text><text start=\"527.65\" dur=\"1.88\">This is a completely different list.</text><text start=\"529.53\" dur=\"1.68\">Nothing changed there.</text><text start=\"531.21\" dur=\"3.62\">Let&amp;#39;s make some observations\nout of this.</text><text start=\"534.83\" dur=\"4\">The elements of Univs are not copies\nof the list to which Ivys and Techs</text><text start=\"538.83\" dur=\"2.63\">are bound, but are the\nlists themselves.</text><text start=\"541.46\" dur=\"3.7\">I got the value of Techs, which\npointed to the list.</text><text start=\"545.16\" dur=\"3.31\">And this effect is something\nwe call aliasing.</text><text start=\"548.47\" dur=\"1.45\">Basically what does aliasing says?</text><text start=\"549.92\" dur=\"4.02\">It says we have two distinct\npaths to a data object.</text><text start=\"553.94\" dur=\"1.87\">One is through the variable\nTechs, in this case.</text><text start=\"555.81\" dur=\"3.19\">There&amp;#39;s a second one through the first\nelement of the list object to which</text><text start=\"559\" dur=\"1.64\">Univs is bound.</text><text start=\"560.64\" dur=\"3.56\">And one of the effects of that is that\nI can mutate an object through either</text><text start=\"564.2\" dur=\"2.97\">path, but the effect will\nbe visible to both.</text><text start=\"567.17\" dur=\"5.67\">And I just saw that back here when I\nmutated Techs, but Univs changed.</text><text start=\"572.84\" dur=\"2.52\">That sharing of data is\nreally important.</text><text start=\"575.36\" dur=\"3.48\">And that mutation, that ability to\nchange things, is really important.</text><text start=\"578.84\" dur=\"3.68\">This is very convenient, but it\nalso can be really dangerous.</text><text start=\"582.52\" dur=\"1.29\">It can be treacherous.</text><text start=\"583.81\" dur=\"3.53\">Because if I had something that was\nchanging Techs and I didn&amp;#39;t realize</text><text start=\"587.34\" dur=\"4.21\">that Univs inherited the Techs\nstructure, I&amp;#39;ve now changed something</text><text start=\"591.55\" dur=\"1.22\">inside of Univs.</text><text start=\"592.77\" dur=\"2.83\">And if you think back to the code I just\ntyped in there, you saw nothing</text><text start=\"595.6\" dur=\"2.21\">that said make a change to Univs.</text><text start=\"597.81\" dur=\"2.85\">But changing a part of\nit had that effect.</text><text start=\"600.66\" dur=\"5.73\">So aliasing is a valuable tool, but it\nis going to occasionally lead to some</text><text start=\"606.39\" dur=\"2.66\">problems, and we have to\nbe careful about it.</text><text start=\"609.05\" dur=\"1.19\">Now what else can we do?</text><text start=\"610.24\" dur=\"2.56\">Well, we can certainly change\nelements directly.</text><text start=\"612.8\" dur=\"3.59\">So if I go back, for example,\nand I look at Techs.</text><text start=\"616.39\" dur=\"2.59\">Here&amp;#39;s my list of tech schools,\nMIT, Cal Tech, RPI.</text><text start=\"618.98\" dur=\"2.52\">I might decide I want\nto change the list.</text><text start=\"621.5\" dur=\"5.41\">So I can literally say, change\nthe second element of Techs.</text><text start=\"626.91\" dur=\"2.52\">And I do it just with an\nassignment statement.</text><text start=\"629.43\" dur=\"1.93\">I&amp;#39;m going to pick up WPI.</text><text start=\"631.36\" dur=\"5.49\">And now if I look at Techs,\nthat element is changed.</text><text start=\"636.85\" dur=\"1.27\">I&amp;#39;ve mutated it.</text><text start=\"638.12\" dur=\"3.56\">By the way, if I go back and look\nat Univs, it has also changed.</text><text start=\"641.68\" dur=\"4.14\">I&amp;#39;ve now got WPI in the first\nportion of that element.</text><text start=\"645.82\" dur=\"3.6\">Just to remind you, it says I\ncan mutate elements of this.</text><text start=\"649.42\" dur=\"1.65\">I cannot do the same\nthings with tuples.</text><text start=\"651.07\" dur=\"3.32\">So if I do an example where\nI create a tuple--</text><text start=\"654.39\" dur=\"1.72\">we can look at temp.</text><text start=\"656.11\" dur=\"3.31\">But if I now say, and I could certainly\nget out, for example, the</text><text start=\"659.42\" dur=\"1.07\">first element of temp.</text><text start=\"660.49\" dur=\"5.23\">But if I attempt to change that, as I\njust did above here by putting in</text><text start=\"665.72\" dur=\"2.1\">something new, it&amp;#39;s going to complain.</text><text start=\"667.82\" dur=\"3.586\">And it says you can&amp;#39;t do it because\nthese things are not things that can</text><text start=\"671.406\" dur=\"1.324\">be mutated.</text><text start=\"672.73\" dur=\"2.01\">So now we&amp;#39;ve got lists.</text><text start=\"674.74\" dur=\"2.02\">Let&amp;#39;s see what we can do with them.</text><text start=\"676.76\" dur=\"2.2\">As I just said, stressing it,\nI can&amp;#39;t do that with tuples.</text><text start=\"678.96\" dur=\"1.25\"></text></transcript>\n", "tJMrTNDdsR8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"2.68\"></text><text start=\"2.68\" dur=\"1.14\">SAM MADDEN: Hi, I&amp;#39;m Sam Madden.</text><text start=\"3.82\" dur=\"2.17\">I&amp;#39;m a professor at MIT\nin computer science.</text><text start=\"5.99\" dur=\"4.37\">I&amp;#39;m going to talk to you today about\nsome work that I do on a research area</text><text start=\"10.36\" dur=\"2.02\">called column-oriented databases.</text><text start=\"12.38\" dur=\"2.38\">I&amp;#39;m a specialist in building\nsystems for storing very</text><text start=\"14.76\" dur=\"1.8\">large amounts of data.</text><text start=\"16.56\" dur=\"2.85\">So, before I tell you about\ncolumn-oriented databases, I need to</text><text start=\"19.41\" dur=\"2.78\">explain a little bit about\nwhat a database is.</text><text start=\"22.19\" dur=\"3.15\">So, a database is simply a\ncollection of records.</text><text start=\"25.34\" dur=\"3.95\">Much like in Python where you have\nan array, all a database does is</text><text start=\"29.29\" dur=\"2.09\">represent something that&amp;#39;s\nvery much like an array.</text><text start=\"31.38\" dur=\"2.955\">Unlike an array in Python, however,\na database is persistent.</text><text start=\"34.335\" dur=\"2.265\">It lives on disk, like a file.</text><text start=\"36.6\" dur=\"3.51\">And in addition to that, databases is\noften represent very, very large</text><text start=\"40.11\" dur=\"1.45\">quantities of information.</text><text start=\"41.56\" dur=\"2.67\">Millions, billions, even trillions\nof these records.</text><text start=\"44.23\" dur=\"3.68\">So we&amp;#39;re going to use a very boring\nexample throughout this presentation</text><text start=\"47.91\" dur=\"2.82\">to give you sort of an introduction\nto what a database system is.</text><text start=\"50.73\" dur=\"3.5\">This is an example of a record in a\ndatabase system that stores some</text><text start=\"54.23\" dur=\"1.31\">information about stock quotes.</text><text start=\"55.54\" dur=\"3.55\">So here we see a stock quote has a\nsymbol, a price, a quantity, an</text><text start=\"59.09\" dur=\"2.86\">exchange, and a date.</text><text start=\"61.95\" dur=\"5.24\">Databases take these records and they\norganize them typically into tables.</text><text start=\"67.19\" dur=\"4.05\">A table is simply a collection of\nthese records stored together.</text><text start=\"71.24\" dur=\"3.19\">Databases then, for these tables,\nprovide a language, a programming</text><text start=\"74.43\" dur=\"3.09\">language like Python, for\naccessing these records.</text><text start=\"77.52\" dur=\"3.26\">Unlike Python, however, these languages\nthat databases use are often</text><text start=\"80.78\" dur=\"1.13\">called declarative.</text><text start=\"81.91\" dur=\"2.74\">They have a very sort of English-looking\nkind of flavor.</text><text start=\"84.65\" dur=\"6.8\">For example, this query that you see\nhere selects the price of a given</text><text start=\"91.45\" dur=\"3.97\">stock that has a set of properties\nfrom the symbol GM and</text><text start=\"95.42\" dur=\"1.56\">with a certain date.</text><text start=\"96.98\" dur=\"2.68\">This particular query that you see here\nis written in a language called</text><text start=\"99.66\" dur=\"4.46\">SQL, or the structured query language,\nwhich is the most commonly used</text><text start=\"104.12\" dur=\"2.15\">language for querying databases.</text><text start=\"106.27\" dur=\"4.68\">So, databases are important because\nnearly every business, website,</text><text start=\"110.95\" dur=\"3.59\">government, all these organizations\nstore their persistent mission</text><text start=\"114.54\" dur=\"1.96\">critical data inside of databases.</text><text start=\"116.5\" dur=\"5.85\">Databases provide a very powerful set of\nabstractions for keeping data safe,</text><text start=\"122.35\" dur=\"3.92\">and storing it persistently on disk, and\nensuring that certain consistency</text><text start=\"126.27\" dur=\"1.88\">properties are preserved over it.</text><text start=\"128.15\" dur=\"3.71\">They also provide a way to evaluate\nthese queries that we see here very</text><text start=\"131.86\" dur=\"0.64\">efficiently.</text><text start=\"132.5\" dur=\"2.49\">What I&amp;#39;m going to talk about today and\nwhat column-oriented databases are</text><text start=\"134.99\" dur=\"3.67\">about is providing a very efficient\nway to evaluate certain kinds of</text><text start=\"138.66\" dur=\"1.59\">queries over data.</text><text start=\"140.25\" dur=\"5.13\">So, a database system is something that\nanswers processes, these queries</text><text start=\"145.38\" dur=\"2.34\">that are running on top\nof these databases.</text><text start=\"147.72\" dur=\"5.62\">So, the database system uses one of two\nbasic ways to evaluate queries.</text><text start=\"153.34\" dur=\"2.62\">If you think about what you have to do\nto evaluate a query, you&amp;#39;re going to</text><text start=\"155.96\" dur=\"2.46\">have to find the records that\nsatisfy these conditions.</text><text start=\"158.42\" dur=\"5.14\">For example, symbol equals GM, or\ndate is equal to 1/17/2007.</text><text start=\"163.56\" dur=\"3.63\">So, in order to find the record\nto satisfy this, there&amp;#39;s two</text><text start=\"167.19\" dur=\"0.72\">things we could do.</text><text start=\"167.91\" dur=\"2.71\">One thing we could do is to use\nsomething we call an index.</text><text start=\"170.62\" dur=\"3.34\">An index is like a lot like a dictionary\ndata structure in Python</text><text start=\"173.96\" dur=\"3.32\">except for that it is persistent\nand lives on disk.</text><text start=\"177.28\" dur=\"3.41\">And what the index is going to allow\nus to do is to efficiently look up</text><text start=\"180.69\" dur=\"2.37\">records that satisfy\na certain criteria.</text><text start=\"183.06\" dur=\"5.58\">For example, we might build an index on\nthe stock symbol, and then we could</text><text start=\"188.64\" dur=\"3.73\">use that index in order to efficiently\nfind all the records that correspond</text><text start=\"192.37\" dur=\"1.66\">to a particular symbol.</text><text start=\"194.03\" dur=\"4.43\">So in this case, we could look up\non the index for the symbol GM.</text><text start=\"198.46\" dur=\"3.31\">And we would see that, if this is our\ndatabase, the first and fourth record</text><text start=\"201.77\" dur=\"3\">in the database contain that symbol.</text><text start=\"204.77\" dur=\"3.44\">So, the other way that we might evaluate\na query-- for example to find</text><text start=\"208.21\" dur=\"3.05\">all the GM stock quotes-- would be\nto just iterate over all the</text><text start=\"211.26\" dur=\"3.34\">records one by one.</text><text start=\"214.6\" dur=\"1.81\">And we call such an approach a scan.</text><text start=\"216.41\" dur=\"5.12\">So you might think that a scan is an\nincredibly inefficient way to access</text><text start=\"221.53\" dur=\"2.59\">data, that you should always\nprefer to use an index.</text><text start=\"224.12\" dur=\"1.43\">It turns out that that&amp;#39;s not the case.</text><text start=\"225.55\" dur=\"2.49\">Sometimes indices actually\nare a bad idea.</text><text start=\"228.04\" dur=\"4.61\">First of all, it&amp;#39;s expensive to create\nthem and maintain them, and second of</text><text start=\"232.65\" dur=\"4.85\">all, these indices can actually be less\nefficient sometimes than scanning</text><text start=\"237.5\" dur=\"0.95\">all the data.</text><text start=\"238.45\" dur=\"3.85\">And the reason for this is because the\nrecords that an index returns have to</text><text start=\"242.3\" dur=\"2.4\">then go be accessed in\nthe underlying table.</text><text start=\"244.7\" dur=\"2.56\">So in this case, we were told we need\nto go look at records one and four</text><text start=\"247.26\" dur=\"3.32\">because they correspond to GM, but then\nwe would have to go look through</text><text start=\"250.58\" dur=\"3.45\">the underlying table and look up those\nrecords, and that actually can be</text><text start=\"254.03\" dur=\"2.77\">slow, partly because these tables\nare stored on disk.</text><text start=\"256.8\" dur=\"3.31\">And we&amp;#39;ll come back to a little bit\nabout why storing things on disk sort</text><text start=\"260.11\" dur=\"5.37\">of changes the considerations about\nperformance in just a minute.</text><text start=\"265.48\" dur=\"5.22\">All right, so now it turns out that\nactually we want to use these scans</text><text start=\"270.7\" dur=\"1.51\">for certain classes of queries.</text><text start=\"272.21\" dur=\"2.72\">In particular, for queries that access\nlots and lots of records we&amp;#39;re going</text><text start=\"274.93\" dur=\"1.96\">to want to use a scan.</text><text start=\"276.89\" dur=\"4.09\">Sometimes in the database world, these\nare called analytical queries.</text><text start=\"280.98\" dur=\"1.24\">They often look like this.</text><text start=\"282.22\" dur=\"3.56\">So this is very similar to the query we\nsaw before, except for rather than</text><text start=\"285.78\" dur=\"2.55\">the equality predicate, we now have\na greater- than predicate.</text><text start=\"288.33\" dur=\"2.04\">And now we have this average price.</text><text start=\"290.37\" dur=\"2.28\">So this computes the average\nprice of all the GM stocks</text><text start=\"292.65\" dur=\"1.48\">over some date range.</text><text start=\"294.13\" dur=\"2.97\">If GM is a popular stock, which it\nprobably is, there&amp;#39;s going to be lots</text><text start=\"297.1\" dur=\"2.88\">and lots of such records, and we&amp;#39;re\ngoing to have to evaluate.</text><text start=\"299.98\" dur=\"2.73\">And it turns out that a scan is going\nto be probably the best way to</text><text start=\"302.71\" dur=\"1.46\">evaluate this query.</text><text start=\"304.17\" dur=\"3.93\">So, it turns out that this market, these\nanalytical queries, represent a</text><text start=\"308.1\" dur=\"3.41\">multi-billion dollar business in the\nUnited States, because companies use</text><text start=\"311.51\" dur=\"3.38\">these kind of queries in order to do\nanalysis about what&amp;#39;s going on inside</text><text start=\"314.89\" dur=\"3.55\">of their business, to understand sales\ntrends, to understand patterns of</text><text start=\"318.44\" dur=\"1.75\">buying and selling.</text><text start=\"320.19\" dur=\"1.4\">All right.</text><text start=\"321.59\" dur=\"3.08\">What column-oriented databases are about\nis making these kinds of scan</text><text start=\"324.67\" dur=\"2\">operations go faster.</text><text start=\"326.67\" dur=\"6.42\">So in order understand what makes a\nquery slow or fast, let&amp;#39;s try and</text><text start=\"333.09\" dur=\"3.94\">think a little bit about how long we\nwould expect a scan to take when we&amp;#39;re</text><text start=\"337.03\" dur=\"1.9\">running one of these queries.</text><text start=\"338.93\" dur=\"2.76\">Intuitively of course, the performance\nof one of these things is going to be</text><text start=\"341.69\" dur=\"3.08\">proportional to the amount\nof data that we access in</text><text start=\"344.77\" dur=\"1.08\">processing the query.</text><text start=\"345.85\" dur=\"0.21\">OK.</text><text start=\"346.06\" dur=\"5.6\">So if we go back to our simple query\nand our example database, the most</text><text start=\"351.66\" dur=\"3.85\">natural way to think about this data\nbeing stored is sort of row- by- row,</text><text start=\"355.51\" dur=\"2.83\">in the memory or on the disk\nof the computer system.</text><text start=\"358.34\" dur=\"2.46\">So in order to evaluate this query,\nwhat&amp;#39;s going to happen is we&amp;#39;re just</text><text start=\"360.8\" dur=\"3.71\">going to, in a scan, just read each\none of these records one by one.</text><text start=\"364.51\" dur=\"1.26\">OK.</text><text start=\"365.77\" dur=\"2.66\">There&amp;#39;s something interesting to notice\nabout this particular query</text><text start=\"368.43\" dur=\"3.98\">though, which is that it actually only\naccessed three of the columns.</text><text start=\"372.41\" dur=\"1.73\">Three of these five columns\nthat are in the table.</text><text start=\"374.14\" dur=\"4.17\">The price column, the symbol column,\nand the date column.</text><text start=\"378.31\" dur=\"5.39\">So, we only needed 3/5 of the data\nin order to evaluate this query.</text><text start=\"383.7\" dur=\"3.32\">So it turned out, however, that when the\ndata&amp;#39;s laid out in this way, row</text><text start=\"387.02\" dur=\"3.99\">by row, there&amp;#39;s a property of the disk\nthat makes it so that we&amp;#39;re going to</text><text start=\"391.01\" dur=\"3.57\">have to read all of the data, all five\ncolumns, off disk even though we only</text><text start=\"394.58\" dur=\"1.54\">need to access three of them.</text><text start=\"396.12\" dur=\"3.315\">So I&amp;#39;ll just give you a quick little\ntutorial about how a disk works.</text><text start=\"399.435\" dur=\"4.465\">A disk a piece of physical\nhardware that has these</text><text start=\"403.9\" dur=\"2.03\">spinning platters in it.</text><text start=\"405.93\" dur=\"3.31\">And these platters are spinning pretty\nfast, like several thousand RPM,</text><text start=\"409.24\" dur=\"2.54\">revolutions per minute.</text><text start=\"411.78\" dur=\"3.55\">And each one of these platters has data\nlaid out on it in this set of</text><text start=\"415.33\" dur=\"3.33\">concentric rings, they&amp;#39;re sometimes\ncalled cylinders.</text><text start=\"418.66\" dur=\"4.44\">And the data that&amp;#39;s currently being read\noff of a given cylinder is the</text><text start=\"423.1\" dur=\"3.38\">data that happens to be underneath this\ntriangular- looking structure</text><text start=\"426.48\" dur=\"1.01\">that you see here in the diagram.</text><text start=\"427.49\" dur=\"2.24\">The triangular structure\nis called a head.</text><text start=\"429.73\" dur=\"4.68\">So what happens is the disk is spinning\naround, and when data passes</text><text start=\"434.41\" dur=\"4.33\">underneath the head, it&amp;#39;s\nread off of the disk.</text><text start=\"438.74\" dur=\"3.17\">So if you think of a database table\nthat&amp;#39;s laid out in one of these</text><text start=\"441.91\" dur=\"3.57\">cylinders, the record that&amp;#39;s about to be\nread, you can see here, is denoted</text><text start=\"445.48\" dur=\"1.38\">with these little X&amp;#39;s.</text><text start=\"446.86\" dur=\"3.3\">When that record passes under the head,\nit will be read off of the disk.</text><text start=\"450.16\" dur=\"4.48\">So you can imagine that if the five\ncolumns of a given record are laid out</text><text start=\"454.64\" dur=\"3.88\">sequentially in that cylinder, if we\njust want to read three of them--</text><text start=\"458.52\" dur=\"3.88\">they&amp;#39;re randomly allocated\nthroughout that record--</text><text start=\"462.4\" dur=\"2.54\">the whole record is going to pass\nunderneath the head, even though we</text><text start=\"464.94\" dur=\"2.03\">only needed to read 3/5 of the data.</text><text start=\"466.97\" dur=\"3.89\">And it turns out that this time to\naccess this record and for the data to</text><text start=\"470.86\" dur=\"2.75\">pass underneath the head is what really\ndominates how long it takes to</text><text start=\"473.61\" dur=\"1.83\">access the data from disk.</text><text start=\"475.44\" dur=\"3.41\">So in this case, it turns out that when\nthe data&amp;#39;s laid out sequentially</text><text start=\"478.85\" dur=\"5.72\">like this, the total time to evaluate\nthis query is essentially going to be</text><text start=\"484.57\" dur=\"3.39\">the total amount of time that it just\ntakes to read all of the records, the</text><text start=\"487.96\" dur=\"1.4\">entire table, from disk.</text><text start=\"489.36\" dur=\"4.15\">So you can see here, if our table\nconsists of 1,000,000,000 records each</text><text start=\"493.51\" dur=\"4.18\">of which is 100 bytes long, then we&amp;#39;re\ngoing to have 100 gigabytes of data.</text><text start=\"497.69\" dur=\"2.859\">If the disk can read 100 megabytes a\nsecond, which is about what a disk can</text><text start=\"500.549\" dur=\"4.301\">read, then it&amp;#39;s going to take 1,000\nseconds to evaluate this query.</text><text start=\"504.85\" dur=\"0.54\">OK.</text><text start=\"505.39\" dur=\"5.29\">What the column-oriented database does\nis a way to organize the data that&amp;#39;s</text><text start=\"510.68\" dur=\"2.45\">stored on disks differently so\nthat we can evaluate queries</text><text start=\"513.13\" dur=\"2.77\">much, much more quickly.</text><text start=\"515.9\" dur=\"3.61\">The column representation, instead of\nlaying out data row- by- row, lays out</text><text start=\"519.51\" dur=\"1.51\">data column- by- column.</text><text start=\"521.02\" dur=\"2.61\">So imagine each column of this\ntable is now stored in a</text><text start=\"523.63\" dur=\"2.48\">separate file on disk.</text><text start=\"526.11\" dur=\"3.1\">So now when we want to read these three\ncolumns, we only have to go</text><text start=\"529.21\" dur=\"3.46\">access those three columns from\ndisk and read them in.</text><text start=\"532.67\" dur=\"3.21\">And so rather than having to read all of\nthe data, we only have to read 3/5</text><text start=\"535.88\" dur=\"0.78\">of the data.</text><text start=\"536.66\" dur=\"2.07\">So in this particular example,\nwe could evaluate this</text><text start=\"538.73\" dur=\"2.07\">query in 600 seconds.</text><text start=\"540.8\" dur=\"4.09\">Now, this may seem like it&amp;#39;s not that\nsignificant of an improvement, but it</text><text start=\"544.89\" dur=\"3.23\">turns out that in reality,\nthese tables are often</text><text start=\"548.12\" dur=\"1.85\">hundreds of columns wide.</text><text start=\"549.97\" dur=\"2.79\">People, when they build their databases,\ncram all sorts of junk into</text><text start=\"552.76\" dur=\"0.41\">their table.</text><text start=\"553.17\" dur=\"3.06\">So the tables get really big.</text><text start=\"556.23\" dur=\"3.82\">But on the other hand, the queries\nthemselves tend not to get really big.</text><text start=\"560.05\" dur=\"4.15\">The queries usually only access three\nor five attributes of these hundred</text><text start=\"564.2\" dur=\"2.25\">attribute-wide tables.</text><text start=\"566.45\" dur=\"2.71\">And that means that this column-oriented\nrepresentation can be</text><text start=\"569.16\" dur=\"4.32\">much, much faster than the row-oriented\nrepresentation.</text><text start=\"573.48\" dur=\"3.17\">So in addition, there&amp;#39;s some other cool\nthings about this column-oriented</text><text start=\"576.65\" dur=\"1.18\">representation.</text><text start=\"577.83\" dur=\"3.89\">So in particular, columns compress\nreally, really well, and that allows</text><text start=\"581.72\" dur=\"2.9\">us to further reduce the amount of data\nthat we have to access when we&amp;#39;re</text><text start=\"584.62\" dur=\"1.42\">processing a query.</text><text start=\"586.04\" dur=\"3.24\">So just to give you a very simple\nexample, suppose we have a table</text><text start=\"589.28\" dur=\"1.93\">that&amp;#39;s sorted by stock symbol.</text><text start=\"591.21\" dur=\"4.26\">Now let&amp;#39;s think about compressing just\nthat column that represents the stock</text><text start=\"595.47\" dur=\"1.72\">symbol data.</text><text start=\"597.19\" dur=\"2.38\">There&amp;#39;s a very straightforward\nway to compress this data</text><text start=\"599.57\" dur=\"1.25\">called run length encoding.</text><text start=\"600.82\" dur=\"2.89\">So imagine I have a table that\ncontains the symbols AAPL,</text><text start=\"603.71\" dur=\"1.88\">AAPL, AAPL, IBM, IBM.</text><text start=\"605.59\" dur=\"2.99\">These five attributes, stored in\nsorted order, can trivially be</text><text start=\"608.58\" dur=\"5.32\">represented as AAPL times three, an\nAAPL and then a count, which is in</text><text start=\"613.9\" dur=\"3.28\">this case three, followed by IBM\nan then a count, which is two.</text><text start=\"617.18\" dur=\"2.74\">So here it doesn&amp;#39;t look like we&amp;#39;ve\nreduced the space very much, but if</text><text start=\"619.92\" dur=\"3.03\">you think of a table of stock quotes,\nthere&amp;#39;s probably only a few hundred or</text><text start=\"622.95\" dur=\"2.99\">thousand stock quotes in\nour database system.</text><text start=\"625.94\" dur=\"4.22\">And so even if our table contains\nbillions of records, we can represent</text><text start=\"630.16\" dur=\"4.04\">this column simply as a few thousand\nstock quotes and their counts, which</text><text start=\"634.2\" dur=\"1.98\">is a dramatic reduction in space.</text><text start=\"636.18\" dur=\"2.62\">Notice, however, that we couldn&amp;#39;t play\nthis same trick for, say example,</text><text start=\"638.8\" dur=\"3.52\">stock price, because stock price is a\nfloating point number and there&amp;#39;s</text><text start=\"642.32\" dur=\"2.12\">likely to be millions of different\nstock prices in a</text><text start=\"644.44\" dur=\"1.29\">given database system.</text><text start=\"645.73\" dur=\"3.31\">So one of the things we could do in this\ncolumn-oriented approach is to</text><text start=\"649.04\" dur=\"3.97\">compress each column using the best\ncompression scheme for that column.</text><text start=\"653.01\" dur=\"3.89\">So at MIT, we built a new database\nsystem called C-Store around this</text><text start=\"656.9\" dur=\"1.41\">column-oriented idea.</text><text start=\"658.31\" dur=\"3.39\">Turns out that, sort of surprisingly,\nalmost every other database system in</text><text start=\"661.7\" dur=\"3.41\">the commercial world built before\nus had used this row-oriented</text><text start=\"665.11\" dur=\"1.72\">representation for data.</text><text start=\"666.83\" dur=\"3.87\">So C-Store was this fundamentally new\nway of building a database system.</text><text start=\"670.7\" dur=\"2.7\">We also added a bunch of other cool\nfeatures to it, like the ability to</text><text start=\"673.4\" dur=\"3.97\">parallelize processing and the placement\nof data across many nodes,</text><text start=\"677.37\" dur=\"2.73\">the ability to support efficient loading\nof new data, and some special</text><text start=\"680.1\" dur=\"3.26\">optimizations to allow queries that\nare only reading data to run</text><text start=\"683.36\" dur=\"3.76\">concurrently and very efficiently with\nqueries that are updating data.</text><text start=\"687.12\" dur=\"2.64\">If you like, there&amp;#39;s a paper that you\ncan go read for those of you who want</text><text start=\"689.76\" dur=\"1.91\">more information.</text><text start=\"691.67\" dur=\"3.272\">To give you a sense of real world how\nmuch this matters, I&amp;#39;m going to show</text><text start=\"694.942\" dur=\"3.748\">you a performance benchmark from a\ncommercial company that took the ideas</text><text start=\"698.69\" dur=\"1.77\">from C-Store and productized them.</text><text start=\"700.46\" dur=\"1.78\">This company&amp;#39;s call Vertica.</text><text start=\"702.24\" dur=\"4.09\">This example is from a 30-day\ntrace of call record data.</text><text start=\"706.33\" dur=\"3.27\">So this is information from\na cell phone company.</text><text start=\"709.6\" dur=\"2.4\">It represents about a terabyte\nof data on disk.</text><text start=\"712\" dur=\"2.22\">Prior to using Vertica, this\ncompany had been using a</text><text start=\"714.22\" dur=\"1.93\">conventional database system.</text><text start=\"716.15\" dur=\"5.65\">So, relative to what the previous\ndatabase system was able to do, in</text><text start=\"721.8\" dur=\"5.11\">Vertica, using these column-oriented\nideas on a workload running on top of</text><text start=\"726.91\" dur=\"4.42\">this call data record data set, they\nwere able to get about 88%</text><text start=\"731.33\" dur=\"0.77\">compression.</text><text start=\"732.1\" dur=\"5.73\">So 88% less space to store the data, and\nabout a 60 times speed up in query</text><text start=\"737.83\" dur=\"1.01\">processing.</text><text start=\"738.84\" dur=\"2.28\">So, it&amp;#39;s dramatically faster.</text><text start=\"741.12\" dur=\"3.73\">Orders of magnitude faster than what\nyou&amp;#39;ve got using a traditional</text><text start=\"744.85\" dur=\"1.18\">database system.</text><text start=\"746.03\" dur=\"3.56\">So just to wrap up, for analytical\nqueries of the sort that I&amp;#39;ve showed</text><text start=\"749.59\" dur=\"2.75\">where you&amp;#39;re accessing most of the\nrecords in a database, this</text><text start=\"752.34\" dur=\"3.14\">column-oriented representation is\norders of magnitude faster.</text><text start=\"755.48\" dur=\"3.79\">And the key idea is that these\ncolumn-oriented databases allow you to</text><text start=\"759.27\" dur=\"3.79\">access just the data that you need to\nanswer the query, and they provide</text><text start=\"763.06\" dur=\"3.47\">support for this very, very\naggressive compression.</text><text start=\"766.53\" dur=\"3.34\">And I hope that I&amp;#39;ve also shown you a\nlittle bit about why database systems</text><text start=\"769.87\" dur=\"2.5\">are interesting and different than\nconventional programming, because</text><text start=\"772.37\" dur=\"3.19\">there&amp;#39;s this whole set of new challenges\nthat are presented when</text><text start=\"775.56\" dur=\"3.59\">you&amp;#39;re developing algorithms that\noperate on this data that resides</text><text start=\"779.15\" dur=\"1.82\">persistently and on disk.</text><text start=\"780.97\" dur=\"1.25\">Thanks very much.</text><text start=\"782.22\" dur=\"23.07\"></text></transcript>\n", "Kndq_cHHWOI": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.33\"></text><text start=\"1.33\" dur=\"1.96\">ERIC GRIMSON: We&amp;#39;ve now\nintroduced lists, ordered</text><text start=\"3.29\" dur=\"1.46\">sequences of elements.</text><text start=\"4.75\" dur=\"2.87\">Elements can be almost anything,\nand they&amp;#39;re mutable.</text><text start=\"7.62\" dur=\"1.96\">And we&amp;#39;ve seen examples of how\nwe&amp;#39;d like to use them.</text><text start=\"9.58\" dur=\"3.55\">We can slice, we can clone, we\ncan index, or we can have</text><text start=\"13.13\" dur=\"2.09\">arbitrary structures\ninside of them.</text><text start=\"15.22\" dur=\"3.05\">We&amp;#39;re going to take a slight\ndetour just for a second to</text><text start=\"18.27\" dur=\"1\">talk about functions.</text><text start=\"19.27\" dur=\"1.64\">But we&amp;#39;re going to bring it\nback to lists then in an</text><text start=\"20.91\" dur=\"1.55\">important way.</text><text start=\"22.46\" dur=\"1.88\">First, I want to talk\nabout the idea of</text><text start=\"24.34\" dur=\"1.61\">a first class object.</text><text start=\"25.95\" dur=\"3.03\">And we say a data structure, a\ndata type, is a first class</text><text start=\"28.98\" dur=\"2.372\">object if it has the following\ncharacteristics--</text><text start=\"31.352\" dur=\"4.168\">it has a type; it can be an\nelement in a data structure,</text><text start=\"35.52\" dur=\"3.17\">like a list; it can appear\nin an expression, like an</text><text start=\"38.69\" dur=\"2.11\">assignment statement, could be\non the right-hand side of the</text><text start=\"40.8\" dur=\"1.68\">assignment statement;\nand it can be an</text><text start=\"42.48\" dur=\"1.9\">argument to a function.</text><text start=\"44.38\" dur=\"3.685\">Now, it&amp;#39;s pretty clear that\nints, floats, strings all have</text><text start=\"48.065\" dur=\"1.455\">those properties.</text><text start=\"49.52\" dur=\"2.66\">It&amp;#39;s easy to believe that lists\nand tuples would also</text><text start=\"52.18\" dur=\"1.235\">have those properties.</text><text start=\"53.415\" dur=\"2.745\">But so do functions.</text><text start=\"56.16\" dur=\"1.99\">Now, that&amp;#39;s interesting,\nright?</text><text start=\"58.15\" dur=\"1.07\">Does a function have a type?</text><text start=\"59.22\" dur=\"1.93\">Well, that&amp;#39;s easy to believe.</text><text start=\"61.15\" dur=\"3.449\">Could a function be in a data\nstructure, like a list?</text><text start=\"64.599\" dur=\"1.371\">Huh.</text><text start=\"65.97\" dur=\"2.14\">Well, if you think about how we\ncreate lists, we&amp;#39;re simply</text><text start=\"68.11\" dur=\"3.15\">getting values of expressions\nand creating a structure where</text><text start=\"71.26\" dur=\"2.31\">elements of the memory point\nto those pieces.</text><text start=\"73.57\" dur=\"3.64\">So if I gave as an element of a\nlist the name of a function,</text><text start=\"77.21\" dur=\"1.79\">thinking back to our environment\nmodel, it&amp;#39;s easy</text><text start=\"79\" dur=\"2.76\">to see how that element of the\nlist, that spot in the list,</text><text start=\"81.76\" dur=\"3.61\">could point of to that\nparticular procedure object.</text><text start=\"85.37\" dur=\"1.49\">OK.</text><text start=\"86.86\" dur=\"1.26\">Can they appear in expressions,\nlike the</text><text start=\"88.12\" dur=\"1.37\">right-hand side of\nan assignment?</text><text start=\"89.49\" dur=\"0.74\">Sure.</text><text start=\"90.23\" dur=\"3.15\">And we can say, x is going to\nequal the factorial of 5.</text><text start=\"93.38\" dur=\"1.4\">That makes sense.</text><text start=\"94.78\" dur=\"3.44\">And then can functions\nthemselves be arguments to</text><text start=\"98.22\" dur=\"1.67\">other functions?</text><text start=\"99.89\" dur=\"0.99\">Huh.</text><text start=\"100.88\" dur=\"0.89\">That&amp;#39;s interesting.</text><text start=\"101.77\" dur=\"2.21\">And we&amp;#39;re going to see that that\ncan actually be the case.</text><text start=\"103.98\" dur=\"2.61\">And this idea of having a\nfirst class object for a</text><text start=\"106.59\" dur=\"2.73\">function or having them be\nfirst class objects is</text><text start=\"109.32\" dur=\"2.33\">particularly useful when we&amp;#39;re\ngoing to use this in</text><text start=\"111.65\" dur=\"1.56\">conjunction with lists.</text><text start=\"113.21\" dur=\"2.24\">And we often refer to this\nstyle of thinking or</text><text start=\"115.45\" dur=\"4.07\">programming as higher order\nprogramming, where we are</text><text start=\"119.52\" dur=\"2.31\">treating functions as if they&amp;#39;re\nelements of data</text><text start=\"121.83\" dur=\"3.37\">structures and applying\nfunctions to them.</text><text start=\"125.2\" dur=\"1.83\">Let&amp;#39;s see if we can make a\nlittle bit more sense out of</text><text start=\"127.03\" dur=\"2.21\">this by looking at an example.</text><text start=\"129.24\" dur=\"1.83\">I&amp;#39;m going to write a little\nprocedure here called</text><text start=\"131.07\" dur=\"1.43\">applyToEach.</text><text start=\"132.5\" dur=\"1.15\">Takes two arguments--</text><text start=\"133.65\" dur=\"5.46\">list, L, and the variable on our\nparameter whose name I&amp;#39;m</text><text start=\"139.11\" dur=\"0.7\">going to call f.</text><text start=\"139.81\" dur=\"2.33\">And I&amp;#39;m going to assume\nthat L is a list</text><text start=\"142.14\" dur=\"1.93\">and that f is a function.</text><text start=\"144.07\" dur=\"5.01\">And what I want applyToEach to\ndo is to walk through the</text><text start=\"149.08\" dur=\"4\">list, mutating each element in\nturn by replacing it by what</text><text start=\"153.08\" dur=\"5.07\">happens when we call the\nfunction f on that element.</text><text start=\"158.15\" dur=\"1.58\">So the code doesn&amp;#39;t\nlook too bad.</text><text start=\"159.73\" dur=\"4.05\">I&amp;#39;ve got a little loop, where i\nis walking from 0 up to the</text><text start=\"163.78\" dur=\"2.21\">length of the list, or 1 less\nthan the length of the list.</text><text start=\"165.99\" dur=\"2.07\">It&amp;#39;s going to get all of the\nelements of the list.</text><text start=\"168.06\" dur=\"0.82\">And what am I doing?</text><text start=\"168.88\" dur=\"2.215\">I&amp;#39;m going to get the i-th\nelement of the list.</text><text start=\"171.095\" dur=\"2.575\">I&amp;#39;m going to call f on it.</text><text start=\"173.67\" dur=\"3.08\">And then I&amp;#39;m going to change\nthat i-th element of the list</text><text start=\"176.75\" dur=\"1.99\">to be that value.</text><text start=\"178.74\" dur=\"1.71\">Let&amp;#39;s think for second.</text><text start=\"180.45\" dur=\"1.96\">If we think back to our\nenvironment model, if I</text><text start=\"182.41\" dur=\"6.28\">applied this where I passed in\nfor f some function, square,</text><text start=\"188.69\" dur=\"2.2\">we said that we would bind\na local frame, where the</text><text start=\"190.89\" dur=\"3.71\">variable f would point to the\nvalue of that parameter,</text><text start=\"194.6\" dur=\"1.91\">which, in this case,\nwould be square.</text><text start=\"196.51\" dur=\"3.49\">And then, when we executed the\nbody of applyToEach, we would</text><text start=\"200\" dur=\"2.78\">simply be using the value\nof f, looking it up.</text><text start=\"202.78\" dur=\"3.71\">So in essence, we would simply\nbe substituting in for f.</text><text start=\"206.49\" dur=\"1.1\">I&amp;#39;m not going to do\nthe example of</text><text start=\"207.59\" dur=\"0.75\">the environment model.</text><text start=\"208.34\" dur=\"2.93\">But what we just described\nmakes sense.</text><text start=\"211.27\" dur=\"1.85\">So let&amp;#39;s see if that actually\nworks then.</text><text start=\"213.12\" dur=\"2.14\">Let&amp;#39;s take an example of this.</text><text start=\"215.26\" dur=\"3.89\">So I&amp;#39;m going to walk through\nthis in sequence.</text><text start=\"219.15\" dur=\"1.3\">I&amp;#39;m going to do applyToEach.</text><text start=\"220.45\" dur=\"1.63\">And I&amp;#39;m going to start\nwith a list L</text><text start=\"222.08\" dur=\"1.12\">that&amp;#39;s a set of numbers--</text><text start=\"223.2\" dur=\"2.68\">1, -2, and 3.4.</text><text start=\"225.88\" dur=\"3.78\">And I&amp;#39;m first going to call\napplyToEach on that list L</text><text start=\"229.66\" dur=\"6.02\">with the built-in procedure\nabs called on it.</text><text start=\"235.68\" dur=\"1.05\">What happens if I do that?</text><text start=\"236.73\" dur=\"1.38\">Well, I know--</text><text start=\"238.11\" dur=\"1.4\">I&amp;#39;ll think again about\nmy environment model.</text><text start=\"239.51\" dur=\"1.62\">I&amp;#39;m going to create a frame--</text><text start=\"241.13\" dur=\"1.03\">applyToEach is some procedure.</text><text start=\"242.16\" dur=\"0.72\">I&amp;#39;m applying it.</text><text start=\"242.88\" dur=\"3.5\">So I&amp;#39;m going to create a frame\nin which L will be bound to</text><text start=\"246.38\" dur=\"5.89\">this structure and f will be\nbound to what that points to,</text><text start=\"252.27\" dur=\"1.63\">which is a procedure object.</text><text start=\"253.9\" dur=\"1.45\">And then what am\nI going to do?</text><text start=\"255.35\" dur=\"2.919\">I&amp;#39;m just going to walk down\nthe list L, at each point</text><text start=\"258.269\" dur=\"4.471\">applying f, which is bound to\nabs, to each element of L and</text><text start=\"262.74\" dur=\"1.54\">changing the value.</text><text start=\"264.28\" dur=\"3.916\">And if I do that, what I get is\nthat when I print out L, it</text><text start=\"268.196\" dur=\"1.204\">now has that form.</text><text start=\"269.4\" dur=\"1.52\">I&amp;#39;ve mutated L.</text><text start=\"270.92\" dur=\"2.58\">And yeah, the 3.4, because of\nthe way we represent floating</text><text start=\"273.5\" dur=\"1.47\">point numbers, doesn&amp;#39;t quite\ncome out the way</text><text start=\"274.97\" dur=\"0.56\">you&amp;#39;d like it to.</text><text start=\"275.53\" dur=\"2.43\">But we&amp;#39;ve changed L. And what&amp;#39;s\nimportant to see is</text><text start=\"277.96\" dur=\"2.46\">I&amp;#39;ve run through a loop, where\nI&amp;#39;m just applying a particular</text><text start=\"280.42\" dur=\"0.9\">value of f--</text><text start=\"281.32\" dur=\"1.6\">in this case, bound to abs--</text><text start=\"282.92\" dur=\"1.91\">to each element of the list.</text><text start=\"284.83\" dur=\"1.65\">Now, having changed L,\nlet&amp;#39;s do it again.</text><text start=\"286.48\" dur=\"4.06\">Let&amp;#39;s applyToEach again the list\nL, now at this form of 1,</text><text start=\"290.54\" dur=\"1.47\">2, and 3.4.</text><text start=\"292.01\" dur=\"1.63\">And in this case, I&amp;#39;m\ngoing to use int.</text><text start=\"293.64\" dur=\"3.49\">And again, what it says is, up\nhere, I&amp;#39;m in essence binding f</text><text start=\"297.13\" dur=\"2.87\">to int in a local frame so that\nwhen I&amp;#39;m evaluating this</text><text start=\"300\" dur=\"4.77\">body, f points to the internal\nprocedure int.</text><text start=\"304.77\" dur=\"4.22\">And if I do that, I now get a\nnew version of L. Actually,</text><text start=\"308.99\" dur=\"0.86\">that&amp;#39;s a poor way\nof saying it.</text><text start=\"309.85\" dur=\"1.08\">L is still there.</text><text start=\"310.93\" dur=\"1.94\">I have mutated L so that\nit now has the</text><text start=\"312.87\" dur=\"3.11\">values 1, 2, and 3.</text><text start=\"315.98\" dur=\"0.82\">How about fact?</text><text start=\"316.8\" dur=\"0.89\">Let&amp;#39;s assume we&amp;#39;ve got fact.</text><text start=\"317.69\" dur=\"1.41\">Factorial is available to us.</text><text start=\"319.1\" dur=\"2.11\">We can do the same thing.</text><text start=\"321.21\" dur=\"4.1\">And it now gives us the first,\nsecond, and third values of a</text><text start=\"325.31\" dur=\"3.64\">factorial are a fact(1),\nfact(2), and fact(3) .</text><text start=\"328.95\" dur=\"1.51\">And now that I&amp;#39;ve changed\nL again, let&amp;#39;s</text><text start=\"330.46\" dur=\"0.7\">do it one more time.</text><text start=\"331.16\" dur=\"2.27\">Let&amp;#39;s do it with fib to get the\nfirst, second, and sixth</text><text start=\"333.43\" dur=\"1.28\">Fibonacci number.</text><text start=\"334.71\" dur=\"1.79\">And out they come.</text><text start=\"336.5\" dur=\"4.22\">What I want you see here is that\nwe can pass in a function</text><text start=\"340.72\" dur=\"0.91\">as an argument.</text><text start=\"341.63\" dur=\"2.7\">We just did a different\nfunction each time.</text><text start=\"344.33\" dur=\"2.41\">In terms of how things work in\nthat environment model, we&amp;#39;re</text><text start=\"346.74\" dur=\"4.21\">just locally binding in a frame\nthe variable f, that</text><text start=\"350.95\" dur=\"2.5\">parameter f, to some\nvalue, function.</text><text start=\"353.45\" dur=\"3.16\">And then, in the body here,\nwe&amp;#39;re simply looking up the</text><text start=\"356.61\" dur=\"2.75\">value of f and using it.</text><text start=\"359.36\" dur=\"4.57\">Now, by the way, if f had just\nbeen a name for a specific</text><text start=\"363.93\" dur=\"1.62\">procedure, we would have\ndone the same thing.</text><text start=\"365.55\" dur=\"3.34\">If we&amp;#39;d said int instead of f,\nwhat would we have done?</text><text start=\"368.89\" dur=\"2.33\">We would&amp;#39;ve looked up the\nbinding for int up in the</text><text start=\"371.22\" dur=\"2.36\">global environment, which points\nto procedure object.</text><text start=\"373.58\" dur=\"3\">So here, we&amp;#39;re just passing\nthem in as we go along.</text><text start=\"376.58\" dur=\"1.4\">That&amp;#39;s actually quite nice.</text><text start=\"377.98\" dur=\"1.37\">That says we can do a bunch of</text><text start=\"379.35\" dur=\"3.64\">interesting things with functions.</text><text start=\"382.99\" dur=\"2.16\">But we could do it in\na different way.</text><text start=\"385.15\" dur=\"2.02\">So for example, I said\nthat functions could</text><text start=\"387.17\" dur=\"1.53\">be elements of lists.</text><text start=\"388.7\" dur=\"1.44\">So let&amp;#39;s think about one more.</text><text start=\"390.14\" dur=\"3.73\">Instead of applying a function\nto a list of numbers, let&amp;#39;s</text><text start=\"393.87\" dur=\"3.24\">apply a list of functions\nto a number.</text><text start=\"397.11\" dur=\"2.25\">So here&amp;#39;s applyFuns.</text><text start=\"399.36\" dur=\"2.58\">It assumes that L is a\nlist of functions.</text><text start=\"401.94\" dur=\"1.9\">It assumes x is a number.</text><text start=\"403.84\" dur=\"0.98\">And what&amp;#39;s it going to do?</text><text start=\"404.82\" dur=\"2.78\">It&amp;#39;s going to loop through each\nof the elements of the</text><text start=\"407.6\" dur=\"4.65\">list and call that function\non the number and</text><text start=\"412.25\" dur=\"1.53\">then print it out.</text><text start=\"413.78\" dur=\"1.665\">And so if I actually\nrun this-- well,</text><text start=\"415.445\" dur=\"0.675\">let&amp;#39;s do it over here.</text><text start=\"416.12\" dur=\"0.79\">Let&amp;#39;s go check it out.</text><text start=\"416.91\" dur=\"1.885\">I&amp;#39;ve got a version\nof it over here.</text><text start=\"418.795\" dur=\"4.605\">And let me just load this up\ninto my IDLE environment.</text><text start=\"423.4\" dur=\"4\">And let&amp;#39;s call applyFuns.</text><text start=\"427.4\" dur=\"4.54\">And we&amp;#39;re going to give it with\nabs, int, fact, and fib,</text><text start=\"431.94\" dur=\"3.58\">which I&amp;#39;ve defined\nin my file here.</text><text start=\"435.52\" dur=\"3.5\">And we&amp;#39;ll give it\nthe number 4.</text><text start=\"439.02\" dur=\"1.49\">Very cool.</text><text start=\"440.51\" dur=\"1.3\">That&amp;#39;s really neat.</text><text start=\"441.81\" dur=\"0.95\">What did it do?</text><text start=\"442.76\" dur=\"3\">It ran through a loop, where it\nfirst started off with abs</text><text start=\"445.76\" dur=\"3.17\">as the binding for f and\nthen applied abs to</text><text start=\"448.93\" dur=\"1.82\">4, printed it out.</text><text start=\"450.75\" dur=\"3.39\">And then, in the next loop, it\ngot int and applied int to 4,</text><text start=\"454.14\" dur=\"1.91\">which is pretty boring,\nprinted it out.</text><text start=\"456.05\" dur=\"2.98\">And then it took fact and\napplied fact to 4, printed it</text><text start=\"459.03\" dur=\"3.5\">out, and then fib, and applied\nfib to 4 and printed it out.</text><text start=\"462.53\" dur=\"2.7\">What we can say is that those\nfunctions can also</text><text start=\"465.23\" dur=\"0.97\">be members of lists.</text><text start=\"466.2\" dur=\"2.38\">And we can loop over those,\nusing them in places where we</text><text start=\"468.58\" dur=\"1.94\">would like them, as well.</text><text start=\"470.52\" dur=\"1.85\">Very nice.</text><text start=\"472.37\" dur=\"2.02\">Let&amp;#39;s take this one more step.</text><text start=\"474.39\" dur=\"2.33\">We can generalize these\nhigher order functions</text><text start=\"476.72\" dur=\"0.68\">a little bit more.</text><text start=\"477.4\" dur=\"2.73\">And in fact, Python provides\nsome general purpose higher</text><text start=\"480.13\" dur=\"0.91\">order procedures for us.</text><text start=\"481.04\" dur=\"3.65\">One of the ones it provides for\nus is the procedure map.</text><text start=\"484.69\" dur=\"1.11\">And what does map do?</text><text start=\"485.8\" dur=\"3.77\">In its simplest form, it takes\na unary function-- that is, a</text><text start=\"489.57\" dur=\"1.44\">function of one argument--</text><text start=\"491.01\" dur=\"3.4\">and a collection of suitable\narguments.</text><text start=\"494.41\" dur=\"1.96\">So function numbers had\nbetter be numbers.</text><text start=\"496.37\" dur=\"5.15\">And basically, map literally\nmaps this function in turn</text><text start=\"501.52\" dur=\"3.29\">down each element of that\nlist, giving us back the</text><text start=\"504.81\" dur=\"3.06\">result of applying each of those\nelements to that list.</text><text start=\"507.87\" dur=\"3.08\">So it&amp;#39;s a little bit like\napplyToEach, but it&amp;#39;s</text><text start=\"510.95\" dur=\"2.02\">basically capturing\nthe same thing.</text><text start=\"512.97\" dur=\"2.38\">However, map is even\nmore general.</text><text start=\"515.35\" dur=\"2.689\">We can give it an n-ary\nfunction-- that is, a function</text><text start=\"518.039\" dur=\"2\">that takes n arguments--</text><text start=\"520.039\" dur=\"3.01\">and n collections\nof arguments.</text><text start=\"523.049\" dur=\"4.901\">And map will apply this function\nin turn to the</text><text start=\"527.95\" dur=\"2.11\">respective elements of\nthose arguments.</text><text start=\"530.06\" dur=\"2.61\">So in the case of min, where min\ntakes two arguments, I can</text><text start=\"532.67\" dur=\"3.23\">give two lists, L1\nand L2, to map.</text><text start=\"535.9\" dur=\"4.18\">And it respectively applies min\nto that pair, then min to</text><text start=\"540.08\" dur=\"4.247\">that pair, then min to that pair\nto create this list that</text><text start=\"544.327\" dur=\"1.593\">it returns.</text><text start=\"545.92\" dur=\"2.7\">We&amp;#39;re going to come back to this\nidea of using functions</text><text start=\"548.62\" dur=\"2.02\">in this way, using higher\norder procedures,</text><text start=\"550.64\" dur=\"0.91\">throughout the term.</text><text start=\"551.55\" dur=\"2.96\">But you&amp;#39;ve now got a sense of\nonce I have lists and once I</text><text start=\"554.51\" dur=\"2.84\">treat functions as first class\nobjects, the kinds of things I</text><text start=\"557.35\" dur=\"1.25\">can start to do with it.</text><text start=\"558.6\" dur=\"1.13\"></text></transcript>\n", "XLjNHjfVdhs": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.98\"></text><text start=\"0.98\" dur=\"2.6\">CHRIS TERMAN: In the next example, we&amp;#39;re\ngoing to develop a class that</text><text start=\"3.58\" dur=\"4.63\">represents a grade book, a list of\ngrades for every student in a class.</text><text start=\"8.21\" dur=\"4.13\">As you look at the class and the\nfollowing code that uses the class to</text><text start=\"12.34\" dur=\"3.39\">actually produce the grade report, look\nat the interaction between them</text><text start=\"15.73\" dur=\"2.91\">and think about whether there&amp;#39;s other\nthings that should be added to the</text><text start=\"18.64\" dur=\"3.45\">class in order to make using\nit more effective.</text><text start=\"22.09\" dur=\"3.98\">It&amp;#39;s often the case that one doesn&amp;#39;t get\nall the right methods in a class</text><text start=\"26.07\" dur=\"0.59\">to begin with.</text><text start=\"26.66\" dur=\"2.38\">Only in using it will you\ndiscover what other</text><text start=\"29.04\" dur=\"2.54\">functionality needs to be added.</text><text start=\"31.58\" dur=\"3.42\">So we&amp;#39;re teaching a course, and an\nobvious application is a grade book.</text><text start=\"35\" dur=\"5.02\">We&amp;#39;ll need to keep track of the grades\nfor all the students in our course.</text><text start=\"40.02\" dur=\"1.33\">So let&amp;#39;s set out and build one.</text><text start=\"41.35\" dur=\"3.39\">We&amp;#39;ve chosen to organize it\nas a new class of its own.</text><text start=\"44.74\" dur=\"3.535\">A class of Grades, which will\nturn out to be a grade book.</text><text start=\"48.275\" dur=\"2.125\">You can see here are the methods\nthat we&amp;#39;ve defined.</text><text start=\"50.4\" dur=\"1.46\">Let&amp;#39;s look through them.</text><text start=\"51.86\" dur=\"3.45\">So when we make a grade book,\ninitially, our list</text><text start=\"55.31\" dur=\"3.86\">of students is empty.</text><text start=\"59.17\" dur=\"2.58\">And our grades dictionary\nis also empty.</text><text start=\"61.75\" dur=\"3.099\">And we&amp;#39;re going to represent\ngrades by--</text><text start=\"64.849\" dur=\"3.611\">we&amp;#39;ll put them in the dictionary\nas a list for each student.</text><text start=\"68.46\" dur=\"3.04\">And the students are referenced\nby their ID number.</text><text start=\"71.5\" dur=\"4.185\">So the grades is a dictionary which\nmaps ID number to a list of grades</text><text start=\"75.685\" dur=\"2.585\">that have been entered\nfor that student.</text><text start=\"78.27\" dur=\"3.79\">And finally, we have a little internal\nhelpful helper variable called</text><text start=\"82.06\" dur=\"4.99\">isSorted, which will be true when the\nlist of students is currently in the</text><text start=\"87.05\" dur=\"0.74\">correct order.</text><text start=\"87.79\" dur=\"2.7\">And of course, with an empty list,\nit starts off that way.</text><text start=\"90.49\" dur=\"3.69\">We have support for adding a student to\nthe grade book, we basically pass</text><text start=\"94.18\" dur=\"5.11\">in a student object, and if the student\nis already in our list of</text><text start=\"99.29\" dur=\"3.72\">students, then we sort of indicate by\nraising an error, in this case, a</text><text start=\"103.01\" dur=\"3.54\">value error, that the student is already\nin the grade book and that</text><text start=\"106.55\" dur=\"1.98\">this was an incorrect operation.</text><text start=\"108.53\" dur=\"3.86\">If the student is not in the grade book,\nwe go ahead and append them to</text><text start=\"112.39\" dur=\"1.5\">our list of students.</text><text start=\"113.89\" dur=\"3.92\">And at the same time, we initialize\ntheir entry in the grades dictionary.</text><text start=\"117.81\" dur=\"5.39\">So indexed by their ID number, we set up\nan empty list, because we have yet</text><text start=\"123.2\" dur=\"1.84\">to enter any grades for the student.</text><text start=\"125.04\" dur=\"2.77\">And finally, because we&amp;#39;ve added a\nstudent to the end of the list, we</text><text start=\"127.81\" dur=\"1.04\">don&amp;#39;t know if they&amp;#39;re in order.</text><text start=\"128.85\" dur=\"4.82\">So we remind ourselves that, at this\npoint, after the addition, the student</text><text start=\"133.67\" dur=\"3.07\">list is not correctly sorted.</text><text start=\"136.74\" dur=\"3.36\">We can go ahead and add a grade\nfor a particular student.</text><text start=\"140.1\" dur=\"3.2\">We pass in the student and\nthe grade we want to add.</text><text start=\"143.3\" dur=\"4.78\">And we&amp;#39;re going to basically reference\nthe grades dictionary, using the</text><text start=\"148.08\" dur=\"3.93\">student&amp;#39;s ID number as a key, and we&amp;#39;ll\nappend the grade that were doing</text><text start=\"152.01\" dur=\"3.77\">to the end of the grades\nlist for that student.</text><text start=\"155.78\" dur=\"3.65\">The difficulty comes when we pass in a\nstudent who&amp;#39;s not actually part of the</text><text start=\"159.43\" dur=\"1.27\">grade book, what should we do?</text><text start=\"160.7\" dur=\"1.68\">Should we add them to the grade book?</text><text start=\"162.38\" dur=\"4.25\">Should we just fail silently\nand not indicate anything?</text><text start=\"166.63\" dur=\"5.63\">Well, the correct behavior in this case\nis to catch the situation where</text><text start=\"172.26\" dur=\"4.65\">we are providing an index into the\ndictionary that does not exist.</text><text start=\"176.91\" dur=\"3.3\">When that happens, the Python\nsystem raises a key error.</text><text start=\"180.21\" dur=\"4.49\">We&amp;#39;ll capture that error, and,\nbasically, reinterpret that error as a</text><text start=\"184.7\" dur=\"4.4\">value error with the message, &amp;quot;Student\nnot in the grade book.&amp;quot;</text><text start=\"189.1\" dur=\"4.87\">So the idea is that the grades\ndictionary is sort of an internal data</text><text start=\"193.97\" dur=\"3.27\">structure, and it would be weird for\nsomebody who is adding a grade, who</text><text start=\"197.24\" dur=\"4.45\">knew nothing about the internal data\nstructure, to get an error associated</text><text start=\"201.69\" dur=\"1.23\">with dictionaries.</text><text start=\"202.92\" dur=\"6.34\">So what we want to do is to take errors\nthat are sort of only because</text><text start=\"209.26\" dur=\"3.31\">of a particular internal representation\nand then turn them into</text><text start=\"212.57\" dur=\"7.28\">an error using the try and accept\nstatement here that will indicate an</text><text start=\"219.85\" dur=\"2.97\">error the user would understand.</text><text start=\"222.82\" dur=\"2.77\">Similarly, we can get a grade for\na particular grades list for a</text><text start=\"225.59\" dur=\"5.44\">particular student by passing in the\nstudent to the getGrades method.</text><text start=\"231.03\" dur=\"3.66\">Again, we&amp;#39;re going to go try indexing\ninto our grades dictionary and</text><text start=\"234.69\" dur=\"3.49\">returning a copy of the list\nof grades that we see.</text><text start=\"238.18\" dur=\"4.02\">And if, for some reason, the student\nisn&amp;#39;t in the dictionary, we raise the</text><text start=\"242.2\" dur=\"2.16\">same value error as before.</text><text start=\"244.36\" dur=\"2.9\">So why don&amp;#39;t we return a copy\nof that grades list?</text><text start=\"247.26\" dur=\"2.82\">Well, in general we don&amp;#39;t want people\ncorrupting the internal data</text><text start=\"250.08\" dur=\"1.75\">structures of our grade book.</text><text start=\"251.83\" dur=\"5.08\">So when we give them back something, we\ntend to give them a copy, so they</text><text start=\"256.91\" dur=\"3.109\">could reorganize the copy or do whatever\nthey want without affecting</text><text start=\"260.019\" dur=\"2.841\">our own internal representation.</text><text start=\"262.86\" dur=\"1.9\">Finally, here the bottom,\nwe have a way to get a</text><text start=\"264.76\" dur=\"3.04\">complete list of students.</text><text start=\"267.8\" dur=\"3.76\">And in this case, we want\nto return a sorted list.</text><text start=\"271.56\" dur=\"2.8\">So if the internal list isn&amp;#39;t\nsorted, we sort it and then</text><text start=\"274.36\" dur=\"1.01\">remember that we did so.</text><text start=\"275.37\" dur=\"2.17\">So we have a huge grade book.</text><text start=\"277.54\" dur=\"3.03\">Every time somebody asks for all the\nstudents in the grade book, we won&amp;#39;t</text><text start=\"280.57\" dur=\"1.74\">continually be sorting the list.</text><text start=\"282.31\" dur=\"2.72\">We&amp;#39;ll only be sorting it\nif it needs sorting.</text><text start=\"285.03\" dur=\"5.02\">Finally again, we return a copy of that\nnow-sorted list so that people</text><text start=\"290.05\" dur=\"2.62\">can manipulate that list in many ways.</text><text start=\"292.67\" dur=\"4.16\">None of which will change the actual\nstudent list that we have inside the</text><text start=\"296.83\" dur=\"1.57\">grade book.</text><text start=\"298.4\" dur=\"2.96\">Now why don&amp;#39;t we choose to organize this\nis a class instead of just some</text><text start=\"301.36\" dur=\"3.34\">data structures and a\nbunch of procedures.</text><text start=\"304.7\" dur=\"3.19\">In object oriented programming, what\nwe&amp;#39;re trying to do is take advantage</text><text start=\"307.89\" dur=\"1.37\">of encapsulation.</text><text start=\"309.26\" dur=\"5.28\">So that&amp;#39;s sort of a big OOP concept\nthat&amp;#39;s one of the main strengths of</text><text start=\"314.54\" dur=\"4.3\">object oriented programming, where what\nwe do is, we collect together all</text><text start=\"318.84\" dur=\"3.7\">the data for a particular application,\nand all the procedures for</text><text start=\"322.54\" dur=\"2.35\">manipulating that data,\nand encapsulate them</text><text start=\"324.89\" dur=\"2.13\">together in a single object.</text><text start=\"327.02\" dur=\"3\">That way, people can use the object\nwithout really understanding any of</text><text start=\"330.02\" dur=\"2.93\">the details of the internal operation.</text><text start=\"332.95\" dur=\"6.39\">And the class definition itself sort\nof gives us a specification for</text><text start=\"339.34\" dur=\"3.82\">interfacing with their collected\ndata that&amp;#39;s inside.</text><text start=\"343.16\" dur=\"1.61\">Let&amp;#39;s see this in operation.</text><text start=\"344.77\" dur=\"3.38\">So here is a little procedure\nthat we&amp;#39;ve written that</text><text start=\"348.15\" dur=\"1.29\">produces a grade report.</text><text start=\"349.44\" dur=\"1.92\">It sort of works like you expect.</text><text start=\"351.36\" dur=\"3.13\">It goes off and gets all the\nstudents in the course.</text><text start=\"354.49\" dur=\"6.93\">And for each of those students, it&amp;#39;s\ngoing to first figure out their</text><text start=\"361.42\" dur=\"0.79\">average grade.</text><text start=\"362.21\" dur=\"3.92\">So it runs through their list of grades,\nso for the grades for that</text><text start=\"366.13\" dur=\"3.14\">particular student, we&amp;#39;re going to go\nthrough each grade, adding it to a</text><text start=\"369.27\" dur=\"4.46\">total, and then keeping track of the\nnumber of grades that we run</text><text start=\"373.73\" dur=\"1.09\">across in the list.</text><text start=\"374.82\" dur=\"2.82\">And then we can compute the average\nby dividing the total by the</text><text start=\"377.64\" dur=\"1.46\">total number of grades.</text><text start=\"379.1\" dur=\"3.75\">And when we&amp;#39;re done, we&amp;#39;re generating\na report, so we&amp;#39;re going to keep a</text><text start=\"382.85\" dur=\"1.6\">list of the report.</text><text start=\"384.45\" dur=\"3.69\">And we report the students average\ngrade on that list.</text><text start=\"388.14\" dur=\"4.77\">And finally, when all is said and done,\nwe take the individual lines for</text><text start=\"392.91\" dur=\"3.98\">each student and join them together with\nnew line spacing, and return that</text><text start=\"396.89\" dur=\"1.12\">as our answer.</text><text start=\"398.01\" dur=\"3.28\">Notice that what happens if we run\nacross a student that has no grades,</text><text start=\"401.29\" dur=\"3.05\">in other words, the grades list\nis empty for that student.</text><text start=\"404.34\" dur=\"3.31\">So numGrades is zero, and this\nwould normally create a</text><text start=\"407.65\" dur=\"1.96\">divide by zero error.</text><text start=\"409.61\" dur=\"8.44\">And again, in an attempt to provide a\ngood interface, we&amp;#39;re going to catch</text><text start=\"418.05\" dur=\"4.85\">the error that might be generated by a\ndivide by zero, and instead put into</text><text start=\"422.9\" dur=\"4.69\">the report something more sensible, just\nthat that student has no grades.</text><text start=\"427.59\" dur=\"2.77\">So to try it out here, we have a bunch\nof students that we defined.</text><text start=\"430.36\" dur=\"3.7\">And again remember, each time I define\na student, they&amp;#39;re getting IDs in</text><text start=\"434.06\" dur=\"1.5\">consecutive order.</text><text start=\"435.56\" dur=\"5.77\">I then go off and create a grade book\nfor a particular course and add a</text><text start=\"441.33\" dur=\"1.28\">bunch of students.</text><text start=\"442.61\" dur=\"3.7\">And then for each during the course, I\ngive them a particular grade of 75 for</text><text start=\"446.31\" dur=\"3.44\">the first assignment, and then for a\ncouple of the students, they get some</text><text start=\"449.75\" dur=\"1.52\">additional grades.</text><text start=\"451.27\" dur=\"4.75\">And finally, at the end, just to see\nwhat&amp;#39;ll happen, we add a student to</text><text start=\"456.02\" dur=\"2.73\">the grade book and, of course, at\nthis point that student has</text><text start=\"458.75\" dur=\"1.72\">no grades at all.</text><text start=\"460.47\" dur=\"4.07\">So if we come over here and look,\nwe can find out what six00.</text><text start=\"464.54\" dur=\"1.44\">Well you can see, it&amp;#39;s\na grades object.</text><text start=\"465.98\" dur=\"0.57\">That make sense.</text><text start=\"466.55\" dur=\"1.75\">It was meant to be a grades book.</text><text start=\"468.3\" dur=\"4.52\">It&amp;#39;s an instance of the grades object.</text><text start=\"472.82\" dur=\"4.87\">We can go off and ask for all\nthe students in six00.</text><text start=\"477.69\" dur=\"4.11\">So six00.allStudents.() Let&amp;#39;s\njust print out their names.</text><text start=\"481.8\" dur=\"0.81\">And here they are.</text><text start=\"482.61\" dur=\"4.08\">And in fact, even though we entered them\nhiggeldy-piggeldy, you can see</text><text start=\"486.69\" dur=\"3.65\">when we ask for a list of all\nthe students, they come out</text><text start=\"490.34\" dur=\"1.54\">sorted by ID number.</text><text start=\"491.88\" dur=\"3.96\">Remember that the students, because\nthey&amp;#39;re an MITPerson, when we sort</text><text start=\"495.84\" dur=\"2.38\">them, they&amp;#39;re sort of by ID number.</text><text start=\"498.22\" dur=\"1.76\">So all that&amp;#39;s great.</text><text start=\"499.98\" dur=\"5.55\">You might ask yourself, why didn&amp;#39;t we\njust reach inside and knowing that</text><text start=\"505.53\" dur=\"3.16\">there was a list of students, why\ndon&amp;#39;t we just say, for s in</text><text start=\"508.69\" dur=\"4.609\">six00.students and just grab the\ninternal data structure.</text><text start=\"513.299\" dur=\"4.411\">Well, that&amp;#39;s part of the data hiding\naspect of Python objects.</text><text start=\"517.71\" dur=\"4.839\">We&amp;#39;re really trying to provide an\ninterface to the grade book that has a</text><text start=\"522.549\" dur=\"1.471\">limited number of operations.</text><text start=\"524.02\" dur=\"3.47\">So we changed the implementation of the\ngrade book later, people can still</text><text start=\"527.49\" dur=\"4.47\">use it, and they shouldn&amp;#39;t have been\nrelying on any particular internal</text><text start=\"531.96\" dur=\"1.48\">representation.</text><text start=\"533.44\" dur=\"3.51\">So if I&amp;#39;m all done here, what I can do\nis go ahead and ask to print out a</text><text start=\"536.95\" dur=\"1.57\">grade report.</text><text start=\"538.52\" dur=\"3.86\">And I&amp;#39;ll pass in the grade book\nas the argument to my</text><text start=\"542.38\" dur=\"1.71\">little report generator.</text><text start=\"544.09\" dur=\"0.95\">And there we go.</text><text start=\"545.04\" dur=\"3.56\">You can see that we&amp;#39;ve gotten these five\nlines, one for each student, and</text><text start=\"548.6\" dur=\"5.01\">we&amp;#39;ve calculated their average\ngrade appropriately.</text><text start=\"553.61\" dur=\"3.65\">This data hiding aspect has\npluses and minuses.</text><text start=\"557.26\" dur=\"3.88\">One, it allows us to change the internal\nrepresentation as we&amp;#39;d like.</text><text start=\"561.14\" dur=\"3.47\">But we can also be stuck with the\nproblem that we generate some</text><text start=\"564.61\" dur=\"0.86\">inefficiencies.</text><text start=\"565.47\" dur=\"3.43\">For example, when we wanted to return\na list of all the students, we</text><text start=\"568.9\" dur=\"6.7\">carefully made a copy of the internal\nlist and returned it so that the user</text><text start=\"575.6\" dur=\"3.53\">could go off and do what he wanted\nto with a list of students.</text><text start=\"579.13\" dur=\"4.69\">The difficulty with that is, if I have\na 100,000 students in my big online</text><text start=\"583.82\" dur=\"3.85\">course, what I&amp;#39;m worried about is, that\nI&amp;#39;ve now, every time somebody</text><text start=\"587.67\" dur=\"3.78\">asks for a complete list of the\nstudents, I&amp;#39;ve generated a</text><text start=\"591.45\" dur=\"1.73\">copy of that list.</text><text start=\"593.18\" dur=\"4.76\">And if the intent is to basically\niterate through that list and do</text><text start=\"597.94\" dur=\"2.73\">something, that&amp;#39;s a pretty\ninefficient operation--</text><text start=\"600.67\" dur=\"3.98\">creating an extra 100,000 element list\nevery time you want to look through</text><text start=\"604.65\" dur=\"1.49\">the grade book.</text><text start=\"606.14\" dur=\"4.65\">So we need to think of a strategy for\ndealing with that inefficiency, but</text><text start=\"610.79\" dur=\"5.12\">still keep the strengths of data hiding,\nwhere the idea is, we don&amp;#39;t</text><text start=\"615.91\" dur=\"5.32\">really want people to know exactly how\nthe internal representations used in</text><text start=\"621.23\" dur=\"1.09\">the grade book.</text><text start=\"622.32\" dur=\"1.43\">So let&amp;#39;s think about that for a moment.</text><text start=\"623.75\" dur=\"1.25\"></text></transcript>\n", "jq5M5Gmf0do": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"3.6\">ERIC GRIMSON: Welcome to the\n6.00x, often referred to as</text><text start=\"3.6\" dur=\"3.3\">the introduction to computer\nscience and programming.</text><text start=\"6.9\" dur=\"3.04\">It&amp;#39;s odd to have both of those\nterms in the title, but both</text><text start=\"9.94\" dur=\"1.28\">of them are important.</text><text start=\"11.22\" dur=\"3.01\">This course is going to be not\njust about teaching you how to</text><text start=\"14.23\" dur=\"2.7\">program a computer, how to tell\nthe computer instructions</text><text start=\"16.93\" dur=\"1.55\">that it can understand.</text><text start=\"18.48\" dur=\"2.96\">It&amp;#39;s also going to be really\nimportant to create within you</text><text start=\"21.44\" dur=\"2.8\">a capability to think\ncomputationally.</text><text start=\"24.24\" dur=\"2.86\">So our goal is to let you become\nskillful at not only</text><text start=\"27.1\" dur=\"2.69\">getting the computer to do\nsomething, but to do that</text><text start=\"29.79\" dur=\"3.27\">thing that you want it to, to\nget it to solve a problem.</text><text start=\"33.06\" dur=\"2.63\">By the end of this course, we\nhope that your first instinct</text><text start=\"35.69\" dur=\"2.44\">when faced with any interesting\nchallenge is to</text><text start=\"38.13\" dur=\"2.94\">first think about how could I\ncapture that challenge, that</text><text start=\"41.07\" dur=\"3.28\">problem in an algorithmic or\nmechanical description of</text><text start=\"44.35\" dur=\"2.7\">steps such that I could\nget the computer to do</text><text start=\"47.05\" dur=\"0.92\">the work for me.</text><text start=\"47.97\" dur=\"2.97\">If you can do that, it&amp;#39;s going\nto give you a great deal of</text><text start=\"50.94\" dur=\"2.24\">advantage as you face\nany kind of problem.</text><text start=\"53.18\" dur=\"1.94\">And those are the skills that\nyou&amp;#39;re going to see throughout</text><text start=\"55.12\" dur=\"1.07\">this course.</text><text start=\"56.19\" dur=\"4.5\">Now if our goal is to have you\nlearn how to get a computer to</text><text start=\"60.69\" dur=\"2.4\">do something for you, how to\ntalk to the computer, how to</text><text start=\"63.09\" dur=\"1.429\">think algorithmically.</text><text start=\"64.519\" dur=\"2.621\">1 of the questions we can ask\nis, so what&amp;#39;s the computer</text><text start=\"67.14\" dur=\"1.08\">going to do for us?</text><text start=\"68.22\" dur=\"1.78\">What&amp;#39;s it actually good at?</text><text start=\"70\" dur=\"1.85\">That seems like probably\nan odd question.</text><text start=\"71.85\" dur=\"3.02\">After all, we know computers\ncould do a ton of things.</text><text start=\"74.87\" dur=\"2.6\">But it&amp;#39;s still important to go\nback to a very fundamental and</text><text start=\"77.47\" dur=\"1.28\">basic point.</text><text start=\"78.75\" dur=\"1.93\">What does a computer do?</text><text start=\"80.68\" dur=\"2.96\">In fact it does 2 things\nand 2 things only.</text><text start=\"83.64\" dur=\"4.13\">It performs some calculations,\nand it remembers results so</text><text start=\"87.77\" dur=\"1.54\">that it can reuse them.</text><text start=\"89.31\" dur=\"3.08\">Now you&amp;#39;d say, OK, so it\nperforms calculations.</text><text start=\"92.39\" dur=\"1.08\">That seems fine.</text><text start=\"93.47\" dur=\"2.52\">But what kinds of\ncalculations.</text><text start=\"95.99\" dur=\"3.24\">Well, it turns out that every\ncomputer comes with a simple</text><text start=\"99.23\" dur=\"2.99\">set of primitive calculations,\nthings that we call built in.</text><text start=\"102.22\" dur=\"2.4\">They&amp;#39;re provided by the\nmanufacturer as the basic</text><text start=\"104.62\" dur=\"1.58\">elements that a computer\ncould use.</text><text start=\"106.2\" dur=\"2.15\">We&amp;#39;ll see some examples\nof that shortly.</text><text start=\"108.35\" dur=\"3.14\">If that&amp;#39;s all we have, that&amp;#39;s\npretty limiting.</text><text start=\"111.49\" dur=\"2.63\">So a key thing, as we go through\nthe material in this</text><text start=\"114.12\" dur=\"3.56\">course, is to learn how we can\ncreate our own methods for</text><text start=\"117.68\" dur=\"3.27\">computing something, how we can\ncapture the computational</text><text start=\"120.95\" dur=\"2.11\">way of thinking about something\nin a manner that</text><text start=\"123.06\" dur=\"3.1\">could be used by the computer,\nand to do it in a way whereby</text><text start=\"126.16\" dur=\"2.12\">the computer can\nabstract that.</text><text start=\"128.28\" dur=\"2.77\">By that we mean that the\ncomputer can figure out how to</text><text start=\"131.05\" dur=\"2.9\">take what you tell it and turn\nit into something that it can</text><text start=\"133.95\" dur=\"2.21\">now treat as if it were a\nprimitive, something that was</text><text start=\"136.16\" dur=\"3.24\">provided by the manufacturer,\nand reuse that throughout its</text><text start=\"139.4\" dur=\"1.08\">computations.</text><text start=\"140.48\" dur=\"3.04\">So our computers are going to do\ncalculations for us, using</text><text start=\"143.52\" dur=\"2.55\">a set of built-in primitives,\nplus things that we add.</text><text start=\"146.07\" dur=\"3.14\">Now you might ask, gee,\nis that enough?</text><text start=\"149.21\" dur=\"2.44\">If it turns out that a computer\ncan just perform</text><text start=\"151.65\" dur=\"3.21\">primitives calculations,\nit&amp;#39;s not sufficient.</text><text start=\"154.86\" dur=\"3.09\">Well, as I&amp;#39;m sure you already\nrealize, modern computers can</text><text start=\"157.95\" dur=\"2.895\">perform most calculations\nincredibly quickly.</text><text start=\"160.845\" dur=\"3.295\">And so one question is if we\ncan do them fast enough is</text><text start=\"164.14\" dur=\"2.5\">that sufficient to do\ninteresting things?</text><text start=\"166.64\" dur=\"1.85\">Let&amp;#39;s look at both\nparts of that.</text><text start=\"168.49\" dur=\"2.03\">First of all, how quickly\ndoes a modern</text><text start=\"170.52\" dur=\"2.13\">computer actually run?</text><text start=\"172.65\" dur=\"2.34\">Well, let me give you a simple\nlittle thought example.</text><text start=\"174.99\" dur=\"2.11\">If I were to take a little\ngooseneck lamp and put it</text><text start=\"177.1\" dur=\"3.76\">right here, a foot above my\ndesk, and I were to time</text><text start=\"180.86\" dur=\"3.64\">things perfectly so that as I\nhit the switch on the lamp I</text><text start=\"184.5\" dur=\"2.38\">hit a key on my computer and\nstarted them both up at</text><text start=\"186.88\" dur=\"3.35\">exactly the same time, in the\nlength of time it takes the</text><text start=\"190.23\" dur=\"3.56\">light to go from the lamp to\nthe desk your computer will</text><text start=\"193.79\" dur=\"2.786\">execute two operations.</text><text start=\"196.576\" dur=\"1.27\">That&amp;#39;s amazing.</text><text start=\"197.846\" dur=\"3.304\">It does two operations, two of\nthose primitive operations in</text><text start=\"201.15\" dur=\"3.56\">the amount of time it takes\nlight to go basically a foot.</text><text start=\"204.71\" dur=\"1.58\">Unbelievable.</text><text start=\"206.29\" dur=\"1.205\">Here&amp;#39;s another way of\nthinking about it.</text><text start=\"207.495\" dur=\"3.595\">Imagine I take a simple child&amp;#39;s\nrubber ball and I</text><text start=\"211.09\" dur=\"3.87\">suspend it about a meter off\nthe ground and I drop it.</text><text start=\"214.96\" dur=\"4.25\">If I let it drop, by the time\nit hits the ground, assuming</text><text start=\"219.21\" dur=\"3.86\">gravity behaves normally, your\ncomputer will have executed</text><text start=\"223.07\" dur=\"2.54\">1,000,000,000 operations.</text><text start=\"225.61\" dur=\"1.21\">Unbelievable.</text><text start=\"226.82\" dur=\"1.56\">1,000,000,000 operations\nby the time that</text><text start=\"228.38\" dur=\"1.91\">ball hits the ground.</text><text start=\"230.29\" dur=\"3.17\">Now, that suggests that in\nfact these computers are</text><text start=\"233.46\" dur=\"0.9\">incredibly fast.</text><text start=\"234.36\" dur=\"2.01\">And even though they&amp;#39;re\ncomputing very simple things,</text><text start=\"236.37\" dur=\"1.87\">they&amp;#39;re doing incredibly\nquickly.</text><text start=\"238.24\" dur=\"1.95\">They are.</text><text start=\"240.19\" dur=\"1.54\">We say computers do\nsimple operations.</text><text start=\"241.73\" dur=\"2.58\">We also said that they\nhave some storage.</text><text start=\"244.31\" dur=\"2.76\">So how big is the storage\ninside of a computer?</text><text start=\"247.07\" dur=\"3.21\">Well, every element of storage\nis called a byte.</text><text start=\"250.28\" dur=\"3.95\">And if we were to assume that\na byte weighed 1 ounce --</text><text start=\"254.23\" dur=\"2.34\">I know bytes don&amp;#39;t really weigh\nounces, but assume they</text><text start=\"256.57\" dur=\"1.049\">weigh 1 ounce.</text><text start=\"257.619\" dur=\"2.521\">A typical computer\nhas hundreds of</text><text start=\"260.14\" dur=\"2.27\">gigabytes of storage.</text><text start=\"262.41\" dur=\"3.98\">And that says if each one of\nthose bytes weighs 1 ounce a</text><text start=\"266.39\" dur=\"2.38\">computer would be able to\nstore the equivalent of</text><text start=\"268.77\" dur=\"5.34\">300,000,000 tons of storage.</text><text start=\"274.11\" dur=\"0.21\">OK.</text><text start=\"274.32\" dur=\"1.31\">They don&amp;#39;t really store\nit that way.</text><text start=\"275.63\" dur=\"1.52\">But you get the idea.</text><text start=\"277.15\" dur=\"2.41\">Incredible amount of storage,\ncan remember a lot of things,</text><text start=\"279.56\" dur=\"3.34\">and incredibly quick in terms\nof doing the computation.</text><text start=\"282.9\" dur=\"2.98\">So, that sounds really good.</text><text start=\"285.88\" dur=\"3.07\">The question is if they&amp;#39;re only\nprimitive operations is</text><text start=\"288.95\" dur=\"0.97\">that enough?</text><text start=\"289.92\" dur=\"1.85\">Are these simple calculations\nsufficient?</text><text start=\"291.77\" dur=\"1.41\">Well, they&amp;#39;re going to\ndo a lot as we see.</text><text start=\"293.18\" dur=\"2.44\">But we&amp;#39;re also going to see that\nthey&amp;#39;re not quite enough</text><text start=\"295.62\" dur=\"1.57\">to do everything we&amp;#39;d like.</text><text start=\"297.19\" dur=\"2.03\">Let me give you 2 examples.</text><text start=\"299.22\" dur=\"2.045\">I&amp;#39;m sure all of you have gone to\nthe World Wide Web to look</text><text start=\"301.265\" dur=\"0.955\">up a piece of information.</text><text start=\"302.22\" dur=\"2.58\">You&amp;#39;ve searched the web to try\nand find things that you&amp;#39;d</text><text start=\"304.8\" dur=\"1.78\">like to know about.</text><text start=\"306.58\" dur=\"2.29\">The question is if a computer\nis just doing this the</text><text start=\"308.87\" dur=\"2.17\">straightforward way\nhow quickly would</text><text start=\"311.04\" dur=\"1.15\">it search the web?</text><text start=\"312.19\" dur=\"3.07\">Well, it turns out there are\nabout 45,000,000,000</text><text start=\"315.26\" dur=\"2.77\">searchable pages on the\nweb at the moment.</text><text start=\"318.03\" dur=\"3.79\">If we assume that it takes about\n1,000 words, or there</text><text start=\"321.82\" dur=\"1.73\">are about 1,000 words\nper page.</text><text start=\"323.55\" dur=\"1.83\">Some, of course, are much more\nthan that, some of less, but</text><text start=\"325.38\" dur=\"1.69\">about a thousand\nwords per page.</text><text start=\"327.07\" dur=\"2.11\">And just for sake of argument,\nwe&amp;#39;re going to assume it takes</text><text start=\"329.18\" dur=\"4.22\">about 100 operations per word\nto find the word on the page</text><text start=\"333.4\" dur=\"1.6\">and to decide it&amp;#39;s\nthe right thing.</text><text start=\"335\" dur=\"0.96\">100 is actually high.</text><text start=\"335.96\" dur=\"0.53\">Let&amp;#39;s make it a little less.</text><text start=\"336.49\" dur=\"2.71\">Let&amp;#39;s just assume it&amp;#39;s only\n10 operations per word.</text><text start=\"339.2\" dur=\"2.91\">How long does it take to\nactually execute that search?</text><text start=\"342.11\" dur=\"1.23\">Well, we can do the math.</text><text start=\"343.34\" dur=\"1.06\">You can grind it through.</text><text start=\"344.4\" dur=\"3.33\">You have 45,000,000,000 pages.</text><text start=\"347.73\" dur=\"0.86\">You have that many operations.</text><text start=\"348.59\" dur=\"2.68\">You know how quickly we&amp;#39;re doing\nthese actual operations.</text><text start=\"351.27\" dur=\"2.78\">If you put it all together, what\nyou find is it&amp;#39;s going to</text><text start=\"354.05\" dur=\"6.98\">take you about 5.2 days to find\nsomething on the web.</text><text start=\"361.03\" dur=\"1.42\">That&amp;#39;s a slow browser.</text><text start=\"362.45\" dur=\"2.13\">That&amp;#39;s not going to\nwork very well.</text><text start=\"364.58\" dur=\"2.44\">And that basically is giving\nus a hint that even with</text><text start=\"367.02\" dur=\"1.83\">really fast computers we\nhave to be smarter.</text><text start=\"368.85\" dur=\"2.34\">Let me give you a\nsecond example.</text><text start=\"371.19\" dur=\"2.05\">Playing chess, something\nthat&amp;#39;s seen as a very</text><text start=\"373.24\" dur=\"1.115\">difficult task.</text><text start=\"374.355\" dur=\"2.715\">It&amp;#39;s impressive that about 10\nor 15 years ago a computer</text><text start=\"377.07\" dur=\"1.24\">program actually beat the world</text><text start=\"378.31\" dur=\"1.59\">champion in a chess match.</text><text start=\"379.9\" dur=\"2.92\">And 1 of the questions is, well,\nOK, is it just because</text><text start=\"382.82\" dur=\"1.68\">the computers are really fast?</text><text start=\"384.5\" dur=\"1.18\">Well, we can look at\nthis two ways.</text><text start=\"385.68\" dur=\"2.57\">In a typical chess game,\nthere are about 35</text><text start=\"388.25\" dur=\"2.01\">moves at any one time.</text><text start=\"390.26\" dur=\"3.15\">And so the question you could\nask is to say, OK, if I want</text><text start=\"393.41\" dur=\"3.63\">to have my computer program look\nahead 6 moves, 3 moves by</text><text start=\"397.04\" dur=\"3.86\">me, 3 moves by my opponent, how\nmany different options are</text><text start=\"400.9\" dur=\"2.18\">there if there are about\n35 moves each?</text><text start=\"403.08\" dur=\"4.96\">And the answer is about 1.8\nbillion different sets of the</text><text start=\"408.04\" dur=\"1.87\">chess board that I&amp;#39;d\nhave to look at.</text><text start=\"409.91\" dur=\"3.86\">If I can check each move out\nin about 100 operations per</text><text start=\"413.77\" dur=\"3.02\">move, then that says it&amp;#39;s going\nto take me about a half</text><text start=\"416.79\" dur=\"2.63\">hour to actually look\nat each move.</text><text start=\"419.42\" dur=\"1.26\">That&amp;#39;s pretty slow.</text><text start=\"420.68\" dur=\"1.26\">And this is pointing\nto a problem that</text><text start=\"421.94\" dur=\"1.08\">we want to get at.</text><text start=\"423.02\" dur=\"3.63\">And the problem is that, yes,\ncomputers are really fast, but</text><text start=\"426.65\" dur=\"2.53\">we need good algorithmic\ndesign as well.</text><text start=\"429.18\" dur=\"3.25\">To deal with interesting\nproblems, we need algorithms</text><text start=\"432.43\" dur=\"2.95\">that are clever, are\nintelligent, are smart about</text><text start=\"435.38\" dur=\"1.56\">how they actually do the work.</text><text start=\"436.94\" dur=\"2.18\">And that&amp;#39;s a lot of what we&amp;#39;re\ngoing to talk about this</text><text start=\"439.12\" dur=\"1.22\">during this term.</text><text start=\"440.34\" dur=\"2.49\">By the way, we also said\nspace was a big issue.</text><text start=\"442.83\" dur=\"1.785\">And we got a lot of space\nin the computer.</text><text start=\"444.615\" dur=\"2.905\">If you go back to the chess\nexample, you can ask the</text><text start=\"447.52\" dur=\"2.21\">following question: How\nmany different games</text><text start=\"449.73\" dur=\"1.506\">are there in chess?</text><text start=\"451.236\" dur=\"4.644\">Experts will tell you there\nabout 10^123 different chess</text><text start=\"455.88\" dur=\"1.73\">games that are possible.</text><text start=\"457.61\" dur=\"2.14\">Is that too big for storing\nin your computer?</text><text start=\"459.75\" dur=\"4.18\">Well there are only\n10^80 atoms in</text><text start=\"463.93\" dur=\"1.77\">the observable universe.</text><text start=\"465.7\" dur=\"2.05\">So we can&amp;#39;t just store\naway all the games</text><text start=\"467.75\" dur=\"1.3\">and look them up.</text><text start=\"469.05\" dur=\"2.03\">And both of these are pointing\nto why we&amp;#39;re going to use this</text><text start=\"471.08\" dur=\"3.2\">course to actually learn about\nthinking algorithmically.</text><text start=\"474.28\" dur=\"3.74\">Now this suggests it&amp;#39;s just a\nmatter of putting together</text><text start=\"478.02\" dur=\"1.88\">enough speed and enough\nsmartness.</text><text start=\"479.9\" dur=\"2.01\">But one can be a little bit\nmore distinct and say, are</text><text start=\"481.91\" dur=\"1.76\">there actual limitations\nto what we</text><text start=\"483.67\" dur=\"1.77\">can do with the computer?</text><text start=\"485.44\" dur=\"2.57\">And in fact despite its speed\nand its size and the</text><text start=\"488.01\" dur=\"2.33\">cleverness of the algorithm,\nour computer still has some</text><text start=\"490.34\" dur=\"0.67\">limitations.</text><text start=\"491.01\" dur=\"1.87\">Here are a couple of examples.</text><text start=\"492.88\" dur=\"1.1\">First of all, there are\nsome problems that</text><text start=\"493.98\" dur=\"1.8\">are just too complex.</text><text start=\"495.78\" dur=\"1.92\">We don&amp;#39;t have enough speed,\nenough storage.</text><text start=\"497.7\" dur=\"2.24\">And they may get tackle\nas things improve.</text><text start=\"499.94\" dur=\"2.23\">But examples here would be\nthings like predicting weather</text><text start=\"502.17\" dur=\"1.28\">at a very local scale.</text><text start=\"503.45\" dur=\"2.09\">I&amp;#39;d love to know what&amp;#39;s exactly\ngoing to happen</text><text start=\"505.54\" dur=\"2.1\">outside my window for the\nnext half hour or next</text><text start=\"507.64\" dur=\"1.64\">hour or next 3 hours.</text><text start=\"509.28\" dur=\"2.61\">The size of the problem simply\ntoo big for a computer to be</text><text start=\"511.89\" dur=\"2.08\">able to model well enough\nand solve in a</text><text start=\"513.97\" dur=\"1.542\">reasonable amount of time.</text><text start=\"515.512\" dur=\"1.748\">It turns out some of these\ncomplex problems</text><text start=\"517.26\" dur=\"1.34\">actually help us.</text><text start=\"518.6\" dur=\"3.13\">Modern cryptography, the way\nin which information is</text><text start=\"521.73\" dur=\"4.2\">securely transmitted across the\nnet, relies on having some</text><text start=\"525.93\" dur=\"2.62\">problems that are simply too\ndifficult to compute and,</text><text start=\"528.55\" dur=\"2.09\">therefore, too difficult\nto break the code.</text><text start=\"530.64\" dur=\"1.87\">So we actually get some benefits\nabout the problems</text><text start=\"532.51\" dur=\"1.636\">that are too complex.</text><text start=\"534.146\" dur=\"2.594\">But as we&amp;#39;re also going to see\nlater on the course, there are</text><text start=\"536.74\" dur=\"3.24\">some problems that are just\nfundamentally impossible to</text><text start=\"539.98\" dur=\"2.87\">compute no matter how\nbig the computer is.</text><text start=\"542.85\" dur=\"1.645\">And some of those are\nreally heavy.</text><text start=\"544.495\" dur=\"3.205\">Here is one example, being\nable to predict whether a</text><text start=\"547.7\" dur=\"4.78\">piece of code will always stop\nwith an answer for any input.</text><text start=\"552.48\" dur=\"2.26\">By that I don&amp;#39;t mean just you\nrun it and see if it stops,</text><text start=\"554.74\" dur=\"3.01\">being able to write a piece of\ncode and then have some other</text><text start=\"557.75\" dur=\"2.89\">piece of code inspect it to say,\nthis will always work.</text><text start=\"560.64\" dur=\"2.34\">It will always stop, and it will\nalways give us an answer.</text><text start=\"562.98\" dur=\"2.8\">This turns out to not be\npossible to solve.</text><text start=\"565.78\" dur=\"3.86\">And this is known as Turing&amp;#39;s\nHalting Problem.</text><text start=\"569.64\" dur=\"3.44\">And we&amp;#39;ll talk briefly about\nthat later on in the term.</text><text start=\"573.08\" dur=\"2.39\">But it says that there are some\nproblems that are simply</text><text start=\"575.47\" dur=\"2.79\">too hard to solve period.</text><text start=\"578.26\" dur=\"2.21\">Nonetheless, in this course,\nwe&amp;#39;re going to start talking</text><text start=\"580.47\" dur=\"2.22\">about how do we think\nalgorithmically and get the</text><text start=\"582.69\" dur=\"2.02\">computer to do interesting\nthings for us.</text><text start=\"584.71\" dur=\"1.25\"></text></transcript>\n", "hXyXRmJA8RU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.62\"></text><text start=\"1.62\" dur=\"1.23\">ERIC GRIMSON: OK.</text><text start=\"2.85\" dur=\"2.34\">So we&amp;#39;ve now seen how to create\nsimple expressions.</text><text start=\"5.19\" dur=\"2.45\">We can take objects\nthat are numbers</text><text start=\"7.64\" dur=\"1.19\">like integers or floats.</text><text start=\"8.83\" dur=\"3.05\">We can combine them together\nwith operators, so we say 3</text><text start=\"11.88\" dur=\"4.19\">plus 4 or 3 plus 4 all in\nparentheses times 5.</text><text start=\"16.07\" dur=\"2.66\">That gives us a way of doing\nsome simple computations, but</text><text start=\"18.73\" dur=\"1.21\">it&amp;#39;s pretty boring.</text><text start=\"19.94\" dur=\"2.15\">It basically says we\ngot a calculator.</text><text start=\"22.09\" dur=\"2.62\">So we can type in expressions\nand get out values.</text><text start=\"24.71\" dur=\"1.55\">But we like to obviously\ndo more</text><text start=\"26.26\" dur=\"2.21\">complicated kinds of things.</text><text start=\"28.47\" dur=\"2.31\">One thing we need in order to\nmake that happen is what we</text><text start=\"30.78\" dur=\"1.579\">call a means of abstraction.</text><text start=\"32.359\" dur=\"2.141\">While we can certainly write\narbitrary expressions, it</text><text start=\"34.5\" dur=\"2.52\">would be valuable having written\nit down and gotten the</text><text start=\"37.02\" dur=\"2.99\">value of an expression to be\nable to remember, to save it</text><text start=\"40.01\" dur=\"3.22\">away by giving it a name, and\nthen using the name to get the</text><text start=\"43.23\" dur=\"2.72\">value back whenever\nwe needed it.</text><text start=\"45.95\" dur=\"1.43\">Fortunately, we have\nthat ability.</text><text start=\"47.38\" dur=\"1.37\">It&amp;#39;s called assignment.</text><text start=\"48.75\" dur=\"3.47\">And in Python, the format\nof that is shown here.</text><text start=\"52.22\" dur=\"4.61\">We type in word or a sequence\nof characters followed by an</text><text start=\"56.83\" dur=\"4.41\">equal sign followed by some\nexpression whose value will</text><text start=\"61.24\" dur=\"3.18\">then be associated\nwith that word.</text><text start=\"64.42\" dur=\"4.98\">So if I go over to my Python\nshell, I can do things like</text><text start=\"69.4\" dur=\"8.93\">I&amp;#39;m going to say, give\nthe name pi 3.14159.</text><text start=\"78.33\" dur=\"2.25\">And notice when it print it out,\nit doesn&amp;#39;t mean anything.</text><text start=\"80.58\" dur=\"1.54\">It simply has done\nthat assignment.</text><text start=\"82.12\" dur=\"1.02\">That is it basically--</text><text start=\"83.14\" dur=\"2.65\">as we&amp;#39;re going to see later on--\ncreated a binding of the</text><text start=\"85.79\" dur=\"1.915\">name pi to that value.</text><text start=\"87.705\" dur=\"3.525\">If I want to see the value of\npi, I can simply ask the</text><text start=\"91.23\" dur=\"2.49\">Python interpreter to give\nit to me, and it</text><text start=\"93.72\" dur=\"1.34\">prints it back out.</text><text start=\"95.06\" dur=\"1.44\">So I could do another binding.</text><text start=\"96.5\" dur=\"4.05\">I can say, I&amp;#39;ve got\na radius of 11.2.</text><text start=\"100.55\" dur=\"2.03\">Again, notice that it doesn&amp;#39;t\nprint anything out.</text><text start=\"102.58\" dur=\"3.43\">If I want to get the value of\nradius, I can ask for it.</text><text start=\"106.01\" dur=\"3.07\">But I can also now do things\nlike create expressions.</text><text start=\"109.08\" dur=\"2.27\">So I&amp;#39;m going to assign\nthe name area to.</text><text start=\"111.35\" dur=\"2.32\">And I can now write an\nexpression as I would have</text><text start=\"113.67\" dur=\"8.57\">before with now not just numbers\nbut names whose values</text><text start=\"122.24\" dur=\"0.79\">are also numbers.</text><text start=\"123.03\" dur=\"4.05\">So the area is pi r squared,\nwhere r is my radius.</text><text start=\"127.08\" dur=\"3.78\">And I can say, OK, what\nis the value of area?</text><text start=\"130.86\" dur=\"2.11\">And it did that computation.</text><text start=\"132.97\" dur=\"1.43\">So I have an assignment\nstatement.</text><text start=\"134.4\" dur=\"2.76\">And notice here I&amp;#39;m using a\nsingle equal sign, which is</text><text start=\"137.16\" dur=\"3.14\">why we use the double equal\nsign for comparison.</text><text start=\"140.3\" dur=\"3.86\">A word or a name, an equal sign,\nand expression says, get</text><text start=\"144.16\" dur=\"3.81\">the value of that expression and\nbind to it or bind it to</text><text start=\"147.97\" dur=\"2.6\">if you like the value of the\nname associated on the left</text><text start=\"150.57\" dur=\"3.89\">hand side of that expression.</text><text start=\"154.46\" dur=\"2.26\">So let&amp;#39;s look at that in\na little more detail.</text><text start=\"156.72\" dur=\"4.4\">We say that we&amp;#39;re binding a\nvariable or a name to a value.</text><text start=\"161.12\" dur=\"1.08\">And what does that mean?</text><text start=\"162.2\" dur=\"4.16\">That statement pi equals 3.14159\nliterally assigns the</text><text start=\"166.36\" dur=\"3\">name pi to the value of the\nexpression to the right hand</text><text start=\"169.36\" dur=\"1.502\">side of the equal.</text><text start=\"170.862\" dur=\"3.188\">And you can think of this as\nliterally creating a binding</text><text start=\"174.05\" dur=\"2.31\">between a name and\na value stored</text><text start=\"176.36\" dur=\"1.18\">somewhere in the computer.</text><text start=\"177.54\" dur=\"2.43\">So over here are all the values\nthat are stored away in</text><text start=\"179.97\" dur=\"0.87\">the computer.</text><text start=\"180.84\" dur=\"3\">And I have somewhere within the\ncomputer a listing of all</text><text start=\"183.84\" dur=\"2.48\">the names whose bindings\nI have done.</text><text start=\"186.32\" dur=\"2.47\">As we just saw, we can retrieve\nthe value associated</text><text start=\"188.79\" dur=\"2.65\">with the name by simply invoking\nthe name, just asking</text><text start=\"191.44\" dur=\"4.41\">for what is the value\npi or pi.</text><text start=\"195.85\" dur=\"2.86\">Now I can change the bindings.</text><text start=\"198.71\" dur=\"3.23\">So having the bound a variable\nname, I can do another</text><text start=\"201.94\" dur=\"1.34\">assignment statement.</text><text start=\"203.28\" dur=\"2.81\">So, for example, if I go back\nover to my Python shell, I</text><text start=\"206.09\" dur=\"2.11\">could change the value\nof radius.</text><text start=\"208.2\" dur=\"6.29\">Remember, initially we\nhad radius of 11.2.</text><text start=\"214.49\" dur=\"1.81\">Let&amp;#39;s change it to something\ndifferent.</text><text start=\"216.3\" dur=\"1.8\">Let&amp;#39;s changes it to in fact--</text><text start=\"218.1\" dur=\"3.95\">I&amp;#39;m going to make this 14.3.</text><text start=\"222.05\" dur=\"1.37\">So how do I do that?</text><text start=\"223.42\" dur=\"3.62\">I say let&amp;#39;s have\nradius be 14.3.</text><text start=\"227.04\" dur=\"2.44\">Now what&amp;#39;s my value of radius?</text><text start=\"229.48\" dur=\"1.8\">There it is.</text><text start=\"231.28\" dur=\"3.04\">What that&amp;#39;s done in my diagram\nover here is it&amp;#39;s change the</text><text start=\"234.32\" dur=\"1.07\">binding for radius.</text><text start=\"235.39\" dur=\"1.22\">Remember before it was 11.2.</text><text start=\"236.61\" dur=\"2.93\">It has now changed into\nsomething else.</text><text start=\"239.54\" dur=\"3.23\">But notice that area\nhasn&amp;#39;t changed.</text><text start=\"242.77\" dur=\"2.07\">And in fact I can\nconfirm that.</text><text start=\"244.84\" dur=\"4.68\">The area is still 3.94 point\na whole bunch of stuff.</text><text start=\"249.52\" dur=\"2.92\">And that&amp;#39;s because my evaluation\nof the binding for</text><text start=\"252.44\" dur=\"2.13\">area having been done\nearlier has simply</text><text start=\"254.57\" dur=\"1.48\">stored away that value.</text><text start=\"256.05\" dur=\"2.729\">As you can see right here,\nit doesn&amp;#39;t have an</text><text start=\"258.779\" dur=\"0.825\">expression of value.</text><text start=\"259.604\" dur=\"1.725\">And it is the particular\nvalue.</text><text start=\"261.329\" dur=\"3.301\">So rebinding radius does\nnot change the binding</text><text start=\"264.63\" dur=\"1.75\">associated with area.</text><text start=\"266.38\" dur=\"3.28\">An easy place to make a bug or\nhave a mistake and something</text><text start=\"269.66\" dur=\"2.34\">that you want to keep an eye out\non as you move forward in</text><text start=\"272\" dur=\"1.25\">terms of using these ideas.</text><text start=\"273.25\" dur=\"1.2\"></text></transcript>\n", "G0qUN3eTqlo": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.87\"></text><text start=\"0.87\" dur=\"2.45\">ERIC GRIMSON: Let&amp;#39;s visualize\nwhat selection sort does.</text><text start=\"3.32\" dur=\"2.87\">The basic idea is that we&amp;#39;re going to\nstart with the first point in the</text><text start=\"6.19\" dur=\"3.64\">list, look at all the remaining ones to\nfind the smallest thing, and then</text><text start=\"9.83\" dur=\"3.08\">swap those two points and continue on.</text><text start=\"12.91\" dur=\"3.35\">So we start by putting a marker\nat the first spot on the list.</text><text start=\"16.26\" dur=\"3.09\">We then start by taking a second marker\nat the next point in the list,</text><text start=\"19.35\" dur=\"3.6\">and we keep scanning down, checking to\nsee where is the smallest thing that</text><text start=\"22.95\" dur=\"2.69\">we&amp;#39;ve seen in the list, which\nhappens to be here.</text><text start=\"25.64\" dur=\"2.42\">When we get to the end of the list,\nknowing that that&amp;#39;s the smallest</text><text start=\"28.06\" dur=\"2.41\">thing, we swap those two elements.</text><text start=\"30.47\" dur=\"4.06\">And then we move the marker up one,\nstart our checking point at the next</text><text start=\"34.53\" dur=\"3.07\">one, and again, scan down the list,\nfinding the smallest thing we&amp;#39;ve seen</text><text start=\"37.6\" dur=\"3.12\">so far, which eventually\nwe find there.</text><text start=\"40.72\" dur=\"3.89\">Having found that, we swap those two\nelements, move on to the next point in</text><text start=\"44.61\" dur=\"3.5\">the list, move our marker up one,\nand again scan for the smallest</text><text start=\"48.11\" dur=\"0.92\">element in the list.</text><text start=\"49.03\" dur=\"4.01\">Which happens to be here, so when we\nget to the end, we swap those two.</text><text start=\"53.04\" dur=\"0.72\">And you get the idea.</text><text start=\"53.76\" dur=\"2.74\">We move the marker along, the thing that\nwe&amp;#39;re going to check along, and</text><text start=\"56.5\" dur=\"3.34\">we keep scanning until we find the\nsmallest element of the list, which is</text><text start=\"59.84\" dur=\"0.84\">right there.</text><text start=\"60.68\" dur=\"2.45\">Once we&amp;#39;ve gotten to the end of the\nlist, knowing this is the smallest</text><text start=\"63.13\" dur=\"3\">one, we swap these two,\nand we can carry on.</text><text start=\"66.13\" dur=\"3.15\">I&amp;#39;m not going to do the rest, but you\ncan see how we&amp;#39;re selectively finding</text><text start=\"69.28\" dur=\"3.25\">the next smallest element, and putting\nit at the front of the list.</text><text start=\"72.53\" dur=\"3.65\">You can also see how that notion of\nhaving the prefix sorted and the</text><text start=\"76.18\" dur=\"2.81\">remainder not, but finding the smallest\nelement and adding it to the</text><text start=\"78.99\" dur=\"3.03\">prefix builds that invariant\nthat lets us guarantee</text><text start=\"82.02\" dur=\"1.25\">that this works correctly.</text><text start=\"83.27\" dur=\"1.11\"></text></transcript>\n", "xnhi9-ud_vI": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.706\"></text><text start=\"0.706\" dur=\"1.624\">Eric Grimson: We&amp;#39;ve been\nbuilding a lot of code.</text><text start=\"2.33\" dur=\"3.35\">We&amp;#39;ve been starting to think about\nhow to deal with Python.</text><text start=\"5.68\" dur=\"1.5\">And this is great.</text><text start=\"7.18\" dur=\"4.61\">And it would be fantastic if our\ncode always worked perfectly</text><text start=\"11.79\" dur=\"1.2\">first time we ran it.</text><text start=\"12.99\" dur=\"2.94\">Of course, it would always be nice if\nI won the lottery every time or my</text><text start=\"15.93\" dur=\"2.5\">favorite sports team won every game.</text><text start=\"18.43\" dur=\"1.68\">Unfortunately, that doesn&amp;#39;t happen.</text><text start=\"20.11\" dur=\"2.28\">As they say, life ain&amp;#39;t perfect.</text><text start=\"22.39\" dur=\"3.63\">And so we need to have a way of guiding\nourselves as we think about</text><text start=\"26.02\" dur=\"3.66\">how to both test our code\nand then fix it.</text><text start=\"29.68\" dur=\"3.67\">So we&amp;#39;re going to talk about testing\nmethods, which are basically ways of</text><text start=\"33.35\" dur=\"4.76\">trying code on examples to try and\nfigure out if it&amp;#39;s running correctly.</text><text start=\"38.11\" dur=\"2.92\">And then once we&amp;#39;ve, in fact, isolated\nthat there may be a problem, we&amp;#39;re</text><text start=\"41.03\" dur=\"3.35\">going to talk about debugging methods,\nwhich are ways of fixing the program</text><text start=\"44.38\" dur=\"3.33\">that you know does not work\nas you intended it to.</text><text start=\"47.71\" dur=\"3.55\">We&amp;#39;re going to talk about both of\nthose throughout this lecture.</text><text start=\"51.26\" dur=\"3.21\">Now, let&amp;#39;s start by thinking more\nabstractly about sort of when should</text><text start=\"54.47\" dur=\"2.79\">we, in fact, do these tasks.</text><text start=\"57.26\" dur=\"3.01\">When should you test, and\nwhen should you debug?</text><text start=\"60.27\" dur=\"4.28\">Part of the goal here is it would be\nreally good if we could actually ahead</text><text start=\"64.55\" dur=\"3.82\">of time, figure out how to design our\ncode to make it easier to do this.</text><text start=\"68.37\" dur=\"3.3\">And indeed, all good programmers\nhave that kind of practice.</text><text start=\"71.67\" dur=\"3.32\">They break the code up into components\nthat can be tested and debugged</text><text start=\"74.99\" dur=\"0.93\">independently.</text><text start=\"75.92\" dur=\"3.08\">They find natural breaking points\nbetween different parts of the</text><text start=\"79\" dur=\"3.55\">computation, places where our\ncomputations contain, and a simple</text><text start=\"82.55\" dur=\"1.44\">result is passed on.</text><text start=\"83.99\" dur=\"2.8\">And they write functions\nto capture each parse.</text><text start=\"86.79\" dur=\"3.36\">That&amp;#39;s going to allow us to\nmore easily test pieces.</text><text start=\"90.15\" dur=\"4.33\">Second thing good programmers will do\nis they&amp;#39;ll write good documentation.</text><text start=\"94.48\" dur=\"2.32\">When you&amp;#39;ve got a problem set, it&amp;#39;s\noften easy to think I&amp;#39;m just going to</text><text start=\"96.8\" dur=\"1.33\">start working on this.</text><text start=\"98.13\" dur=\"3.96\">But in fact, before you jump into code,\nthink about writing down what it</text><text start=\"102.09\" dur=\"1.22\">is you&amp;#39;re trying to do.</text><text start=\"103.31\" dur=\"2.13\">What are the expectations on my input?</text><text start=\"105.44\" dur=\"2.62\">What are the expectations\non my outputs?</text><text start=\"108.06\" dur=\"3.69\">Even if the code doesn&amp;#39;t strictly\nenforce constraints on the inputs by</text><text start=\"111.75\" dur=\"3.41\">testing for them, this kind of\ndocumentation can be really valuable</text><text start=\"115.16\" dur=\"2.15\">when you&amp;#39;re trying to trace down\nwhy a piece of code is</text><text start=\"117.31\" dur=\"2.2\">not behaving as expected.</text><text start=\"119.51\" dur=\"3.44\">And finally, good programmers\nwill document assumptions.</text><text start=\"122.95\" dur=\"4.15\">I&amp;#39;m assuming certain conditions, both\nin terms of what&amp;#39;s passed into the</text><text start=\"127.1\" dur=\"2.55\">code and at certain stages\nthroughout the code.</text><text start=\"129.65\" dur=\"3.19\">And detailing those assumptions is\ngoing to make it easier for us to</text><text start=\"132.84\" dur=\"3.85\">actually isolate where there may be\nproblems, for example, because an</text><text start=\"136.69\" dur=\"3.94\">input does not satisfy an assumption.</text><text start=\"140.63\" dur=\"0.38\">All right.</text><text start=\"141.01\" dur=\"4.37\">Once we&amp;#39;ve designed our code, we\ncan, in fact, start moving</text><text start=\"145.38\" dur=\"1.41\">on to testing it.</text><text start=\"146.79\" dur=\"3.68\">And to do the testing, basically\nwe need to do 2 things.</text><text start=\"150.47\" dur=\"2.77\">The 1st one is we&amp;#39;ve got to make\nsure our code actually runs.</text><text start=\"153.24\" dur=\"3.45\">So we need to remove\nany syntax errors.</text><text start=\"156.69\" dur=\"1.94\">We need to remove any static\nsemantic errors.</text><text start=\"158.63\" dur=\"3.69\">And fortunately, in most modern\nprogramming languages, including</text><text start=\"162.32\" dur=\"4.23\">Python, these things will be handled\nautomatically, indeed, as you probably</text><text start=\"166.55\" dur=\"0.57\">already seen.</text><text start=\"167.12\" dur=\"3.76\">If you write a piece of code that has\neither a syntax error, you forget a</text><text start=\"170.88\" dur=\"3.09\">semicolon, or you&amp;#39;ve got the wrong\nkind of parentheses, or a static</text><text start=\"173.97\" dur=\"4.84\">semantic error, when you try and load\nthat into the Python environment,</text><text start=\"178.81\" dur=\"2.68\">typically, the interpreter, the\nevaluator will complain.</text><text start=\"181.49\" dur=\"3.37\">It will say you got an error and\nnot actually let you run.</text><text start=\"184.86\" dur=\"2.43\">That makes it easy to fix\nthose kinds of errors.</text><text start=\"187.29\" dur=\"4.19\">Once you have those done, if you&amp;#39;re\nready to start doing testing, it&amp;#39;s</text><text start=\"191.48\" dur=\"3.27\">often really good to have ahead\nof time worked out a</text><text start=\"194.75\" dur=\"1.63\">set of expected results.</text><text start=\"196.38\" dur=\"4.49\">What do I expect the output of the\nprogram to be on a particular input?</text><text start=\"200.87\" dur=\"2.96\">Because that&amp;#39;s going to form a template\nfor helping us figure out how</text><text start=\"203.83\" dur=\"2.87\">to find where the bug actually lies.</text><text start=\"206.7\" dur=\"0.43\">OK.</text><text start=\"207.13\" dur=\"2.61\">With that, we&amp;#39;re now ready to start\nmoving on to thinking about testing.</text><text start=\"209.74\" dur=\"1.328\"></text></transcript>\n", "EE910ZBFlCg": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.375\"></text><text start=\"0.375\" dur=\"2.41\">ERIC GRIMSON: We just showed\nyou a recursive algorithm.</text><text start=\"2.785\" dur=\"1.615\">You may be a little\nworried about it.</text><text start=\"4.4\" dur=\"3.45\">You may be going, OK, but how\ndoes it know which values of</text><text start=\"7.85\" dur=\"1.26\">the variables to use?</text><text start=\"9.11\" dur=\"1.45\">Because I&amp;#39;m not seeing\nany explicit</text><text start=\"10.56\" dur=\"1.59\">changes to those values.</text><text start=\"12.15\" dur=\"1.69\">How does it make sure\nit really stops?</text><text start=\"13.84\" dur=\"2.02\">Why doesn&amp;#39;t it just\nkeep unwinding?</text><text start=\"15.86\" dur=\"3.42\">Didn&amp;#39;t your high school geometry\nteacher never to use</text><text start=\"19.28\" dur=\"3.91\">definitions where you defined\na term in terms of itself.</text><text start=\"23.19\" dur=\"1.98\">Good news is not to worry.</text><text start=\"25.17\" dur=\"2.27\">And we&amp;#39;ve got a tool to help\nus understand that.</text><text start=\"27.44\" dur=\"3.83\">Let&amp;#39;s go back and simply look at\na simple call to recurMul,</text><text start=\"31.27\" dur=\"3.84\">recursive multiplication, using\nthat set of environments</text><text start=\"35.11\" dur=\"3.73\">to see how computation flows.</text><text start=\"38.84\" dur=\"3.72\">So here&amp;#39;s my code, I&amp;#39;ve just\ngot a copy of it here.</text><text start=\"42.56\" dur=\"3.97\">And in particular, if I evaluate\nthis, or load this if</text><text start=\"46.53\" dur=\"3.74\">you like, into a Python\nenvironment, a shell, we know</text><text start=\"50.27\" dur=\"0.82\">what&amp;#39;s going to happen.</text><text start=\"51.09\" dur=\"2.66\">Which is we&amp;#39;re going to create\na frame over here, in which</text><text start=\"53.75\" dur=\"4.2\">that name, recurMul, is bound\nto a procedure object.</text><text start=\"57.95\" dur=\"3.93\">And it&amp;#39;s got inside of it both\nthe parameter list and the</text><text start=\"61.88\" dur=\"3.04\">body, the set of things\nit&amp;#39;s supposed to do.</text><text start=\"64.92\" dur=\"2.39\">OK, let&amp;#39;s see what would\nhappen if we</text><text start=\"67.31\" dur=\"1.51\">actually called it.</text><text start=\"68.82\" dur=\"2.78\">So let&amp;#39;s call it.</text><text start=\"71.6\" dur=\"2.25\">Calling it says, I am going\nto evaluate this</text><text start=\"73.85\" dur=\"1.82\">expression down here.</text><text start=\"75.67\" dur=\"2.3\">And I&amp;#39;m going to first get\nthe value of recurMul.</text><text start=\"77.97\" dur=\"0.83\">I know what that is.</text><text start=\"78.8\" dur=\"1.6\">It&amp;#39;s given by that\npointer there.</text><text start=\"80.4\" dur=\"1.61\">It&amp;#39;s a procedure object.</text><text start=\"82.01\" dur=\"3.52\">And so I know that calling it\nsays I&amp;#39;m going to create a new</text><text start=\"85.53\" dur=\"1.33\">environment.</text><text start=\"86.86\" dur=\"3.4\">It&amp;#39;s going to inherit, or have\nas a parent, the same</text><text start=\"90.26\" dur=\"4.47\">environment that the procedure\nhas, the environment that was</text><text start=\"94.73\" dur=\"1.71\">in place when we defined\nthe procedure.</text><text start=\"96.44\" dur=\"2.18\">So it was going to point\nto that frame.</text><text start=\"98.62\" dur=\"2.73\">And inside of there, first I&amp;#39;m\ngoing to get the values of</text><text start=\"101.35\" dur=\"4.53\">these two expressions, and I&amp;#39;m\ngoing to then bind the</text><text start=\"105.88\" dur=\"3\">parameters of the procedure\nto those values.</text><text start=\"108.88\" dur=\"0.38\">All right.</text><text start=\"109.26\" dur=\"1.59\">I&amp;#39;m saying it in a long\nwinded way, but</text><text start=\"110.85\" dur=\"0.87\">you&amp;#39;ve seen this before.</text><text start=\"111.72\" dur=\"2.21\">We&amp;#39;ve now created a new\nenvironment in which a is</text><text start=\"113.93\" dur=\"2.28\">bound to 2 and b\nis bound to 3.</text><text start=\"116.21\" dur=\"1.99\">And relative to that environment\nwe&amp;#39;re going to</text><text start=\"118.2\" dur=\"3.01\">evaluate the body of\nthis procedure.</text><text start=\"121.21\" dur=\"1.17\">OK.</text><text start=\"122.38\" dur=\"1.28\">Let&amp;#39;s start evaluating\nthe body.</text><text start=\"123.66\" dur=\"3.84\">The body says is b equal to 1.</text><text start=\"127.5\" dur=\"0.53\">No it isn&amp;#39;t.</text><text start=\"128.03\" dur=\"0.479\">It&amp;#39;s 3.</text><text start=\"128.509\" dur=\"2.911\">So it&amp;#39;s going to go to\nthe else clause.</text><text start=\"131.42\" dur=\"3.48\">And the else clause says, I&amp;#39;m\ngoing to return a value.</text><text start=\"134.9\" dur=\"1.05\">Great.</text><text start=\"135.95\" dur=\"0.78\">I&amp;#39;m going to get a value back.</text><text start=\"136.73\" dur=\"2.47\">And it says the value is going\nto be the value of a.</text><text start=\"139.2\" dur=\"2.63\">Remember I&amp;#39;m doing it relative\nto this frame here so I know</text><text start=\"141.83\" dur=\"0.57\">the value of a.</text><text start=\"142.4\" dur=\"1.11\">It&amp;#39;s 2.</text><text start=\"143.51\" dur=\"5.07\">And I&amp;#39;m going to add to a the\nvalue of the recursive call,</text><text start=\"148.58\" dur=\"3.43\">another call to recurMul, with\ndifferent arguments.</text><text start=\"152.01\" dur=\"2.65\">Now think of this very\nstraightforwardly.</text><text start=\"154.66\" dur=\"0.79\">This is Python.</text><text start=\"155.45\" dur=\"1.35\">This is an interpreter.</text><text start=\"156.8\" dur=\"0.91\">That&amp;#39;s an expression.</text><text start=\"157.71\" dur=\"2.46\">It says to get the value of\nthat expression, what do I</text><text start=\"160.17\" dur=\"0.67\">need to do?</text><text start=\"160.84\" dur=\"3.79\">You need to get the value\nof recurMul, oh</text><text start=\"164.63\" dur=\"1.64\">that&amp;#39;s it up here.</text><text start=\"166.27\" dur=\"0.886\">OK.</text><text start=\"167.156\" dur=\"3.034\">Now, I need to get\nthe value of a.</text><text start=\"170.19\" dur=\"2.77\">And remember I&amp;#39;m doing it all\nwith respect to this, and in</text><text start=\"172.96\" dur=\"1\">fact I should have\ndone that better.</text><text start=\"173.96\" dur=\"2.19\">To get the value of recurMul\nwith respect to this</text><text start=\"176.15\" dur=\"2.39\">environment, I&amp;#39;m going to go\nup and find it there since</text><text start=\"178.54\" dur=\"2.02\">it&amp;#39;s not bound down here.</text><text start=\"180.56\" dur=\"2.13\">I need to get the value of a.</text><text start=\"182.69\" dur=\"0.78\">There it is.</text><text start=\"183.47\" dur=\"2.03\">And I need to get the\nvalue of b minus 1.</text><text start=\"185.5\" dur=\"0.67\">Well that&amp;#39;s easy.</text><text start=\"186.17\" dur=\"2.62\">There&amp;#39;s b, and subtract\n1 from it.</text><text start=\"188.79\" dur=\"2.61\">And since recurMul is\na procedure, what</text><text start=\"191.4\" dur=\"1.42\">am I going to do?</text><text start=\"192.82\" dur=\"3.21\">I&amp;#39;m going to create\na new frame.</text><text start=\"196.03\" dur=\"0.62\">Cool.</text><text start=\"196.65\" dur=\"1.99\">That&amp;#39;s exactly what I want.</text><text start=\"198.64\" dur=\"2.21\">Because now I&amp;#39;ve got a\ncomputation that&amp;#39;s taking</text><text start=\"200.85\" dur=\"2.08\">place with respect\nto this frame.</text><text start=\"202.93\" dur=\"1.14\">And how did I set that up?</text><text start=\"204.07\" dur=\"1.25\">Well I got the value of a.</text><text start=\"205.32\" dur=\"2.12\">I got the value of b\nminus 1 from here.</text><text start=\"207.44\" dur=\"3.2\">I&amp;#39;ve bound those in this\nprocedure because that&amp;#39;s what</text><text start=\"210.64\" dur=\"1.2\">it tells me to do.</text><text start=\"211.84\" dur=\"4.01\">And I&amp;#39;m now saying, evaluate\nthis procedure in this frame.</text><text start=\"215.85\" dur=\"2.34\">Remember, when I get the value\nof this I&amp;#39;m going to give it</text><text start=\"218.19\" dur=\"2.07\">back to this frame to complete\nthat addition.</text><text start=\"220.26\" dur=\"3.79\">But I&amp;#39;ve now reduced this\nto simpler computation.</text><text start=\"224.05\" dur=\"1.95\">Notice something else\nreally nice.</text><text start=\"226\" dur=\"2.15\">You may have been saying, well,\nhow do I keep track of</text><text start=\"228.15\" dur=\"2.1\">my iteration variable?</text><text start=\"230.25\" dur=\"1.74\">It&amp;#39;s not really iteration,\nit&amp;#39;s recursion.</text><text start=\"231.99\" dur=\"3.11\">But notice I&amp;#39;ve reduced b.</text><text start=\"235.1\" dur=\"1.65\">And that&amp;#39;s exactly what&amp;#39;s\ngoing to happen.</text><text start=\"236.75\" dur=\"2.41\">I&amp;#39;m going to keep unwinding\nthis computation until I</text><text start=\"239.16\" dur=\"1.65\">ground that out.</text><text start=\"240.81\" dur=\"1.3\">OK.</text><text start=\"242.11\" dur=\"1.12\">We&amp;#39;re now in pretty\ngood shape.</text><text start=\"243.23\" dur=\"1.77\">Because what do we want to do?</text><text start=\"245\" dur=\"3.19\">It says I need to get the value\nof this procedure, this</text><text start=\"248.19\" dur=\"4.46\">body, this body here, with\nrespect to this environment.</text><text start=\"252.65\" dur=\"0.54\">What do I do?</text><text start=\"253.19\" dur=\"2.09\">Well, let&amp;#39;s say is b in this\nenvironment equal to 1?</text><text start=\"255.28\" dur=\"1.42\">No it is not.</text><text start=\"256.7\" dur=\"2.97\">So I&amp;#39;m going to return the\nvalue of a from this</text><text start=\"259.67\" dur=\"4.03\">environment, which is\nright there, to</text><text start=\"263.7\" dur=\"1.29\">another procedure call.</text><text start=\"264.99\" dur=\"3.18\">I&amp;#39;m doing another procedure\ncall on recurMul.</text><text start=\"268.17\" dur=\"1\">What do I do?</text><text start=\"269.17\" dur=\"2.485\">From here, I get the\nvalue of recurMul.</text><text start=\"271.655\" dur=\"2.155\">And I trace up that chain\nto say, there it</text><text start=\"273.81\" dur=\"2.29\">is, it&amp;#39;s that procedure.</text><text start=\"276.1\" dur=\"2.73\">I need to get the value of\na in this environment.</text><text start=\"278.83\" dur=\"0.67\">That&amp;#39;s easy.</text><text start=\"279.5\" dur=\"3.72\">And I need to get b minus\n1 in this environment.</text><text start=\"283.22\" dur=\"1.37\">Well, that&amp;#39;s easy, as well.</text><text start=\"284.59\" dur=\"4.92\">B here is 2, I subtract 1, and\nthat leads naturally to yet</text><text start=\"289.51\" dur=\"2.84\">another recursive call.</text><text start=\"292.35\" dur=\"2.27\">Now, you&amp;#39;re going to be glad I\nonly did this with 2 and 3,</text><text start=\"294.62\" dur=\"1.59\">and not 2 and 57.</text><text start=\"296.21\" dur=\"1.75\">But you get the idea.</text><text start=\"297.96\" dur=\"3.8\">I am now evaluating the body of\nthis procedure with respect</text><text start=\"301.76\" dur=\"1.68\">to this environment.</text><text start=\"303.44\" dur=\"1.09\">What do I do?</text><text start=\"304.53\" dur=\"3.59\">I say, OK, is b equal to 1?</text><text start=\"308.12\" dur=\"1.22\">Thank God, it is.</text><text start=\"309.34\" dur=\"2.63\">But if b is equal to\n1, what do I do?</text><text start=\"311.97\" dur=\"4.73\">I return the value of a\nfrom this environment.</text><text start=\"316.7\" dur=\"4.16\">So that computation\ngives me back a 2.</text><text start=\"320.86\" dur=\"1.06\">That&amp;#39;s really nice.</text><text start=\"321.92\" dur=\"1.65\">Because what does that say?</text><text start=\"323.57\" dur=\"3.98\">It says, gee, here&amp;#39;s\nwhere I am.</text><text start=\"327.55\" dur=\"1.96\">I&amp;#39;m now returning the value\nof a because I was in that</text><text start=\"329.51\" dur=\"0.79\">recursive call.</text><text start=\"330.3\" dur=\"3.09\">It says the value of this\nrecursive call is 2.</text><text start=\"333.39\" dur=\"2.69\">I&amp;#39;m going to give it back to the\nplace that was waiting for</text><text start=\"336.08\" dur=\"1.37\">it, which was up here.</text><text start=\"337.45\" dur=\"1\">And what was I doing?</text><text start=\"338.45\" dur=\"2.15\">I was waiting to get the\nrecursive value.</text><text start=\"340.6\" dur=\"2.65\">I want to add that to a.</text><text start=\"343.25\" dur=\"1.7\">So the 2 is returned.</text><text start=\"344.95\" dur=\"1.23\">It gets passed back up here.</text><text start=\"346.18\" dur=\"2.14\">It gets added to that a.</text><text start=\"348.32\" dur=\"2.845\">Those two pieces\ncome to there.</text><text start=\"351.165\" dur=\"1.185\">And what was that doing?</text><text start=\"352.35\" dur=\"3.1\">That was saying, give me a\nreturn of those two values to</text><text start=\"355.45\" dur=\"3.28\">the computation that\nwas waiting here.</text><text start=\"358.73\" dur=\"3.28\">So, in fact, the 4 and\nthe 2 get added</text><text start=\"362.01\" dur=\"1.48\">together to give me 6.</text><text start=\"363.49\" dur=\"0.88\">And what was that doing?</text><text start=\"364.37\" dur=\"3.02\">It says, I&amp;#39;m now done because\nthat procedure said return</text><text start=\"367.39\" dur=\"2.16\">that value as the\noverall value.</text><text start=\"369.55\" dur=\"3.98\">And that&amp;#39;s going to get passed\nback up as the final value.</text><text start=\"373.53\" dur=\"1.36\">Cool.</text><text start=\"374.89\" dur=\"3.31\">A little slow in our computation\nbut really cool.</text><text start=\"378.2\" dur=\"3.17\">And, in particular, let&amp;#39;s see\nwhat we can deduce from this.</text><text start=\"381.37\" dur=\"2.93\">Each recursive call of a\nfunction creates its own</text><text start=\"384.3\" dur=\"2.95\">environment, with a local\nscoping of variables.</text><text start=\"387.25\" dur=\"2.95\">So evaluating the body of the\nfunction in that environment</text><text start=\"390.2\" dur=\"3.08\">is going to be very clear as to\nwhich value of a and b it&amp;#39;s</text><text start=\"393.28\" dur=\"2.77\">using, or any other variable\nthat it&amp;#39;s using.</text><text start=\"396.05\" dur=\"1.96\">Secondly, the bindings\nfor variables in</text><text start=\"398.01\" dur=\"1.93\">each frame are distinct.</text><text start=\"399.94\" dur=\"0.54\">And you saw that.</text><text start=\"400.48\" dur=\"2.17\">I had a different frame\nfor each one of them.</text><text start=\"402.65\" dur=\"3.26\">And those bindings are not\nchanged when we&amp;#39;re doing the</text><text start=\"405.91\" dur=\"0.98\">recursive call.</text><text start=\"406.89\" dur=\"2.01\">They are set up as\nwe make the call.</text><text start=\"408.9\" dur=\"2.69\">That is, I&amp;#39;m going to compute a\nnew value of b, making it in</text><text start=\"411.59\" dur=\"3.13\">this case b minus 1, in order\nto bind it in the frame.</text><text start=\"414.72\" dur=\"2.87\">But I&amp;#39;m not changing bindings\nin other frames when I&amp;#39;m</text><text start=\"417.59\" dur=\"1.15\">within one frame.</text><text start=\"418.74\" dur=\"1.84\">I don&amp;#39;t have access to them.</text><text start=\"420.58\" dur=\"2.37\">And finally we can see that\nthe flow of control can</text><text start=\"422.95\" dur=\"2.57\">naturally pass back to an\nearlier frame once the</text><text start=\"425.52\" dur=\"2.73\">function call returns\nits value.</text><text start=\"428.25\" dur=\"5.45\">So, finally, you can also see\nthat inherently this recursive</text><text start=\"433.7\" dur=\"3.42\">call to a function, if done\nright, has the equivalent of</text><text start=\"437.12\" dur=\"1.52\">reducing a state variable.</text><text start=\"438.64\" dur=\"3.63\">We saw how each instance, each\nframe, had a different value</text><text start=\"442.27\" dur=\"2.8\">of b, that got smaller and\nsmaller until we got down to</text><text start=\"445.07\" dur=\"1.22\">the base case.</text><text start=\"446.29\" dur=\"2.5\">So we know that this is, in\nfact, going to ground out.</text><text start=\"448.79\" dur=\"1.93\">It&amp;#39;s going to complete\nits computation.</text><text start=\"450.72\" dur=\"1.57\">That&amp;#39;s great.</text><text start=\"452.29\" dur=\"3.24\">So hopefully this gives you a\nbetter sense of how, in fact,</text><text start=\"455.53\" dur=\"2.94\">the rules of evaluation allow\na recursive thinking of a</text><text start=\"458.47\" dur=\"2.65\">problem to create a very nice\nversion of the code.</text><text start=\"461.12\" dur=\"1.375\"></text></transcript>\n", "jGQZlWWXBQQ": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"3.6\">ERIC GRIMSON: Welcome to the\n6.00x, often referred to as</text><text start=\"3.6\" dur=\"3.3\">the introduction to computer\nscience and programming.</text><text start=\"6.9\" dur=\"3.04\">It&amp;#39;s odd to have both of those\nterms in the title, but both</text><text start=\"9.94\" dur=\"1.28\">of them are important.</text><text start=\"11.22\" dur=\"3.01\">This course is going to be not\njust about teaching you how to</text><text start=\"14.23\" dur=\"2.7\">program a computer, how to tell\nthe computer instructions</text><text start=\"16.93\" dur=\"1.55\">that it can understand.</text><text start=\"18.48\" dur=\"2.96\">It&amp;#39;s also going to be really\nimportant to create within you</text><text start=\"21.44\" dur=\"2.8\">a capability to think\ncomputationally.</text><text start=\"24.24\" dur=\"2.86\">So our goal is to let you become\nskillful at not only</text><text start=\"27.1\" dur=\"2.69\">getting the computer to do\nsomething, but to do that</text><text start=\"29.79\" dur=\"3.27\">thing that you want it to, to\nget it to solve a problem.</text><text start=\"33.06\" dur=\"2.63\">By the end of this course, we\nhope that your first instinct</text><text start=\"35.69\" dur=\"2.44\">when faced with any interesting\nchallenge is to</text><text start=\"38.13\" dur=\"2.94\">first think about how could I\ncapture that challenge, that</text><text start=\"41.07\" dur=\"3.28\">problem in an algorithmic or\nmechanical description of</text><text start=\"44.35\" dur=\"2.7\">steps such that I could\nget the computer to do</text><text start=\"47.05\" dur=\"0.92\">the work for me.</text><text start=\"47.97\" dur=\"2.97\">If you can do that, it&amp;#39;s going\nto give you a great deal of</text><text start=\"50.94\" dur=\"2.24\">advantage as you face\nany kind of problem.</text><text start=\"53.18\" dur=\"1.94\">And those are the skills that\nyou&amp;#39;re going to see throughout</text><text start=\"55.12\" dur=\"1.07\">this course.</text><text start=\"56.19\" dur=\"4.5\">Now if our goal is to have you\nlearn how to get a computer to</text><text start=\"60.69\" dur=\"2.4\">do something for you, how to\ntalk to the computer, how to</text><text start=\"63.09\" dur=\"1.429\">think algorithmically.</text><text start=\"64.519\" dur=\"2.621\">1 of the questions we can ask\nis, so what&amp;#39;s the computer</text><text start=\"67.14\" dur=\"1.08\">going to do for us?</text><text start=\"68.22\" dur=\"1.78\">What&amp;#39;s it actually good at?</text><text start=\"70\" dur=\"1.85\">That seems like probably\nan odd question.</text><text start=\"71.85\" dur=\"3.02\">After all, we know computers\ncould do a ton of things.</text><text start=\"74.87\" dur=\"2.6\">But it&amp;#39;s still important to go\nback to a very fundamental and</text><text start=\"77.47\" dur=\"1.28\">basic point.</text><text start=\"78.75\" dur=\"1.93\">What does a computer do?</text><text start=\"80.68\" dur=\"2.96\">In fact it does 2 things\nand 2 things only.</text><text start=\"83.64\" dur=\"4.13\">It performs some calculations,\nand it remembers results so</text><text start=\"87.77\" dur=\"1.54\">that it can reuse them.</text><text start=\"89.31\" dur=\"3.08\">Now you&amp;#39;d say, OK, so it\nperforms calculations.</text><text start=\"92.39\" dur=\"1.08\">That seems fine.</text><text start=\"93.47\" dur=\"2.52\">But what kinds of\ncalculations.</text><text start=\"95.99\" dur=\"3.24\">Well, it turns out that every\ncomputer comes with a simple</text><text start=\"99.23\" dur=\"2.99\">set of primitive calculations,\nthings that we call built in.</text><text start=\"102.22\" dur=\"2.4\">They&amp;#39;re provided by the\nmanufacturer as the basic</text><text start=\"104.62\" dur=\"1.58\">elements that a computer\ncould use.</text><text start=\"106.2\" dur=\"2.15\">We&amp;#39;ll see some examples\nof that shortly.</text><text start=\"108.35\" dur=\"3.14\">If that&amp;#39;s all we have, that&amp;#39;s\npretty limiting.</text><text start=\"111.49\" dur=\"2.63\">So a key thing, as we go through\nthe material in this</text><text start=\"114.12\" dur=\"3.56\">course, is to learn how we can\ncreate our own methods for</text><text start=\"117.68\" dur=\"3.27\">computing something, how we can\ncapture the computational</text><text start=\"120.95\" dur=\"2.11\">way of thinking about something\nin a manner that</text><text start=\"123.06\" dur=\"3.1\">could be used by the computer,\nand to do it in a way whereby</text><text start=\"126.16\" dur=\"2.12\">the computer can\nabstract that.</text><text start=\"128.28\" dur=\"2.77\">By that we mean that the\ncomputer can figure out how to</text><text start=\"131.05\" dur=\"2.9\">take what you tell it and turn\nit into something that it can</text><text start=\"133.95\" dur=\"2.21\">now treat as if it were a\nprimitive, something that was</text><text start=\"136.16\" dur=\"3.24\">provided by the manufacturer,\nand reuse that throughout its</text><text start=\"139.4\" dur=\"1.08\">computations.</text><text start=\"140.48\" dur=\"3.04\">So our computers are going to do\ncalculations for us, using</text><text start=\"143.52\" dur=\"2.55\">a set of built-in primitives,\nplus things that we add.</text><text start=\"146.07\" dur=\"3.14\">Now you might ask, gee,\nis that enough?</text><text start=\"149.21\" dur=\"2.44\">If it turns out that a computer\ncan just perform</text><text start=\"151.65\" dur=\"3.21\">primitives calculations,\nit&amp;#39;s not sufficient.</text><text start=\"154.86\" dur=\"3.09\">Well, as I&amp;#39;m sure you already\nrealize, modern computers can</text><text start=\"157.95\" dur=\"2.895\">perform most calculations\nincredibly quickly.</text><text start=\"160.845\" dur=\"3.295\">And so one question is if we\ncan do them fast enough is</text><text start=\"164.14\" dur=\"2.5\">that sufficient to do\ninteresting things?</text><text start=\"166.64\" dur=\"1.85\">Let&amp;#39;s look at both\nparts of that.</text><text start=\"168.49\" dur=\"2.03\">First of all, how quickly\ndoes a modern</text><text start=\"170.52\" dur=\"2.13\">computer actually run?</text><text start=\"172.65\" dur=\"2.34\">Well, let me give you a simple\nlittle thought example.</text><text start=\"174.99\" dur=\"2.11\">If I were to take a little\ngooseneck lamp and put it</text><text start=\"177.1\" dur=\"3.76\">right here, a foot above my\ndesk, and I were to time</text><text start=\"180.86\" dur=\"3.64\">things perfectly so that as I\nhit the switch on the lamp I</text><text start=\"184.5\" dur=\"2.38\">hit a key on my computer and\nstarted them both up at</text><text start=\"186.88\" dur=\"3.35\">exactly the same time, in the\nlength of time it takes the</text><text start=\"190.23\" dur=\"3.56\">light to go from the lamp to\nthe desk your computer will</text><text start=\"193.79\" dur=\"2.786\">execute two operations.</text><text start=\"196.576\" dur=\"1.27\">That&amp;#39;s amazing.</text><text start=\"197.846\" dur=\"3.304\">It does two operations, two of\nthose primitive operations in</text><text start=\"201.15\" dur=\"3.56\">the amount of time it takes\nlight to go basically a foot.</text><text start=\"204.71\" dur=\"1.58\">Unbelievable.</text><text start=\"206.29\" dur=\"1.205\">Here&amp;#39;s another way of\nthinking about it.</text><text start=\"207.495\" dur=\"3.595\">Imagine I take a simple child&amp;#39;s\nrubber ball and I</text><text start=\"211.09\" dur=\"3.87\">suspend it about a meter off\nthe ground and I drop it.</text><text start=\"214.96\" dur=\"4.25\">If I let it drop, by the time\nit hits the ground, assuming</text><text start=\"219.21\" dur=\"3.86\">gravity behaves normally, your\ncomputer will have executed</text><text start=\"223.07\" dur=\"2.54\">1,000,000,000 operations.</text><text start=\"225.61\" dur=\"1.21\">Unbelievable.</text><text start=\"226.82\" dur=\"1.56\">1,000,000,000 operations\nby the time that</text><text start=\"228.38\" dur=\"1.91\">ball hits the ground.</text><text start=\"230.29\" dur=\"3.17\">Now, that suggests that in\nfact these computers are</text><text start=\"233.46\" dur=\"0.9\">incredibly fast.</text><text start=\"234.36\" dur=\"2.01\">And even though they&amp;#39;re\ncomputing very simple things,</text><text start=\"236.37\" dur=\"1.87\">they&amp;#39;re doing incredibly\nquickly.</text><text start=\"238.24\" dur=\"1.95\">They are.</text><text start=\"240.19\" dur=\"1.54\">We say computers do\nsimple operations.</text><text start=\"241.73\" dur=\"2.58\">We also said that they\nhave some storage.</text><text start=\"244.31\" dur=\"2.76\">So how big is the storage\ninside of a computer?</text><text start=\"247.07\" dur=\"3.21\">Well, every element of storage\nis called a byte.</text><text start=\"250.28\" dur=\"3.95\">And if we were to assume that\na byte weighed 1 ounce --</text><text start=\"254.23\" dur=\"2.34\">I know bytes don&amp;#39;t really weigh\nounces, but assume they</text><text start=\"256.57\" dur=\"1.049\">weigh 1 ounce.</text><text start=\"257.619\" dur=\"2.521\">A typical computer\nhas hundreds of</text><text start=\"260.14\" dur=\"2.27\">gigabytes of storage.</text><text start=\"262.41\" dur=\"3.98\">And that says if each one of\nthose bytes weighs 1 ounce a</text><text start=\"266.39\" dur=\"2.38\">computer would be able to\nstore the equivalent of</text><text start=\"268.77\" dur=\"5.34\">300,000,000 tons of storage.</text><text start=\"274.11\" dur=\"0.21\">OK.</text><text start=\"274.32\" dur=\"1.31\">They don&amp;#39;t really store\nit that way.</text><text start=\"275.63\" dur=\"1.52\">But you get the idea.</text><text start=\"277.15\" dur=\"2.41\">Incredible amount of storage,\ncan remember a lot of things,</text><text start=\"279.56\" dur=\"3.34\">and incredibly quick in terms\nof doing the computation.</text><text start=\"282.9\" dur=\"2.98\">So, that sounds really good.</text><text start=\"285.88\" dur=\"3.07\">The question is if they&amp;#39;re only\nprimitive operations is</text><text start=\"288.95\" dur=\"0.97\">that enough?</text><text start=\"289.92\" dur=\"1.85\">Are these simple calculations\nsufficient?</text><text start=\"291.77\" dur=\"1.41\">Well, they&amp;#39;re going to\ndo a lot as we see.</text><text start=\"293.18\" dur=\"2.44\">But we&amp;#39;re also going to see that\nthey&amp;#39;re not quite enough</text><text start=\"295.62\" dur=\"1.57\">to do everything we&amp;#39;d like.</text><text start=\"297.19\" dur=\"2.03\">Let me give you 2 examples.</text><text start=\"299.22\" dur=\"2.045\">I&amp;#39;m sure all of you have gone to\nthe World Wide Web to look</text><text start=\"301.265\" dur=\"0.955\">up a piece of information.</text><text start=\"302.22\" dur=\"2.58\">You&amp;#39;ve searched the web to try\nand find things that you&amp;#39;d</text><text start=\"304.8\" dur=\"1.78\">like to know about.</text><text start=\"306.58\" dur=\"2.29\">The question is if a computer\nis just doing this the</text><text start=\"308.87\" dur=\"2.17\">straightforward way\nhow quickly would</text><text start=\"311.04\" dur=\"1.15\">it search the web?</text><text start=\"312.19\" dur=\"3.07\">Well, it turns out there are\nabout 45,000,000,000</text><text start=\"315.26\" dur=\"2.77\">searchable pages on the\nweb at the moment.</text><text start=\"318.03\" dur=\"3.79\">If we assume that it takes about\n1,000 words, or there</text><text start=\"321.82\" dur=\"1.73\">are about 1,000 words\nper page.</text><text start=\"323.55\" dur=\"1.83\">Some, of course, are much more\nthan that, some of less, but</text><text start=\"325.38\" dur=\"1.69\">about a thousand\nwords per page.</text><text start=\"327.07\" dur=\"2.11\">And just for sake of argument,\nwe&amp;#39;re going to assume it takes</text><text start=\"329.18\" dur=\"4.22\">about 100 operations per word\nto find the word on the page</text><text start=\"333.4\" dur=\"1.6\">and to decide it&amp;#39;s\nthe right thing.</text><text start=\"335\" dur=\"0.96\">100 is actually high.</text><text start=\"335.96\" dur=\"0.53\">Let&amp;#39;s make it a little less.</text><text start=\"336.49\" dur=\"2.71\">Let&amp;#39;s just assume it&amp;#39;s only\n10 operations per word.</text><text start=\"339.2\" dur=\"2.91\">How long does it take to\nactually execute that search?</text><text start=\"342.11\" dur=\"1.23\">Well, we can do the math.</text><text start=\"343.34\" dur=\"1.06\">You can grind it through.</text><text start=\"344.4\" dur=\"3.33\">You have 45,000,000,000 pages.</text><text start=\"347.73\" dur=\"0.86\">You have that many operations.</text><text start=\"348.59\" dur=\"2.68\">You know how quickly we&amp;#39;re doing\nthese actual operations.</text><text start=\"351.27\" dur=\"2.78\">If you put it all together, what\nyou find is it&amp;#39;s going to</text><text start=\"354.05\" dur=\"6.98\">take you about 5.2 days to find\nsomething on the web.</text><text start=\"361.03\" dur=\"1.42\">That&amp;#39;s a slow browser.</text><text start=\"362.45\" dur=\"2.13\">That&amp;#39;s not going to\nwork very well.</text><text start=\"364.58\" dur=\"2.44\">And that basically is giving\nus a hint that even with</text><text start=\"367.02\" dur=\"1.83\">really fast computers we\nhave to be smarter.</text><text start=\"368.85\" dur=\"2.34\">Let me give you a\nsecond example.</text><text start=\"371.19\" dur=\"2.05\">Playing chess, something\nthat&amp;#39;s seen as a very</text><text start=\"373.24\" dur=\"1.115\">difficult task.</text><text start=\"374.355\" dur=\"2.715\">It&amp;#39;s impressive that about 10\nor 15 years ago a computer</text><text start=\"377.07\" dur=\"1.24\">program actually beat the world</text><text start=\"378.31\" dur=\"1.59\">champion in a chess match.</text><text start=\"379.9\" dur=\"2.92\">And 1 of the questions is, well,\nOK, is it just because</text><text start=\"382.82\" dur=\"1.68\">the computers are really fast?</text><text start=\"384.5\" dur=\"1.18\">Well, we can look at\nthis two ways.</text><text start=\"385.68\" dur=\"2.57\">In a typical chess game,\nthere are about 35</text><text start=\"388.25\" dur=\"2.01\">moves at any one time.</text><text start=\"390.26\" dur=\"3.15\">And so the question you could\nask is to say, OK, if I want</text><text start=\"393.41\" dur=\"3.63\">to have my computer program look\nahead 6 moves, 3 moves by</text><text start=\"397.04\" dur=\"3.86\">me, 3 moves by my opponent, how\nmany different options are</text><text start=\"400.9\" dur=\"2.18\">there if there are about\n35 moves each?</text><text start=\"403.08\" dur=\"4.96\">And the answer is about 1.8\nbillion different sets of the</text><text start=\"408.04\" dur=\"1.87\">chess board that I&amp;#39;d\nhave to look at.</text><text start=\"409.91\" dur=\"3.86\">If I can check each move out\nin about 100 operations per</text><text start=\"413.77\" dur=\"3.02\">move, then that says it&amp;#39;s going\nto take me about a half</text><text start=\"416.79\" dur=\"2.63\">hour to actually look\nat each move.</text><text start=\"419.42\" dur=\"1.26\">That&amp;#39;s pretty slow.</text><text start=\"420.68\" dur=\"1.26\">And this is pointing\nto a problem that</text><text start=\"421.94\" dur=\"1.08\">we want to get at.</text><text start=\"423.02\" dur=\"3.63\">And the problem is that, yes,\ncomputers are really fast, but</text><text start=\"426.65\" dur=\"2.53\">we need good algorithmic\ndesign as well.</text><text start=\"429.18\" dur=\"3.25\">To deal with interesting\nproblems, we need algorithms</text><text start=\"432.43\" dur=\"2.95\">that are clever, are\nintelligent, are smart about</text><text start=\"435.38\" dur=\"1.56\">how they actually do the work.</text><text start=\"436.94\" dur=\"2.18\">And that&amp;#39;s a lot of what we&amp;#39;re\ngoing to talk about this</text><text start=\"439.12\" dur=\"1.22\">during this term.</text><text start=\"440.34\" dur=\"2.49\">By the way, we also said\nspace was a big issue.</text><text start=\"442.83\" dur=\"1.785\">And we got a lot of space\nin the computer.</text><text start=\"444.615\" dur=\"2.905\">If you go back to the chess\nexample, you can ask the</text><text start=\"447.52\" dur=\"2.21\">following question: How\nmany different games</text><text start=\"449.73\" dur=\"1.506\">are there in chess?</text><text start=\"451.236\" dur=\"4.644\">Experts will tell you there\nabout 10^123 different chess</text><text start=\"455.88\" dur=\"1.73\">games that are possible.</text><text start=\"457.61\" dur=\"2.14\">Is that too big for storing\nin your computer?</text><text start=\"459.75\" dur=\"4.18\">Well there are only\n10^80 atoms in</text><text start=\"463.93\" dur=\"1.77\">the observable universe.</text><text start=\"465.7\" dur=\"2.05\">So we can&amp;#39;t just store\naway all the games</text><text start=\"467.75\" dur=\"1.3\">and look them up.</text><text start=\"469.05\" dur=\"2.03\">And both of these are pointing\nto why we&amp;#39;re going to use this</text><text start=\"471.08\" dur=\"3.2\">course to actually learn about\nthinking algorithmically.</text><text start=\"474.28\" dur=\"3.74\">Now this suggests it&amp;#39;s just a\nmatter of putting together</text><text start=\"478.02\" dur=\"1.88\">enough speed and enough\nsmartness.</text><text start=\"479.9\" dur=\"2.01\">But one can be a little bit\nmore distinct and say, are</text><text start=\"481.91\" dur=\"1.76\">there actual limitations\nto what we</text><text start=\"483.67\" dur=\"1.77\">can do with the computer?</text><text start=\"485.44\" dur=\"2.57\">And in fact despite its speed\nand its size and the</text><text start=\"488.01\" dur=\"2.33\">cleverness of the algorithm,\nour computer still has some</text><text start=\"490.34\" dur=\"0.67\">limitations.</text><text start=\"491.01\" dur=\"1.87\">Here are a couple of examples.</text><text start=\"492.88\" dur=\"1.1\">First of all, there are\nsome problems that</text><text start=\"493.98\" dur=\"1.8\">are just too complex.</text><text start=\"495.78\" dur=\"1.92\">We don&amp;#39;t have enough speed,\nenough storage.</text><text start=\"497.7\" dur=\"2.24\">And they may get tackle\nas things improve.</text><text start=\"499.94\" dur=\"2.23\">But examples here would be\nthings like predicting weather</text><text start=\"502.17\" dur=\"1.28\">at a very local scale.</text><text start=\"503.45\" dur=\"2.09\">I&amp;#39;d love to know what&amp;#39;s exactly\ngoing to happen</text><text start=\"505.54\" dur=\"2.1\">outside my window for the\nnext half hour or next</text><text start=\"507.64\" dur=\"1.64\">hour or next 3 hours.</text><text start=\"509.28\" dur=\"2.61\">The size of the problem simply\ntoo big for a computer to be</text><text start=\"511.89\" dur=\"2.08\">able to model well enough\nand solve in a</text><text start=\"513.97\" dur=\"1.542\">reasonable amount of time.</text><text start=\"515.512\" dur=\"1.748\">It turns out some of these\ncomplex problems</text><text start=\"517.26\" dur=\"1.34\">actually help us.</text><text start=\"518.6\" dur=\"3.13\">Modern cryptography, the way\nin which information is</text><text start=\"521.73\" dur=\"4.2\">securely transmitted across the\nnet, relies on having some</text><text start=\"525.93\" dur=\"2.62\">problems that are simply too\ndifficult to compute and,</text><text start=\"528.55\" dur=\"2.09\">therefore, too difficult\nto break the code.</text><text start=\"530.64\" dur=\"1.87\">So we actually get some benefits\nabout the problems</text><text start=\"532.51\" dur=\"1.636\">that are too complex.</text><text start=\"534.146\" dur=\"2.594\">But as we&amp;#39;re also going to see\nlater on the course, there are</text><text start=\"536.74\" dur=\"3.24\">some problems that are just\nfundamentally impossible to</text><text start=\"539.98\" dur=\"2.87\">compute no matter how\nbig the computer is.</text><text start=\"542.85\" dur=\"1.645\">And some of those are\nreally heavy.</text><text start=\"544.495\" dur=\"3.205\">Here is one example, being\nable to predict whether a</text><text start=\"547.7\" dur=\"4.78\">piece of code will always stop\nwith an answer for any input.</text><text start=\"552.48\" dur=\"2.26\">By that I don&amp;#39;t mean just you\nrun it and see if it stops,</text><text start=\"554.74\" dur=\"3.01\">being able to write a piece of\ncode and then have some other</text><text start=\"557.75\" dur=\"2.89\">piece of code inspect it to say,\nthis will always work.</text><text start=\"560.64\" dur=\"2.34\">It will always stop, and it will\nalways give us an answer.</text><text start=\"562.98\" dur=\"2.8\">This turns out to not be\npossible to solve.</text><text start=\"565.78\" dur=\"3.86\">And this is known as Turing&amp;#39;s\nHalting Problem.</text><text start=\"569.64\" dur=\"3.44\">And we&amp;#39;ll talk briefly about\nthat later on in the term.</text><text start=\"573.08\" dur=\"2.39\">But it says that there are some\nproblems that are simply</text><text start=\"575.47\" dur=\"2.79\">too hard to solve period.</text><text start=\"578.26\" dur=\"2.21\">Nonetheless, in this course,\nwe&amp;#39;re going to start talking</text><text start=\"580.47\" dur=\"2.22\">about how do we think\nalgorithmically and get the</text><text start=\"582.69\" dur=\"2.02\">computer to do interesting\nthings for us.</text><text start=\"584.71\" dur=\"1.25\"></text></transcript>\n", "Q-rY8DIwYgg": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.33\"></text><text start=\"0.33\" dur=\"2.59\">The social standards on the\ndiscussion forum are going to</text><text start=\"2.92\" dur=\"1.91\">vary from class to class.</text><text start=\"4.83\" dur=\"2.37\">But there are a few\ncommon trends.</text><text start=\"7.2\" dur=\"4.12\">First of all, before you start\na new discussion, make sure</text><text start=\"11.32\" dur=\"3.08\">that there is not already a\nthread talking about the issue</text><text start=\"14.4\" dur=\"1.67\">that you wanted to address.</text><text start=\"16.07\" dur=\"3.09\">If you are trying to be polite\nin conventional conversation,</text><text start=\"19.16\" dur=\"3.04\">you wouldn&amp;#39;t walk into a\ncrowded room and expect</text><text start=\"22.2\" dur=\"2.6\">everyone to repeat and summarize\nthe conversations</text><text start=\"24.8\" dur=\"3.64\">that had already taken place\nfor your benefit.</text><text start=\"28.44\" dur=\"3.6\">Instead, you would listen\nto people talk, get an</text><text start=\"32.04\" dur=\"3.46\">understanding of what has\nalready been said, and then</text><text start=\"35.5\" dur=\"2.35\">participate in context.</text><text start=\"37.85\" dur=\"3.48\">Similarly when you come into\nthe discussion forum, you</text><text start=\"41.33\" dur=\"3.08\">should search for what people\nare already saying and make</text><text start=\"44.41\" dur=\"3.44\">sure that what you are saying\nfits in context.</text><text start=\"47.85\" dur=\"3.57\">Also, please bear in mind that\nthe discussion forum contains</text><text start=\"51.42\" dur=\"3.06\">people of many different\neducational backgrounds,</text><text start=\"54.48\" dur=\"5.67\">nationalities, races, genders,\nand sexual orientations.</text><text start=\"60.15\" dur=\"2.86\">We would love for you to get to\nknow each other, but please</text><text start=\"63.01\" dur=\"2.119\">keep your tone respectful.</text><text start=\"65.129\" dur=\"3.091\">We don&amp;#39;t restrict access to the\nforum very often, but we</text><text start=\"68.22\" dur=\"3.155\">do reserve that right for\nextreme cases of people who</text><text start=\"71.375\" dur=\"2.225\">are causing the forums\nto become unuseful.</text><text start=\"73.6\" dur=\"1.25\"></text></transcript>\n", "twvmnuMYTQk": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.904\"></text><text start=\"0.904\" dur=\"2.856\">ERIC GRIMSON: Now, we&amp;#39;ve seen\nrecursive functions.</text><text start=\"3.76\" dur=\"2.8\">We&amp;#39;ve seen this idea of inductions,\na way of showing that</text><text start=\"6.56\" dur=\"0.84\">these functions work.</text><text start=\"7.4\" dur=\"3.56\">And we&amp;#39;ve seen this notion of recursion\nas breaking a problem down</text><text start=\"10.96\" dur=\"3.56\">into a simpler version of the problem\nplus some other work.</text><text start=\"14.52\" dur=\"1.28\">We&amp;#39;re going to use that tool a lot.</text><text start=\"15.8\" dur=\"3.7\">It&amp;#39;s a powerful tool for taking complex\nproblems and capturing them in</text><text start=\"19.5\" dur=\"1.8\">a way that is easy to think about.</text><text start=\"21.3\" dur=\"1.95\">So let&amp;#39;s look at some examples.</text><text start=\"23.25\" dur=\"3.52\">In the classic example to start\nwith is to compute factorial.</text><text start=\"26.77\" dur=\"4.45\">Factorial in math is written as n\nfollowed by an exclamation point, said</text><text start=\"31.22\" dur=\"1.82\">verbally as n bang.</text><text start=\"33.04\" dur=\"3.72\">And factorial is basically the product\nof the integers from 1 times 2 times 3</text><text start=\"36.76\" dur=\"1.83\">all the way up to n.</text><text start=\"38.59\" dur=\"3.23\">How would we think about solving\nthis recursively?</text><text start=\"41.82\" dur=\"2.42\">Well that&amp;#39;s pretty straightforward,\nright?</text><text start=\"44.24\" dur=\"0.92\">I need a base case.</text><text start=\"45.16\" dur=\"2.73\">A simple case is if n is equal to 1.</text><text start=\"47.89\" dur=\"2.54\">1 multiplied by itself,\nor just 1 is 1.</text><text start=\"50.43\" dur=\"1.37\">That&amp;#39;s simple.</text><text start=\"51.8\" dur=\"4.67\">To get the recursive case, let&amp;#39;s\nuse that same thinking.</text><text start=\"56.47\" dur=\"2.54\">To get the recursive case,\nwhat do I have?</text><text start=\"59.01\" dur=\"1.97\">I want a simpler version\nof the same problem.</text><text start=\"60.98\" dur=\"6.49\">In effect, right there that\nis n minus 1 factorial.</text><text start=\"67.47\" dur=\"5.11\">So recursively I would say if I can get\nn minus 1 factorial, then to get n</text><text start=\"72.58\" dur=\"3.83\">factorial I&amp;#39;d simply take that\nvalue and multiply it by n.</text><text start=\"76.41\" dur=\"3.82\">And that gives me that reduction\nexactly like I saw before.</text><text start=\"80.23\" dur=\"1.21\">Fantastic.</text><text start=\"81.44\" dur=\"3.03\">There&amp;#39;s a recursive definition\nfactorial.</text><text start=\"84.47\" dur=\"2.7\">Let&amp;#39;s capture it in some code.</text><text start=\"87.17\" dur=\"2.89\">And, in fact, to do it let&amp;#39;s do\nboth an iterative version</text><text start=\"90.06\" dur=\"1.68\">and a recursive version.</text><text start=\"91.74\" dur=\"3.62\">So the iterative version of factorial\nhas the form we&amp;#39;d expect.</text><text start=\"95.36\" dur=\"1.26\">I need some state variables.</text><text start=\"96.62\" dur=\"2.91\">One of them is going to be just the\nparameter n that I&amp;#39;m passing in.</text><text start=\"99.53\" dur=\"1.52\">And the other one I&amp;#39;m going\nto call result.</text><text start=\"101.05\" dur=\"3.06\">I need to keep track of the\ncomputation as I go along.</text><text start=\"104.11\" dur=\"3.36\">I&amp;#39;m going to set a result initially to\n1 because I&amp;#39;m going to do successive</text><text start=\"107.47\" dur=\"1.4\">multiplications.</text><text start=\"108.87\" dur=\"4.73\">And then the iterative version basically\nsays if you start off with n</text><text start=\"113.6\" dur=\"3.42\">that&amp;#39;s bigger than my base case, or the\nstopping point, rather, what do I</text><text start=\"117.02\" dur=\"0.51\">want to do?</text><text start=\"117.53\" dur=\"4.18\">I&amp;#39;m going to take my current value\nresult, which is 1, multiply it by n,</text><text start=\"121.71\" dur=\"1.52\">and store it away.</text><text start=\"123.23\" dur=\"1.99\">And then I&amp;#39;m going to reduce n by 1.</text><text start=\"125.22\" dur=\"3.3\">There are those update equations that\nare updating the state variables.</text><text start=\"128.52\" dur=\"2.79\">I go around again, n\nis now one smaller.</text><text start=\"131.31\" dur=\"3.37\">And again, I take the current value\nresult, which at this point was n.</text><text start=\"134.68\" dur=\"2.93\">I multiply it by the new value\nof n, which is n minus 1.</text><text start=\"137.61\" dur=\"1.03\">And I update it.</text><text start=\"138.64\" dur=\"1.83\">I reduce n by 1.</text><text start=\"140.47\" dur=\"0.93\">And I keep doing this.</text><text start=\"141.4\" dur=\"4.03\">And you can see that I want to start\nby taking n, n times n minus 1, n</text><text start=\"145.43\" dur=\"4.19\">times n minus 2, and I&amp;#39;ll keep doing\nthat until I get down to a place where</text><text start=\"149.62\" dur=\"5.13\">n is zero, in which case I stop\nand I return the result.</text><text start=\"154.75\" dur=\"1.43\">Great.</text><text start=\"156.18\" dur=\"2.68\">What about the factorial\nversion recursively?</text><text start=\"158.86\" dur=\"2.7\">Well, factR is nice and crisp.</text><text start=\"161.56\" dur=\"1.34\">Here it is.</text><text start=\"162.9\" dur=\"5.69\">It just says, if n is equal to 1, if\nyou&amp;#39;re in the base case, just return</text><text start=\"168.59\" dur=\"1.15\">that value.</text><text start=\"169.74\" dur=\"2.3\">Here I said return n, I could have said\nreturn 1, because I know it&amp;#39;s</text><text start=\"172.04\" dur=\"1.65\">going to be the same thing.</text><text start=\"173.69\" dur=\"5.45\">Otherwise, get the solution to a\nslightly smaller problem by just</text><text start=\"179.14\" dur=\"5.96\">recursively calling factR, multiply it\nby n, and just return that result.</text><text start=\"185.1\" dur=\"0.86\">Beautiful code.</text><text start=\"185.96\" dur=\"1.51\">Nice and clean and crisp.</text><text start=\"187.47\" dur=\"2.16\">And you can see that it gives\nyou a very clear sense</text><text start=\"189.63\" dur=\"1.85\">of exactly the stages--</text><text start=\"191.48\" dur=\"2.23\">my base case, my recursive case.</text><text start=\"193.71\" dur=\"3.6\">My recursive case is a recursive call\nplus one other operation, which is to</text><text start=\"197.31\" dur=\"1.59\">do multiplication.</text><text start=\"198.9\" dur=\"2.12\">Let&amp;#39;s see if it does the right thing.</text><text start=\"201.02\" dur=\"5.98\">So in IDLE, I&amp;#39;ve got a version of both\npieces of code, then let&amp;#39;s try first</text><text start=\"207\" dur=\"1.07\">theater diversion of factorial.</text><text start=\"208.07\" dur=\"2.73\">And just to be careful, let&amp;#39;s make sure\nit does the right thing on the</text><text start=\"210.8\" dur=\"1.93\">base case, or n is equal to 1.</text><text start=\"212.73\" dur=\"3.12\">If it does then let&amp;#39;s give\nit the bigger one--</text><text start=\"215.85\" dur=\"2.89\">I happen to know that 3 times\n2 times 1 ought to be 6.</text><text start=\"218.74\" dur=\"1.57\">So there we go.</text><text start=\"220.31\" dur=\"4.93\">And if I give something a little bit\nbigger, wow, it actually computes</text><text start=\"225.24\" dur=\"1.38\">factorial of 25.</text><text start=\"226.62\" dur=\"1.8\">Pretty quickly.</text><text start=\"228.42\" dur=\"1.41\">What about recursive version?</text><text start=\"229.83\" dur=\"2.07\">Well let&amp;#39;s test the same ones.</text><text start=\"231.9\" dur=\"2.48\">On 1 it does the right thing.</text><text start=\"234.38\" dur=\"4.39\">On 3 it does the right thing.</text><text start=\"238.77\" dur=\"5.25\">On 25 it does the right thing.</text><text start=\"244.02\" dur=\"2.36\">And you may notice this funny little\nform on the screen there where it&amp;#39;s</text><text start=\"246.38\" dur=\"0.89\">got an L at the end.</text><text start=\"247.27\" dur=\"2.51\">This is just telling us that Python&amp;#39;s\ngot such a big number, it&amp;#39;s</text><text start=\"249.78\" dur=\"2.47\">representing it in what&amp;#39;s\ncalled a large format.</text><text start=\"252.25\" dur=\"0.72\">Don&amp;#39;t worry about it.</text><text start=\"252.97\" dur=\"1.44\">It just says, I got a\nreally big number.</text><text start=\"254.41\" dur=\"1.4\">I gave it back to you.</text><text start=\"255.81\" dur=\"2.56\">So we didn&amp;#39;t look at stepping\nthrough it.</text><text start=\"258.37\" dur=\"0.86\">You can go do that.</text><text start=\"259.23\" dur=\"3.4\">But you can see that the recursive\nversion stops, computes the right</text><text start=\"262.63\" dur=\"4.37\">answer, and the code itself\nis nice and crisp.</text><text start=\"267\" dur=\"1.96\">OK, let&amp;#39;s look at another example.</text><text start=\"268.96\" dur=\"1.25\"></text></transcript>\n", "WqKqfr_tX0Y": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.59\"></text><text start=\"0.59\" dur=\"1.87\">ERIC GRIMSON: So we&amp;#39;ve convinced\nourselves that linear</text><text start=\"2.46\" dur=\"2.2\">search really is linear.</text><text start=\"4.66\" dur=\"3.04\">It says using indirection, If I&amp;#39;ve got\na list of elements, even if they&amp;#39;re</text><text start=\"7.7\" dur=\"3.26\">arbitrarily complex, because of\nindirection I can get to any element</text><text start=\"10.96\" dur=\"1.4\">in constant time.</text><text start=\"12.36\" dur=\"3.719\">And therefore the search is linear\nbecause at worst, I&amp;#39;ve got to look at</text><text start=\"16.079\" dur=\"2.251\">every element once.</text><text start=\"18.33\" dur=\"1.8\">Still kind of annoying\nif list is long.</text><text start=\"20.13\" dur=\"7.06\">So can I do better than O(len(L))\nor linear search for search?</text><text start=\"27.19\" dur=\"2.82\">Well, the answer is if I don&amp;#39;t know\nanything about the values of the</text><text start=\"30.01\" dur=\"1.8\">elements, no.</text><text start=\"31.81\" dur=\"3.46\">If they&amp;#39;re arbitrary elements and I\nhave no structure to the list, I&amp;#39;m</text><text start=\"35.27\" dur=\"3.41\">going to have to look at every element\nat least once in the worst case, in</text><text start=\"38.68\" dur=\"1.65\">order to determine that\nsomething&amp;#39;s there.</text><text start=\"40.33\" dur=\"2.07\">So I&amp;#39;m stuck with this.</text><text start=\"42.4\" dur=\"4.27\">But in some cases I can do better.</text><text start=\"46.67\" dur=\"2.86\">And in particular, what if\nthe list were ordered?</text><text start=\"49.53\" dur=\"3.82\">Suppose that the elements were\nsorted in ascending order.</text><text start=\"53.35\" dur=\"3.37\">Or a simple way to think about it is\nthey&amp;#39;re numbers, but they could be</text><text start=\"56.72\" dur=\"0.62\">more complex things.</text><text start=\"57.34\" dur=\"3.43\">I&amp;#39;ve got some way of deciding how\nto order them in sequence.</text><text start=\"60.77\" dur=\"2.06\">In that case, I could improve things.</text><text start=\"62.83\" dur=\"1.4\">And here&amp;#39;s a simple search algorithm.</text><text start=\"64.23\" dur=\"4.97\">It says given a list L and an element e,\nI&amp;#39;m going to walk through the list.</text><text start=\"69.2\" dur=\"3.77\">So for i going from 0 all the way up to\nthe end of the list, and I&amp;#39;ll check</text><text start=\"72.97\" dur=\"2.345\">to see is the i-th element equal to e?</text><text start=\"75.315\" dur=\"3.715\">If it is, I can stop and return True.</text><text start=\"79.03\" dur=\"2.35\">If it isn&amp;#39;t I&amp;#39;ll keep going.</text><text start=\"81.38\" dur=\"1.44\">But I can be clever.</text><text start=\"82.82\" dur=\"4.85\">In particular, if the i-th element is\ngreater than e, remember I said</text><text start=\"87.67\" dur=\"1.7\">they&amp;#39;re sorted in ascending order.</text><text start=\"89.37\" dur=\"3.05\">So if I get to a point in the list where\nthat thing is bigger than the</text><text start=\"92.42\" dur=\"3.17\">thing I&amp;#39;m looking for, I know it can&amp;#39;t\nbe in the rest of the list, because</text><text start=\"95.59\" dur=\"1.55\">they&amp;#39;re all bigger than that point.</text><text start=\"97.14\" dur=\"3.96\">So I can stop right there\nand return False.</text><text start=\"101.1\" dur=\"2.82\">If I get all the way through the list\nand I haven&amp;#39;t found it, again I&amp;#39;ll</text><text start=\"103.92\" dur=\"2.87\">return False because it wasn&amp;#39;t there.</text><text start=\"106.79\" dur=\"1.38\">Nice little trick.</text><text start=\"108.17\" dur=\"2.01\">What does it do to the complexity?</text><text start=\"110.18\" dur=\"3.8\">Well, it improves the average\ncomplexity, but it doesn&amp;#39;t improve the</text><text start=\"113.98\" dur=\"0.66\">worst case.</text><text start=\"114.64\" dur=\"3.1\">Because in the worst case, I still will\ngo all the way through the loop</text><text start=\"117.74\" dur=\"3.65\">until I get to this clause down\nhere, and I return False.</text><text start=\"121.39\" dur=\"4.14\">But even though I haven&amp;#39;t improved the\ncomplexity right here, I can use that</text><text start=\"125.53\" dur=\"2.79\">idea in a slightly better way.</text><text start=\"128.32\" dur=\"3.35\">Notice what I did here is I used the\nidea that I knew the ordering of the</text><text start=\"131.67\" dur=\"3.35\">list to be able to cut off some\ncomputation right there.</text><text start=\"135.02\" dur=\"3.26\">Once I got to a point where the element\nwas bigger than the thing I&amp;#39;m</text><text start=\"138.28\" dur=\"3.53\">looking for, I knew it wasn&amp;#39;t in\nthe last half of the list.</text><text start=\"141.81\" dur=\"4.098\">Let&amp;#39;s use the same idea,\nbut more effectively.</text><text start=\"145.908\" dur=\"5.022\">And in fact, we&amp;#39;ve already seen this\nidea when we did bisection search.</text><text start=\"150.93\" dur=\"4.52\">So we can use this idea of binary\nsearch much more effectively.</text><text start=\"155.45\" dur=\"2.07\">In particular, we would\nsay the following.</text><text start=\"157.52\" dur=\"1.35\">Let&amp;#39;s pick a point.</text><text start=\"158.87\" dur=\"2.865\">An index into the list that\ndivides the list in half.</text><text start=\"161.735\" dur=\"4.235\">And let&amp;#39;s ask right there, is that\nthe thing I&amp;#39;m looking for?</text><text start=\"165.97\" dur=\"2.78\">If I am right, I&amp;#39;m done.</text><text start=\"168.75\" dur=\"3.71\">But if not, then I can ask the same\nquestion I just did before, which is,</text><text start=\"172.46\" dur=\"4.2\">is that element of the list either\nlarger or smaller than e?</text><text start=\"176.66\" dur=\"3.5\">But depending on that answer,\nI can reduce the search.</text><text start=\"180.16\" dur=\"3.47\">So what this says is if I&amp;#39;ve got a big,\nlong list here, I&amp;#39;m going to look</text><text start=\"183.63\" dur=\"1.665\">at the middle element.</text><text start=\"185.295\" dur=\"2.665\">If it&amp;#39;s the one I&amp;#39;m looking\nfor, great, I&amp;#39;m done.</text><text start=\"187.96\" dur=\"3.748\">But let&amp;#39;s assume that in fact, that\nmiddle element is bigger than the</text><text start=\"191.708\" dur=\"1.512\">thing I&amp;#39;m looking for.</text><text start=\"193.22\" dur=\"4.29\">Then I can throw away this entire list,\nand focus on now just searching</text><text start=\"197.51\" dur=\"1.08\">in this remaining list.</text><text start=\"198.59\" dur=\"1.2\">And I can do the same thing.</text><text start=\"199.79\" dur=\"2.26\">Let&amp;#39;s look at the middle one of\nthose and say, is that the</text><text start=\"202.05\" dur=\"1.506\">thing I&amp;#39;m looking for?</text><text start=\"203.556\" dur=\"2.114\">If it&amp;#39;s right, and if it\nis, great, I&amp;#39;m done.</text><text start=\"205.67\" dur=\"3.41\">If not, for example in this case, let&amp;#39;s\nassume that that element is</text><text start=\"209.08\" dur=\"2.04\">smaller than the thing\nI&amp;#39;m looking for.</text><text start=\"211.12\" dur=\"5.02\">Then I can throw away all of this\nportion of the list and refocus here.</text><text start=\"216.14\" dur=\"1.69\">We&amp;#39;ve seen this trick before.</text><text start=\"217.83\" dur=\"3.75\">We&amp;#39;re going to narrow down the range of\nthings we&amp;#39;re looking for, cutting</text><text start=\"221.58\" dur=\"2.52\">in half at each stage what\nwe have to look at.</text><text start=\"224.1\" dur=\"3.01\">Then we&amp;#39;re taking advantage of the\nordering of the list here.</text><text start=\"227.11\" dur=\"3.33\">So this now is a new version of a\ndivide and conquer algorithm.</text><text start=\"230.44\" dur=\"2.875\">I&amp;#39;m going to break up into smaller\nversions of the problem, a smaller</text><text start=\"233.315\" dur=\"5.105\">list plus some simple operations, and\nthe nice thing I know is that the</text><text start=\"238.42\" dur=\"2.93\">answer to the smaller version is the\nanswer to the original problem.</text><text start=\"241.35\" dur=\"4.65\">That is if I find the list or the\nelement in a smaller list, that means</text><text start=\"246\" dur=\"1.69\">I found it, and it was\nin the bigger list.</text><text start=\"247.69\" dur=\"3.07\">If I don&amp;#39;t find it in the smaller list,\nit means it wasn&amp;#39;t in the bigger</text><text start=\"250.76\" dur=\"2.67\">list, and I&amp;#39;m done as well.</text><text start=\"253.43\" dur=\"3.48\">OK, let&amp;#39;s build some code to do this.</text><text start=\"256.91\" dur=\"3.95\">Here is a very nice little algorithm\nfor searching a list</text><text start=\"260.86\" dur=\"1.72\">using binary search.</text><text start=\"262.58\" dur=\"2.72\">I&amp;#39;ve got an internal piece of code here\nthat I&amp;#39;m going to use, and let&amp;#39;s</text><text start=\"265.3\" dur=\"1.98\">look at what that does.</text><text start=\"267.28\" dur=\"6.46\">It says basically, given a list, an\nelement, and a low and a high point in</text><text start=\"273.74\" dur=\"4.23\">that list, a low index and a high\nindex, what am I going to do?</text><text start=\"277.97\" dur=\"3.11\">If high is equal to low, it says\nI&amp;#39;ve got a list of length 1.</text><text start=\"281.08\" dur=\"4.08\">So I just return the Boolean value of\nwhether that element is the thing I&amp;#39;m</text><text start=\"285.16\" dur=\"1.2\">looking for or not.</text><text start=\"286.36\" dur=\"1.85\">That&amp;#39;s all I&amp;#39;ve got to do.</text><text start=\"288.21\" dur=\"4.23\">If, however, I don&amp;#39;t have just 1 element\nin the list, I&amp;#39;ve got more</text><text start=\"292.44\" dur=\"2.7\">than that, I&amp;#39;m going\nto find a midpoint.</text><text start=\"295.14\" dur=\"3.41\">And in particular, I&amp;#39;m going to\ncalculate the midpoint by taking the</text><text start=\"298.55\" dur=\"5.12\">value of the low end of the list, or low\nend of the range in the list, and</text><text start=\"303.67\" dur=\"2.04\">the difference between high\nand low divided by 2.</text><text start=\"305.71\" dur=\"3.48\">So I&amp;#39;m taking the range that&amp;#39;s left,\ncutting it in half, and adding it to</text><text start=\"309.19\" dur=\"1.19\">the index of the starting point.</text><text start=\"310.38\" dur=\"3.2\">That gives me a new midpoint\nright there.</text><text start=\"313.58\" dur=\"1.77\">And then what do I do?</text><text start=\"315.35\" dur=\"1.365\">I check that point.</text><text start=\"316.715\" dur=\"2.945\">If it&amp;#39;s what I&amp;#39;m looking\nfor, I&amp;#39;m done.</text><text start=\"319.66\" dur=\"4.34\">Otherwise, I check to see is the value\nof the list bigger than the thing I&amp;#39;m</text><text start=\"324\" dur=\"0.97\">looking for?</text><text start=\"324.97\" dur=\"4.25\">And if it is, I&amp;#39;m going to call\nrecursively search again with the same</text><text start=\"329.22\" dur=\"4.2\">low point, but a reduced high point.</text><text start=\"333.42\" dur=\"1.74\">And that was what I just\ndiagrammed earlier.</text><text start=\"335.16\" dur=\"4.68\">It says if in fact the thing I&amp;#39;m looking\nfor is less than the thing I</text><text start=\"339.84\" dur=\"5.08\">just checked, I can throw away the\nentire right half of that list.</text><text start=\"344.92\" dur=\"3.675\">On the other hand, if it&amp;#39;s less than,\nthen I throw away the lower half of</text><text start=\"348.595\" dur=\"4.015\">the list, and I compute\na new low point.</text><text start=\"352.61\" dur=\"4.59\">And I just keep calling recursively\nuntil I either run out of things, or I</text><text start=\"357.2\" dur=\"2.54\">find the thing I&amp;#39;m looking for.</text><text start=\"359.74\" dur=\"3.785\">To start this up, I&amp;#39;m going to check to\nmake sure that in fact I have a non</text><text start=\"363.525\" dur=\"0.865\">empty list.</text><text start=\"364.39\" dur=\"2.62\">If the list is empty, nothing&amp;#39;s\nthere, the element can&amp;#39;t be in</text><text start=\"367.01\" dur=\"1.26\">it, I return False.</text><text start=\"368.27\" dur=\"3.79\">Otherwise I&amp;#39;ll call binary search.</text><text start=\"372.06\" dur=\"1.28\">Notice one little subtlety here.</text><text start=\"373.34\" dur=\"5.01\">I&amp;#39;m reducing midpoint by 1 there, and\nincreasing midpoint by 1 there to make</text><text start=\"378.35\" dur=\"3.12\">sure that I don&amp;#39;t look at the\nsame element every time.</text><text start=\"381.47\" dur=\"2.89\">It&amp;#39;s a minor nuance, but it&amp;#39;s\ngoing to improve things.</text><text start=\"384.36\" dur=\"1.24\">Here&amp;#39;s my binary search.</text><text start=\"385.6\" dur=\"4.05\">It&amp;#39;s cutting down the list in half at\neach stage by either taking the upper</text><text start=\"389.65\" dur=\"6.09\">half or the lower half based\non this test right here.</text><text start=\"395.74\" dur=\"3.175\">OK, I want to answer two questions.</text><text start=\"398.915\" dur=\"2.195\">The first one is does\nthis actually work?</text><text start=\"401.11\" dur=\"2.32\">Does the recursion halt?</text><text start=\"403.43\" dur=\"2.77\">We&amp;#39;ve talked about this before when we\ntalked about recursive functions, and</text><text start=\"406.2\" dur=\"3.28\">I want to remind you a nice way to deal\nwith this is to create what&amp;#39;s</text><text start=\"409.48\" dur=\"2.23\">called a decrementing function.</text><text start=\"411.71\" dur=\"1.25\">So what does that mean?</text><text start=\"412.96\" dur=\"4.65\">This is a function that maps the values\nof the formal parameters to a</text><text start=\"417.61\" dur=\"1.83\">non-negative integer.</text><text start=\"419.44\" dur=\"5.07\">In some sense, this is giving\nus the size of the problem.</text><text start=\"424.51\" dur=\"3.71\">And if I can find a decrementing\nfunction, something that says, given</text><text start=\"428.22\" dur=\"3.46\">the values of the parameters, I will\ntake those values and map it into an</text><text start=\"431.68\" dur=\"4.12\">integer, that decrementing function\nhas to have two other properties.</text><text start=\"435.8\" dur=\"3.88\">First is, when the value of that\nfunction is less than or equal to 0,</text><text start=\"439.68\" dur=\"2.28\">the recursion&amp;#39;s going to terminate.</text><text start=\"441.96\" dur=\"3.8\">And the second one is, for each\nrecursive call, the value of that</text><text start=\"445.76\" dur=\"3.86\">function is strictly less than\nthe value on entry to the</text><text start=\"449.62\" dur=\"1.2\">instance of the function.</text><text start=\"450.82\" dur=\"2.07\">In other words, the decrementing\nfunction will have some value when I</text><text start=\"452.89\" dur=\"3.05\">start the recursive call, and\nwhen I return from the</text><text start=\"455.94\" dur=\"2.84\">recursive call, it&amp;#39;s smaller.</text><text start=\"458.78\" dur=\"3.9\">Said very simply, this decrementing\nfunction should capture the size of</text><text start=\"462.68\" dur=\"4.45\">the problem, and I want it to be the\ncase that that function is smaller on</text><text start=\"467.13\" dur=\"3.52\">the recursive call, and smaller on the\nnext recursive call, and when it gets</text><text start=\"470.65\" dur=\"3.43\">down to or below 0, the\nrecursion terminates.</text><text start=\"474.08\" dur=\"1.35\">Again, a lot of words.</text><text start=\"475.43\" dur=\"2.04\">For this particular case, the\nfunction&amp;#39;s very simple.</text><text start=\"477.47\" dur=\"2.93\">It&amp;#39;s just high - low, right there.</text><text start=\"480.4\" dur=\"4.32\">high - low is telling us the range\nof the list still to be searched.</text><text start=\"484.72\" dur=\"2.1\">And let&amp;#39;s check it out.</text><text start=\"486.82\" dur=\"3.836\">It&amp;#39;s at least 0 the first\ntime it&amp;#39;s called.</text><text start=\"490.656\" dur=\"2.714\">OK, that&amp;#39;s good.</text><text start=\"493.37\" dur=\"4.46\">So it&amp;#39;s going to be something that&amp;#39;s\na non-negative integer.</text><text start=\"497.83\" dur=\"4.09\">When it gets down to being exactly 0,\nwhen high is equal to low, oh, that</text><text start=\"501.92\" dur=\"3.28\">said I have no recursive call,\nand I just return a value,</text><text start=\"505.2\" dur=\"1.765\">OK, so that&amp;#39;s done.</text><text start=\"506.965\" dur=\"2.335\">And otherwise, what&amp;#39;s happening?</text><text start=\"509.3\" dur=\"3.009\">Well, it&amp;#39;s going to either halt or\nrecursively call with the value halved</text><text start=\"512.309\" dur=\"5.531\">each time because at each case, either\nhigh is decreased by half or low is</text><text start=\"517.84\" dur=\"4.81\">increased by half, And so it&amp;#39;s going\nto reduce the value in each time.</text><text start=\"522.65\" dur=\"3.42\">So by finding that decrementing\nfunction, I&amp;#39;ve just proved that my</text><text start=\"526.07\" dur=\"3.22\">recursive procedure actually\nterminates.</text><text start=\"529.29\" dur=\"0.66\">Great.</text><text start=\"529.95\" dur=\"2.39\">So I&amp;#39;ve got something that\ndoes the search properly.</text><text start=\"532.34\" dur=\"4.6\">Again, another way of thinking about\nthis is this is just the range left.</text><text start=\"536.94\" dur=\"1.45\">That&amp;#39;s why I&amp;#39;m reducing it each time.</text><text start=\"538.39\" dur=\"1.89\">So I&amp;#39;ve got something\nthat actually works.</text><text start=\"540.28\" dur=\"3.06\">What&amp;#39;s the complexity?</text><text start=\"543.34\" dur=\"3.18\">Well, how many recursive\ncalls are there?</text><text start=\"546.52\" dur=\"1.19\">Why do I ask that?</text><text start=\"547.71\" dur=\"3.33\">Well, we know that the work within each\ncall is constant, which is doing</text><text start=\"551.04\" dur=\"3.19\">an access to a list and comparing it,\nand we&amp;#39;re doing some computations of</text><text start=\"554.23\" dur=\"2.3\">some simple arithmetic values.</text><text start=\"556.53\" dur=\"2.47\">So, how many recursive\ncalls do I have?</text><text start=\"559\" dur=\"4.225\">Well, that can be answered by saying how\nmany times can I divide high - low</text><text start=\"563.225\" dur=\"2.815\">in half before it reaches 0.</text><text start=\"566.04\" dur=\"1.58\">And why is that important?</text><text start=\"567.62\" dur=\"2.75\">high - low is the range\nof the problem left.</text><text start=\"570.37\" dur=\"3.49\">On each recursive call, I&amp;#39;m splitting\nit in half, and I&amp;#39;m splitting it in</text><text start=\"573.86\" dur=\"1.42\">half, and I&amp;#39;m splitting it in half.</text><text start=\"575.28\" dur=\"3.94\">How many times can I keep splitting\nsomething in half until I get down to</text><text start=\"579.22\" dur=\"2.8\">something that&amp;#39;s basically of size 1?</text><text start=\"582.02\" dur=\"2.12\">And that, we already have seen before.</text><text start=\"584.14\" dur=\"0.78\">That&amp;#39;s log.</text><text start=\"584.92\" dur=\"1.91\">Log base 2.</text><text start=\"586.83\" dur=\"1.91\">Basically, at each step,\nI&amp;#39;m dividing by 2.</text><text start=\"588.74\" dur=\"4.56\">So after log base 2 calls, I&amp;#39;m done.</text><text start=\"593.3\" dur=\"6.7\">So the complexity here is\nO(log(len(L))), and that&amp;#39;s nice.</text><text start=\"600\" dur=\"1.53\">We know that&amp;#39;s a very\nefficient algorithm.</text><text start=\"601.53\" dur=\"3.18\">So this is much better than linear\nis going as the log of linear.</text><text start=\"604.71\" dur=\"1.772\"></text></transcript>\n", "11z8XCDvC3Q": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.71\"></text><text start=\"0.71\" dur=\"2.81\">Eric Grimson: OK, so we want to\nthink about computational</text><text start=\"3.52\" dur=\"1.1\">problem solving.</text><text start=\"4.62\" dur=\"1.79\">We want to understand, what\ndoes it mean to think</text><text start=\"6.41\" dur=\"1.452\">computationally?</text><text start=\"7.862\" dur=\"2.358\">That leads to the philosophical\nquestion, so</text><text start=\"10.22\" dur=\"1.3\">what&amp;#39;s computation?</text><text start=\"11.52\" dur=\"2.37\">And like a good philosophical\nquestion, that leads to</text><text start=\"13.89\" dur=\"2.375\">another, deeper philosophical\nquestion.</text><text start=\"16.265\" dur=\"2.675\">To answer that question of\nwhat&amp;#39;s computation, let&amp;#39;s</text><text start=\"18.94\" dur=\"3.33\">start by asking the question,\nwhat is knowledge?</text><text start=\"22.27\" dur=\"1.54\">And, as we&amp;#39;re going to\nsee, we can divide</text><text start=\"23.81\" dur=\"1.68\">knowledge up into 2 parts.</text><text start=\"25.49\" dur=\"2.4\">There&amp;#39;s declarative knowledge,\nwhich we can think of the</text><text start=\"27.89\" dur=\"1.52\">statements of fact.</text><text start=\"29.41\" dur=\"0.91\">And there&amp;#39;s imperative</text><text start=\"30.32\" dur=\"2.81\">knowledge, or how to&amp;#39;s methods.</text><text start=\"33.13\" dur=\"3.61\">Statements of facts give us\ntrue, but, as we&amp;#39;ll see, they</text><text start=\"36.74\" dur=\"2.27\">don&amp;#39;t necessarily help us think\nabout how to find new</text><text start=\"39.01\" dur=\"1.24\">information.</text><text start=\"40.25\" dur=\"3.2\">Imperative knowledge, how to\nmethods or recipes, give us</text><text start=\"43.45\" dur=\"2.4\">ways of finding new information,\nand that&amp;#39;s going</text><text start=\"45.85\" dur=\"2.11\">to be really valuable to us.</text><text start=\"47.96\" dur=\"3.69\">Now, to look at this, let&amp;#39;s\nlook at an example.</text><text start=\"51.65\" dur=\"1.86\">So, what do we mean by\ndeclarative knowledge?</text><text start=\"53.51\" dur=\"2.722\">Well, here&amp;#39;s a piece of\ndeclarative knowledge.</text><text start=\"56.232\" dur=\"4.308\">That first statement says, the\nsquare root of a number x is a</text><text start=\"60.54\" dur=\"3.21\">number y such that y * y = x .</text><text start=\"63.75\" dur=\"3.03\">You know that&amp;#39;s true from\nhigh school algebra.</text><text start=\"66.78\" dur=\"2.04\">It&amp;#39;s a statement of truth.</text><text start=\"68.82\" dur=\"4.31\">It tells us something about\nhow to decide whether a</text><text start=\"73.13\" dur=\"3.27\">particular number is a square\nroot or not, but can we use</text><text start=\"76.4\" dur=\"2.37\">this to actually find\na square root?</text><text start=\"78.77\" dur=\"1.37\">And the answer is no.</text><text start=\"80.14\" dur=\"3.99\">If we have a number x equal to\n25 and we&amp;#39;re trying to find</text><text start=\"84.13\" dur=\"3.05\">the square root of that, and\nsomebody gives us a guess y =</text><text start=\"87.18\" dur=\"5.09\">5, we can use this statement to\ntest to see if 5 * 5 = 25 ,</text><text start=\"92.27\" dur=\"1.08\">which it does.</text><text start=\"93.35\" dur=\"2.33\">But it doesn&amp;#39;t tell us how\nto find the guess.</text><text start=\"95.68\" dur=\"2.24\">So declarative knowledge,\nwhich is what much of</text><text start=\"97.92\" dur=\"2.56\">knowledge is based on,\nisn&amp;#39;t what we need.</text><text start=\"100.48\" dur=\"3.84\">We want a different kind of\nknowledge, and for that,</text><text start=\"104.32\" dur=\"3.27\">fortunately, we have imperative\nknowledge.</text><text start=\"107.59\" dur=\"2.56\">As we said, imperative knowledge\nis how to kinds of</text><text start=\"110.15\" dur=\"4.02\">knowledge, or methods or recipes\nfor finding something,</text><text start=\"114.17\" dur=\"3.015\">and here&amp;#39;s a recipe for\ndeducing square root.</text><text start=\"117.185\" dur=\"2.565\">It&amp;#39;s actually attributed to\nHeron of Alexandria, although</text><text start=\"119.75\" dur=\"2.7\">there&amp;#39;s some debate as to\nwhether he was the original</text><text start=\"122.45\" dur=\"2.5\">creator of this algorithm, but\nit dates from the first</text><text start=\"124.95\" dur=\"1.58\">century AD.</text><text start=\"126.53\" dur=\"2.03\">And you can see the\ndescription here.</text><text start=\"128.56\" dur=\"2.329\">Description says if I want to\nfind the square root of some</text><text start=\"130.889\" dur=\"1.961\">number x, I&amp;#39;m going to\nstart with a guess.</text><text start=\"132.85\" dur=\"1.39\">I&amp;#39;ll call it g.</text><text start=\"134.24\" dur=\"2.65\">I&amp;#39;m going to take g and multiply\nit by itself and look</text><text start=\"136.89\" dur=\"2.48\">if that result is close\nenough to x.</text><text start=\"139.37\" dur=\"3.82\">If it is, I&amp;#39;m going to stop, and\nsay that g is the answer.</text><text start=\"143.19\" dur=\"3.77\">Otherwise, I&amp;#39;m going to make a\nnew guess by averaging g and</text><text start=\"146.96\" dur=\"3.94\">x/g , and using this new guess,\nwhich I will call g</text><text start=\"150.9\" dur=\"2.89\">again, I&amp;#39;m going to repeat the\nprocess until we get something</text><text start=\"153.79\" dur=\"2.08\">that&amp;#39;s close enough.</text><text start=\"155.87\" dur=\"3.3\">Notice, this is a mechanical set\nof steps and it has some</text><text start=\"159.17\" dur=\"1.31\">basic forms.</text><text start=\"160.48\" dur=\"2.4\">Right here there&amp;#39;s a test.</text><text start=\"162.88\" dur=\"2.6\">It&amp;#39;s going to let us know\nwhen we&amp;#39;re done,</text><text start=\"165.48\" dur=\"1.712\">when we&amp;#39;re close enough.</text><text start=\"167.192\" dur=\"3.278\">If that test isn&amp;#39;t satisfied,\nthen there&amp;#39;s some simple</text><text start=\"170.47\" dur=\"4.913\">calculations, like here, that\ntells us what to do.</text><text start=\"175.383\" dur=\"4.877\">And then, finally, there&amp;#39;s a\nflow of control, or a loop,</text><text start=\"180.26\" dur=\"4.18\">that tells us how to keep\nexecuting the same sequence of</text><text start=\"184.44\" dur=\"2.25\">operations until we\nget, in fact, to a</text><text start=\"186.69\" dur=\"1.59\">place where we&amp;#39;re done.</text><text start=\"188.28\" dur=\"3.89\">This is something that tells us\nhow to find a square root.</text><text start=\"192.17\" dur=\"3.33\">This is imperative knowledge\nand this is what we want.</text><text start=\"195.5\" dur=\"1.15\">OK, let&amp;#39;s try it out.</text><text start=\"196.65\" dur=\"1.43\">Here&amp;#39;s a little description\nof that.</text><text start=\"198.08\" dur=\"2.56\">Let&amp;#39;s see what happens if we\nwere actually to do it.</text><text start=\"200.64\" dur=\"2.25\">So I&amp;#39;m going to do a simple\nlittle simulation.</text><text start=\"202.89\" dur=\"1.45\">I want to find the square\nroot of 25.</text><text start=\"204.34\" dur=\"2.94\">And, yeah, I know the answer\nis 5, but let&amp;#39;s think about</text><text start=\"207.28\" dur=\"0.66\">what might happen here.</text><text start=\"207.94\" dur=\"1.75\">I&amp;#39;m going to start with a guess\nand I&amp;#39;m just going to</text><text start=\"209.69\" dur=\"2.61\">initially guess 3.</text><text start=\"212.3\" dur=\"1.74\">Heron of Alexandria&amp;#39;s\nalgorithm says</text><text start=\"214.04\" dur=\"2.04\">multiply 3 by itself.</text><text start=\"216.08\" dur=\"1.804\">That, of course, gives me 9.</text><text start=\"217.884\" dur=\"2.706\">Is 9 close enough to 25?</text><text start=\"220.59\" dur=\"7.03\">I don&amp;#39;t think so, so let&amp;#39;s get\nx/g , which is about 8.33.</text><text start=\"227.62\" dur=\"3.86\">And now, let&amp;#39;s take the\naverage of x/g and g.</text><text start=\"231.48\" dur=\"3.08\">So we add g and x/g ,\ntake the average of</text><text start=\"234.56\" dur=\"3.85\">that, and we get 5.67.</text><text start=\"238.41\" dur=\"2.26\">And then our little\nrecipe says take</text><text start=\"240.67\" dur=\"1.42\">that and do it again.</text><text start=\"242.09\" dur=\"5.83\">So this now becomes my\nnew guess, 5.67.</text><text start=\"247.92\" dur=\"1.43\">I multiply those together.</text><text start=\"249.35\" dur=\"3.013\">I happen to know that comes\nout to be about 32.5.</text><text start=\"252.363\" dur=\"3.347\">I&amp;#39;ve gotten closer to 25, but it\nain&amp;#39;t there yet, so that&amp;#39;s</text><text start=\"255.71\" dur=\"1.14\">not close enough.</text><text start=\"256.85\" dur=\"3.979\">Again, let&amp;#39;s take x divided by\nthis g which turns out to be</text><text start=\"260.829\" dur=\"6.841\">about 4.41, and then I take g\nand x/g and I average them,</text><text start=\"267.67\" dur=\"3.31\">and I get 5.04.</text><text start=\"270.98\" dur=\"3.48\">And my algorithm says,\nmy recipe says, take</text><text start=\"274.46\" dur=\"3.16\">this and do it again.</text><text start=\"277.62\" dur=\"5.04\">5.04 multiplied by itself is\nabout 25.4, and I&amp;#39;m going to</text><text start=\"282.66\" dur=\"2.45\">say, you know what, that&amp;#39;s close\nenough, so my little</text><text start=\"285.11\" dur=\"2.81\">recipe says there&amp;#39;s\nthe answer.</text><text start=\"287.92\" dur=\"2.8\">Not perfect, but close enough.</text><text start=\"290.72\" dur=\"1.77\">So, Heron had it right.</text><text start=\"292.49\" dur=\"1.49\">This looks like a pretty\ngood algorithm.</text><text start=\"293.98\" dur=\"3.14\">This is a way of describing a\nmethod for doing something,</text><text start=\"297.12\" dur=\"3.29\">and that idea, that notion of\na recipe, is something we&amp;#39;re</text><text start=\"300.41\" dur=\"1.4\">going to use a lot.</text><text start=\"301.81\" dur=\"3.29\">So we can think of algorithms as\nbeing recipes, sequences of</text><text start=\"305.1\" dur=\"2.85\">mechanical steps for\ndoing something.</text><text start=\"307.95\" dur=\"2.05\">We put that analogy to a little\nbit more use, we can</text><text start=\"310\" dur=\"3.19\">see that recipes have much of\nthe same form, real recipes.</text><text start=\"313.19\" dur=\"2.11\">Imagine I want to make\nsome custard.</text><text start=\"315.3\" dur=\"0.81\">Here&amp;#39;s my recipe.</text><text start=\"316.11\" dur=\"1.59\">I&amp;#39;m going to take all the\ningredients of the custard,</text><text start=\"317.7\" dur=\"3.02\">that mixture, put it into a pot\nover some heat, and I&amp;#39;m</text><text start=\"320.72\" dur=\"1.76\">going to stir it.</text><text start=\"322.48\" dur=\"2.36\">As I stir it, every once in a\nwhile, I&amp;#39;ll dip a spoon into</text><text start=\"324.84\" dur=\"2.91\">the custard, pull it out, and\nrun my finger across the back</text><text start=\"327.75\" dur=\"1.29\">of the spoon.</text><text start=\"329.04\" dur=\"2.58\">If the spoon is clear, then\nI&amp;#39;m done and I&amp;#39;m going to</text><text start=\"331.62\" dur=\"2.86\">remove the custard from the\nheat and let it cool.</text><text start=\"334.48\" dur=\"1.82\">If not, I&amp;#39;m going to repeat.</text><text start=\"336.3\" dur=\"1.38\">And notice what we have here.</text><text start=\"337.68\" dur=\"4.37\">Again, we&amp;#39;ve got a test,\nright there.</text><text start=\"342.05\" dur=\"1.97\">And we&amp;#39;ve got a way\nof, in fact,</text><text start=\"344.02\" dur=\"1.37\">changing the flow of control.</text><text start=\"345.39\" dur=\"4.98\">So, normally, the flow runs this\nway, but based on that</text><text start=\"350.37\" dur=\"3.08\">test, we have a way of\ngoing back up and</text><text start=\"353.45\" dur=\"1.43\">continuing the path.</text><text start=\"354.88\" dur=\"2.82\">And this pattern is something\nwe&amp;#39;re going to repeat a lot.</text><text start=\"357.7\" dur=\"3.68\">So, you want to capture recipes\nand we need to figure</text><text start=\"361.38\" dur=\"2.44\">out how to get the computer to\ndo that for us, which is what</text><text start=\"363.82\" dur=\"1.25\">we&amp;#39;re going to talk about next.</text><text start=\"365.07\" dur=\"1.1\"></text></transcript>\n", "1jnF2wBDvHg": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.485\"></text><text start=\"0.485\" dur=\"3.405\">PROFESSOR: We&amp;#39;ve now built an\nabstraction for a graph--</text><text start=\"3.89\" dur=\"4.17\">set of nodes, set of edges, particular\nrepresentation for capturing them,</text><text start=\"8.06\" dur=\"4.45\">especially that idea for every node, the\nedges basically tell us what are</text><text start=\"12.51\" dur=\"1.52\">all the children of that node--</text><text start=\"14.03\" dur=\"2.299\">nodes that we can reach in one step.</text><text start=\"16.329\" dur=\"4.221\">And we built a simple little graph with\nnodes labeled zero through five.</text><text start=\"20.55\" dur=\"3.22\">Our real goal is to understand how do\nwe find paths through the graph?</text><text start=\"23.77\" dur=\"1.94\">How do we find solutions?</text><text start=\"25.71\" dur=\"2.87\">Suppose in my simple little graph, I&amp;#39;d\nlike to find the shortest path from</text><text start=\"28.58\" dur=\"2.91\">node zero to node five.</text><text start=\"31.49\" dur=\"1.64\">First of all, I&amp;#39;d have to say\nwhat &amp;quot;shortest&amp;quot; means.</text><text start=\"33.13\" dur=\"3.9\">It could just mean the fewest number of\nsteps, the fewest number of edges I</text><text start=\"37.03\" dur=\"2.85\">have to walk through to\nget from zero to five.</text><text start=\"39.88\" dur=\"2.21\">If I&amp;#39;ve got weights on the edges\nthough, I might want to</text><text start=\"42.09\" dur=\"0.93\">actually use those.</text><text start=\"43.02\" dur=\"3.06\">They might be the minimizing the sum\nof the weights-- the cost if you</text><text start=\"46.08\" dur=\"2\">like-- to get from zero to five.</text><text start=\"48.08\" dur=\"3.87\">The question is how do I find that\ngraph, or rather how do I find that</text><text start=\"51.95\" dur=\"2.57\">path through that graph?</text><text start=\"54.52\" dur=\"2.22\">Well there are a lot of\ntechniques for this.</text><text start=\"56.74\" dur=\"4.77\">And a very common one is something\nknown as depth-first search.</text><text start=\"61.51\" dur=\"1.82\">We&amp;#39;re going to talk about the words\non this slide in a second.</text><text start=\"63.33\" dur=\"2.87\">But let me give you the intuition,\nthe visualization for you.</text><text start=\"66.2\" dur=\"1.88\">I&amp;#39;m going to start off\nat some root node.</text><text start=\"68.08\" dur=\"1.21\">I could be node zero.</text><text start=\"69.29\" dur=\"1.89\">I want to get to a goal node--</text><text start=\"71.18\" dur=\"2.54\">node five down here somewhere.</text><text start=\"73.72\" dur=\"3.84\">From that root node, I\nknow the children.</text><text start=\"77.56\" dur=\"4.2\">That is I know in one step what other\nnodes I can get to, what are the edges</text><text start=\"81.76\" dur=\"0.98\">that lead from there.</text><text start=\"82.74\" dur=\"3.55\">So it might go from zero to one, zero\nto two, maybe to some others.</text><text start=\"86.29\" dur=\"2.76\">I think yours just goes from zero\nto one and zero to two.</text><text start=\"89.05\" dur=\"3.17\">So the idea is I&amp;#39;m going to start at the\nroot node, and I&amp;#39;m going to look</text><text start=\"92.22\" dur=\"1.71\">at what are the paths that\nlead out of there.</text><text start=\"93.93\" dur=\"2.38\">I&amp;#39;ve got two of them--\ngoing to one and two.</text><text start=\"96.31\" dur=\"3.7\">I&amp;#39;m going to take the first of those--\nthe path that goes from zero to one.</text><text start=\"100.01\" dur=\"2.95\">And I&amp;#39;m going to say what\nare the children of one?</text><text start=\"102.96\" dur=\"2.08\">It might be zero and two.</text><text start=\"105.04\" dur=\"4.15\">And I&amp;#39;m going to say OK, let me take\nthat first path and extend it by</text><text start=\"109.19\" dur=\"5.13\">adding from this node all these steps\nthat I can go in one place to get to a</text><text start=\"114.32\" dur=\"1\">new set of paths.</text><text start=\"115.32\" dur=\"2.85\">So now I&amp;#39;ve got a set of paths.</text><text start=\"118.17\" dur=\"0.94\">I&amp;#39;m going to keep doing that.</text><text start=\"119.11\" dur=\"4.91\">Take the first one, take that end node,\nsay what are the children I can</text><text start=\"124.02\" dur=\"4.84\">reach in one step, and keep extending\nthe set of possible paths.</text><text start=\"128.86\" dur=\"2.19\">Hopefully, eventually, I&amp;#39;m going\nto get to the goal node.</text><text start=\"131.05\" dur=\"0.81\">When I do, I&amp;#39;m done.</text><text start=\"131.86\" dur=\"3.07\">And I know exactly the path\nthat got me there.</text><text start=\"134.93\" dur=\"3.9\">If I get to a node and there aren&amp;#39;t any\nadditional children, well I just</text><text start=\"138.83\" dur=\"4.37\">throw that away and I backtrack to the\nprevious place I was and look at the</text><text start=\"143.2\" dur=\"2.54\">next set of options.</text><text start=\"145.74\" dur=\"1.93\">OK, we can capture that in words.</text><text start=\"147.67\" dur=\"3.46\">The idea is we&amp;#39;re going to\nstart at the root node.</text><text start=\"151.13\" dur=\"4.01\">This set up paths, initially, are\nbasically just where I am, just</text><text start=\"155.14\" dur=\"1.09\">starting at the root node.</text><text start=\"156.23\" dur=\"1.63\">I haven&amp;#39;t taken any steps.</text><text start=\"157.86\" dur=\"2.86\">From that node, I then\ndo the following.</text><text start=\"160.72\" dur=\"2.04\">I take the path that got me there.</text><text start=\"162.76\" dur=\"1.97\">In the case of root node is nothing.</text><text start=\"164.73\" dur=\"4.73\">And I extend that path by one step,\ngoing to each of the possible children</text><text start=\"169.46\" dur=\"1.95\">of the current node.</text><text start=\"171.41\" dur=\"1.53\">So I take the current path.</text><text start=\"172.94\" dur=\"3.83\">Then I replace it in my set with this\nset of new paths, that each go one</text><text start=\"176.77\" dur=\"1.02\">step further.</text><text start=\"177.79\" dur=\"4.33\">So I add these paths to the set of\npaths at the front of the set.</text><text start=\"182.12\" dur=\"5.192\">I then take that first path at front\nof the set and I do the same thing,</text><text start=\"187.312\" dur=\"2.058\">and recursively repeat that.</text><text start=\"189.37\" dur=\"3.83\">And I&amp;#39;m going to keep doing that until\nhopefully, I get to the goal node.</text><text start=\"193.2\" dur=\"4.88\">If I get to the node in a path which has\nno children, then I just go on to</text><text start=\"198.08\" dur=\"1.62\">the next path.</text><text start=\"199.7\" dur=\"2.85\">And I&amp;#39;ll keep doing that until\nI either reach the goal, or</text><text start=\"202.55\" dur=\"1.91\">I run out of paths.</text><text start=\"204.46\" dur=\"1.21\">So there&amp;#39;s a description.</text><text start=\"205.67\" dur=\"1.7\">We&amp;#39;re going to build code in a second.</text><text start=\"207.37\" dur=\"1.85\">But let me give you a visualization\nof this.</text><text start=\"209.22\" dur=\"3.85\">I&amp;#39;m going to do that visualization using\nthat simple graph I built in the</text><text start=\"213.07\" dur=\"1.35\">last lecture segment.</text><text start=\"214.42\" dur=\"3\">I&amp;#39;m going to go from a\nroot node of zero.</text><text start=\"217.42\" dur=\"3.4\">And I&amp;#39;m going to build a different kind\nof graph called a tree that&amp;#39;s</text><text start=\"220.82\" dur=\"2.94\">going to let me explore the\npaths through the graph.</text><text start=\"223.76\" dur=\"3.08\">So from node zero, I&amp;#39;ve\ngot two possibilities.</text><text start=\"226.84\" dur=\"1.94\">I can either go to node\none or to node two.</text><text start=\"228.78\" dur=\"2.77\">So I&amp;#39;m going to add two\nnew paths to my set--</text><text start=\"231.55\" dur=\"2.4\">that path and this path.</text><text start=\"233.95\" dur=\"3.27\">And I&amp;#39;m going to take the first one,\nwhich goes from zero to one.</text><text start=\"237.22\" dur=\"1.92\">I&amp;#39;m not at my goal of five.</text><text start=\"239.14\" dur=\"2.44\">So I&amp;#39;m going to say what are\nthe children of one?</text><text start=\"241.58\" dur=\"2.4\">Turns out it&amp;#39;s got zero\nand two as children.</text><text start=\"243.98\" dur=\"3.2\">So I&amp;#39;m going to replace this\npath with two paths--</text><text start=\"247.18\" dur=\"1.96\">that one and that one.</text><text start=\"249.14\" dur=\"2.94\">I can go from zero to one to zero,\nor zero to one to two.</text><text start=\"252.08\" dur=\"2.665\">And now I&amp;#39;ve got three possible\npaths to explore.</text><text start=\"254.745\" dur=\"1.435\">I&amp;#39;ll take the first of those.</text><text start=\"256.18\" dur=\"1.589\">It goes from zero to one to zero.</text><text start=\"257.769\" dur=\"2.07\">And I could say what are\nthe children of zero?</text><text start=\"259.839\" dur=\"1.051\">It&amp;#39;s one and two.</text><text start=\"260.89\" dur=\"4.345\">So I&amp;#39;m going to replace this\npath with two paths--</text><text start=\"265.235\" dur=\"4.515\">going zero-one-zero-one\nor zero-one-zero-two.</text><text start=\"269.75\" dur=\"2.03\">Now I could keep taking\nthe first path.</text><text start=\"271.78\" dur=\"2.61\">I&amp;#39;m doing this depth first,\nthe exploration of</text><text start=\"274.39\" dur=\"1.29\">this space as solutions.</text><text start=\"275.68\" dur=\"1.44\">I could keep doing that.</text><text start=\"277.12\" dur=\"2.17\">But if I do, I&amp;#39;m in trouble.</text><text start=\"279.29\" dur=\"1.74\">Because what is this path saying?</text><text start=\"281.03\" dur=\"3.35\">It says go from node zero, to node one,\nto node zero, to node zero, to</text><text start=\"284.38\" dur=\"4.46\">node one, to-- oh my goodness I&amp;#39;m\njust caught in an infinite loop.</text><text start=\"288.84\" dur=\"4.56\">So I need to be just a little\nbit more careful about this.</text><text start=\"293.4\" dur=\"3.96\">In a particular, I can see that by\nlooking at the following set of steps.</text><text start=\"297.36\" dur=\"1.46\">Let&amp;#39;s walk through it.</text><text start=\"298.82\" dur=\"2.02\">I started off with node zero.</text><text start=\"300.84\" dur=\"1.275\">That&amp;#39;s my initial path.</text><text start=\"302.115\" dur=\"4.565\">I said I can replace that path with a\npath that goes to each of the children</text><text start=\"306.68\" dur=\"1.08\">of node zero.</text><text start=\"307.76\" dur=\"1.95\">That&amp;#39;s one and two.</text><text start=\"309.71\" dur=\"3.92\">Now I can look at this path and say let\nme replace that with the path that</text><text start=\"313.63\" dur=\"4.12\">goes from one to its children,\nwhich are either zero or two.</text><text start=\"317.75\" dur=\"2.72\">I now have three paths I can explore.</text><text start=\"320.47\" dur=\"1.77\">I&amp;#39;m going to replace this first path.</text><text start=\"322.24\" dur=\"1.89\">Because I&amp;#39;m doing the first\none as my option always.</text><text start=\"324.13\" dur=\"2.38\">I say I&amp;#39;m not at the goal,\nso zero has two children.</text><text start=\"326.51\" dur=\"1.27\">Zero, one, two--</text><text start=\"327.78\" dur=\"2.91\">so I&amp;#39;m going to replace that\nwith that set of paths.</text><text start=\"330.69\" dur=\"2.88\">But you can see that I&amp;#39;m now\ncaught in this problem.</text><text start=\"333.57\" dur=\"2.57\">And I really want to get\nout of that problem.</text><text start=\"336.14\" dur=\"1.63\">How do I deal with it?</text><text start=\"337.77\" dur=\"4.4\">Well, I simply want to avoid visiting\na node more than once in</text><text start=\"342.17\" dur=\"0.9\">a particular path.</text><text start=\"343.07\" dur=\"6\">And I want to add that\nin a particular path.</text><text start=\"349.07\" dur=\"2.67\">If I&amp;#39;m walking down a path and I&amp;#39;m\nabout to go to a node that I&amp;#39;ve</text><text start=\"351.74\" dur=\"4.66\">already seen, that says I&amp;#39;m about\nto create a loop in my path.</text><text start=\"356.4\" dur=\"1.22\">And that doesn&amp;#39;t make any sense.</text><text start=\"357.62\" dur=\"3.47\">I don&amp;#39;t want to backtrack or retrace\nmy steps in this particular path.</text><text start=\"361.09\" dur=\"2.76\">So as long as I avoid visiting\na node more than once in a</text><text start=\"363.85\" dur=\"2.03\">particular path, I&amp;#39;m set.</text><text start=\"365.88\" dur=\"3.01\">And I added that phrase because of\ncourse, different paths may go through</text><text start=\"368.89\" dur=\"1.01\">the same node.</text><text start=\"369.9\" dur=\"0.93\">That&amp;#39;s fine.</text><text start=\"370.83\" dur=\"2.72\">I just don&amp;#39;t want to create a loop\nor a cycle in terms of what</text><text start=\"373.55\" dur=\"1.25\">I&amp;#39;m going to do.</text><text start=\"374.8\" dur=\"0.58\"></text></transcript>\n", "kH_icrqrRzs": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.07\"></text><text start=\"1.07\" dur=\"0.95\">JOHN GUTTAG: Hello.</text><text start=\"2.02\" dur=\"3.1\">My name is John Guttag, and I will\nbe delivering the next series</text><text start=\"5.12\" dur=\"2.21\">of lectures in 6.00X.</text><text start=\"7.33\" dur=\"1.47\">I have some good news.</text><text start=\"8.8\" dur=\"3.75\">We&amp;#39;re pretty much done with introducing\nnew aspects of Python.</text><text start=\"12.55\" dur=\"3.33\">You now know everything you need to\nknow to write beautiful Python</text><text start=\"15.88\" dur=\"2.64\">programs that do cool things.</text><text start=\"18.52\" dur=\"3.49\">That, of course, raises the question,\nwhat are we going to do for the rest</text><text start=\"22.01\" dur=\"1.44\">of the course?</text><text start=\"23.45\" dur=\"4.16\">Mostly, we are going to look at how you\ncan use your programming skills to</text><text start=\"27.61\" dur=\"4.01\">write programs that shed some\nlight on complex situations.</text><text start=\"31.62\" dur=\"2.5\">The first series of lecture segments\nare about the visual</text><text start=\"34.12\" dur=\"1.87\">presentation of data.</text><text start=\"35.99\" dur=\"4.76\">We will introduce you to a Python\nlibrary, PyLab, that provides features</text><text start=\"40.75\" dur=\"3.36\">that make it relatively easy\nto analyze data and present</text><text start=\"44.11\" dur=\"1.81\">the results as plots.</text><text start=\"45.92\" dur=\"4.28\">We will cover only a small subset\nof what PyLab has to offer.</text><text start=\"50.2\" dur=\"2.31\">Other features will be introduced\nlater in the course.</text><text start=\"52.51\" dur=\"1.25\"></text></transcript>\n", "O1Is56hu4EU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.45\"></text><text start=\"1.45\" dur=\"3.44\">Eric Grimson: We&amp;#39;ve just shown that if\nwe have a sorted list, we can search</text><text start=\"4.89\" dur=\"4.36\">it much more efficiently than just\nlinear searching, and that&amp;#39;s great.</text><text start=\"9.25\" dur=\"1.65\">But wait a minute.</text><text start=\"10.9\" dur=\"1.23\">How do I get a sorted list?</text><text start=\"12.13\" dur=\"0.97\">What if my list is not sorted?</text><text start=\"13.1\" dur=\"1.74\">What&amp;#39;s the cost of sorting?</text><text start=\"14.84\" dur=\"3.66\">Have I just kind of played\na slick game on you here?</text><text start=\"18.5\" dur=\"4.7\">So the question we want to ask is gee,\nis it better to actually sort a list,</text><text start=\"23.2\" dur=\"3.26\">and then use the binary search\nto find things, or should I</text><text start=\"26.46\" dur=\"1.91\">stick with linear search?</text><text start=\"28.37\" dur=\"4.31\">So let&amp;#39;s assume that the complexity of\nsorting a list is just something we&amp;#39;ll</text><text start=\"32.68\" dur=\"3.74\">call order of sort L. We don&amp;#39;t know what\nit is here in a second, but we&amp;#39;ll</text><text start=\"36.42\" dur=\"1.44\">come back to it.</text><text start=\"37.86\" dur=\"4.9\">So then what we&amp;#39;re really asking is, if\nwe sort and search, we want to know</text><text start=\"42.76\" dur=\"6.1\">is the cost of both sorting and binary\nsearch, which is great, is that less</text><text start=\"48.86\" dur=\"3.4\">than just doing straightforward\nlinear search?</text><text start=\"52.26\" dur=\"2.805\">In other words, is it better to sort\nand search, or should we just stick</text><text start=\"55.065\" dur=\"2.105\">with the linear search?</text><text start=\"57.17\" dur=\"2.74\">Well, if we don&amp;#39;t know anything\nmore, unfortunately the answer</text><text start=\"59.91\" dur=\"1.6\">is it can&amp;#39;t be better.</text><text start=\"61.51\" dur=\"4.46\">Because we can&amp;#39;t possibly sort\nin less than linear time.</text><text start=\"65.97\" dur=\"1.34\">Why do we know that?</text><text start=\"67.31\" dur=\"2.01\">Well, we&amp;#39;ve got to look at least\neach element of the list in</text><text start=\"69.32\" dur=\"0.86\">order to sort them.</text><text start=\"70.18\" dur=\"2.46\">That says we&amp;#39;ve got to look at at\nleast the length of the list.</text><text start=\"72.64\" dur=\"3.44\">So sort has to be at least linear.</text><text start=\"76.08\" dur=\"5.37\">And if that&amp;#39;s the case, then sounds\nlike it isn&amp;#39;t better to do sorting</text><text start=\"81.45\" dur=\"2\">before we do the search.</text><text start=\"83.45\" dur=\"1.91\">But that seems disappointing.</text><text start=\"85.36\" dur=\"3.3\">And in fact, it is because we&amp;#39;re not\ncompletely taking into account</text><text start=\"88.66\" dur=\"2.07\">everything that we want to do.</text><text start=\"90.73\" dur=\"3.43\">Suppose we want to actually search\na list more than once.</text><text start=\"94.16\" dur=\"4.35\">We want to search it say, let&amp;#39;s just\nsay k times for some value k.</text><text start=\"98.51\" dur=\"5.95\">Then the question we want to ask is is\nthe cost of sorting plus k searches</text><text start=\"104.46\" dur=\"3.476\">less than the cost of just\nk linear searches?</text><text start=\"107.936\" dur=\"4.124\">And you can already see it&amp;#39;s going to\ndepend on k and it&amp;#39;s going to depend</text><text start=\"112.06\" dur=\"5.01\">on sort, but one expects that if the\nsort can be done efficiently, then it</text><text start=\"117.07\" dur=\"3.08\">is going to be better to sort\nfirst, and then search.</text><text start=\"120.15\" dur=\"3.8\">This is what we refer to as amortizing,\nor spreading out the cost.</text><text start=\"123.95\" dur=\"3.06\">We&amp;#39;re spreading out the cost of sorting\nover multiple searches.</text><text start=\"127.01\" dur=\"4.83\">And doing something may well\nmake this worthwhile.</text><text start=\"131.84\" dur=\"3.172\">So now the question is how\nefficiently can we sort?</text><text start=\"135.012\" dur=\"3.018\">Because if we can do it well,\nwe really may be better off</text><text start=\"138.03\" dur=\"1.38\">using binary search.</text><text start=\"139.41\" dur=\"2.73\">And that takes us back to where we\nstarted, which is to say then we can</text><text start=\"142.14\" dur=\"3.15\">reduce a lot of search problems\njust to a known solution,</text><text start=\"145.29\" dur=\"2.49\">which is binary search.</text><text start=\"147.78\" dur=\"1.69\">OK, so let&amp;#39;s look at sorting.</text><text start=\"149.47\" dur=\"3.31\">And we&amp;#39;re going to look\nat two examples.</text><text start=\"152.78\" dur=\"2.175\">The first example is shown\nwith a piece of code.</text><text start=\"154.955\" dur=\"2.185\">It&amp;#39;s called selection sort.</text><text start=\"157.14\" dur=\"2.41\">And the idea behind it\nis pretty simple.</text><text start=\"159.55\" dur=\"5.06\">Given a list, we&amp;#39;re going to find the\nsmallest element in the list and swap</text><text start=\"164.61\" dur=\"1.44\">it with the first element.</text><text start=\"166.05\" dur=\"2.27\">And then we&amp;#39;re going to take the\nremainder of the list, find the</text><text start=\"168.32\" dur=\"3.58\">smallest element of that, and swap\nit with the second element.</text><text start=\"171.9\" dur=\"2.54\">And just keep doing that until we&amp;#39;ve\ndone the overall search.</text><text start=\"174.44\" dur=\"1.4\">So you can see that here.</text><text start=\"175.84\" dur=\"2.84\">I&amp;#39;m running a loop over\nthe range of the list.</text><text start=\"178.68\" dur=\"5.17\">I start off saying that the location\nof the smallest thing is at i.</text><text start=\"183.85\" dur=\"2.16\">The minimum index is i, and\nthe minimum value is the</text><text start=\"186.01\" dur=\"1.53\">value of that point.</text><text start=\"187.54\" dur=\"3.85\">I&amp;#39;m going to start j at 1 more than i,\nand then I&amp;#39;m going to run a loop where</text><text start=\"191.39\" dur=\"3.91\">I walk through the right hand side of\nthe list, and I find basically the</text><text start=\"195.3\" dur=\"1.43\">smallest element.</text><text start=\"196.73\" dur=\"7.86\">If the value at right here, at j is\nsmaller than the smallest thing I&amp;#39;ve</text><text start=\"204.59\" dur=\"4.62\">seen so far, which includes the thing\nI&amp;#39;m about to swap with initially, then</text><text start=\"209.21\" dur=\"1.06\">I just change those things.</text><text start=\"210.27\" dur=\"7.08\">So this basically says find the smallest\nvalue in the right of i, or</text><text start=\"217.35\" dur=\"4.07\">to the right of i, I\nshould really say.</text><text start=\"221.42\" dur=\"4.12\">And when I&amp;#39;ve done that, I&amp;#39;ll go ahead\nand run through that entire loop, then</text><text start=\"225.54\" dur=\"3.78\">down here I just do a switch.</text><text start=\"229.32\" dur=\"1.04\">I&amp;#39;ll have to be careful.</text><text start=\"230.36\" dur=\"3.515\">I&amp;#39;m going to temporarily hold onto the\nvalue at the ith location of the list</text><text start=\"233.875\" dur=\"4.675\">using temp right there, So that I can\ntake the thing at the minimum</text><text start=\"238.55\" dur=\"3.69\">location, put it into i, and then take\na temporary thing and put it there.</text><text start=\"242.24\" dur=\"2.02\">So this is a standard way\nof doing a switch.</text><text start=\"244.26\" dur=\"3.43\">I temporarily hold onto something, so\nI move into that location, and then</text><text start=\"247.69\" dur=\"3.23\">the temporary thing and\nput it into that spot.</text><text start=\"250.92\" dur=\"3.075\">So you can see this is doing what&amp;#39;s\ncalled selection search.</text><text start=\"253.995\" dur=\"3.139\">I find the smallest thing, I move it to\nthe front, I find the next smallest</text><text start=\"257.134\" dur=\"3.385\">thing, I move it to the next location,\nand I keep doing it.</text><text start=\"260.519\" dur=\"3.041\">OK, let&amp;#39;s look at this.</text><text start=\"263.56\" dur=\"3.11\">First of all, let&amp;#39;s analyze\nthis selection sort.</text><text start=\"266.67\" dur=\"3.06\">And one of the things again, I&amp;#39;d like\nto know is to be able to determine</text><text start=\"269.73\" dur=\"2.08\">does it really do the right thing?</text><text start=\"271.81\" dur=\"3.87\">And I can do that by identifying what\nwe&amp;#39;ll call a looping variant,</text><text start=\"275.68\" dur=\"1.79\">something we&amp;#39;ve seen before.</text><text start=\"277.47\" dur=\"4.97\">And the looping variant basically says\nhere&amp;#39;s a property that holds true at</text><text start=\"282.44\" dur=\"1.72\">each stage through the loop.</text><text start=\"284.16\" dur=\"3.05\">And if I can do that, then I can reason\nabout does it satisfy the base</text><text start=\"287.21\" dur=\"3.66\">case, and does it satisfy that induction\nstep of if it&amp;#39;s true for a</text><text start=\"290.87\" dur=\"1.94\">smaller version of the problem,\nis it true for the next</text><text start=\"292.81\" dur=\"1.15\">version of the problem?</text><text start=\"293.96\" dur=\"3\">And if I do that, then I\ncan show that I&amp;#39;m done.</text><text start=\"296.96\" dur=\"2.675\">The loop invariant here is\npretty straightforward.</text><text start=\"299.635\" dur=\"4.155\">It says given a prefix of the list,\nthe first half of the list, and a</text><text start=\"303.79\" dur=\"4.87\">suffix of the list, everything after\nthe ith location, then the looping</text><text start=\"308.66\" dur=\"2.68\">variant is going to be that every time\nI go through this loop, I&amp;#39;m going to</text><text start=\"311.34\" dur=\"5.42\">claim that the prefix is sorted, and\nthat there&amp;#39;s no element in the prefix</text><text start=\"316.76\" dur=\"2.28\">that&amp;#39;s larger than the smallest\nelement in the suffix.</text><text start=\"319.04\" dur=\"4.34\">That everything in the prefix is smaller\nthan everything in the suffix.</text><text start=\"323.38\" dur=\"0.81\">OK, that&amp;#39;s my looping variant.</text><text start=\"324.19\" dur=\"2.14\">Let&amp;#39;s see if that holds true.</text><text start=\"326.33\" dur=\"2.85\">Well, in the base case, the\nprefix is just empty.</text><text start=\"329.18\" dur=\"2.11\">So it&amp;#39;s trivially sorted.</text><text start=\"331.29\" dur=\"3.99\">The suffix is the whole list, and it&amp;#39;s\ntrivially the case that everything in</text><text start=\"335.28\" dur=\"3.83\">the prefix is smaller than the\nsmallest thing in the suffix.</text><text start=\"339.11\" dur=\"2.96\">OK, now what about the induction step?</text><text start=\"342.07\" dur=\"3.63\">This basically says when I enter the\nrecursive call, I&amp;#39;m assuming, or I</text><text start=\"345.7\" dur=\"2.62\">know that the prefix is sorted.</text><text start=\"348.32\" dur=\"1.05\">So what does this say?</text><text start=\"349.37\" dur=\"3.36\">The induction step says we&amp;#39;re going to\nfind the smallest element of the</text><text start=\"352.73\" dur=\"3.59\">suffix and move it to the\nend of the prefix.</text><text start=\"356.32\" dur=\"4.23\">If the prefix was sorted beforehand,\nputting something that&amp;#39;s larger than</text><text start=\"360.55\" dur=\"3.51\">everything in it at the end, says the\nprefix is still sorted, and since I</text><text start=\"364.06\" dur=\"4.56\">moved the smallest element, it says\nthat there&amp;#39;s nothing in the suffix</text><text start=\"368.62\" dur=\"2.6\">that is smaller than anything\nin the prefix.</text><text start=\"371.22\" dur=\"4.73\">So the invariant was true before the\nmove, the prefix was sorted after the</text><text start=\"375.95\" dur=\"4.39\">move, and I&amp;#39;ve guaranteed that in fact,\nI&amp;#39;ve done the right move-in.</text><text start=\"380.34\" dur=\"3.01\">And when I exit, when I&amp;#39;ve gone\nall the way through all of</text><text start=\"383.35\" dur=\"1.13\">this, what do I have?</text><text start=\"384.48\" dur=\"4.69\">The prefix is the entire list, suffix\nis empty, so I&amp;#39;m guaranteed that the</text><text start=\"389.17\" dur=\"1.57\">list is sorted.</text><text start=\"390.74\" dur=\"2.09\">Nice little induction proof that\nshows that I&amp;#39;m actually</text><text start=\"392.83\" dur=\"1.96\">doing the right thing.</text><text start=\"394.79\" dur=\"0.78\">Great.</text><text start=\"395.57\" dur=\"2.45\">Now, what&amp;#39;s the complexity?</text><text start=\"398.02\" dur=\"2.31\">Well, what have I got?</text><text start=\"400.33\" dur=\"1.32\">I&amp;#39;ve got two loops.</text><text start=\"401.65\" dur=\"4.09\">This inner loop down here, we already\nknow from earlier versions how to</text><text start=\"405.74\" dur=\"0.79\">estimate them.</text><text start=\"406.53\" dur=\"3.67\">The complexity of that is on the order\nof the length of the list.</text><text start=\"410.2\" dur=\"2.84\">Yes, the list gets smaller each time\nthrough, but basically it&amp;#39;s the order</text><text start=\"413.04\" dur=\"2.4\">of the length of the list, OK?</text><text start=\"415.44\" dur=\"1.48\">So that&amp;#39;s the inner loop.</text><text start=\"416.92\" dur=\"0.98\">What&amp;#39;s the outer loop?</text><text start=\"417.9\" dur=\"2.15\">Well, I go through the outer loop.</text><text start=\"420.05\" dur=\"3.4\">Basically order of the length\nof the list times.</text><text start=\"423.45\" dur=\"3.9\">So I&amp;#39;m doing something of order length\nof L, and I&amp;#39;m doing that order length</text><text start=\"427.35\" dur=\"0.57\">of L times.</text><text start=\"427.92\" dur=\"4.7\">So the overall complexity\nhere is quadratic.</text><text start=\"432.62\" dur=\"4.03\">It&amp;#39;s length of the list squared, because\nI&amp;#39;ve got to through the list</text><text start=\"436.65\" dur=\"4.01\">at least once, and I&amp;#39;ve got to do that\nthe length of the list times.</text><text start=\"440.66\" dur=\"1.87\">And unfortunately, we know\nthis is expensive.</text><text start=\"442.53\" dur=\"1.94\">It&amp;#39;s not what we would like.</text><text start=\"444.47\" dur=\"3.85\">But it gives us a simple kind\nof sorting algorithm.</text><text start=\"448.32\" dur=\"3.99\">Now the question is, all right, if I\njust use selection sort, would I</text><text start=\"452.31\" dur=\"2.13\">really want to use this compared\nto linear search?</text><text start=\"454.44\" dur=\"1.03\">And the answer&amp;#39;s probably not.</text><text start=\"455.47\" dur=\"3.91\">If it&amp;#39;s quadratic to do the sort, and\nthen I&amp;#39;m going to order log to do the</text><text start=\"459.38\" dur=\"3.45\">search, the search is nice, but in\ngeneral it&amp;#39;s going to be way too</text><text start=\"462.83\" dur=\"3.38\">expensive to do a quadratic thing\nas compared to a linear thing.</text><text start=\"466.21\" dur=\"1.72\">I need to know, can I do better?</text><text start=\"467.93\" dur=\"1.74\"></text></transcript>\n", "hX1aUXnDwgA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.04\"></text><text start=\"0.04\" dur=\"3.02\">PROFESSOR: We&amp;#39;ve been looking at\nthe idea of exhaustive search.</text><text start=\"3.06\" dur=\"2.6\">And we just saw, when we want to do\nthis on things that don&amp;#39;t have a</text><text start=\"5.66\" dur=\"3.24\">finite number of choices, real value\nto floating point numbers, for</text><text start=\"8.9\" dur=\"2.51\">example, we&amp;#39;ve got a problem.</text><text start=\"11.41\" dur=\"2.71\">We need to make the step size\nsmall in terms of how many</text><text start=\"14.12\" dur=\"1.07\">different things we sample.</text><text start=\"15.19\" dur=\"2.96\">But as we keep making it smaller, it&amp;#39;s\ngoing to make the search take longer</text><text start=\"18.15\" dur=\"0.795\">and longer.</text><text start=\"18.945\" dur=\"1.775\">Because if we&amp;#39;re going to do it, we&amp;#39;re\ngoing to put a lot of effort into</text><text start=\"20.72\" dur=\"1.16\">trying to find the right answer.</text><text start=\"21.88\" dur=\"5.32\">So we&amp;#39;d really like to have a way of\nhaving things still be very efficient,</text><text start=\"27.2\" dur=\"1.89\">yet, find the answer we want.</text><text start=\"29.09\" dur=\"2.38\">And it turns out, for a lot of problems,\nwe can do that using a</text><text start=\"31.47\" dur=\"3.16\">wonderful idea called\nbisection search.</text><text start=\"34.63\" dur=\"0.68\">So what do we know?</text><text start=\"35.31\" dur=\"2.02\">Let&amp;#39;s go back to the idea of trying\nto find the square root.</text><text start=\"37.33\" dur=\"3.54\">We know that the square root of x\nlies somewhere between 0 and x.</text><text start=\"40.87\" dur=\"3.95\">We&amp;#39;re assuming x is positive just to\nmake life a little easier for us.</text><text start=\"44.82\" dur=\"2.03\">That&amp;#39;s a mathematical fact.</text><text start=\"46.85\" dur=\"3.09\">Now, what we did was we said\nlet&amp;#39;s start with 0.</text><text start=\"49.94\" dur=\"1.1\">Then, 0 plus a little bit.</text><text start=\"51.04\" dur=\"4\">Then, 0 plus 2 times a little bit, and\nthen 0 times 3 times a little bit,</text><text start=\"55.04\" dur=\"3.42\">trying all of those examples, until we\ngot to something that was close enough</text><text start=\"58.46\" dur=\"1.96\">to the answer we wanted.</text><text start=\"60.42\" dur=\"1.42\">That&amp;#39;s exhaustive.</text><text start=\"61.84\" dur=\"3.63\">Rather than doing that, suppose instead\nwe say, look, we know that the</text><text start=\"65.47\" dur=\"2.19\">square root of x is somewhere\nbetween 0 and x.</text><text start=\"67.66\" dur=\"3.56\">So let&amp;#39;s just pick a guess\nright here in the middle.</text><text start=\"71.22\" dur=\"1.24\">Let&amp;#39;s call that g.</text><text start=\"72.46\" dur=\"3.955\">Let&amp;#39;s just pick the midpoint\nbetween 0 and x and try it.</text><text start=\"76.415\" dur=\"4.405\">Now, if we&amp;#39;re lucky, the answer is\nclose enough and then we&amp;#39;re done.</text><text start=\"80.82\" dur=\"1.39\">That&amp;#39;s unlikely.</text><text start=\"82.21\" dur=\"3.75\">But even if that is not the case,\nwe have a good situation.</text><text start=\"85.96\" dur=\"3.95\">Even if we&amp;#39;re not close enough, we\ncan now ask was that guess g</text><text start=\"89.91\" dur=\"2.6\">too big or too small?</text><text start=\"92.51\" dur=\"6.11\">Well, if g^2 is bigger than x, then\nwe know that it&amp;#39;s too big.</text><text start=\"98.62\" dur=\"5.49\">We know that the square root has to\nlie somewhere between 0 and g.</text><text start=\"104.11\" dur=\"6.33\">And that says we can now instantly\njust focus on this portion.</text><text start=\"110.44\" dur=\"2.505\">Doing that, we can, again, take\nthe midpoint of that.</text><text start=\"112.945\" dur=\"1.535\">Let&amp;#39;s call it another version of g.</text><text start=\"114.48\" dur=\"0.9\">A new g.</text><text start=\"115.38\" dur=\"2.85\">And again, we can say,\nis that close enough?</text><text start=\"118.23\" dur=\"2.92\">If not, is it too big or too small?</text><text start=\"121.15\" dur=\"3.94\">For example, in this case let&amp;#39;s assume\nthat g^2 is less than x.</text><text start=\"125.09\" dur=\"3.13\">That says g is too small,\nand what does that say?</text><text start=\"128.22\" dur=\"6.435\">It says, we know that the actual value\nhas to lie somewhere between my new g</text><text start=\"134.655\" dur=\"1.955\">and the previous g that I guessed.</text><text start=\"136.61\" dur=\"4.26\">And again, we can pick the\nmidpoint and guess again.</text><text start=\"140.87\" dur=\"3.33\">If this works, and it does,\nthis is really cool.</text><text start=\"144.2\" dur=\"6.79\">Because it says, at each stage of this\nbisection search I&amp;#39;m cutting in half</text><text start=\"150.99\" dur=\"2.49\">the size of the range of values\nI have to look at.</text><text start=\"153.48\" dur=\"2.1\">We&amp;#39;re bisecting them, which\nis why it&amp;#39;s called that.</text><text start=\"155.58\" dur=\"4.08\">At each stage we reduce the range of\nvalues that we have to search by half.</text><text start=\"159.66\" dur=\"1.59\">And that is going to\nbe really powerful.</text><text start=\"161.25\" dur=\"2.77\">Rather than just at each stage throwing\naway a little bit, we&amp;#39;re</text><text start=\"164.02\" dur=\"4.24\">cutting down the problem, a big\nportion, each time through.</text><text start=\"168.26\" dur=\"2.575\">So can we capture that idea?</text><text start=\"170.835\" dur=\"3.975\">The answer is, sure, and it&amp;#39;s\nnot that hard to do.</text><text start=\"174.81\" dur=\"1.5\">Again, there&amp;#39;s some code.</text><text start=\"176.31\" dur=\"3.7\">It looks a little bit daunting, but it&amp;#39;s\nreally not as bad as you think.</text><text start=\"180.01\" dur=\"1.4\">What does it say?</text><text start=\"181.41\" dur=\"2.54\">It says, I&amp;#39;m going to have some value\nof x I&amp;#39;m going to start with.</text><text start=\"183.95\" dur=\"2.74\">OK, I&amp;#39;m going to pick an epsilon which\nis going to tell me how close I am,</text><text start=\"186.69\" dur=\"3.23\">and I&amp;#39;m going to keep track of how\nmany guesses I did as well.</text><text start=\"189.92\" dur=\"4.26\">I&amp;#39;m going to set up, initially, a low\nand high value, which are to start</text><text start=\"194.18\" dur=\"1.84\">with 0 and the value of x.</text><text start=\"196.02\" dur=\"4.98\">That&amp;#39;s my range where which I want to\nbe trying to do the computation.</text><text start=\"201\" dur=\"6.09\">My answer is initially going to be the\nmidpoint halfway between low and high.</text><text start=\"207.09\" dur=\"0.98\">And then, what do I do?</text><text start=\"208.07\" dur=\"4.6\">I run through one of these little loops\nwhere, again, I basically say,</text><text start=\"212.67\" dur=\"3.05\">am I close enough?</text><text start=\"215.72\" dur=\"5.72\">If this is true, then\nI&amp;#39;m too far apart.</text><text start=\"221.44\" dur=\"1.89\">I&amp;#39;m not close enough.</text><text start=\"223.33\" dur=\"3.31\">And in that case, well, I&amp;#39;ll print out\nsome information that tells me where I</text><text start=\"226.64\" dur=\"0.66\">currently am.</text><text start=\"227.3\" dur=\"2.8\">I&amp;#39;ll change the number of guesses and\nI&amp;#39;m about to make a new guess.</text><text start=\"230.1\" dur=\"2.01\">And if I&amp;#39;m not close enough,\nwhat does it say to do?</text><text start=\"232.11\" dur=\"5.52\">It says, if my current answer squared is\nless than x, I&amp;#39;m too small, and I&amp;#39;m</text><text start=\"237.63\" dur=\"3.7\">going to change the lower\nend to be that guess.</text><text start=\"241.33\" dur=\"2.2\">I&amp;#39;m moving up the lower end.</text><text start=\"243.53\" dur=\"4.39\">On the other hand, if answered squared\nis bigger than x, then I&amp;#39;m too high</text><text start=\"247.92\" dur=\"7.28\">and I&amp;#39;m going to reduce the\nhigh down to the answer.</text><text start=\"255.2\" dur=\"1.44\">And I&amp;#39;m just going to keep doing that.</text><text start=\"256.64\" dur=\"4.03\">If I keep doing that I&amp;#39;m going to keep\nchunking this thing in half, and</text><text start=\"260.67\" dur=\"3.21\">having done either of those two\npieces I then change my</text><text start=\"263.88\" dur=\"2.45\">answer to gain the midpoint.</text><text start=\"266.33\" dur=\"2.06\">And I do this one more time.</text><text start=\"268.39\" dur=\"3.68\">So I&amp;#39;ll just keep cycling through this,\ncutting in half each time, the</text><text start=\"272.07\" dur=\"3.35\">size of the problem until I get to\nsomething that&amp;#39;s close enough.</text><text start=\"275.42\" dur=\"1.51\">We hope.</text><text start=\"276.93\" dur=\"2.86\">OK, let&amp;#39;s see what happens\nif we do it.</text><text start=\"279.79\" dur=\"4.25\">Here&amp;#39;s some code in my IDLE\nsystem that has it.</text><text start=\"284.04\" dur=\"1.45\">It has exactly that.</text><text start=\"285.49\" dur=\"4.77\">Let&amp;#39;s do this, basically, let&amp;#39;s start\nwith something simple which we said</text><text start=\"290.26\" dur=\"2.07\">was going to be 25.</text><text start=\"292.33\" dur=\"4.54\">And let&amp;#39;s see what happens\nif we evaluate that.</text><text start=\"296.87\" dur=\"1.27\">Oh, look what happens.</text><text start=\"298.14\" dur=\"2.99\">I start off, and let&amp;#39;s look at that,\nI start off with a range</text><text start=\"301.13\" dur=\"1.74\">between 0 and 25.</text><text start=\"302.87\" dur=\"2.29\">And the answers is the midpoint.</text><text start=\"305.16\" dur=\"2.6\">I then, cut down the high end.</text><text start=\"307.76\" dur=\"2.31\">I then, cut down the high end again.</text><text start=\"310.07\" dur=\"1.98\">I then, cut down the low end.</text><text start=\"312.05\" dur=\"1.35\">I then, cut down the low end.</text><text start=\"313.4\" dur=\"2.8\">And you can see at each stage\nit&amp;#39;s reducing the range.</text><text start=\"316.2\" dur=\"4.58\">And after only 13 guesses I get a pretty\ngood guess for what the square</text><text start=\"320.78\" dur=\"1.34\">root of 25 is.</text><text start=\"322.12\" dur=\"0.605\">It&amp;#39;s not exact.</text><text start=\"322.725\" dur=\"3.085\">I happen to know it&amp;#39;s 5, but in\nonly 13 guesses I got it.</text><text start=\"325.81\" dur=\"2.82\">Remember, last time we did 50,000\nguesses to get to something that</text><text start=\"328.63\" dur=\"1.48\">wasn&amp;#39;t, in fact, much better.</text><text start=\"330.11\" dur=\"2.72\">In fact, it wasn&amp;#39;t even\nas good as this guess.</text><text start=\"332.83\" dur=\"3.5\">So notice how it&amp;#39;s cutting down\nthe problem at each stage.</text><text start=\"336.33\" dur=\"3.34\">All right, let&amp;#39;s go try this other\nversion of this, right?</text><text start=\"339.67\" dur=\"1.77\">12345.</text><text start=\"341.44\" dur=\"4.445\">Let&amp;#39;s see what happens if we find, using\nby section first, the square</text><text start=\"345.885\" dur=\"2.135\">root of that.</text><text start=\"348.02\" dur=\"1.52\">We see it cranking along.</text><text start=\"349.54\" dur=\"6.53\">Wow, in 26 steps, it got to something\nthat took a million steps the last</text><text start=\"356.07\" dur=\"0.645\">time around.</text><text start=\"356.715\" dur=\"3.241\">In 26 steps it gets to a pretty\ngood approximation.</text><text start=\"359.956\" dur=\"3.154\">Let&amp;#39;s try something even bigger.</text><text start=\"363.11\" dur=\"3.31\">Let&amp;#39;s see what happens\nif we do that one.</text><text start=\"366.42\" dur=\"3.18\">All right.</text><text start=\"369.6\" dur=\"2.28\">Again, you can see if you look\nat these numbers how quickly</text><text start=\"371.88\" dur=\"1.05\">it&amp;#39;s zeroing in.</text><text start=\"372.93\" dur=\"5.09\">In only 36 steps, it got to the square\nroot of a pretty big number.</text><text start=\"378.02\" dur=\"2.58\">So in fact, this does it really well.</text><text start=\"380.6\" dur=\"2.59\">What can we observe out of this?</text><text start=\"383.19\" dur=\"1.37\">Well, here are some things\nthat we see.</text><text start=\"384.56\" dur=\"2.69\">First of all, bisection search\nradically reduces</text><text start=\"387.25\" dur=\"1.44\">the computation time.</text><text start=\"388.69\" dur=\"3\">And this is part of that original\nmessage that it&amp;#39;s not just having a</text><text start=\"391.69\" dur=\"0.76\">fast computer.</text><text start=\"392.45\" dur=\"3.23\">It&amp;#39;s being smart about how we think\nabout solving the problem.</text><text start=\"395.68\" dur=\"2.79\">And in this case, being smart about how\nwe generate the guess is going to</text><text start=\"398.47\" dur=\"1.78\">be really important.</text><text start=\"400.25\" dur=\"2.57\">So when does this idea of\nbisection search work?</text><text start=\"402.82\" dur=\"2.25\">Well, it should work well on\nproblems where there&amp;#39;s a</text><text start=\"405.07\" dur=\"1.8\">sort of ordering property.</text><text start=\"406.87\" dur=\"3.27\">Meaning, that the value of the\nfunction being solved varies</text><text start=\"410.14\" dur=\"2.37\">monotonically with the input value.</text><text start=\"412.51\" dur=\"3.38\">Another way of saying it is here the\nvalue I&amp;#39;m looking for is g**2.</text><text start=\"415.89\" dur=\"1.94\">Then, it grows as g grows.</text><text start=\"417.83\" dur=\"3.72\">And that says that there&amp;#39;s this nice\nordering of the solutions or the</text><text start=\"421.55\" dur=\"3.64\">potential solutions, and so picking\na midpoint gives me a good way of</text><text start=\"425.19\" dur=\"2.84\">cutting the problem in\nhalf at each stage.</text><text start=\"428.03\" dur=\"2.23\">We&amp;#39;re going to come back to this\nidea of bisection search</text><text start=\"430.26\" dur=\"0.9\">throughout the term.</text><text start=\"431.16\" dur=\"3.79\">It&amp;#39;s a really powerful tool, but you\ncan already see how dramatically it</text><text start=\"434.95\" dur=\"2.02\">reduces the computational cost.</text><text start=\"436.97\" dur=\"1.25\"></text></transcript>\n", "oGvdcAgHYxA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.44\"></text><text start=\"0.44\" dur=\"3.52\">JOHN GUTTAG: At the end of the previous\nsegment, I promised that in</text><text start=\"3.96\" dur=\"4.3\">this segment we would address the\nquestion of how much is enough.</text><text start=\"8.26\" dur=\"3.62\">Now, I know that&amp;#39;s a deep philosophical\nquestion, and I hope</text><text start=\"11.88\" dur=\"4.21\">you&amp;#39;re not going to be disappointed when\nI tell you that&amp;#39;s really not what</text><text start=\"16.09\" dur=\"1.73\">I want to talk about.</text><text start=\"17.82\" dur=\"3.63\">Instead, I want to talk about\na much simpler question.</text><text start=\"21.45\" dur=\"3.64\">How many samples do we need to look\nat in order to have a justified</text><text start=\"25.09\" dur=\"5.77\">confidence that something that is true\nabout the samples is also true about</text><text start=\"30.86\" dur=\"4.53\">the population from which\nthe samples were drawn?</text><text start=\"35.39\" dur=\"3.75\">This is always an important question\nwhen we look at any statistical</text><text start=\"39.14\" dur=\"5.21\">measure because, as we&amp;#39;ve seen before,\nthe samples might or might not be</text><text start=\"44.35\" dur=\"2.92\">representative of the\nentire population.</text><text start=\"47.27\" dur=\"4.88\">The number of samples we need will\ndepend upon the underlying variance in</text><text start=\"52.15\" dur=\"3.47\">the distribution from which we\nare drawing the samples.</text><text start=\"55.62\" dur=\"3.52\">Now, of course, unfortunately, we\ndon&amp;#39;t get to see the underlying</text><text start=\"59.14\" dur=\"1.04\">distribution.</text><text start=\"60.18\" dur=\"2.41\">We only get to see the samples.</text><text start=\"62.59\" dur=\"3.86\">So we have to turn this into a\nquestion about the samples.</text><text start=\"66.45\" dur=\"5.33\">So let&amp;#39;s look at the variance that we\ncan measure by looking at the samples.</text><text start=\"71.78\" dur=\"3.64\">Essentially, what we do is\nwe run multiple trials</text><text start=\"75.42\" dur=\"2.26\">getting different outcomes.</text><text start=\"77.68\" dur=\"4.64\">And then we look at the variance in\nthe outcomes of those trials.</text><text start=\"82.32\" dur=\"5.14\">That&amp;#39;s the reason that when we started\nlooking at these simulations we always</text><text start=\"87.46\" dur=\"4.93\">ran multiple trials, rather than say,\nin the case of coin flipping, just</text><text start=\"92.39\" dur=\"1.6\">flip more coins.</text><text start=\"93.99\" dur=\"4.15\">Actually, we did just flip more coins,\nbut that really wasn&amp;#39;t the right thing</text><text start=\"98.14\" dur=\"1.67\">to do when we did it.</text><text start=\"99.81\" dur=\"0.37\">All right.</text><text start=\"100.18\" dur=\"4.84\">Now, let&amp;#39;s look at how we can formalize\nthis notion of variance in</text><text start=\"105.02\" dur=\"1.32\">the outcomes.</text><text start=\"106.34\" dur=\"3.06\">We do that using a notion\nyou&amp;#39;ve all seen before.</text><text start=\"109.4\" dur=\"3.59\">Anyone who&amp;#39;s taken an exam has been\ntold, here is the average, here is the</text><text start=\"112.99\" dur=\"1.695\">standard deviation.</text><text start=\"114.685\" dur=\"4.085\">And effectively, what the standard\ndeviation is telling us is how many</text><text start=\"118.77\" dur=\"1.96\">values are close to the mean.</text><text start=\"120.73\" dur=\"4.81\">If many values are close to the mean,\nthen the standard deviation is small.</text><text start=\"125.54\" dur=\"4.469\">If the values are far from the mean, the\nstandard deviation will be large.</text><text start=\"130.009\" dur=\"4.111\">Looking at this a bit more carefully, we\ncan define the standard deviation,</text><text start=\"134.12\" dur=\"5.43\">typically written as sigma, of some set\nof results, written in this case</text><text start=\"139.55\" dur=\"7.23\">as big X, as the square root of 1 over\nthe cardinality of X-- that&amp;#39;s the</text><text start=\"146.78\" dur=\"4.39\">number of samples we&amp;#39;ve drawn\nor the number of trials--</text><text start=\"151.17\" dur=\"7.95\">multiplied by the summation over all\nthe little x&amp;#39;s in the big X of (x -</text><text start=\"159.12\" dur=\"5.81\">mu)^2 , where mu is equal to the mean.</text><text start=\"164.93\" dur=\"2.37\">So if you think of it,\nthis make sense.</text><text start=\"167.3\" dur=\"4.96\">We take the differences between the\nsamples in the mean, square them.</text><text start=\"172.26\" dur=\"2.86\">And that means that we don&amp;#39;t have to\ncare whether the differences are</text><text start=\"175.12\" dur=\"1.57\">negative or positive.</text><text start=\"176.69\" dur=\"4.51\">And then divide them by the number of\ntrials, and then take the square root</text><text start=\"181.2\" dur=\"1.62\">of the result.</text><text start=\"182.82\" dur=\"4.37\">For those of you who prefer code\nto formulas, here&amp;#39;s a simple</text><text start=\"187.19\" dur=\"2.29\">implementation of standard deviation.</text><text start=\"189.48\" dur=\"5.53\">We take the mean by summing X, divide\nit by the float of the length of X,</text><text start=\"195.01\" dur=\"5.4\">and then we simply iterate through\nX summing up the squares, the</text><text start=\"200.41\" dur=\"5.37\">differences, and then dividing it by the\nlength and taking the square root.</text><text start=\"205.78\" dur=\"2.36\">Exactly what the formula said.</text><text start=\"208.14\" dur=\"3.62\">We can use the notion of standard\ndeviation to think about the</text><text start=\"211.76\" dur=\"4.14\">relationship between the number of\nsamples we&amp;#39;ve looked at and how much</text><text start=\"215.9\" dur=\"3.45\">confidence we should have in\nthe answer we&amp;#39;ve computed.</text><text start=\"219.35\" dur=\"3.54\">Let&amp;#39;s now look at some\ncode that does that.</text><text start=\"222.89\" dur=\"4.92\">And we&amp;#39;ll look at it only very briefly\nbecause it&amp;#39;s so similar to code we&amp;#39;ve</text><text start=\"227.81\" dur=\"1.41\">looked at before.</text><text start=\"229.22\" dur=\"2.83\">Once again, I have something\ncalled flip-flop.</text><text start=\"232.05\" dur=\"0.83\">Whoop!</text><text start=\"232.88\" dur=\"1.87\">I always say flip-flop.</text><text start=\"234.75\" dur=\"4.1\">I should say, once again we have\nsomething called flipPlot .</text><text start=\"238.85\" dur=\"4.48\">As before, it will take a minimum\nand a maximum exponent.</text><text start=\"243.33\" dur=\"3.48\">But this time, since we want to look\nat the standard deviation over</text><text start=\"246.81\" dur=\"4.33\">multiple trials, we also pass\nin a number of trials.</text><text start=\"251.14\" dur=\"3.29\">And just to emphasize the fact that\nwe&amp;#39;re doing multiple trials, I&amp;#39;ve</text><text start=\"254.43\" dur=\"3.98\">factored a single trial out into\na separate function of</text><text start=\"258.41\" dur=\"1.7\">the number of flips.</text><text start=\"260.11\" dur=\"3.38\">Other than that, there&amp;#39;s really\nnothing very interesting to</text><text start=\"263.49\" dur=\"1.68\">look at in this code.</text><text start=\"265.17\" dur=\"5.15\">It looks almost exactly the same as\nthe code we&amp;#39;ve looked at before.</text><text start=\"270.32\" dur=\"2.73\">So let&amp;#39;s run it and see what we get.</text><text start=\"273.05\" dur=\"4.09\">Once again, we&amp;#39;ll vary the\nexponents from 4 to 20.</text><text start=\"277.14\" dur=\"4.83\">And then we&amp;#39;ll also do 20 trials.</text><text start=\"281.97\" dur=\"5.59\">OK, let&amp;#39;s go over to the PowerPoint\nhere now and look at the results.</text><text start=\"287.56\" dur=\"5.5\">First of all, we&amp;#39;re plotting the mean of\nthe number of heads over the tails,</text><text start=\"293.06\" dur=\"4.04\">the head/tails ratio,\nfor the 20 trials.</text><text start=\"297.1\" dur=\"4.49\">As before, we can see we have some\nvariations with a small number of</text><text start=\"301.59\" dur=\"5.24\">flips, and then it stabilizes\nright around 1.</text><text start=\"306.83\" dur=\"3.14\">Now we&amp;#39;re going to see something that we\ndidn&amp;#39;t look at before, the standard</text><text start=\"309.97\" dur=\"1.27\">deviations.</text><text start=\"311.24\" dur=\"4.49\">Notice here as we increase the number\nof flips, the standard deviations</text><text start=\"315.73\" dur=\"1.65\">drops dramatically.</text><text start=\"317.38\" dur=\"2.36\">In fact, it&amp;#39;s dropping linearly.</text><text start=\"319.74\" dur=\"4.12\">Notice that both the x and the\ny-axis are logarithmic.</text><text start=\"323.86\" dur=\"4.56\">So the fact that this is almost a\nstraight line suggests that in fact</text><text start=\"328.42\" dur=\"1.74\">they&amp;#39;re dropping linearly.</text><text start=\"330.16\" dur=\"4.42\">And by the time we get to 10 to the 6th\nflips, the standard deviation of</text><text start=\"334.58\" dur=\"4.19\">the 20 trials is about 10 ^ -3.</text><text start=\"338.77\" dur=\"4.89\">Since we know that the ratio is around\n1, we see that standard deviation is</text><text start=\"343.66\" dur=\"2.67\">considerably smaller than the mean.</text><text start=\"346.33\" dur=\"5.07\">That gives us every reason to believe\nthat the result we have is a good one.</text><text start=\"351.4\" dur=\"3.65\">Now let&amp;#39;s look at the main differences\nwe&amp;#39;ve looked at before.</text><text start=\"355.05\" dur=\"3.96\">But again, we&amp;#39;re looking at\nthe mean of the 20 trials.</text><text start=\"359.01\" dur=\"3.8\">As expected, the absolute difference\nbetween the numbers of heads and tails</text><text start=\"362.81\" dur=\"1.97\">grows with the number of flips.</text><text start=\"364.78\" dur=\"4.69\">However, since we&amp;#39;re averaging the\nresults over 20 trials, this is</text><text start=\"369.47\" dur=\"3.95\">considerably smoother than the plot\nwe looked at before when we</text><text start=\"373.42\" dur=\"1.89\">only did one trial.</text><text start=\"375.31\" dur=\"4.64\">Now let&amp;#39;s look at the standard deviation\nof the absolute difference.</text><text start=\"379.95\" dur=\"4.15\">Well, this might seem a little puzzling,\nbecause it looks like, as we</text><text start=\"384.1\" dur=\"4.9\">increase the number of flips, the\nstandard deviation of the absolute</text><text start=\"389\" dur=\"1.33\">difference is increasing.</text><text start=\"390.33\" dur=\"3.25\">Well, it not only looks\nlike it is, but it is.</text><text start=\"393.58\" dur=\"3.65\">Does this mean that as the number flips\nincreases, we should have less</text><text start=\"397.23\" dur=\"4.15\">rather than more confidence in the\nestimate of the expected value of the</text><text start=\"401.38\" dur=\"2.32\">difference between heads and tails?</text><text start=\"403.7\" dur=\"1.59\">No, it doesn&amp;#39;t.</text><text start=\"405.29\" dur=\"3.93\">What&amp;#39;s going on is the standard\ndeviation should always be viewed in</text><text start=\"409.22\" dur=\"1.82\">the context of the mean.</text><text start=\"411.04\" dur=\"5.12\">After all, if the mean were a billion\nand the standard deviation 100, we</text><text start=\"416.16\" dur=\"2.62\">would view the dispersion\nof the data as small.</text><text start=\"418.78\" dur=\"3.24\">On the other hand, if the mean were 100\nand the standard deviation were</text><text start=\"422.02\" dur=\"3.14\">100, we would view the dispersion\nas enormous.</text><text start=\"425.16\" dur=\"5.36\">So you&amp;#39;ll recall that as we increase\nthe number of flips, the number of</text><text start=\"430.52\" dur=\"2.52\">absolute difference got much larger.</text><text start=\"433.04\" dur=\"2.58\">Again, it&amp;#39;s a logarithmic axis here.</text><text start=\"435.62\" dur=\"3.38\">And so it&amp;#39;s not at all surprising\nthat the standard</text><text start=\"439\" dur=\"2.31\">deviation should get larger.</text><text start=\"441.31\" dur=\"5.43\">The lesson here is that we really should\nnot be using standard deviation</text><text start=\"446.74\" dur=\"4.32\">to compare different tests where\nthe means are very different.</text><text start=\"451.06\" dur=\"3.63\">There&amp;#39;s another statistical measure we\nuse for that, and we&amp;#39;ll cover that</text><text start=\"454.69\" dur=\"1.48\">measure in the next segment.</text><text start=\"456.17\" dur=\"1.25\"></text></transcript>\n", "YdT6gL3Cpss": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.335\"></text><text start=\"0.335\" dur=\"3.755\">PROFESSOR: One of our motivations for\ndeveloping a mathematical model of the</text><text start=\"4.09\" dur=\"3.11\">phenomenon we&amp;#39;re studying is\nso we can make predictions.</text><text start=\"7.2\" dur=\"2.49\">Often they&amp;#39;re experiments that\nare either very difficult</text><text start=\"9.69\" dur=\"2.79\">to do or even dangerous.</text><text start=\"12.48\" dur=\"3.8\">Suppose you wanted to know what will\nhappen if a nuclear reactor lost all</text><text start=\"16.28\" dur=\"0.785\">of its coolant.</text><text start=\"17.065\" dur=\"3.925\">Well that&amp;#39;s not an experiment we really\nwant to run, so instead we want</text><text start=\"20.99\" dur=\"3.42\">to develop models that will let us make\npredictions of what will happen</text><text start=\"24.41\" dur=\"4.08\">so that we can do the appropriate\nengineering.</text><text start=\"28.49\" dur=\"3.83\">Suppose someone came to you, as an\nexpert, now, in the trajectory of</text><text start=\"32.32\" dur=\"5.31\">arrows, and said, how thick a shield\nwould I need in order to protect</text><text start=\"37.63\" dur=\"2.56\">myself from an archery attack?</text><text start=\"40.19\" dur=\"3.71\">Let&amp;#39;s see if we can use the measurements\nthat we took in the</text><text start=\"43.9\" dur=\"4.03\">previous segment and help\nanswer that question.</text><text start=\"47.93\" dur=\"4.59\">So how would we use the model in order\nto make a prediction of the thickness</text><text start=\"52.52\" dur=\"0.83\">of the shield?</text><text start=\"53.35\" dur=\"4.8\">And it&amp;#39;s nice to use the model because\nthere are times when experiments are</text><text start=\"58.15\" dur=\"2.52\">sort of impractical or inadvisable.</text><text start=\"60.67\" dur=\"3.59\">So standing up with a thin shield and\nhaving somebody shoot arrows at you</text><text start=\"64.26\" dur=\"4.76\">might be a very bad idea because the\nshield might not do what it should.</text><text start=\"69.02\" dur=\"3.63\">And somebody says, aha, it needs to be\nthicker, but it might be too late for</text><text start=\"72.65\" dur=\"2.63\">the participants in the experiment.</text><text start=\"75.28\" dur=\"4.56\">So what we want to do is to figure out\nhow to use our model, now, that we</text><text start=\"79.84\" dur=\"4.47\">have for the trajectory of an arrow,\nand see if we can deduce the</text><text start=\"84.31\" dur=\"2.09\">information we need.</text><text start=\"86.4\" dur=\"3.15\">So we want to know the speed of the\narrow as it reaches the target because</text><text start=\"89.55\" dur=\"2.78\">a combination of the speed of the arrow\nand the mass should tell us a</text><text start=\"92.33\" dur=\"4.11\">little bit about how thick the\nshield really needs to be.</text><text start=\"96.44\" dur=\"2.51\">Well, sadly, we didn&amp;#39;t measure--</text><text start=\"98.95\" dur=\"0.69\">did we measure it?</text><text start=\"99.64\" dur=\"2.78\">So no, unfortunately we didn&amp;#39;t\nmeasure the speed.</text><text start=\"102.42\" dur=\"3.14\">But can we deduce it from the model?</text><text start=\"105.56\" dur=\"4.68\">So what we want to do is, using the data\nthat we got from curve fitting,</text><text start=\"110.24\" dur=\"4.04\">can we deduce the speed is the arrow\nas it reaches the target?</text><text start=\"114.28\" dur=\"7.89\">So I modified the code a little bit to\nprint out the values for a, b, and c</text><text start=\"122.17\" dur=\"2.81\">for the parabolic fit.</text><text start=\"124.98\" dur=\"3.9\">And these are the values that polyfit\ngave us back that describe the</text><text start=\"128.88\" dur=\"2.37\">parabola that match the--</text><text start=\"131.25\" dur=\"2.19\">was able to predict the\ntrajectory so well.</text><text start=\"133.44\" dur=\"3.33\">And so I&amp;#39;ve written that out as an\nequation here that gives us the height</text><text start=\"136.77\" dur=\"3.22\">above the launch point as a\nfunction of the distance.</text><text start=\"139.99\" dur=\"3.8\">So this is the distance, x, and\nthis is the height, y, here.</text><text start=\"143.79\" dur=\"2.43\">OK, so can we deduce the\nspeed of the arrow?</text><text start=\"146.22\" dur=\"1.89\">So that&amp;#39;s our task here.</text><text start=\"148.11\" dur=\"4.39\">So the first thing I&amp;#39;m going to do is to\ndetermine the highest point in the</text><text start=\"152.5\" dur=\"0.58\">trajectory.</text><text start=\"153.08\" dur=\"3.34\">So I want to determine\nthe peak value of y.</text><text start=\"156.42\" dur=\"4.87\">And what I notice is that the peak\nvalue of y sort of happens midway</text><text start=\"161.29\" dur=\"5.49\">through the trajectory from the\nbow down to the target.</text><text start=\"166.78\" dur=\"5.26\">And so this guy is at 1080 inches.</text><text start=\"172.04\" dur=\"3.9\">And so that means that the midpoint\nhere, ypeak, so this is going to be</text><text start=\"175.94\" dur=\"2.01\">ypeak here.</text><text start=\"177.95\" dur=\"6.53\">The midpoint occurs at distance equal\nto 504 inches, which is exactly</text><text start=\"184.48\" dur=\"3.5\">halfway between the bow\nand the target.</text><text start=\"187.98\" dur=\"2.41\">So I can actually plug that in here.</text><text start=\"190.39\" dur=\"5.7\">So if I can go use my mathematical\nmodel now to compute ypeak, and</text><text start=\"196.09\" dur=\"5.98\">plugging in x equals 504, and doing\nthe arithmetic I&amp;#39;m going to end up</text><text start=\"202.07\" dur=\"6.42\">with ypeak being 21 inches,\nwhich is 0.53 meters.</text><text start=\"208.49\" dur=\"0.94\">OK.</text><text start=\"209.43\" dur=\"5.16\">So my next step is to figure out the\ntime it takes the arrow to fall from</text><text start=\"214.59\" dur=\"2.88\">its peak all the way\ndown to the target.</text><text start=\"217.47\" dur=\"5.14\">So as the arrow is falling here, as\nthe arrow is falling from its peak</text><text start=\"222.61\" dur=\"4.45\">down to the target, the thing I&amp;#39;ll\nobserve is that&amp;#39;s completely--</text><text start=\"227.06\" dur=\"3.39\">that the acceleration in that direction\nis happening completely</text><text start=\"230.45\" dur=\"2.9\">because of the force of\ngravity on the arrow.</text><text start=\"233.35\" dur=\"6.19\">And so time for arrow to fall\nfrom ypeak down to 0.</text><text start=\"239.54\" dur=\"5.14\">And so we know from sort of our\nNewtonian physics that distance equals</text><text start=\"244.68\" dur=\"3\">one half at squared.</text><text start=\"247.68\" dur=\"3.33\">And using that, I can\nsort of solve for t.</text><text start=\"251.01\" dur=\"3.78\">And that&amp;#39;s going to be the square\nroot of twice the distance--</text><text start=\"254.79\" dur=\"1.76\">so twice ypeak.</text><text start=\"256.55\" dur=\"2.87\">And the acceleration due\nto gravity is g.</text><text start=\"259.42\" dur=\"5.94\">And so if I go off and do that\ncomputation I discovered it t equals</text><text start=\"265.36\" dur=\"3.67\">0.326 seconds.</text><text start=\"269.03\" dur=\"4.35\">So that&amp;#39;s the amount of time it takes\nthe arrow to travel from here to here</text><text start=\"273.38\" dur=\"1.38\">in terms of time.</text><text start=\"274.76\" dur=\"4.74\">So this time is equal\nto 0.326 seconds.</text><text start=\"279.5\" dur=\"5.68\">And the distance I&amp;#39;m traveling is from\nhere to here, which is 504 inches from</text><text start=\"285.18\" dur=\"2.66\">the midpoint to the target.</text><text start=\"287.84\" dur=\"0.78\">So, let&amp;#39;s see.</text><text start=\"288.62\" dur=\"3.72\">So the speed now-- so now we can\njust quickly do the speed.</text><text start=\"292.34\" dur=\"0.335\">OK.</text><text start=\"292.675\" dur=\"6.975\">And so that&amp;#39;s 540 inches is the\ndistance in 0.326 seconds.</text><text start=\"299.65\" dur=\"7.36\">And so if I do a little arithmetic\nthat&amp;#39;s 138.2 feet per second.</text><text start=\"307.01\" dur=\"3.1\">Well, I&amp;#39;m a little nervous about the--</text><text start=\"310.11\" dur=\"2.85\">I can compute with lots of precision.</text><text start=\"312.96\" dur=\"3.22\">I can do the arithmetic to lots and lots\nof decimal places, not clear how</text><text start=\"316.18\" dur=\"2.97\">accurate that is given the errors\nin the measurements and stuff.</text><text start=\"319.15\" dur=\"4.93\">So maybe it would be safer to say it&amp;#39;s\nsomewhere around 135 feet per second.</text><text start=\"324.08\" dur=\"1.83\">And we&amp;#39;ll leave it at that.</text><text start=\"325.91\" dur=\"4.7\">So what we&amp;#39;ve done here is\nto show with a bunch of--</text><text start=\"330.61\" dur=\"5.14\">once we have a curve fitted model, we\ncan actually derive implications of</text><text start=\"335.75\" dur=\"2.55\">that model and help us\nwith some measure--</text><text start=\"338.3\" dur=\"3.22\">determine some measurements, predict\nsome measurements that we didn&amp;#39;t</text><text start=\"341.52\" dur=\"2.99\">actually need to go take.</text><text start=\"344.51\" dur=\"3.81\">This brings us to the end of our brief\nglimpse about how to use computation</text><text start=\"348.32\" dur=\"2.62\">to process and understand our data.</text><text start=\"350.94\" dur=\"3.14\">If data crunching is in your future,\nyou might want to learn much more</text><text start=\"354.08\" dur=\"1.06\">about statistics.</text><text start=\"355.14\" dur=\"3.99\">It&amp;#39;s the study of how to correctly\nprocess data and learn what</text><text start=\"359.13\" dur=\"1.85\">it has to tell us.</text><text start=\"360.98\" dur=\"3.45\">I encourage you to learn more about\nthe statistical tools that are</text><text start=\"364.43\" dur=\"1.25\">available in Pylab.</text><text start=\"365.68\" dur=\"0.938\"></text></transcript>\n", "wq8v7M3Szr0": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.11\"></text><text start=\"1.11\" dur=\"2.57\">We&amp;#39;ve now seen a lot of things\ndealing with functions.</text><text start=\"3.68\" dur=\"2.48\">They&amp;#39;re going to be a really\npowerful tool for us.</text><text start=\"6.16\" dur=\"1.84\">And let&amp;#39;s deal with\none last topic.</text><text start=\"8\" dur=\"2.01\">We&amp;#39;ll come back to it in more\ndetail later on, but it&amp;#39;s</text><text start=\"10.01\" dur=\"2.52\">useful to highlight now.</text><text start=\"12.53\" dur=\"3.25\">And that builds on the idea that\nif functions help capture</text><text start=\"15.78\" dur=\"2.57\">modularity, they help capture\ncomputations that are useful</text><text start=\"18.35\" dur=\"3.93\">in multiple places, this also\nsuggests that it can be useful</text><text start=\"22.28\" dur=\"3.28\">to group functions together\nthat share a common theme.</text><text start=\"25.56\" dur=\"3.78\">To capture them in something\nthat sort of builds them into</text><text start=\"29.34\" dur=\"3.43\">an element that has a lot\nof coherence to it.</text><text start=\"32.77\" dur=\"3.28\">And one way we can do that is to\nput functions dealing with</text><text start=\"36.05\" dur=\"4\">a common theme into a single\nPython file, a .py file.</text><text start=\"40.05\" dur=\"3.36\">And if we do that, then we can\nimport those functions, that</text><text start=\"43.41\" dur=\"3.62\">file, into computations using\nthe Import command.</text><text start=\"47.03\" dur=\"2.36\">And let me show you an\nexample of that.</text><text start=\"49.39\" dur=\"2.2\">Here&amp;#39;s some code that I could\nwrite that deals with some</text><text start=\"51.59\" dur=\"0.9\">simple geometry.</text><text start=\"52.49\" dur=\"1.83\">So I&amp;#39;ve got a value for pi.</text><text start=\"54.32\" dur=\"2.53\">I&amp;#39;ve got a way of computing\nthe area of a circle,</text><text start=\"56.85\" dur=\"1.7\">circumference of a circle.</text><text start=\"58.55\" dur=\"2.15\">I could do the same thing with\nsurfaces of spheres and</text><text start=\"60.7\" dur=\"0.79\">volumes of spheres.</text><text start=\"61.49\" dur=\"1.85\">These computations\nthat kind of mash</text><text start=\"63.34\" dur=\"1.46\">together with one another.</text><text start=\"64.8\" dur=\"1.47\">And imagine I saved\nthis away into a</text><text start=\"66.27\" dur=\"2.31\">file that I call circle.py.</text><text start=\"68.58\" dur=\"2.55\">And I&amp;#39;ve in fact got it\nloaded up ready to go.</text><text start=\"71.13\" dur=\"3.27\">What I&amp;#39;d like to do is to say,\nso how would I use this?</text><text start=\"74.4\" dur=\"3.46\">And the way I use it is that I\nsimply, whether in a Python</text><text start=\"77.86\" dur=\"4.13\">shell or in another file, say,\nlet me import things in.</text><text start=\"81.99\" dur=\"2.75\">So in particular, I&amp;#39;m going\nto go over here</text><text start=\"84.74\" dur=\"1.76\">and start up my Python.</text><text start=\"86.5\" dur=\"6.85\">And I am going to type\nin Import Circle.</text><text start=\"93.35\" dur=\"2.25\">And that has now brought in\nthe functions that I&amp;#39;ve</text><text start=\"95.6\" dur=\"1.17\">defined there.</text><text start=\"96.77\" dur=\"3.3\">So I can define pi to have a\nreally simple value, which I</text><text start=\"100.07\" dur=\"1.17\">know is not true.</text><text start=\"101.24\" dur=\"3.96\">And if I say what&amp;#39;s the value\nof pi, it prints out that.</text><text start=\"105.2\" dur=\"5.4\">But if I say, so what is the\nvalue of pi that is stored in</text><text start=\"110.6\" dur=\"1.81\">the circle file?</text><text start=\"112.41\" dur=\"1.21\">Aha!</text><text start=\"113.62\" dur=\"4.22\">And so this notation right here,\nthis dot notation, helps</text><text start=\"117.84\" dur=\"1.03\">me specify that.</text><text start=\"118.87\" dur=\"6.26\">The dot basically says from the\ncontext circle, import the</text><text start=\"125.13\" dur=\"1.75\">variable pi.</text><text start=\"126.88\" dur=\"4.42\">Or similarly, from the context\ncircle, import that variable</text><text start=\"131.3\" dur=\"2.91\">area, which is a function,\nand use it.</text><text start=\"134.21\" dur=\"5.085\">So I can, for example, say,\ngive me circle.area of, I</text><text start=\"139.295\" dur=\"2.235\">don&amp;#39;t know, three.</text><text start=\"141.53\" dur=\"4.55\">And it brings in from the circle\ncontext the definition</text><text start=\"146.08\" dur=\"3.21\">of area that I created when I\nactually stored it away inside</text><text start=\"149.29\" dur=\"1.97\">of that file.</text><text start=\"151.26\" dur=\"2.57\">So we&amp;#39;ll come back to the dot\nnotation, but it in essence</text><text start=\"153.83\" dur=\"4.19\">lets us create modules with\ncommonality to them and import</text><text start=\"158.02\" dur=\"3.56\">things from them in a way that\nlets us use them very nicely.</text><text start=\"161.58\" dur=\"3\">One way to do it is to simply\nsay Import from circle.</text><text start=\"164.58\" dur=\"2.43\">And every time I want to use\nsomething from that file, I</text><text start=\"167.01\" dur=\"4.18\">need to specify it using that\nkind of a definition.</text><text start=\"171.19\" dur=\"2.96\">There&amp;#39;s another way I can do\nit, which is to say from</text><text start=\"174.15\" dur=\"4.37\">circle, from that context,\njust import everything.</text><text start=\"178.52\" dur=\"1.48\">Let&amp;#39;s see what happens\nif I do that.</text><text start=\"180\" dur=\"2.47\">So I&amp;#39;m going to go back over\nhere and I&amp;#39;m going to say From</text><text start=\"182.47\" dur=\"3.81\">circle, Import everything.</text><text start=\"186.28\" dur=\"2.72\">I&amp;#39;m going to define pi\nagain to be something</text><text start=\"189\" dur=\"2\">simple, like 3.0.</text><text start=\"191\" dur=\"0.84\">Actually, I&amp;#39;ll make\nit even dumber.</text><text start=\"191.84\" dur=\"2.14\">Let&amp;#39;s say it&amp;#39;s 0.0.</text><text start=\"193.98\" dur=\"2.98\">And if I say, what&amp;#39;s\nthe value of pi?</text><text start=\"196.96\" dur=\"3.66\">Ah, now I&amp;#39;ve gotten it in\nterms of that version.</text><text start=\"200.62\" dur=\"5.75\">But if I say give me the area,\nit will get the area that was</text><text start=\"206.37\" dur=\"2.57\">created from circle.</text><text start=\"208.94\" dur=\"3.42\">If I say I want the value\nof pi from circle,</text><text start=\"212.36\" dur=\"1.59\">I can specify it.</text><text start=\"213.95\" dur=\"3.55\">So this version of Import\nbasically says bring into my</text><text start=\"217.5\" dur=\"2.35\">environment all the things\nfrom circle.</text><text start=\"219.85\" dur=\"3.93\">If there is no binding in my\nenvironment, I will look it up</text><text start=\"223.78\" dur=\"2.52\">from circle, but I don&amp;#39;t have to\nspecify it, which is why I</text><text start=\"226.3\" dur=\"1.67\">could just say area.</text><text start=\"227.97\" dur=\"3.01\">But I can also make changes in\nthis environment, overriding</text><text start=\"230.98\" dur=\"2.98\">what I saw in circle, such as\nthis one, where I defined pi</text><text start=\"233.96\" dur=\"4.21\">to have the particular value\nthat I said I wanted to have.</text><text start=\"238.17\" dur=\"6.14\">That tool basically gives us a\nway to bring modules captured</text><text start=\"244.31\" dur=\"1.89\">together into our computation.</text><text start=\"246.2\" dur=\"2.17\">And we&amp;#39;re going to come back to\nthat later on in the term.</text><text start=\"248.37\" dur=\"1.25\"></text></transcript>\n", "NnWd5_X3n5s": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"0.375\"></text><text start=\"0.375\" dur=\"2.41\">ERIC GRIMSON: We just showed\nyou a recursive algorithm.</text><text start=\"2.785\" dur=\"1.615\">You may be a little\nworried about it.</text><text start=\"4.4\" dur=\"3.45\">You may be going, OK, but how\ndoes it know which values of</text><text start=\"7.85\" dur=\"1.26\">the variables to use?</text><text start=\"9.11\" dur=\"1.45\">Because I&amp;#39;m not seeing\nany explicit</text><text start=\"10.56\" dur=\"1.59\">changes to those values.</text><text start=\"12.15\" dur=\"1.69\">How does it make sure\nit really stops?</text><text start=\"13.84\" dur=\"2.02\">Why doesn&amp;#39;t it just\nkeep unwinding?</text><text start=\"15.86\" dur=\"3.42\">Didn&amp;#39;t your high school geometry\nteacher never to use</text><text start=\"19.28\" dur=\"3.91\">definitions where you defined\na term in terms of itself.</text><text start=\"23.19\" dur=\"1.98\">Good news is not to worry.</text><text start=\"25.17\" dur=\"2.27\">And we&amp;#39;ve got a tool to help\nus understand that.</text><text start=\"27.44\" dur=\"3.83\">Let&amp;#39;s go back and simply look at\na simple call to recurMul,</text><text start=\"31.27\" dur=\"3.84\">recursive multiplication, using\nthat set of environments</text><text start=\"35.11\" dur=\"3.73\">to see how computation flows.</text><text start=\"38.84\" dur=\"3.72\">So here&amp;#39;s my code, I&amp;#39;ve just\ngot a copy of it here.</text><text start=\"42.56\" dur=\"3.97\">And in particular, if I evaluate\nthis, or load this if</text><text start=\"46.53\" dur=\"3.74\">you like, into a Python\nenvironment, a shell, we know</text><text start=\"50.27\" dur=\"0.82\">what&amp;#39;s going to happen.</text><text start=\"51.09\" dur=\"2.66\">Which is we&amp;#39;re going to create\na frame over here, in which</text><text start=\"53.75\" dur=\"4.2\">that name, recurMul, is bound\nto a procedure object.</text><text start=\"57.95\" dur=\"3.93\">And it&amp;#39;s got inside of it both\nthe parameter list and the</text><text start=\"61.88\" dur=\"3.04\">body, the set of things\nit&amp;#39;s supposed to do.</text><text start=\"64.92\" dur=\"2.39\">OK, let&amp;#39;s see what would\nhappen if we</text><text start=\"67.31\" dur=\"1.51\">actually called it.</text><text start=\"68.82\" dur=\"2.78\">So let&amp;#39;s call it.</text><text start=\"71.6\" dur=\"2.25\">Calling it says, I am going\nto evaluate this</text><text start=\"73.85\" dur=\"1.82\">expression down here.</text><text start=\"75.67\" dur=\"2.3\">And I&amp;#39;m going to first get\nthe value of recurMul.</text><text start=\"77.97\" dur=\"0.83\">I know what that is.</text><text start=\"78.8\" dur=\"1.6\">It&amp;#39;s given by that\npointer there.</text><text start=\"80.4\" dur=\"1.61\">It&amp;#39;s a procedure object.</text><text start=\"82.01\" dur=\"3.52\">And so I know that calling it\nsays I&amp;#39;m going to create a new</text><text start=\"85.53\" dur=\"1.33\">environment.</text><text start=\"86.86\" dur=\"3.4\">It&amp;#39;s going to inherit, or have\nas a parent, the same</text><text start=\"90.26\" dur=\"4.47\">environment that the procedure\nhas, the environment that was</text><text start=\"94.73\" dur=\"1.71\">in place when we defined\nthe procedure.</text><text start=\"96.44\" dur=\"2.18\">So it was going to point\nto that frame.</text><text start=\"98.62\" dur=\"2.73\">And inside of there, first I&amp;#39;m\ngoing to get the values of</text><text start=\"101.35\" dur=\"4.53\">these two expressions, and I&amp;#39;m\ngoing to then bind the</text><text start=\"105.88\" dur=\"3\">parameters of the procedure\nto those values.</text><text start=\"108.88\" dur=\"0.38\">All right.</text><text start=\"109.26\" dur=\"1.59\">I&amp;#39;m saying it in a long\nwinded way, but</text><text start=\"110.85\" dur=\"0.87\">you&amp;#39;ve seen this before.</text><text start=\"111.72\" dur=\"2.21\">We&amp;#39;ve now created a new\nenvironment in which a is</text><text start=\"113.93\" dur=\"2.28\">bound to 2 and b\nis bound to 3.</text><text start=\"116.21\" dur=\"1.99\">And relative to that environment\nwe&amp;#39;re going to</text><text start=\"118.2\" dur=\"3.01\">evaluate the body of\nthis procedure.</text><text start=\"121.21\" dur=\"1.17\">OK.</text><text start=\"122.38\" dur=\"1.28\">Let&amp;#39;s start evaluating\nthe body.</text><text start=\"123.66\" dur=\"3.84\">The body says is b equal to 1.</text><text start=\"127.5\" dur=\"0.53\">No it isn&amp;#39;t.</text><text start=\"128.03\" dur=\"0.479\">It&amp;#39;s 3.</text><text start=\"128.509\" dur=\"2.911\">So it&amp;#39;s going to go to\nthe else clause.</text><text start=\"131.42\" dur=\"3.48\">And the else clause says, I&amp;#39;m\ngoing to return a value.</text><text start=\"134.9\" dur=\"1.05\">Great.</text><text start=\"135.95\" dur=\"0.78\">I&amp;#39;m going to get a value back.</text><text start=\"136.73\" dur=\"2.47\">And it says the value is going\nto be the value of a.</text><text start=\"139.2\" dur=\"2.63\">Remember I&amp;#39;m doing it relative\nto this frame here so I know</text><text start=\"141.83\" dur=\"0.57\">the value of a.</text><text start=\"142.4\" dur=\"1.11\">It&amp;#39;s 2.</text><text start=\"143.51\" dur=\"5.07\">And I&amp;#39;m going to add to a the\nvalue of the recursive call,</text><text start=\"148.58\" dur=\"3.43\">another call to recurMul, with\ndifferent arguments.</text><text start=\"152.01\" dur=\"2.65\">Now think of this very\nstraightforwardly.</text><text start=\"154.66\" dur=\"0.79\">This is Python.</text><text start=\"155.45\" dur=\"1.35\">This is an interpreter.</text><text start=\"156.8\" dur=\"0.91\">That&amp;#39;s an expression.</text><text start=\"157.71\" dur=\"2.46\">It says to get the value of\nthat expression, what do I</text><text start=\"160.17\" dur=\"0.67\">need to do?</text><text start=\"160.84\" dur=\"3.79\">You need to get the value\nof recurMul, oh</text><text start=\"164.63\" dur=\"1.64\">that&amp;#39;s it up here.</text><text start=\"166.27\" dur=\"0.886\">OK.</text><text start=\"167.156\" dur=\"3.034\">Now, I need to get\nthe value of a.</text><text start=\"170.19\" dur=\"2.77\">And remember I&amp;#39;m doing it all\nwith respect to this, and in</text><text start=\"172.96\" dur=\"1\">fact I should have\ndone that better.</text><text start=\"173.96\" dur=\"2.19\">To get the value of recurMul\nwith respect to this</text><text start=\"176.15\" dur=\"2.39\">environment, I&amp;#39;m going to go\nup and find it there since</text><text start=\"178.54\" dur=\"2.02\">it&amp;#39;s not bound down here.</text><text start=\"180.56\" dur=\"2.13\">I need to get the value of a.</text><text start=\"182.69\" dur=\"0.78\">There it is.</text><text start=\"183.47\" dur=\"2.03\">And I need to get the\nvalue of b minus 1.</text><text start=\"185.5\" dur=\"0.67\">Well that&amp;#39;s easy.</text><text start=\"186.17\" dur=\"2.62\">There&amp;#39;s b, and subtract\n1 from it.</text><text start=\"188.79\" dur=\"2.61\">And since recurMul is\na procedure, what</text><text start=\"191.4\" dur=\"1.42\">am I going to do?</text><text start=\"192.82\" dur=\"3.21\">I&amp;#39;m going to create\na new frame.</text><text start=\"196.03\" dur=\"0.62\">Cool.</text><text start=\"196.65\" dur=\"1.99\">That&amp;#39;s exactly what I want.</text><text start=\"198.64\" dur=\"2.21\">Because now I&amp;#39;ve got a\ncomputation that&amp;#39;s taking</text><text start=\"200.85\" dur=\"2.08\">place with respect\nto this frame.</text><text start=\"202.93\" dur=\"1.14\">And how did I set that up?</text><text start=\"204.07\" dur=\"1.25\">Well I got the value of a.</text><text start=\"205.32\" dur=\"2.12\">I got the value of b\nminus 1 from here.</text><text start=\"207.44\" dur=\"3.2\">I&amp;#39;ve bound those in this\nprocedure because that&amp;#39;s what</text><text start=\"210.64\" dur=\"1.2\">it tells me to do.</text><text start=\"211.84\" dur=\"4.01\">And I&amp;#39;m now saying, evaluate\nthis procedure in this frame.</text><text start=\"215.85\" dur=\"2.34\">Remember, when I get the value\nof this I&amp;#39;m going to give it</text><text start=\"218.19\" dur=\"2.07\">back to this frame to complete\nthat addition.</text><text start=\"220.26\" dur=\"3.79\">But I&amp;#39;ve now reduced this\nto simpler computation.</text><text start=\"224.05\" dur=\"1.95\">Notice something else\nreally nice.</text><text start=\"226\" dur=\"2.15\">You may have been saying, well,\nhow do I keep track of</text><text start=\"228.15\" dur=\"2.1\">my iteration variable?</text><text start=\"230.25\" dur=\"1.74\">It&amp;#39;s not really iteration,\nit&amp;#39;s recursion.</text><text start=\"231.99\" dur=\"3.11\">But notice I&amp;#39;ve reduced b.</text><text start=\"235.1\" dur=\"1.65\">And that&amp;#39;s exactly what&amp;#39;s\ngoing to happen.</text><text start=\"236.75\" dur=\"2.41\">I&amp;#39;m going to keep unwinding\nthis computation until I</text><text start=\"239.16\" dur=\"1.65\">ground that out.</text><text start=\"240.81\" dur=\"1.3\">OK.</text><text start=\"242.11\" dur=\"1.12\">We&amp;#39;re now in pretty\ngood shape.</text><text start=\"243.23\" dur=\"1.77\">Because what do we want to do?</text><text start=\"245\" dur=\"3.19\">It says I need to get the value\nof this procedure, this</text><text start=\"248.19\" dur=\"4.46\">body, this body here, with\nrespect to this environment.</text><text start=\"252.65\" dur=\"0.54\">What do I do?</text><text start=\"253.19\" dur=\"2.09\">Well, let&amp;#39;s say is b in this\nenvironment equal to 1?</text><text start=\"255.28\" dur=\"1.42\">No it is not.</text><text start=\"256.7\" dur=\"2.97\">So I&amp;#39;m going to return the\nvalue of a from this</text><text start=\"259.67\" dur=\"4.03\">environment, which is\nright there, to</text><text start=\"263.7\" dur=\"1.29\">another procedure call.</text><text start=\"264.99\" dur=\"3.18\">I&amp;#39;m doing another procedure\ncall on recurMul.</text><text start=\"268.17\" dur=\"1\">What do I do?</text><text start=\"269.17\" dur=\"2.485\">From here, I get the\nvalue of recurMul.</text><text start=\"271.655\" dur=\"2.155\">And I trace up that chain\nto say, there it</text><text start=\"273.81\" dur=\"2.29\">is, it&amp;#39;s that procedure.</text><text start=\"276.1\" dur=\"2.73\">I need to get the value of\na in this environment.</text><text start=\"278.83\" dur=\"0.67\">That&amp;#39;s easy.</text><text start=\"279.5\" dur=\"3.72\">And I need to get b minus\n1 in this environment.</text><text start=\"283.22\" dur=\"1.37\">Well, that&amp;#39;s easy, as well.</text><text start=\"284.59\" dur=\"4.92\">B here is 2, I subtract 1, and\nthat leads naturally to yet</text><text start=\"289.51\" dur=\"2.84\">another recursive call.</text><text start=\"292.35\" dur=\"2.27\">Now, you&amp;#39;re going to be glad I\nonly did this with 2 and 3,</text><text start=\"294.62\" dur=\"1.59\">and not 2 and 57.</text><text start=\"296.21\" dur=\"1.75\">But you get the idea.</text><text start=\"297.96\" dur=\"3.8\">I am now evaluating the body of\nthis procedure with respect</text><text start=\"301.76\" dur=\"1.68\">to this environment.</text><text start=\"303.44\" dur=\"1.09\">What do I do?</text><text start=\"304.53\" dur=\"3.59\">I say, OK, is b equal to 1?</text><text start=\"308.12\" dur=\"1.22\">Thank God, it is.</text><text start=\"309.34\" dur=\"2.63\">But if b is equal to\n1, what do I do?</text><text start=\"311.97\" dur=\"4.73\">I return the value of a\nfrom this environment.</text><text start=\"316.7\" dur=\"4.16\">So that computation\ngives me back a 2.</text><text start=\"320.86\" dur=\"1.06\">That&amp;#39;s really nice.</text><text start=\"321.92\" dur=\"1.65\">Because what does that say?</text><text start=\"323.57\" dur=\"3.98\">It says, gee, here&amp;#39;s\nwhere I am.</text><text start=\"327.55\" dur=\"1.96\">I&amp;#39;m now returning the value\nof a because I was in that</text><text start=\"329.51\" dur=\"0.79\">recursive call.</text><text start=\"330.3\" dur=\"3.09\">It says the value of this\nrecursive call is 2.</text><text start=\"333.39\" dur=\"2.69\">I&amp;#39;m going to give it back to the\nplace that was waiting for</text><text start=\"336.08\" dur=\"1.37\">it, which was up here.</text><text start=\"337.45\" dur=\"1\">And what was I doing?</text><text start=\"338.45\" dur=\"2.15\">I was waiting to get the\nrecursive value.</text><text start=\"340.6\" dur=\"2.65\">I want to add that to a.</text><text start=\"343.25\" dur=\"1.7\">So the 2 is returned.</text><text start=\"344.95\" dur=\"1.23\">It gets passed back up here.</text><text start=\"346.18\" dur=\"2.14\">It gets added to that a.</text><text start=\"348.32\" dur=\"2.845\">Those two pieces\ncome to there.</text><text start=\"351.165\" dur=\"1.185\">And what was that doing?</text><text start=\"352.35\" dur=\"3.1\">That was saying, give me a\nreturn of those two values to</text><text start=\"355.45\" dur=\"3.28\">the computation that\nwas waiting here.</text><text start=\"358.73\" dur=\"3.28\">So, in fact, the 4 and\nthe 2 get added</text><text start=\"362.01\" dur=\"1.48\">together to give me 6.</text><text start=\"363.49\" dur=\"0.88\">And what was that doing?</text><text start=\"364.37\" dur=\"3.02\">It says, I&amp;#39;m now done because\nthat procedure said return</text><text start=\"367.39\" dur=\"2.16\">that value as the\noverall value.</text><text start=\"369.55\" dur=\"3.98\">And that&amp;#39;s going to get passed\nback up as the final value.</text><text start=\"373.53\" dur=\"1.36\">Cool.</text><text start=\"374.89\" dur=\"3.31\">A little slow in our computation\nbut really cool.</text><text start=\"378.2\" dur=\"3.17\">And, in particular, let&amp;#39;s see\nwhat we can deduce from this.</text><text start=\"381.37\" dur=\"2.93\">Each recursive call of a\nfunction creates its own</text><text start=\"384.3\" dur=\"2.95\">environment, with a local\nscoping of variables.</text><text start=\"387.25\" dur=\"2.95\">So evaluating the body of the\nfunction in that environment</text><text start=\"390.2\" dur=\"3.08\">is going to be very clear as to\nwhich value of a and b it&amp;#39;s</text><text start=\"393.28\" dur=\"2.77\">using, or any other variable\nthat it&amp;#39;s using.</text><text start=\"396.05\" dur=\"1.96\">Secondly, the bindings\nfor variables in</text><text start=\"398.01\" dur=\"1.93\">each frame are distinct.</text><text start=\"399.94\" dur=\"0.54\">And you saw that.</text><text start=\"400.48\" dur=\"2.17\">I had a different frame\nfor each one of them.</text><text start=\"402.65\" dur=\"3.26\">And those bindings are not\nchanged when we&amp;#39;re doing the</text><text start=\"405.91\" dur=\"0.98\">recursive call.</text><text start=\"406.89\" dur=\"2.01\">They are set up as\nwe make the call.</text><text start=\"408.9\" dur=\"2.69\">That is, I&amp;#39;m going to compute a\nnew value of b, making it in</text><text start=\"411.59\" dur=\"3.13\">this case b minus 1, in order\nto bind it in the frame.</text><text start=\"414.72\" dur=\"2.87\">But I&amp;#39;m not changing bindings\nin other frames when I&amp;#39;m</text><text start=\"417.59\" dur=\"1.15\">within one frame.</text><text start=\"418.74\" dur=\"1.84\">I don&amp;#39;t have access to them.</text><text start=\"420.58\" dur=\"2.37\">And finally we can see that\nthe flow of control can</text><text start=\"422.95\" dur=\"2.57\">naturally pass back to an\nearlier frame once the</text><text start=\"425.52\" dur=\"2.73\">function call returns\nits value.</text><text start=\"428.25\" dur=\"5.45\">So, finally, you can also see\nthat inherently this recursive</text><text start=\"433.7\" dur=\"3.42\">call to a function, if done\nright, has the equivalent of</text><text start=\"437.12\" dur=\"1.52\">reducing a state variable.</text><text start=\"438.64\" dur=\"3.63\">We saw how each instance, each\nframe, had a different value</text><text start=\"442.27\" dur=\"2.8\">of b, that got smaller and\nsmaller until we got down to</text><text start=\"445.07\" dur=\"1.22\">the base case.</text><text start=\"446.29\" dur=\"2.5\">So we know that this is, in\nfact, going to ground out.</text><text start=\"448.79\" dur=\"1.93\">It&amp;#39;s going to complete\nits computation.</text><text start=\"450.72\" dur=\"1.57\">That&amp;#39;s great.</text><text start=\"452.29\" dur=\"3.24\">So hopefully this gives you a\nbetter sense of how, in fact,</text><text start=\"455.53\" dur=\"2.94\">the rules of evaluation allow\na recursive thinking of a</text><text start=\"458.47\" dur=\"2.65\">problem to create a very nice\nversion of the code.</text><text start=\"461.12\" dur=\"1.375\"></text></transcript>\n", "oMr9PpDodl8": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"2.63\">CHRIS TERMAN: In our final example,\nwe&amp;#39;re going to write some code that</text><text start=\"2.63\" dur=\"2.88\">does different types of\nmortgage calculations.</text><text start=\"5.51\" dur=\"3.8\">Our goal isn&amp;#39;t so much to teach you\nabout mortgages, but to show you how</text><text start=\"9.31\" dur=\"3.97\">to structure the code, and in\nparticular, to try to take advantage</text><text start=\"13.28\" dur=\"2.09\">of earlier code that we write.</text><text start=\"15.37\" dur=\"2.79\">So for example, after we&amp;#39;ve written\nthe code that supports the</text><text start=\"18.16\" dur=\"4.26\">calculations for a fixed-rate mortgage,\nthe code that does the</text><text start=\"22.42\" dur=\"4.02\">calculation for a fixed-rate mortgage\nwith upfront points is very similar,</text><text start=\"26.44\" dur=\"2.62\">and we want to build on the\ncode that we wrote.</text><text start=\"29.06\" dur=\"3.25\">Classes are a convenient way to tackle\nmany programming problems.</text><text start=\"32.31\" dur=\"2.19\">For example, let&amp;#39;s do a\nmortgage calculation.</text><text start=\"34.5\" dur=\"4.22\">Suppose I want to borrow $200,000\nfrom the bank and pay it</text><text start=\"38.72\" dur=\"1.73\">back over 30 years.</text><text start=\"40.45\" dur=\"1.92\">The bank has given me three options.</text><text start=\"42.37\" dur=\"5.32\">A 30-year fixed rate mortgage of 7% per\nyear, or they will let me pay some</text><text start=\"47.69\" dur=\"3.79\">amount of upfront money, called\npoints-- in this case $7,000--</text><text start=\"51.48\" dur=\"4.4\">in which case, they&amp;#39;ll give me a 30-year\nfixed rate mortgage of 5%.</text><text start=\"55.88\" dur=\"4.94\">Or for four years, they&amp;#39;ll let me pay\na low interest rate, but then their</text><text start=\"60.82\" dur=\"5.6\">rate will almost double for the\nremaining 26 years of the mortgage.</text><text start=\"66.42\" dur=\"3.85\">What I&amp;#39;d like to do is figure out,\nwhat&amp;#39;s the best deal for me?</text><text start=\"70.27\" dur=\"2.88\">Let&amp;#39;s write a program\nto tackle that idea.</text><text start=\"73.15\" dur=\"1.03\">Here&amp;#39;s our program.</text><text start=\"74.18\" dur=\"4\">We went out to the web to find the\nformula we can use to compute the</text><text start=\"78.18\" dur=\"3.05\">monthly payment for a mortgage\nof size loan at a monthly</text><text start=\"81.23\" dur=\"1.66\">rate of r for n months.</text><text start=\"82.89\" dur=\"4.86\">So we embedded that in a little\nformula that we&amp;#39;ll use below.</text><text start=\"87.75\" dur=\"3.81\">We created a base class that we&amp;#39;re going\nto use for all the mortgages.</text><text start=\"91.56\" dur=\"4.78\">What the base class does is support the\nbasic operation of a mortgage, and</text><text start=\"96.34\" dur=\"3.53\">then the details of the exact interest\nrates and payments and things like</text><text start=\"99.87\" dur=\"3.69\">that will describe it for each\nmortgage separately.</text><text start=\"103.56\" dur=\"5.91\">So the mortgage base class remembers the\nprincipal amount of the loan, and</text><text start=\"109.47\" dur=\"6.26\">it computes the monthly percentage rate\nfrom the annual interest rate</text><text start=\"115.73\" dur=\"1.37\">that was passed in.</text><text start=\"117.1\" dur=\"3.12\">It remembers the total number\nof months for the loan.</text><text start=\"120.22\" dur=\"2.56\">It keeps a list of all the payments\nthat have been made.</text><text start=\"122.78\" dur=\"2.6\">And initially, nothing has been made.</text><text start=\"125.38\" dur=\"3.23\">The amount that&amp;#39;s owed is\ncomputed each month.</text><text start=\"128.61\" dur=\"3.48\">So we start off owing the entire\namount of the loan.</text><text start=\"132.09\" dur=\"5.03\">We precompute the monthly payment\nusing the formula from above.</text><text start=\"137.12\" dur=\"4.363\">And we define a legend which we&amp;#39;ll be\nusing down here when the mortgage is</text><text start=\"141.483\" dur=\"1.627\">asked to print itself off.</text><text start=\"143.11\" dur=\"3.95\">And we&amp;#39;ll define that instance variable\nnow in each of the particular</text><text start=\"147.06\" dur=\"3.26\">subclasses that we&amp;#39;ll define.</text><text start=\"150.32\" dur=\"4.7\">The mortgage supports the basic\noperation of making a monthly payment.</text><text start=\"155.02\" dur=\"3.625\">So what we do is we take the precomputed\nmonthly payment and we add</text><text start=\"158.645\" dur=\"3.045\">it to the end of the list of\npayments that we&amp;#39;ve made.</text><text start=\"161.69\" dur=\"4.23\">We then have to compute the amount of\nthe payment, which is going towards</text><text start=\"165.92\" dur=\"2.49\">reducing the principal\namount of the loan.</text><text start=\"168.41\" dur=\"4.17\">So we take the principal amount that&amp;#39;s\ncurrently outstanding and multiply it</text><text start=\"172.58\" dur=\"3.36\">by the current monthly interest rate.</text><text start=\"175.94\" dur=\"6.22\">That tells us how much of our\npayment is owed in interest.</text><text start=\"182.16\" dur=\"3.09\">The remainder of that payment,\nthen, is used to reduce</text><text start=\"185.25\" dur=\"1.41\">the outstanding principal.</text><text start=\"186.66\" dur=\"3.37\">So at the end of each month, after we&amp;#39;ve\nmade our payment, we can compute</text><text start=\"190.03\" dur=\"5.005\">the new amount owed by taking the old\namount owed and subtracting from it</text><text start=\"195.035\" dur=\"2.355\">the reduction in principle\nfrom our payment.</text><text start=\"197.39\" dur=\"3.43\">Finally, we support the notion of\nfiguring out what the mortgage has</text><text start=\"200.82\" dur=\"7.3\">cost us through all the currently made\nmonthly payments by summing up all the</text><text start=\"208.12\" dur=\"3.17\">payments that we&amp;#39;ve made to date.</text><text start=\"211.29\" dur=\"0.57\">OK.</text><text start=\"211.86\" dur=\"4.41\">So here are the three types of\nmortgages we want to do.</text><text start=\"216.27\" dur=\"5.76\">One is a fixed mortgage, which is really\nexactly what the mortgage base</text><text start=\"222.03\" dur=\"0.84\">class implements.</text><text start=\"222.87\" dur=\"7.06\">So we simply make a subclass of the\nmortgage base class and go off and</text><text start=\"229.93\" dur=\"3.5\">initialize it with the parameters of\nthe fixed rate loan, and provide a</text><text start=\"233.43\" dur=\"2.1\">legend that describes the loan.</text><text start=\"235.53\" dur=\"2.1\">A fixed with points--</text><text start=\"237.63\" dur=\"1.98\">so that&amp;#39;s where we did\nan upfront payment--</text><text start=\"239.61\" dur=\"1.38\">really is just like fixed.</text><text start=\"240.99\" dur=\"3.77\">So in fact we&amp;#39;ve made it a subclass\nof the fixed rate mortgage.</text><text start=\"244.76\" dur=\"6.12\">And the only distinction is that we have\nan initial payment up front that</text><text start=\"250.88\" dur=\"2.01\">is some percentage of the loan.</text><text start=\"252.89\" dur=\"3.59\">In this case, we pass in\nthe number of points--</text><text start=\"256.48\" dur=\"5.229\">in this case, 3.5 which we used to\ncalculate the initial payment.</text><text start=\"261.709\" dur=\"4.641\">And then after that, the mortgage works\njust as before, except hopefully</text><text start=\"266.35\" dur=\"2.77\">the interest rate here will be lower.</text><text start=\"269.12\" dur=\"4.9\">And we have a different legend here\nwhich starts off with whatever value</text><text start=\"274.02\" dur=\"4.57\">was defined for the legend by\nthe fixed rate superclass.</text><text start=\"278.59\" dur=\"2.37\">And then we add to that an\nannotation indicating the</text><text start=\"280.96\" dur=\"1.8\">number of upfront points.</text><text start=\"282.76\" dur=\"4.28\">And finally we have a two-rate mortgage,\nwhere the mortgage changes</text><text start=\"287.04\" dur=\"3.87\">rates from the teaser rate after\na certain number of months.</text><text start=\"290.91\" dur=\"5.05\">It will actually then increase\nto a larger rate.</text><text start=\"295.96\" dur=\"2.9\">So what we do is remember all\nthe different parameters.</text><text start=\"298.86\" dur=\"4.59\">We have two mortgage rates in the\ninitial term of the cheaper rate.</text><text start=\"303.45\" dur=\"7.05\">We have a more complicated legend\nexplaining the mortgage name.</text><text start=\"310.5\" dur=\"1.93\">And then finally we look at\nthe makePayment thing.</text><text start=\"312.43\" dur=\"4.83\">And so what we&amp;#39;ve done is we override\nthe makePayment method of the Mortgage</text><text start=\"317.26\" dur=\"3.75\">base class, because we have a more\ncomplicated thing we need to do.</text><text start=\"321.01\" dur=\"5.69\">So initially, we&amp;#39;re going to go off and\nset up the mortgage to be being</text><text start=\"326.7\" dur=\"10.02\">paid off at the teaser rate, as\nif we had gotten a 5% loan.</text><text start=\"336.72\" dur=\"4.84\">So we&amp;#39;ll have a low monthly payment\nbecause the teaser rate is lower than</text><text start=\"341.56\" dur=\"2.04\">the final long-term rate.</text><text start=\"343.6\" dur=\"3.51\">So once we&amp;#39;ve paid that number of\nmonthly payments-- the number of</text><text start=\"347.11\" dur=\"1.98\">teaser months, in this case 48--</text><text start=\"349.09\" dur=\"4.88\">what we&amp;#39;re going to do is to say, aha,\nnow we&amp;#39;re going to up the rate to this</text><text start=\"353.97\" dur=\"3.81\">new higher percentage rate, and we&amp;#39;ll\nrecalculate the payment based on the</text><text start=\"357.78\" dur=\"3.33\">amount of the outstanding principal\nthat&amp;#39;s still left.</text><text start=\"361.11\" dur=\"4.99\">And at that point, once we&amp;#39;ve made that\nadjustment, which we do at the</text><text start=\"366.1\" dur=\"6.49\">49th month, we go off and now just use\nthe standard payment algorithm.</text><text start=\"372.59\" dur=\"3.87\">It&amp;#39;s just that the payment algorithm\nworks with different parameters from</text><text start=\"376.46\" dur=\"4.78\">the 49th month and beyond.</text><text start=\"381.24\" dur=\"3.62\">So now we&amp;#39;re in a position to actually\ndo some comparisons.</text><text start=\"384.86\" dur=\"5.31\">And again, we&amp;#39;ve gone off and embedded\nour little mortgage reporting thing</text><text start=\"390.17\" dur=\"2.53\">inside a function, so that we can\nactually try many different</text><text start=\"392.7\" dur=\"2.81\">experiments with the\ndifferent options.</text><text start=\"395.51\" dur=\"5.07\">So what we do is we create some\nalternative mortgages.</text><text start=\"400.58\" dur=\"3.66\">We create a fixed rate mortgage, the\nfixed rate with points, and the</text><text start=\"404.24\" dur=\"3.83\">two-rate mortgage based on the\nparameters that get passed in.</text><text start=\"408.07\" dur=\"3.68\">And finally we run the experiment, where\nwe&amp;#39;re going to make 30 years</text><text start=\"411.75\" dur=\"2.76\">worth of payments on a monthly basis.</text><text start=\"414.51\" dur=\"4.53\">And for each of the mortgages in our\nlittle list of sample mortgages-- so</text><text start=\"419.04\" dur=\"3.91\">the fixed rate, the fixed rate with\npoints, and the two-rate mortgage--</text><text start=\"422.95\" dur=\"1.65\">we&amp;#39;re going to make a monthly payment.</text><text start=\"424.6\" dur=\"3.98\">In this case, a total of 30 years of\npayments on each of the mortgages.</text><text start=\"428.58\" dur=\"3.5\">And finally, when we&amp;#39;re done, we&amp;#39;re\ngoing to report back the results.</text><text start=\"432.08\" dur=\"5.29\">So the advantage, instead of filling a\ncouple napkins full of calculations--</text><text start=\"437.37\" dur=\"3.98\">by putting it into a program, we&amp;#39;ll get\nto run many experiments in a row.</text><text start=\"441.35\" dur=\"0.31\">All right.</text><text start=\"441.66\" dur=\"3.33\">So this is the experiment\nthat we want to run.</text><text start=\"444.99\" dur=\"3.85\">We actually have the description\nof the problem we were facing.</text><text start=\"448.84\" dur=\"3.82\">So I&amp;#39;m going to come over here and paste\nthat in, and then ask Python to</text><text start=\"452.66\" dur=\"1.19\">print out the answers.</text><text start=\"453.85\" dur=\"2.85\">And we can see that if we have a\nfixed rate mortgage, we pay a</text><text start=\"456.7\" dur=\"2.24\">total of about $479,000.</text><text start=\"458.94\" dur=\"5.36\">A fixed rate with the upfront points\nwas about a little over $390,000.</text><text start=\"464.3\" dur=\"3.25\">And then the two-rate mortgage, or the\nadjustable rate mortgage-- you can see</text><text start=\"467.55\" dur=\"3.62\">here the total is $551,000.</text><text start=\"471.17\" dur=\"8.79\">So the best deal by almost $100,000\nis the fixed-rate with points.</text><text start=\"479.96\" dur=\"2.22\">Well, we&amp;#39;re not so much trying\nto teach you about mortgages.</text><text start=\"482.18\" dur=\"4.32\">Our real goal in going through this\nexample was to sort of point out that</text><text start=\"486.5\" dur=\"4.88\">we can do a lot of code reuse here in\ndescribing the operation of the</text><text start=\"491.38\" dur=\"4.11\">different mortgages, by starting with a\nmortgage base class which describes</text><text start=\"495.49\" dur=\"5.1\">the operation of a fixed rate mortgage,\nand then elaborating on that</text><text start=\"500.59\" dur=\"5.4\">either with an upfront payment, and\nhopefully a lower interest rate, or a</text><text start=\"505.99\" dur=\"2.93\">fixed rate mortgage where the\nrate changes some number of</text><text start=\"508.92\" dur=\"1\">months into the thing.</text><text start=\"509.92\" dur=\"3.54\">And so we&amp;#39;ve basically encapsulated\nthe distinctions of our different</text><text start=\"513.46\" dur=\"4.839\">mortgages from a regular base fixed\nrate mortgage in each of</text><text start=\"518.299\" dur=\"1.25\">our different classes.</text><text start=\"519.549\" dur=\"0.701\"></text></transcript>\n", "0bdP3Muy_kU": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"3.07\">PROFESSOR: We&amp;#39;ve now explored\ndepth first search.</text><text start=\"3.07\" dur=\"3.47\">It&amp;#39;s a technique for finding solutions\nto graph optimization problems,</text><text start=\"6.54\" dur=\"3.37\">finding shortest paths through a\ngraph or anything that we can</text><text start=\"9.91\" dur=\"1.66\">represent as a graph.</text><text start=\"11.57\" dur=\"3.11\">And it&amp;#39;s one way of, in fact,\nexploring the space.</text><text start=\"14.68\" dur=\"3.855\">There&amp;#39;s an alternative also very common\ncalled breadth first search.</text><text start=\"18.535\" dur=\"2.105\">And the difference is very simple.</text><text start=\"20.64\" dur=\"3.77\">In depth first search, if you think of\nthe tree of possibilities we&amp;#39;re always</text><text start=\"24.41\" dur=\"4.54\">exploring things as deeply as we can,\ntaking any path and trying to extend</text><text start=\"28.95\" dur=\"3.25\">it before we go back and\nlook at other paths.</text><text start=\"32.2\" dur=\"3.72\">Instead of always going down the first\nbranch of the tree, we could, instead,</text><text start=\"35.92\" dur=\"4.05\">explore all the children of a\nnode first before moving on.</text><text start=\"39.97\" dur=\"5.11\">So, for example, we can look at all of\nthe paths of length 1 and then all of</text><text start=\"45.08\" dur=\"2.77\">the paths of length 2.</text><text start=\"47.85\" dur=\"1.32\">And that idea is very simple.</text><text start=\"49.17\" dur=\"3.2\">It says, given a node, we&amp;#39;re going to\nlook at each of its children and look</text><text start=\"52.37\" dur=\"1.36\">at all of those paths.</text><text start=\"53.73\" dur=\"2.56\">So, going here then there\nthen there then there.</text><text start=\"56.29\" dur=\"3.31\">If none of those work, then we&amp;#39;ll go\nover here and look at all of the</text><text start=\"59.6\" dur=\"0.94\">extensions.</text><text start=\"60.54\" dur=\"5.24\">So, we&amp;#39;re going to explore this tree if\nyou like breadth first rather than</text><text start=\"65.78\" dur=\"1.56\">depth first.</text><text start=\"67.34\" dur=\"3.07\">In the simple case of having no weight\nwhere we&amp;#39;re simply looking for the</text><text start=\"70.41\" dur=\"3.77\">shortest path in terms of number of\nsteps, we can stop as soon as we find</text><text start=\"74.18\" dur=\"3.84\">a solution since it&amp;#39;s guaranteed\nto be a shortest path.</text><text start=\"78.02\" dur=\"0.93\">Great.</text><text start=\"78.95\" dur=\"1.76\">How might this look?</text><text start=\"80.71\" dur=\"3.46\">Well, the overall description\nis much the same.</text><text start=\"84.17\" dur=\"2.23\">We start at the root node as before.</text><text start=\"86.4\" dur=\"2.97\">In this case, a set of possible\npaths is just that node.</text><text start=\"89.37\" dur=\"3.32\">If we&amp;#39;re not already at the solution,\nwe&amp;#39;re going to take the current path,</text><text start=\"92.69\" dur=\"3.7\">and we&amp;#39;re going to look at extending it\nby adding each child of that note</text><text start=\"96.39\" dur=\"2.36\">to the path, unless the child\nis already in the path,</text><text start=\"98.75\" dur=\"1.82\">we&amp;#39;ll avoid the loops.</text><text start=\"100.57\" dur=\"3.5\">The only difference is that we&amp;#39;re going\nto add these new paths, but</text><text start=\"104.07\" dur=\"3.59\">we&amp;#39;re going to put them at the end of\nthe set of options rather than at the</text><text start=\"107.66\" dur=\"2.47\">beginning, very simple difference.</text><text start=\"110.13\" dur=\"2.08\">In fact, we&amp;#39;re using a different\ndata structure, a data</text><text start=\"112.21\" dur=\"1.53\">structure called the queue.</text><text start=\"113.74\" dur=\"4.94\">But with that simple difference, the\nrest of this works exactly as before.</text><text start=\"118.68\" dur=\"3.5\">So, the difference is we take the next\noption, we look at all the plausible</text><text start=\"122.18\" dur=\"2.81\">paths that extend it to its\nchildren, avoiding loops.</text><text start=\"124.99\" dur=\"4\">But rather than putting those onto the\nfront of what was a stack, we&amp;#39;re going</text><text start=\"128.99\" dur=\"4.27\">to put them at the end of what\nwe now call a queue.</text><text start=\"133.26\" dur=\"1.52\">So, quickly, about a queue then.</text><text start=\"134.78\" dur=\"2.14\">Again, it&amp;#39;s a different kind\nof data structure.</text><text start=\"136.92\" dur=\"3.62\">It has what we call the first\nin, first out behavior.</text><text start=\"140.54\" dur=\"2.73\">The first thing we put in is the first\nthing we take out or another way of</text><text start=\"143.27\" dur=\"3.04\">saying is we&amp;#39;re always going to put\nthings in at the end of the queue and</text><text start=\"146.31\" dur=\"1.05\">take them off the front.</text><text start=\"147.36\" dur=\"3.27\">Which means that things get looked at in\nthe order in which they were placed</text><text start=\"150.63\" dur=\"1.88\">into that data structure.</text><text start=\"152.51\" dur=\"3.41\">We refer to things as being pushed to\nthe end of the queue and popping off</text><text start=\"155.92\" dur=\"1.27\">the front of the queue.</text><text start=\"157.19\" dur=\"1.65\">Very simple change.</text><text start=\"158.84\" dur=\"3.63\">Let&amp;#39;s just sort of conceptionally look\nat the difference now in what happens</text><text start=\"162.47\" dur=\"3.11\">with my search if I&amp;#39;m now doing\nbreadth first search.</text><text start=\"165.58\" dur=\"4.28\">Here, I start off at node 0 from node\n0, I know there are two possible</text><text start=\"169.86\" dur=\"0.48\">extensions.</text><text start=\"170.34\" dur=\"2.68\">So, let&amp;#39;s just look at\nthe nodes we visit.</text><text start=\"173.02\" dur=\"5.72\">We&amp;#39;re going to go first to node\n01 and then to node 02.</text><text start=\"178.74\" dur=\"2.98\">Since neither of those has found the\nsolution, we&amp;#39;ve now explored all the</text><text start=\"181.72\" dur=\"4.58\">paths of length 1, we&amp;#39;re going to\ngo back to this node and look at</text><text start=\"186.3\" dur=\"3.36\">extensions there avoiding loops\nso we cut that off but now</text><text start=\"189.66\" dur=\"2.1\">looking at the path 012.</text><text start=\"191.76\" dur=\"4.51\">Since there are no more paths of length\n2 off of node 1, we&amp;#39;ll carry on</text><text start=\"196.27\" dur=\"4.15\">and look at 023 and then 024.</text><text start=\"200.42\" dur=\"4.59\">And, again, having now explored all the\npaths of length 2, we&amp;#39;ll go back</text><text start=\"205.01\" dur=\"4.59\">to the beginning and look at extensions\nof length 3, letting us</text><text start=\"209.6\" dur=\"4.56\">look at 0123 and 124.</text><text start=\"214.16\" dur=\"6.88\">Then moving on to 0234 and, nice, to\n0235, we&amp;#39;ve now found the solution.</text><text start=\"221.04\" dur=\"3.47\">And we know we can stop because any\nother solution is either at this</text><text start=\"224.51\" dur=\"4.16\">level, meaning of the same length,\nor deeper down in the tree,</text><text start=\"228.67\" dur=\"1.1\">meaning it&amp;#39;s longer.</text><text start=\"229.77\" dur=\"1.66\">So, we can stop.</text><text start=\"231.43\" dur=\"1.34\">Great.</text><text start=\"232.77\" dur=\"4.11\">Let&amp;#39;s just look then at, going back to\nour search, how that data structure of</text><text start=\"236.88\" dur=\"1.2\">the queue deals with it.</text><text start=\"238.08\" dur=\"4.33\">We start off with the queue just\nbeing of the element 0.</text><text start=\"242.41\" dur=\"4\">We pop it off and insert into it the two\nextensions which were 01 and 02.</text><text start=\"246.41\" dur=\"3.45\">They get put at the back of the queue,\nbut in this case, the queue was empty.</text><text start=\"249.86\" dur=\"3.29\">And then we pop this off.</text><text start=\"253.15\" dur=\"5.48\">And we take its extension which is 012,\nand notice, we put it at the back</text><text start=\"258.63\" dur=\"0.829\">of the queue.</text><text start=\"259.459\" dur=\"2\">That&amp;#39;s different from\nwhat we had before.</text><text start=\"261.459\" dur=\"1.721\">We then examine this.</text><text start=\"263.18\" dur=\"1.02\">We pop that off.</text><text start=\"264.2\" dur=\"2.44\">It&amp;#39;s got two extensions and,\nnotice, those get put at</text><text start=\"266.64\" dur=\"1.06\">the back of the queue.</text><text start=\"267.7\" dur=\"2.92\">So that this now moves up\nto the front of queue.</text><text start=\"270.62\" dur=\"1.42\">And we keep going.</text><text start=\"272.04\" dur=\"3.71\">And that extension, or that variation,\nrather, of putting things at the end</text><text start=\"275.75\" dur=\"3.34\">of the data structure rather than at\nthe beginning gives us a different</text><text start=\"279.09\" dur=\"1.92\">exploration of the space.</text><text start=\"281.01\" dur=\"1.99\">What does the code look like?</text><text start=\"283\" dur=\"2.97\">A little bit different, but still\nfairly easy to follow.</text><text start=\"285.97\" dur=\"3.65\">Again, we&amp;#39;re going to give it a graph,\na start node, an end node.</text><text start=\"289.62\" dur=\"2.58\">And we&amp;#39;re going to give it a data\nstructure, we&amp;#39;re just going to, out of</text><text start=\"292.2\" dur=\"3.94\">a bad pun kind of sense,\ncall it a queue.</text><text start=\"296.14\" dur=\"4.67\">Our first path just is the path\nfrom the node&amp;#39;s start.</text><text start=\"300.81\" dur=\"2.9\">And we&amp;#39;re going to put\nthat onto the queue.</text><text start=\"303.71\" dur=\"2.44\">And since we&amp;#39;re representing the queue\nin this case as a list, we&amp;#39;re just</text><text start=\"306.15\" dur=\"2.14\">going to append it, put it at the end.</text><text start=\"308.29\" dur=\"1.3\">Great.</text><text start=\"309.59\" dur=\"1.18\">Now what we do?</text><text start=\"310.77\" dur=\"3.43\">We say well, if there&amp;#39;s still something\nin the queue to look at, I</text><text start=\"314.2\" dur=\"0.57\">can keep going.</text><text start=\"314.77\" dur=\"4.04\">If there isn&amp;#39;t, then I&amp;#39;m done, and I&amp;#39;m\nstuck, I&amp;#39;m going to return no answer.</text><text start=\"318.81\" dur=\"3.81\">If there is still something in the\nqueue, I&amp;#39;m going to get the first</text><text start=\"322.62\" dur=\"1.86\">thing off of the queue.</text><text start=\"324.48\" dur=\"3.56\">There&amp;#39;s a pop operation, and it\njust takes it from element 0</text><text start=\"328.04\" dur=\"0.73\">and moves it out.</text><text start=\"328.77\" dur=\"1.97\">And I&amp;#39;m going to call that 10 path.</text><text start=\"330.74\" dur=\"2.34\">That&amp;#39;s the path at the beginning\nof the queue.</text><text start=\"333.08\" dur=\"3.82\">I&amp;#39;m going to get the last node in that\npath by just indexing into it to get</text><text start=\"336.9\" dur=\"1.92\">the last element of the path.</text><text start=\"338.82\" dur=\"1.61\">I&amp;#39;m going to print out some\ninformation here,</text><text start=\"340.43\" dur=\"0.83\">which is no big deal.</text><text start=\"341.26\" dur=\"0.88\">And then what do I do?</text><text start=\"342.14\" dur=\"5.27\">I say look, if that node is the thing\nI&amp;#39;m looking for, I&amp;#39;m done.</text><text start=\"347.41\" dur=\"2.29\">Just return the path.</text><text start=\"349.7\" dur=\"1.34\">Wonderful.</text><text start=\"351.04\" dur=\"2.9\">If it&amp;#39;s not, if I&amp;#39;ve still got something\nto go, so, I&amp;#39;ve got a node</text><text start=\"353.94\" dur=\"4.34\">up here, and I&amp;#39;m down to this node, and\nit&amp;#39;s still not to the goal node</text><text start=\"358.28\" dur=\"2.25\">that I want, what do I do?</text><text start=\"360.53\" dur=\"3.9\">I&amp;#39;m going to take the node I&amp;#39;m\ncurrently at, this one.</text><text start=\"364.43\" dur=\"4.11\">I&amp;#39;m going to get all of its children,\nand for each one of those, I&amp;#39;m first</text><text start=\"368.54\" dur=\"3.02\">going to make sure that it&amp;#39;s in fact\nsomething I can keep exploring.</text><text start=\"371.56\" dur=\"1.98\">It&amp;#39;s not already in the path.</text><text start=\"373.54\" dur=\"4.61\">And if it&amp;#39;s not in the path, I&amp;#39;m going\nto create a new path that says go from</text><text start=\"378.15\" dur=\"3.88\">there to each of the children in turn.</text><text start=\"382.03\" dur=\"4.08\">And, oh, just put those at\nthe end of the queue.</text><text start=\"386.11\" dur=\"0.91\">Wonderful.</text><text start=\"387.02\" dur=\"3.36\">With that change that has added those\nnew paths into the queue and having</text><text start=\"390.38\" dur=\"3.25\">done that, I&amp;#39;m going to be able to cycle\nback around because notice that</text><text start=\"393.63\" dur=\"1.02\">I&amp;#39;m not yet done.</text><text start=\"394.65\" dur=\"4.5\">And I&amp;#39;m going to pick up the next\nelement of the queue and keep going.</text><text start=\"399.15\" dur=\"2.84\">Straightforward algorithm, you\ncould run it yourself to try.</text><text start=\"401.99\" dur=\"3.06\">But it leads to a different\nexploration of the space.</text><text start=\"405.05\" dur=\"1.4\">And that&amp;#39;s a really valuable thing.</text><text start=\"406.45\" dur=\"1.25\"></text></transcript>\n", "--7OF8BOElA": "<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0\" dur=\"1.28\"></text><text start=\"1.28\" dur=\"2.73\">ERIC GRIMSON: Before we leave\nthe topic of complexity, I</text><text start=\"4.01\" dur=\"1.4\">want to do one last thing.</text><text start=\"5.41\" dur=\"2.36\">I want to give you a visual way\nof getting a sense of how</text><text start=\"7.77\" dur=\"2.65\">different these different\ncomplexity classes are.</text><text start=\"10.42\" dur=\"3.16\">Because you might say, does it\nreally matter if our code is</text><text start=\"13.58\" dur=\"3\">quadratic verses linear, or\nlog-linear versus linear, or</text><text start=\"16.58\" dur=\"1.31\">linear versus log?</text><text start=\"17.89\" dur=\"2.22\">And of course it depends on the\nsize of the problem, of</text><text start=\"20.11\" dur=\"1.59\">the particular instance\nof the problem.</text><text start=\"21.7\" dur=\"2.9\">But for large-scale problems,\nthe complexity of the worst</text><text start=\"24.6\" dur=\"2.52\">case can make a really big\ndifference, and I want to give</text><text start=\"27.12\" dur=\"1.41\">you a sense of that.</text><text start=\"28.53\" dur=\"2.72\">So just to do that,\nlet&amp;#39;s take a look.</text><text start=\"31.25\" dur=\"2.28\">What&amp;#39;s the difference between\na constant logarithm and a</text><text start=\"33.53\" dur=\"1.38\">logarithmic one?</text><text start=\"34.91\" dur=\"3.04\">So what I&amp;#39;ve graphed here is\nthe amount of time it takes</text><text start=\"37.95\" dur=\"3.21\">for an algorithm and this is\nconstant that has 20 steps,</text><text start=\"41.16\" dur=\"3.07\">versus a logarithmic algorithm\nthat has only 1</text><text start=\"44.23\" dur=\"2.22\">step within its loop.</text><text start=\"46.45\" dur=\"3.24\">And notice, it takes an argument\nof size almost</text><text start=\"49.69\" dur=\"3.54\">1,000,000 before the logarithmic\nalgorithm actually</text><text start=\"53.23\" dur=\"1.91\">catches up to the\nconstant one.</text><text start=\"55.14\" dur=\"2.97\">Of course, if the log algorithm\nhad 20 steps, it</text><text start=\"58.11\" dur=\"1.4\">would scale up beyond this.</text><text start=\"59.51\" dur=\"3.31\">But this is really a way of\nsaying, log algorithms grow</text><text start=\"62.82\" dur=\"3.24\">incredibly slowly in complexity,\nand therefore they</text><text start=\"66.06\" dur=\"0.72\">are really powerful.</text><text start=\"66.78\" dur=\"2.95\">And in many cases, they&amp;#39;re\nalmost as good as a constant</text><text start=\"69.73\" dur=\"1.59\">time algorithm.</text><text start=\"71.32\" dur=\"1.94\">Log grows slowly.</text><text start=\"73.26\" dur=\"2.89\">Log algorithms are great things\nif you can find them.</text><text start=\"76.15\" dur=\"1.89\">They&amp;#39;re not easy to find,\nbut when they are,</text><text start=\"78.04\" dur=\"2.15\">they are really great.</text><text start=\"80.19\" dur=\"0.23\">OK.</text><text start=\"80.42\" dur=\"1.43\">Now let&amp;#39;s move up that chain.</text><text start=\"81.85\" dur=\"2.06\">What about the difference\nbetween a logarithmic</text><text start=\"83.91\" dur=\"1.95\">algorithm and a linear one?</text><text start=\"85.86\" dur=\"2.115\">Well, this difference is big.</text><text start=\"87.975\" dur=\"4.06\">That blue line at the bottom is\na logarithmic algorithm, or</text><text start=\"92.035\" dur=\"2.685\">a logarithmic function, if you\nlike, and the green line, of</text><text start=\"94.72\" dur=\"1.55\">course, is the linear one.</text><text start=\"96.27\" dur=\"2.78\">And you can see that the linear\none starts to very</text><text start=\"99.05\" dur=\"3.36\">rapidly outstrip the\nlogarithmic one.</text><text start=\"102.41\" dur=\"2.84\">And again, the obvious\nobservation here is that</text><text start=\"105.25\" dur=\"2.65\">logarithmic clearly is better\nfor large-scale problems than</text><text start=\"107.9\" dur=\"0.88\">linear ones.</text><text start=\"108.78\" dur=\"1.39\">Doesn&amp;#39;t imply linear is bad--</text><text start=\"110.17\" dur=\"3.26\">it just says that log grows\nso much more slowly.</text><text start=\"113.43\" dur=\"1.7\">If we can find a log\nalgorithm, we</text><text start=\"115.13\" dur=\"1.19\">would really like one.</text><text start=\"116.32\" dur=\"1.29\">Let&amp;#39;s move up the chain.</text><text start=\"117.61\" dur=\"1.7\">Linear verses log-linear .</text><text start=\"119.31\" dur=\"2.01\">And of course, we know that\nthey&amp;#39;re going to get worse,</text><text start=\"121.32\" dur=\"2.69\">But here you can see that it\ndoesn&amp;#39;t grow as badly as you</text><text start=\"124.01\" dur=\"1.49\">might have expected.</text><text start=\"125.5\" dur=\"3.02\">There&amp;#39;s the linear algorithm in\nblue, down here, this one.</text><text start=\"128.52\" dur=\"1.29\">Here&amp;#39;s log linear one.</text><text start=\"129.81\" dur=\"4.3\">And it&amp;#39;s growing, but the\ngrowth isn&amp;#39;t horrible.</text><text start=\"134.11\" dur=\"4.33\">And as a consequence, what this\nsays is that while log n</text><text start=\"138.44\" dur=\"2.56\">may grow slowly, when it&amp;#39;s\nmultiplied by linear factors,</text><text start=\"141\" dur=\"3.22\">the growth is much more than\njust the pure linear, but</text><text start=\"144.22\" dur=\"2.39\">they&amp;#39;re still quite valuable,\nbecause the growth isn&amp;#39;t</text><text start=\"146.61\" dur=\"1.71\">getting badly out of hand.</text><text start=\"148.32\" dur=\"0.73\">All right.</text><text start=\"149.05\" dur=\"2.86\">So we&amp;#39;re seeing each one of\nthese things has a little bit</text><text start=\"151.91\" dur=\"2.6\">more of a growth.</text><text start=\"154.51\" dur=\"1.78\">Let&amp;#39;s look at another\none here.</text><text start=\"156.29\" dur=\"3.64\">Log-linear versus quadratic.</text><text start=\"159.93\" dur=\"2.15\">Here you can see that the growth\nis actually going up</text><text start=\"162.08\" dur=\"1.75\">much more rapidly.</text><text start=\"163.83\" dur=\"2.79\">Quadratic is really starting\nto skyrocket.</text><text start=\"166.62\" dur=\"2.7\">And again, the log-linear one\nlooks like it&amp;#39;s almost flat</text><text start=\"169.32\" dur=\"1.62\">compared to it.</text><text start=\"170.94\" dur=\"2.23\">And again, the observation\nhere is that quadratic is</text><text start=\"173.17\" dur=\"2.06\">often a problem.</text><text start=\"175.23\" dur=\"2.36\">Some problems are inherently\nquadratic, but if it&amp;#39;s</text><text start=\"177.59\" dur=\"1.69\">possible, we always\nwant to look for a</text><text start=\"179.28\" dur=\"1.57\">more efficient solution.</text><text start=\"180.85\" dur=\"2.03\">And we&amp;#39;re going to see that\nwe&amp;#39;re going to regularly see</text><text start=\"182.88\" dur=\"1.89\">quadratic problems, so\nthis is an issue.</text><text start=\"184.77\" dur=\"3.2\">If we can find a log-linear one,\nwe&amp;#39;d like that solution.</text><text start=\"187.97\" dur=\"5.49\">And then the final comparison\nkind of is mind-blowing.</text><text start=\"193.46\" dur=\"3.29\">Exponential algorithms are\nincredibly expensive.</text><text start=\"196.75\" dur=\"5.09\">In fact, here&amp;#39;s a plot over here\nof an exponential versus</text><text start=\"201.84\" dur=\"2.77\">a quadratic one, and you can&amp;#39;t\neven see the graph because the</text><text start=\"204.61\" dur=\"2.47\">exponential one is tucked right\nalong this graph here,</text><text start=\"207.08\" dur=\"1.38\">blown up really fast.</text><text start=\"208.46\" dur=\"4.37\">So if I replot this on a log\nscale which makes the</text><text start=\"212.83\" dur=\"3.9\">exponential one now linear, you\ncan see how much better</text><text start=\"216.73\" dur=\"1.87\">the quadratic one is.</text><text start=\"218.6\" dur=\"1.9\">And this is why that&amp;#39;s\na big difference.</text><text start=\"220.5\" dur=\"1.75\">As I said earlier, there&amp;#39;s\na big difference</text><text start=\"222.25\" dur=\"3.23\">between n^2 and 2^n.</text><text start=\"225.48\" dur=\"2.87\">2^n grows really fast\ncompared to n^2 .</text><text start=\"228.35\" dur=\"2.87\">And this is just a visual way\nof reminding you of that.</text><text start=\"231.22\" dur=\"1.65\">If you can, you want\nto avoid an</text><text start=\"232.87\" dur=\"1.59\">exponential class algorithm.</text><text start=\"234.46\" dur=\"2.92\">Even a quadratic one is going\nto be better by a long shot</text><text start=\"237.38\" dur=\"2.25\">for any reasonable-size\nproblem.</text><text start=\"239.63\" dur=\"2.83\">So these little graphs just give\nyou a way of visualizing</text><text start=\"242.46\" dur=\"2.34\">the differences between the\ndifferent classes of</text><text start=\"244.8\" dur=\"0.92\">algorithms.</text><text start=\"245.72\" dur=\"1.98\">And throughout the rest of the\nsubject, we&amp;#39;re going to come</text><text start=\"247.7\" dur=\"2.61\">back to talk about different\nclasses of algorithms and what</text><text start=\"250.31\" dur=\"1.25\">their costs are.</text><text start=\"251.56\" dur=\"0.86\"></text></transcript>\n"}