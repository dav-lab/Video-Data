{"IRxsjPGh1oQ": ["So we're going to do one last example in this sequence", "We've been looking at approximation algorithms", "We've been looking at guess and check  exhaustive", "enumeration", "We saw when we wanted to move to floating point  we needed", "to be a little more clever  and that led us to the idea of", "bisection as a smart way of reducing the computation at", "each stage  especially when we have functions or problems", "where there's a monotonic relationship between the value", "we're looking for and the guesses we're making", "There's one other  very powerful  algorithm for doing", "approximations  due to Sir Isaac Newton  often called the", "Newton Raphson algorithm because it was found at the", "same time by Newton and by Raphson", "Here's the basic idea behind it", "We want to find the root of a polynomial", "I'll remind you a polynomial  p x   is some sequence of", "coefficients and powers  so it's a n   x to the n th power", "a n       x to the n minus first power and so on", "It's just a sequence of numbers times powers of x  and", "what we often want to do is find a value r such that p r", "is equal to", "We want to find the root  the place where  on that x axis", "that graph crosses", "Now  that sounds like a lot of math", "Let's make it a little simpler", "A simple way to think about this is if we want to define", "for example  the square root of    we just need to find", "the root of the polynomial x", "Makes sense  if we combine the value of x such that x", "is equal to    we're done because that's", "the thing we want", "Now  what Newton showed was that for things like", "polynomials  if g is an approximation to the root  the", "place where it's equal to    then g   p g    p' g  is a", "better approximation  where p' is just the derivative of p", "And if you haven't done calculus", "don't worry about it", "We'll show you in a second what that means  but this is a", "powerful tool", "Newton proved this  that given an approximation  g   p g", "p' g  is a much better approximation", "OK  so what does this have to do with things", "Well  let's look at an example  a really simple case", "Suppose our polynomial is just some coefficient c times x", "k  then its first derivative is just  cx", "And in particular  if the polynomial is just something", "simple  like x     k  then the derivative is just  x", "Why is that nice", "Well  Newton Raphson says that given a guess g for the root", "a better guess is just shown right here  is g   g     k", "all divided by  g", "And remember  we were using this form to find square", "roots  because it says if k is the value of the square root I", "want to find  then that's the polynomial I want to use", "So this little formula says here's a better way of finding", "a guess for the square root of k", "All right  let's put that together", "We can now have another way of generating guesses  which we", "can check  which turns out to be very efficient  so here's", "some code that would do it", "Again  I've got a little epsilon that tells me how", "close I want to get", "Let's assume I'm looking for the square root of", "We'll try some other examples in a second", "I'm going to give an initial guess  which", "will just be y", "It's not a very good guess  but it's", "reasonable place to go", "And look at the code", "Very crisp  very clean  very efficient", "It basically says check to see am I close enough", "Is the difference between the guess   and y less than or", "equal to the epsilon", "If it's bigger than that  I'm not close enough", "And then Newton says get a new guess by taking the old value", "of guess  taking guess        divide it by     guess  which", "is the derivative  and use that to create a", "new binding for guess", "You just keep updating", "Do that until I get close enough  and when I'm done", "just print out the result", "Nice and crisp", "What's this doing", "It's generating guesses", "There's the generation", "But it's not doing it exhaustively", "It's using this property of mathematics together  and then", "it's testing  right here  to see if I'm done", "So it's another example of a generate and test kind of", "algorithm  and let's look at what happens if we run it", "So in my IDLE  I've got just a version of that", "I'm going to do it with   to start with", "And if I evaluate this  it prints out its guesses  starts", "with a value of    and then goes to", "And you see  in just   guesses  it gets", "a pretty good answer", "Let's try a different example", "Let's try our good old example of", "Again  if I evaluate that one  you'll see again  in basically", "five steps because the first one was using   and a half", "it gets to a quite good approximation of it", "Let's try something even bigger", "I'll go back over here", "Let's do my example of   and let's evaluate that", "And if we do that", "huh", "What did it take me", "in   steps  it got to a really", "good solution", "So this is what", "This is another way of simply figuring out how to generate", "good guesses and then testing them", "So we've now seen several examples", "We've got this idea of iterative algorithms", "We're using the same piece of code over and over again", "We're using that to build up this idea of a guess and check", "method where we guess solutions and then check them", "We use a looping construct to generate the guesses  and then", "we just check and keep going", "And what have we seen", "We've seen we could do exhaustive enumeration  where", "we just do a whole bunch of trials", "We could cut down on the search in a clever way by", "simply using bisection  bisecting the range of places", "where we're looking for guesses until we get to", "something close enough", "Or for the group finding case  which it turns out to be a", "very general case  we can be really efficient by taking", "advantage of a mathematical property to very quickly cut", "down on where the solution lies", "Those are examples of iterative algorithms  and", "they're examples  in particular  of guess and check", "methods that turned out to be really powerful", "And we're going to give you a chance to explore those as we", "move through the class"], "cHpto4Yc45o": ["John Guttag  In the last segment  we talked about simulation models in", "enormous generality", "Today  I want to get more specific  look at an example of how a simulation", "model can be built  and get some practice in designing", "classes along the way", "So let's start by looking at the notion of Brownian motion  as shown by", "these red and blue dots moving on your screen", "In    the Scottish botanist Robert Brown observed that pollen particles", "suspended in water seemed to float around at random", "He had no plausible explanation for this so called Brownian motion  and", "made no attempts to model it mathematically", "A clear mathematical model of the phenomenon was first presented in", "in Louis Bachelier's doctoral thesis  the theory of speculation", "However  unfortunately for Louis  since this thesis dealt with it the", "then very disreputable problem of understanding financial markets  it", "was largely ignored by respectable academics", "And in fact  he struggled to even get a job", "Five years later  however  in    Albert Einstein  then a young man", "brought this kind of stochastic thinking to the world of physics  with", "a mathematical model almost the same as Bachelier's and a description of", "how that model could be used to confirm the existence of atoms", "For reasons certainly lost on me  people seemed to think that", "understanding physics was more important than making money", "I guess the times were different", "Brownian motion is example of something that has come to be called a", "random walk", "Random walks are widely used to model physical processes  e g  heat", "diffusion  biological processes  for example  the kinetic displacement of", "RNA from heteroduplexes by DNA", "I hope some of you know what that means  I'm not sure I do", "and social processes", "For example  getting back to Bachelier  the movements", "of the stock market", "What I want to do now  though  is look at an example of a random walk that's", "actually a walk", "Imagine  if you can  a drunken farmer standing in the middle of the field", "And every second he takes one step in a random direction", "Now I want you to ponder the question  what is the expected distance from the", "origin in  say     seconds", "More generally  if the farmer takes many steps  is he likely to move ever", "further from the origin  or is he more likely to wander back to the origin", "over and over again  and end up not far from where he started", "Let's write a simulation to find out", "Before we do that  before we build any complicated computation  it's always a", "good idea to develop some intuition about the situation the program is", "intended to model", "Let's start by sketching the simple model of the situation using Cartesian", "coordinates", "Assume that the farmer is standing in the field where the grass has", "mysteriously been cut to resemble a piece of graph paper", "Let's assume further", "put the farmer right here in the middle", "assume further that each steps the farmer takes is of length    and is", "parallel to either the x or y axis", "Clearly this is an oversimplification", "But it's a common approach to building simulation models", "We start with something simple  and then add complexity a", "little bit at a time", "All right  after one step the farmer will be either here  or", "here  or here  or here", "So we see that after one step  the farmer is exactly one unit away from", "where he started", "Let's look at the second step", "Without loss of generality  we'll assume that he took", "this first step eastward", "It'll be symmetric if we went in a different direction", "After the second step  he could be right back where you started  that is", "to say zero units away", "Or he could be another step east  two units away  each of those a", "quarter of the time", "And half the time  he'll be there or there", "How far away is that", "Well that's the square root of   units away", "How do we know that", "Let's look at old friend the Pythagorean theorem", "We can look at it here", "And we know that a     b     c", "Therefore c   sqrt a     b", "If we go back here  we look at say  that x", "We see that a     and b", "And therefore this distance here is going to be sqrt", "All right  I could now look at the third step and keep drawing circles", "all over the place  but it's starting to get pretty complicated", "And that suggests to me that it's time to stop drawing pictures", "and you'll probably be relieved  given my drawing ability", "and instead start writing code", "Build a simulation that will actually give us the answer we want", "OK  let's give it a shot", "Before we do  what's your intuition", "Give it a minute  think about it", "My intuition is that since more than half the time here  after two steps", "the farmer is further away from the origin than after one step  maybe the", "longer he walks  the further he'll be", "I'm not positive", "But that's my guess going into the simulation", "All right  onto the coding", "But before we write the simulation  as usual  we want to try to invent some", "classes that correspond to the types of things that appear in the situation", "we're attempting to model", "Three classes seem potentially useful", "We probably want a class Location  because after all  it's mostly what", "we've been talking about is the location of the drunken farmer", "We probably want a class Field  corresponding to the", "graph paper we drew", "And surely we're going to need something corresponding to a Drunk", "because that's going to have to model the movements", "Now let's look at each of those classes", "Come over to the code  and look at class location", "It's very simple", "It's got initialization", "But even here  we see that a decision has been made  as simple as it is", "We see that a location is going to have only x and y coordinates", "That tells us that it's going to be a two dimensional field", "We're modeling a farmer not  oh  say  a pigeon", "There is no ability for the farmer to fly up into z coordinate", "Also  it looks like perhaps we're ready to generalize our notion of", "moving due east  west  north  or south  because we're allowing x and y", "to be floats", "We've got move  which takes a self with deltaX and deltaY   and returns a", "new location  in which we've implemented x and y by the delta", "Note that deltas could be negative", "So this isn't saying that we're always moving in one or another direction", "We can get x", "We can get y", "And here we're using the good old Pythagorean theorem  as we've just", "seen  to find the distance", "And finally we have a way to print the location", "So reviewing  the notable aspects of Location are two dimensions  no x and", "no y  no built in assumptions about directions", "That's because our delta x and delta y are floats", "All right  moving on  let's look at our next interesting type", "That's going to be Field", "Fields  like Locations  are also quite simple", "We can initialize them", "We can add a Drunk to the field", "We can move the Drunk", "This is probably the only really interesting function we have here in", "fields  interesting method", "So we say if the Drunk is not already there  then we", "will raise an exception", "Otherwise  we'll take a step", "What does that mean", "We don't know yet", "That depends upon the kind of Drunk we're looking at", "And that will allow us to take a step", "And that will return a distance along the x direction and the y direction", "We'll get the current Location", "And then we'll update the current Location with whatever we got from", "Drunk takeStep", "So what are the notable aspects of class Field that we might look at", "Well one thing we see about Fields is that there can be many Drunks", "We might or might not choose to use that", "There can be many Drunks in the Field", "And furthermore  it seems to be that the Drunks can", "be at the same Location", "We've not put in any restrictions about where the Drunks are relative to", "each other", "The final thing we'll notice is the Field seems to be unbounded", "We've said nothing about the Drunk falling off the edge of the Field  or", "running into a fence", "Again  these are simplifications  which we may choose to remove later", "The final class is actually two classes", "And since it's a little bit complicated  and I want to show you", "things about it  I'm going to look at them over here on the PowerPoint", "rather than on the IDLE window", "As we guessed  I had a class Drunk", "But look how simple it is", "The only thing the Drunk does is it has a name  and it can print the name", "What we see here is really drunk is what we before", "called an abstract class", "It's not intended to do anything useful by itself", "It's intended to be sub classed to give us different kinds of Drunks", "And as we'll see", "not in this segment  but in a future segment", "we can use it to create some rather interesting and divergent behaviors", "depending upon the predilection of individual Drunks", "This segment  we'll look at only one Drunk  one class of Drunk", "And I'm going to call that the UsualDrunk", "That's the kind of Drunk we've been talking about so far", "The most important thing to see here is that I'm importing class random", "Most programming languages  including Python  include simple ways to write", "programs that use randomness", "When we need randomness in a Python program  we import the class random", "and that supplies us with a whole variety of useful functions", "Here we're only using one", "We are using the function random choice", "random choice   has its argument  a sequence  and at random chooses a", "single element of that sequence", "With equal probability  it might choose any element", "So for example  if I were to look at something like random choice range", "it would at random return an integer and the range what", "to    because we know that's the sequence range    generates", "Here  it will return a random element of stepChoices   which we define to be", "a list of tuples corresponding to the steps in the north  south  east  and", "west direction", "So for example      is a step north", "is a step south  a step east  and a step west", "With that  I'll stop", "And in the next segment we'll use these classes to start building our", "first interesting simulation"], "BWBUXxyRILw": ["PROFESSOR W  ERIC L  GRIMSON  Welcome back", "We're almost done with this course and  if you think about it  you've", "seen  actually  a surprising amount of information", "knowledge  tools  techniques", "that really help you not only think about how to program in Python but", "more importantly to think about how to attack problems computationally", "In this penultimate lecture  we're going to have a set of cameo", "appearances  because we want to show you how the tools that you've been", "developing", "the tools you've been thinking about", "are the basis for a great variety of really interesting applications", "Now  in fairness  you'll need some more sophisticated tools in some cases", "to really get to the kinds of applications you see here", "But I hope you see  through these cameo appearances  a thread of the", "kinds of ideas you've been using showing up", "We're going to feature videos from five different MIT computer science", "professors", "Fredo Durand  Sam Madden  Dana Moshkovitz  Collin", "Stultz  and Russ Tedrake", "all talking about different applications", "of cutting edge research", "that use the kinds of tools you've been seeing here", "So you're going to see examples", "from graphics  from big data and databases  from computational theory", "from medical applications  and from robotics", "that really demonstrate how what you're learning", "is incredibly important", "Enjoy"], "hPnWQRQAEko": ["CHRIS TERMAN  So Python is object based  which presumably made it", "easy for the Python development team to write and debug the complex", "functionality provided by the Python system", "But the real power of object oriented programming is to let users do the", "same thing to create their own objects that bundle together data and", "procedures with a well defined interface", "The wheres and hows of user defined objects are what we're", "going to cover next", "Now let's talk about how to add new types to the Python system", "We use the class statement to define a new type", "So a class statement begins with the keyword class  followed by the name of", "this new type  this new class that we're creating  followed by a", "parenthesized list  which I'll tell you more about the second", "Underneath the class statement is a set of indented statements  all of", "which will be treated as part of the class definition", "And that's where we'll define the attributes of the class", "So it works just like def  when we're defining procedures", "The indentation indicates all the statements which are considered part", "of the class definition", "And when you go back to the original indentation  the class", "definition is completed", "So classes can inherit attributes from other classes", "In this case  the coordinate class that we're defining inherits from the", "object class", "And in fact  you could have a long list of classes that you are", "inheriting from", "We have a terminology for the inheritance relationship", "We say coordinate is a subclass of object", "An object is a superclass of coordinate", "It's possible for the inside the coordinate definition to provide new", "definitions for attributes that appear in some super class", "And that's said to be overriding that attribute", "So inside of the code or coordinate  references to that attribute will then", "refer to the new definition for that attribute  rather than the inherited", "definition", "And we'll use that to our advantage as you see later on", "Usually when creating an instance of a type  we'll want to provide some", "initial values for the internal data", "So to do this  we define an init method", "And you can see that we have a funny spelling for init", "It has a double underscore at the beginning and a double", "underscore the end", "And that naming convention is used to indicate built in methods in Python", "And in this case  were overriding the build in method  init method  in", "object with a new init method for coordinate", "So you should be careful using double underscore names  because you're", "almost certainly changing the behavior of the base Python", "system when you do so", "In this case  it's a change we want to make", "Remember method is our fancy name for procedural attribute", "And in fact  if we go look over here  you can see the way we define a", "procedural attribute", "It actually looks like a function definition", "It just happens to be inside a class statement", "So let's actually look at the argument list to init", "In this case  there's three arguments", "Now when calling a procedural attribute of an object", "or in this case we'll just say a method when calling a method", "Python always makes the first argument of that call", "It passes in the object itself  the object that this is a method of", "So when we call the init method  self will be the object that we're trying", "to initialize", "And then there's additional arguments that the user will provide", "By convention  we always call that first argument self", "And Python programmers will expect to see it there  and so you'll confuse", "them if you call it something else", "And so I recommend you follow the same convention the rest of the Python", "world does", "So inside of a method  always the first argument to any method should", "always be called self", "So the dot operator is used to access an attribute of the object", "So in this case  when we say self x  we're looking for the x attribute of", "the self object  which in this case is the object that's being initialized", "So this particular piece of code is actually defining two attributes for", "the object being initialized", "an x attribute and a y attribute and initializing with values that were", "passed in by the user", "So let's talk a little bit about how attributes are found when you", "reference them", "So if you reference an attribute  what Python will do is first look in the", "local object  the self object in this case for a", "definition of that attribute", "If it doesn't find it there  it will look in the class object to see if", "there's a definition of the attribute there", "And if not  it will start moving up the chain of super classes  looking at", "each one in turn for a definition of that attribute", "So that's the way the inheritance works", "So if I don't provide a definition for the attribute in the local object", "then the class may provide a definition of the", "attribute or a super class", "So the data attributes  for instance self x and self y  of an instance", "remember  these were attributes that were added to the instance being", "initialized  the instance of the object being initialized", "These are called instance variables", "So I would say self x and self y are instance variables of an object of", "type coordinate", "So let's talk about how do you actually create an object", "The way you create an object is you use the class name", "like a procedure call", "So in this case  you say coordinate", "And then remember  there's an implicit first argument", "So when you say coordinate  what Python will do is to go off and", "actually create a new object of type coordinate", "And then it will basically pass that argument into the init method that", "you've defined  along with any additional arguments you supply", "So in this case  I supplied two arguments", "So the init method gets the object that's being initialized plus three", "and four as additional arguments", "Then the init code runs off and actually creates an x and y instance", "variable for that new coordinate object and initializes that", "to three and four", "So if we look inside of c  it will now have instance variables of x and y", "And then of course any attributes defined by the class definition of", "coordinate and then by the class definition of object", "Of course we can go off and define a new coordinate  an additional", "coordinate  in this case one at      and we say that as the value of the", "simple origin", "So now when we go ahead and reach inside these objects  we can ask for", "the x attribute of c and the x attribute of origin", "And if we do so  we'll expect the system to print three  because that", "was the x argument here of the first coordinate creation and zero  which is", "the x argument of the second coordinate creation", "Notice by the way that the init method doesn't actually return a value", "And so the init method is sort of special in the sense that when the", "init method finishes executing  Python will always return as the value of", "this creation statement  of the constructor statement here  it will", "return as that value the new object has been constructed", "So that's why c becomes an instance of coordinate object", "So left to its own devices  Python uses this sort of this unique but", "pretty opaque representation of an object", "So if I ask the Python system to print out one of my newly created", "coordinates  it'll give me the type of the object  in this case it will tell", "me its location and memory", "And because every time I create an object it gets newly allocated from", "memory  this number here will be unique", "However  I don't get much information about what the coordinate is", "And that's probably not very useful", "So we can actually improve that print out  make a much more useful way of", "displaying the coordinate object by overriding another of the built in", "methods for objects  in this case  the string method", "Remember the built in names have these double underscores in", "front and in back", "So what this string method does its job is to take as this first argument", "this instance of the object  and return a string  which is going to be", "print representation of the object", "The string that you return will actually be the string that the Python", "system will send to the output stream", "You see what we do is we take some constant strings  a less than sign and", "a comma  and a greater than sign  and in between we sandwich the string", "representations for the x coordinate and the y coordinate", "If we had put this definition in before we created an instance of the c", "class  then what we would have had is when we print c  the print routine", "would call the string method and it would get back this string  which is", "then what gets printed out", "And you see this is sort of a much more useful representation of the", "object c than this sort of opaque one", "We can ask for the type of an object", "So we go off ask the Python system to tell us what the type of c is", "It comes back and this is sort of the representation Python has for a", "user defined type", "It's a class  meaning that's user defined", "And in this case  it was a called coordinate  and it was defined in the", "top level module of Python", "Does this make sense", "If we ask Python to print out the value of the symbol coordinate  we can", "see that we get returned this internal representation of a user defined type", "which of course matches the type of c", "So when I say coordinate  I'm basically referring to the same type", "and that is in fact the type of c", "And in fact  if we ask for the type of coordination  and we ask  because I", "have a user defined type  what type does it have", "You can see it's of type type", "In other words  Python thinks of it just like any", "other type in the system", "So the user defined defined type and the built in types are treated much", "the same way for most of Python's business", "Finally  to test whether an object is an instance of a particular class or a", "particular type  you can use the isinstance procedures", "So you pass in the object and the name of a type  and in fact it'll tell you", "whether it's true or not", "Now  noticed I could've also said is c an instance of an object", "And that would have also been true  because object is a superclass"], "jx0WwCGCh-0": ["ERIC GRIMSON  We've now added tuples  generalization of strengths  an", "ordered sequence of elements  where the elements can be any structure", "And we've already seen that a lot of the operations we wanted on strings", "we're going to have on tuples", "We're going to add another kind of structure called a list", "And it looks a lot like tuples", "And again  lists are ordered sequences of values", "Each one's identified by an index  so it's going to support all the same", "kinds of operations I saw before", "The difference here is we're going to use these square brackets rather than", "the parentheses to distinguish a list or to create a list  as", "opposed to a tuple", "So they are a little different in terms of how they're going to look", "And as a consequence  and one nice thing  is that singletons are now", "pretty straightforward", "It's just a square bracket  the entry  and another square bracket", "I don't have to put that annoying comma in that I had to do with tuples", "in order to distinguish between an arithmetic expression and a tuple with", "just one element", "Looks much the same", "So what's the big deal", "Well  there's one very big difference  and it's a really important one", "Which is that lists are mutable", "And what does that mean", "It means we can change them", "What does that mean", "Well  things like ints  floats  strings  and tuples are immutable", "And that means that we can't go in and change an element inside of them", "Now for ints and floats  that's obvious", "And tuples  we just introduced  so we sort of have to accept that on faith", "But if you think about strings  you can get elements of strings out   you", "can slice into strings", "but you can't go in and directly change one character in a string", "They're not mutable", "They're immutable", "They don't change", "On the other hand  lists can be modified after they're created", "And why would we want to do that", "Well  in part because there are going to be some problems where that's", "really valuable", "So what does that mean", "Some data objects  we really want to treat as if fixed", "It says we create new versions of them  we combine variables to them", "but we don't want to change them", "And this is usually valuable when those data objects are going to be", "frequently referenced  but where the pieces inside of them don't change", "Why would we want to support having ability to change them  because that", "could just lead to bugs", "On the other hand  there's going to be some instances where the data objects", "may want to support modifications to elements inside of them", "Why might that happen", "Imagine you've got a really large database of personnel information and", "you want to do things like change salaries", "You don't want to have to make an entirely new copy of the database just", "to add in a new salary", "You'd like to be able to go inside and change a piece of that", "So lists are going to support that kind of operation by enabling us to go", "in and mutate  or alter  elements of the pieces", "One issue to keep in mind is that  while mutable structures give us more", "flexibility  they also are more prone to programming errors", "If I've got two different pieces of code both pointing to the same list", "and I have one piece of code change or mutate a portion of the list  I want", "to make sure that that other piece of code is aware of that", "If not  I can get myself into some really interesting bugs", "So there's a cost  but there's a bonus", "Let's look at an example of what this means", "So let's create a couple of lists", "And in fact  over here in my IDLE shell  I'm going to do that", "Let me just create a couple of lists", "And I'm going to call Techs as a name for a couple of", "great technical schools", "And notice the angle braces to get them for me", "And I'm going to create Ivys", "I'm not going to do all of them  but I will again create a list", "of some great schools", "We'll do Harvard", "We'll do Yale", "And we'll do Brown", "And if I print them out  I can say  what is the value of Techs", "And it just gives me that list", "On my slide  I've given you a visualization of that", "So think of this as Techs and Ivys sitting up in that global environment", "After all  I just typed them into the shell for Python", "And what do they do", "Well  they point to a structure in memory somewhere that has that", "sequence of elements inside of it", "As I've said  I can treat this as if they were just an order of sequences", "So I could say something like  what is the first element of the Ivys", "Remember  we start indexing at    so that gives me back", "Yale  which is nice", "And I could slice if I wanted to", "I could say give me back the Ivys  everything up to the second one", "And that gives me the zeroth and first elements", "I can do things I'd expect to do on that", "Let's see what happens when we start putting things together", "So I've got two lists   a list of tech schools", "I've got a list of Ivys", "Let's now create what looks like two different lists of universities", "So the first one  I'm going to call Univs  for universities", "And it's going to be a list of the Techs and the Ivys", "And I'm going to create what looks like the same thing", "I'm going to call it Univs   and I'm simply going to", "re create that sequence", "Cal Tech was the first one", "And since I'm creating a list of these lists  I'm going to put a comma in", "there  and then I'm going to do Harvard  Yale  and Brown", "Are these the same thing", "Well  let's print them out", "If I look at Univs  yeah  nice", "It's a list of two elements  the first of which is a list of two elements", "Second of which is a list of three elements", "And if I look at Univs   it looks exactly the same", "They certainly print the same", "So it is easy to think that these might  in fact  be the same thing", "But they're not", "And let me show how I can test that", "Let's evaluate the following little command up here", "An append is a method associated with lists", "We'll come back to methods later on", "That dot notation basically says  if I type in Techs  it's a list", "The dot says get the method append associated with it", "Don't worry what a method is  but basically think of it as a function", "that is going to take an argument", "in this case  a single element  RPI", "and it is going to attach that element to the end of the list text", "So  what does it do", "It's an important thing here", "It doesn't create a new list", "It mutates the existing one", "It takes Techs as a list and changes it", "It mutates it to add a new element to the end  extending the list by one", "Now  as a consequence  if we print out Univs  notice we now have in that", "first element MIT  Cal Tech  and RPI", "We have changed what's inside of there", "We have mutated Techs  not Univs", "In fact  let's just check it", "Let's go look at Techs  and there's Techs", "But again  if I go back to Univs  there it is", "And now what happened to Univs", "Aha", "It didn't change", "And that's an important point", "Look at the form of Univs", "It has just the first two pieces to it", "And  in fact  if I go to the next slide  we've captured that", "If I print out Univs  I get out MIT  Cal Tech  RPI  followed by Harvard", "Yale  Brown", "But for Univs   I just get MIT  Cal Tech  and then Harvard  Yale  Brown", "Why", "Well  this is where the mutability comes in", "So let's think carefully about what we had", "Before I did that append  I'd had a binding for Techs  and I had", "a binding for Ivys", "We created those", "They said we're lists", "And then what did I do", "I said  let Univs equal", "and in fact  let me just write it out here", "I bound Univs to Techs and Ivys", "And what does that say", "It says make a list", "So there's Univs", "It's going to make a list", "And it says the value of the first element is going to be", "the value of Techs", "So aha", "It's just a pointer to that list", "And the value of the second argument  or the second element  is just the", "value of Ivys", "So aha  it's just pointing to there", "So Univs is a list whose elements are just pointers to other lists", "On the other hand  what did I do when I created Univs", "If you look back  you'll see that  in fact  I created it by", "actually typing out lists", "I said Univs", "just to say a little bit of it", "I said Univs  was going to be  and then I said quote MIT", "quote Cal Tech  comma", "And then I did a bunch of other things", "I'm not going to do all of it", "But this is telling Python  create a list with those strings inside of it", "So in fact  that's exactly what it did", "Univs  is going to create a list  but it creates it with a new version", "Right there", "Notice Techs is not pointing to this", "There's a new version right there", "Ivys is not pointing to this because I created them and inserted them inside", "of this larger list", "That's important  because now when I did that append on", "Techs  what did it do", "It went over here and changed that", "It added that into the end of it", "That means that Univs changes because it sees that", "But what about Univs", "This is a completely different list", "Nothing changed there", "Let's make some observations out of this", "The elements of Univs are not copies of the list to which Ivys and Techs", "are bound  but are the lists themselves", "I got the value of Techs  which pointed to the list", "And this effect is something we call aliasing", "Basically what does aliasing says", "It says we have two distinct paths to a data object", "One is through the variable Techs  in this case", "There's a second one through the first element of the list object to which", "Univs is bound", "And one of the effects of that is that I can mutate an object through either", "path  but the effect will be visible to both", "And I just saw that back here when I mutated Techs  but Univs changed", "That sharing of data is really important", "And that mutation  that ability to change things  is really important", "This is very convenient  but it also can be really dangerous", "It can be treacherous", "Because if I had something that was changing Techs and I didn't realize", "that Univs inherited the Techs structure  I've now changed something", "inside of Univs", "And if you think back to the code I just typed in there  you saw nothing", "that said make a change to Univs", "But changing a part of it had that effect", "So aliasing is a valuable tool  but it is going to occasionally lead to some", "problems  and we have to be careful about it", "Now what else can we do", "Well  we can certainly change elements directly", "So if I go back  for example  and I look at Techs", "Here's my list of tech schools  MIT  Cal Tech  RPI", "I might decide I want to change the list", "So I can literally say  change the second element of Techs", "And I do it just with an assignment statement", "I'm going to pick up WPI", "And now if I look at Techs  that element is changed", "I've mutated it", "By the way  if I go back and look at Univs  it has also changed", "I've now got WPI in the first portion of that element", "Just to remind you  it says I can mutate elements of this", "I cannot do the same things with tuples", "So if I do an example where I create a tuple", "we can look at temp", "But if I now say  and I could certainly get out  for example  the", "first element of temp", "But if I attempt to change that  as I just did above here by putting in", "something new  it's going to complain", "And it says you can't do it because these things are not things that can", "be mutated", "So now we've got lists", "Let's see what we can do with them", "As I just said  stressing it  I can't do that with tuples"], "ADB7EXNTVqs": ["This coin just came up tails twice in a row", "How many more tails in a row would it take for me to convince you that the", "coin has tails on both sides", "If I were to flip it   times and got eight tails and four heads  would you", "be convinced that is was weighted  so that tails would typically come up", "twice as often as heads", "Suppose I flipped it     times and got   tails and   heads", "In the next sequence of lecture segments we'll look at this and", "related questions", "We'll cover the law of large numbers and the gambler's fallacy", "More generally  we'll talk about what happens when we draw samples from", "different kinds of distributions", "We'll conclude by looking at normal distributions", "And how one can use the standard deviation of a normal distribution to", "understand how confident one should be in the accuracy of", "inferences based on sampling"], "Rjk7yfFQCPI": ["ERIC GRIMSON  So far  in this course  we've been building up", "a lot of really powerful tools", "We've seen different kinds of data structures", "We've seen different classes of algorithms", "We've seen ways of putting those together to do", "interesting things  solving problems", "And one of the things we might want to do now is just step", "back for second and ask  so what are we trying to", "accomplish when we design program  a piece of code", "What are our goals", "And typically  there are", "The first and most important one is we want our program to", "return correct answers on all legal", "inputs  all legal inputs", "So if we're defining a function that is to apply to", "integers  we want to work on all values of integers", "Or if there's a particular range  we want to specify that", "as part of the specs", "So our first goal is to have code that", "does the right thing", "It computes the right answer", "Second goal can often also be  though  that we want it to", "perform its computation efficiently", "Typically    is more important  but there are times", "when that second point is also critical", "For example  we've got a program to detect collisions", "in aircraft  or to do real time", "control of traffic signals", "We need it to be very efficient to ensure that it", "can respond before something happens in the world", "As a consequence  sometimes   is really crucial", "But even in cases when   is most important  it is still", "valuable to understand and optimize efficiency", "So even if we've got code that computes the right answer  if", "we've got alternatives that are going to give the same", "answer  but one's more efficient than another  we'd", "like to know about that", "So that leads us to this question of what we call", "computational complexity", "And here we're going to do a somewhat informal version of", "this  but to give you a sense of how you begin thinking", "about computational complexity", "So what does it mean to say  how efficient is an algorithm", "There are   questions we can ask", "We can ask how much time is it going to take for the program", "to run  and we can ask how much memory is it going to", "need  inside of the machine  in order to do the computation", "it wants to do", "Again  typically  we're going to be most interested in this", "one  the amount of time", "We'll see that we can also worry about memory  and for", "some really big problems  memory's crucial", "But in general  we're going to worry about time", "How long does it take for the program to run", "Even there  when we start thinking about that  we want", "to be careful", "We want to balance minimizing computational complexity with", "conceptual complexity", "And what do I mean by that", "I'd like to keep my code clean  simple  easy to", "understand", "So if I come back to it a month from now  a year from", "now  I still understand what the code was written to do", "If somebody else looks at it  they can understand what the", "code was intending to do", "And I say that because sometimes one can find", "interesting tricks one can play to get a little bit more", "efficiency in the code  but it makes the code much harder to", "understand", "And we need to balance that", "There's no perfect balance  but in general  I'd prefer to", "have code that's still easy to understand", "And  having done that  have it be as efficient as possible", "than to jeopardize the code just to give a little bit of", "efficiency", "I want to make sure that our code is still clean  but we do", "want to worry about how do we minimize complexity", "And that complexity is typically going to be in terms", "of how long does it take something to run", "OK  so now we could say  given a function  we'd like to", "answer the question  how long will this take to run", "So what are our choices", "Well  a simple choice would just be run it on some input", "and time it", "That  of course  has several problems", "The first one is  it depends on the speed of the computer", "The second one is  it actually depends on the specifics of", "the Python implementation", "Depending on which version you're using  you may get", "slightly different answers", "Both those aren't great", "And the third one is  of course  it will depend on the", "value of the input", "Now if I've got something that's a recursive function", "changing the input will lead to different amounts of time", "So how do I get rid of these factors", "I want to be able to make general statements about", "complexity", "Well  for points   and    I can avoid those by measuring", "time  not in terms of actual elapsed time  but in terms of", "the number of basic steps that the computer executes", "We'll come back to   in a second  but we're going to", "start with thinking about how do we avoid   and", "And for that  we use what's called a random", "access machine model", "We're going to use that as our model of computation", "What does that say", "It says the steps are executed sequentially", "We're not running in parallel", "And the second assumption that model makes is that a step is", "an operation that takes a constant amount of time", "And for that  we're going to assume assignment  comparison", "arithmetic operations  and accessing an object in memory", "all take a constant amount of time", "You might quibble a little bit", "You say  well  maybe multiplication's a little bit", "more expensive than addition", "But as a first pass  this is a pretty good approximation", "that all arithmetic operations are roughly the same amount of", "time  comparisons  assignments", "This last one here might surprise  and we'll come back", "to that later", "But in fact  we can set up our system so that  indeed", "getting any point in memory is going to take a constant", "amount of time", "The advantage of this model is it says  I'm removing the", "aspects of the machine", "How fast is my machine", "What kind of Python am I running", "And I'm able to just focus on counting the number of basic", "steps that I have to execute in order", "to compute a function", "So that removes the first two points", "where I had some concerns", "For the third point  the third point  I'll remind you  is it", "depends on the value of the input", "Here we're going to measure time  not in terms of a", "specific input  but in terms of the size of the input", "And that'll make sense in a second as we walk through it", "Now  you first say  well  OK  even if I'm talking about the", "size of the input  might the complexity not still", "depend on the value", "Let's take a little example", "Here's a piece of code to linearly search a list", "This is trying to see if a particular", "element is in a list", "So what does it do", "It iterates over the list  for e in the list", "And for each one of those elements of the list  it", "checks to see is it equal to the thing I'm looking for", "If it is  I'll return True", "If it isn't  I'll return False", "All right", "Nice simple piece of code", "Here's the problem", "And the problem is that I could try and measure the", "complexity of this code in terms of the size of the list", "L  which makes sense", "That's the thing that's most likely change", "But the problem is that if x happens to be near the front", "of L  it's going to return True almost immediately", "On the other hand  if x is not in L  then the code is going", "to have to go through all the elements of L before it can", "return False", "And so it's going to give us dense  different answers", "depending on the specific choice", "And that's not what we want", "We need a general way of measuring complexity", "So what we're going to do  as a consequence  is  we're going", "to think about what are the different cases under which we", "can measure complexity", "Well the first one will be what we could call best case", "It's the minimum running time over all possible inputs of a", "given size", "So for all possible lists of some length  for example", "what's the best case I could see", "Well  for linear search  the answer will be constant", "It would be independent of the size of the inputs  in the", "best case  because to be the first thing I'd look at", "That's not very helpful", "An alternative is to look at the worst case", "What's the maximum running time over all possible inputs", "of a given list", "And there  what we see for linear search is this going to", "be linear in the size of the list", "So it's going to take some number of steps that depends", "on how long the list is", "If I double the list  the worst case is going", "to double as well", "That may be more useful to me", "There's a third possibility which is to use the average", "case or expected case  that is  just average the running", "time over all possible inputs of a given size", "And that might be more effective in terms of", "thinking  on average  what do I expect to see", "I could even be clever", "If I know that my inputs don't come uniformly distributed", "they're not all equally likely  if I have some", "knowledge about how likely an input is  I could even take", "advantage of that to do my averaging", "So an average case  some sense for practical purposes  is", "kind of nice", "But in fact  what we're going to focus on is the worst case", "sort of an upper bound on the running time", "And it gives us a sense of what happens in the worst", "possible case for different kinds of algorithms", "And in particular  it's going to allow us to compare", "different classes of algorithms in a", "kind of nice way", "OK  so now I'm saying I want to measure basic steps and I'm", "going to do it in the worst case", "Let's see how we might try and do that", "And let's look at an example", "Here's our old friend factorial  a little procedure", "that's going to compute factorial of n", "It's a little iterative loop  sets answer initially to", "and then it runs through a while loop", "As long as n is bigger than    it multiplies n by answer and", "binds answer to that new value", "It decreases n by", "And it keeps going through the loop until it's done and then", "it returns an answer", "You've seen this before", "Let's think about how do we measure the complexity here", "So we want to count the number of steps  right", "So what have we got", "Well here's the first one and that's basically one step", "that assignment statement we said that was one of our", "pieces of our model", "Now inside the loop  what do we have", "Well  for each time in the loop  I've got to do a test", "And this      is actually   operations", "It's a multiplication and an assignment", "And this    is actually   operations", "It's subtraction and an assignment", "So inside of the loop I go through   steps", "And then what do I do", "Well  I go through that loop multiple times", "So I do it   steps and then I do   steps  then I do   steps", "And in fact  we know we'll go through that loop n times", "whatever the value of n is", "So there are  n steps", "Go through the loop  and then  finally  I've", "got one for the return", "So I could write a little expression for this", "It says that the number of basic steps execute", "here is  n", "Do we really care about the", "Well  clearly not because  as n gets large  it gets", "irrelevant", "This really turns into an expression that", "says it's  n steps", "And again  I'm not worried about tiny differences in", "terms of milliseconds of something", "I want to know how does this algorithm behave I make my", "argument arbitrarily large", "And so basically  this has  n steps that we need to execute", "All right", "I got rid of the    but what about the", "Do I really care about the", "And I'm going to argue that  in general  we don't  that", "those multiplicative constants are not relevant when", "comparing algorithms", "To see that let's look at a different example", "Here's something we saw before", "This is trying to find square roots  the square root of x", "within some accuracy epsilon", "I'm not going to go through the code in detail", "We simply set up a step size", "We get an answer and we've got a little while loop that runs", "through  looking at different values of answers", "So it starts at    increases by a small amount  a small", "amount  a small amount and it keeps trying until it finds an", "answer that's close enough  in which case it returns it", "If we were to call this procedure with x equal to", "and an epsilon of      it's going to take about", "iterations to get through the loop", "Now inside the loop  there are actually about   steps if we", "count them carefully", "So you could say it's about         operations", "But it's   times the number of times through the loop", "In this case  the number of times through the loop is", "about", "Now let's compare that to bisection search", "We saw this before", "This is a bisection way of trying to", "find the square root", "Remember what it said we do", "Given a number  we look at a low value of   and a high", "value  let's assume it's big enough  of x", "We pick the middle point  we check it", "If it's close enough to the answer  we're done", "If not  we decide whether the real answer lies between that", "midpoint and the high number  or between the low number and", "that midpoint  and then we do the same thing", "And we keep chopping it down", "If we call this procedure on the same argument     and", "that same epsilon      it's only going to take", "iterations through the loop", "Now it turns out  in this case  there are about   steps", "within each iteration as opposed to what I had the", "previous case  which was eight  so a few more steps in", "the iteration", "But it's really the number of iterations that matter", "versus", "Hey  I'll take   any day", "So what we're really saying is do we care whether it's", "or         when we're comparing it to", "whether it's   or    and the answer is no", "What we really care about is the growth in", "the size of the problem", "It's the size that matters and so those multiplicative", "factors don't concern us very much", "And what that  then  says is  given that it's the difference", "in the iterations through the loop that matter  we're going", "to drop the multiplication factor", "It's probably not particularly relevant", "And so we're going to focus on measuring complexity as a", "function of the input size", "We'll focus on the largest factor in whatever expression", "we write that captures the number of basic steps  and", "we're going to be mostly concerned with", "the worst case scenario"], "ky6rSZOoBws": ["JOHN GUTTAG  Hello  again", "And welcome back to another exciting segment of  X", "In the last segment  we looked at this plot", "We observed that the standard deviation should always be viewed in", "the context of the mean and therefore is not particularly useful for", "comparing the variance of sets with widely divergent means", "So  for example  it doesn't tell us much about the relative variance of", "the absolute heads and tails differences", "let's say    to the eighth and   to the twelfth flips per trial", "We do that using something called the coefficient of variation", "What we want to do is look at the variance relative to the mean", "So  not so surprisingly  the simplest way to do that is to take the variance", "as shown by the standard deviation and divide it by the mean", "And that's exactly what this code implementing the coefficient of", "variation does", "As you can see from its implementation  it's undefined when", "the mean is equal to", "Well  that's the way division works", "Hence  in that case  we return the special value  not a number", "denoted by the string NaN", "In general  distributions with the coefficient of variation less than", "are considered low variance", "Notice that if the mean is near    small changes in the mean lead to", "large but not necessarily meaningful changes in the", "coefficient of variation", "Also  unlike the standard deviation  the coefficient of variation cannot be", "used to construct confidence intervals", "something we'll talk about in the next segment", "By now  you must be getting awfully bored with flipping coins", "I know I am", "Nevertheless  I'm going to ask you and me to look at yet one more coin", "flipping simulation", "This simulation illustrates yet another way to use PyLab's plotting", "capabilities and gives us an opportunity to get a visual notion of", "what standard deviation means", "It also gives me a chance to talk about a nicer way to structure code to", "do simulations", "As before  flipSim simulates a number of trials with some number", "of flips per trial", "flip  as before  flips a coin some number of times and returns the", "average heads over tails ratio", "Let's go look at the code", "This simulation will also give you an example of how to break up code into", "multiple functions when writing a simulation", "flip does exactly what it has always done", "flipSim is a bit different", "Notice that it's a lot shorter than the last flipSim we look at", "And the reason is that I've got all that code to do the", "plotting out of flipSim", "And I've moved that into two other functions", "makePlots", "and I'll come back to this in detail in a moment", "makes a number of plots", "in this case  two", "same number of trials but a different number of flips per trial", "and labelPlot puts the usual title and labels on the plot", "Plus  it's going to add a text box", "I think we haven't done this yet", "that puts some text in the plot telling us what the mean and the", "standard deviation are", "For the moment  you can ignore some of these arguments to text since we have", "to explain them shortly", "Let's go to makePlot", "Well  it starts by simulating some number of flips", "flips one in this case", "and getting a value  the mean  and the standard deviation for that", "experiment", "then produces a kind of plot we have yet to see", "a histogram", "It will do it using the values", "And it will produce some number of bins   in this case", "Let's digress for a minute now and look at how we produce a histogram", "In general  the statement pylab dot hist of A  where A is some sequence of", "values  and bins equals some number", "say n", "will produce a histogram with   and I'm sure this will shock you", "n bins", "What it essentially does is it takes the values in A and sorts them", "sorts the values in A", "and produces a histogram within bins that are evenly spaced across the", "range defined by the minimum and maximum values in A", "So  for example  if we look at the code here  what it does is it starts", "with an empty list  puts in  in this case      random numbers into that", "list  and then produces the histogram", "When we run it  we get the following plot", "Are you surprised that each bin is roughly the same height", "Well  you shouldn't be because random random   should be choosing", "uniformly from the space   to", "So we should have about an equal number of numbers in", "each of these bins", "Now let's add some code to the end here", "This statement first invokes the function pylab xlim", "And notice that it's invoking it with no arguments", "When xlim is invoked with no arguments  it returns the minimum and", "the maximum values on the x axis", "And then those are assigned to xmin and xmax", "We'll then do the same thing with y so we can see what those are", "We're going to print these", "And then I don't know why I bothered saying pylab figure here  since we", "only have one figure", "We could get rid of that", "Then I'm going to plot the histogram", "And in fact  since I want to show you something  let me", "comment this line out", "All right  let's run the remaining code and see what we get", "Well  notice that x range goes from   to", "exactly what it does in the figure", "and y range from   to", "again  as we see here in the figure", "Now let's go back to look at the PowerPoint version of it", "And let's uncomment this", "Notice that here  I'm calling xlim with arguments rather", "than with no arguments", "When I do that  rather than returning the values of xmin and", "xmax  it sets them", "So what I'm telling it now is irrespective of what you think the", "x axis limits should be  I want    to be the lowest and   to be the largest", "All right  let's run this code and see what we get", "Well  it prints the same things it printed before  as", "we would have guessed", "But notice how different the plot is", "The y axis still goes from   to", "But as I instructed it  the x axis starts at    and ends at", "a lot of blank space  but not Pylab's to question why", "Let's go back to our original code here and look at what", "makePlots is doing", "So as we said  it gets the values of the first simulation", "produces the histogram", "It then gets xmin and xmax", "ymin and ymax", "calls labelPlot to label the plots", "And now we can go look and see what pylab dot text is doing", "The first arguments to it tell it where to put the text box", "And here I'm telling it to put it into a location relative to the values of", "xmin and xmax and ymax and ymin", "And then I'm telling in the box I want it to produce a string giving me the", "mean and the standard deviation", "I then get a new figure because we're going to want to", "compare two things here", "Run the second experiment", "Again  plot a histogram", "Notice instead of calling xlim with no arguments to get the values  I'm going", "to set them to the values from the first experiment", "In a minute we'll see why I did that", "Then I'll get the y values", "And then I'll call labelPlot again", "All right  let's run it and see what we get", "It produces these two plots", "As we saw  along the x axis  it tells us the fraction of heads and the", "y axis the number of trials for which that was the fraction", "Not surprisingly  it peaks at", "half the time we got a head", "And indeed  that's the mean", "Actually  this might be a little small  so let me write it larger", "The mean was", "And the standard deviation was", "If we come over to this plot where instead of doing   flips in each", "trial  we did     flips  we see that we get the same mean", "actually  almost the same mean", "Here it actually is", "close enough to the one in the previous plot", "But the standard deviation is quite different", "It's", "Of course  that's exactly what we should all expect  since we know as we", "increase the number of flips  the variance should get smaller", "In both cases  we have close to a normal distribution", "The thing to notice is because the standard deviation is so much smaller", "this one is a much tighter looking distribution than this one", "And now you see why I went to the trouble to change the", "limits on the x axis", "If I use the default  this distribution would have filled exactly", "the same amount of space as this", "And they might not have visually looked so different", "However  by forcing the axis here to match the axis here  we get the visual", "clue that this is indeed a much tighter distribution than this"], "Mdxr2ooxLfA": ["ERIC GRIMSON  So let's get going", "We want to start programming in Python", "So we're going to write programs", "In the program  or sometimes called a script  is going to", "be a sequence of definitions and commands", "The definitions are things that get evaluated and stored", "away  and commands are things that actually get executed by", "the Python interpreter in what's called a shell", "And that shell is just a program that allows users to", "type commands in that are directly executed by the", "operating system of the computer", "It's called a shell because it covers up the details of the", "operating system and just lets us interact with things", "We'll come back to definitions later on  but right now we", "want to start by just simple things", "So what are commands or statements", "Well they're things that instruct the", "interpreter to do something", "And we can  therefore  begin by talking about some simple", "Python commands", "OK  so let's get going", "To deal with giving commands to the computer we also to", "think about what are we going to manipulate", "And so the first thing we have to do is describe data objects", "inside of a computer", "These are the things that capture information and that", "can be then manipulated in some way by the computer to", "determine more information", "So at heart every program is going to", "manipulate a data object", "In each of these data objects has a type that defines the", "kinds of things that programs can do to it", "We'll see that data objects are typically either scalar", "that is they cannot be subdivided", "Or  obviously  if they're not scalar they're non scalar", "something that has an internal structure that", "can actually be accessed", "And as we start building up our collection of data objects", "we're going to talk about each one of these kinds of things", "But let's start with the simplest ones", "So scalar objects", "Basically inside of Python there are three different", "kinds of scalar objects", "There are integers or ints", "These are used to represent the kinds of whole numbers", "we're used to", "There are floats  or floating point numbers which are used", "to represent real numbers  things that have decimal", "points and partions to them", "We also have what we call Boolean  often referred to as", "having a type bool which are used to represent the truth", "values of true and false", "We're going to talk about how to use each of these things", "but for now we can simply look at some simple examples", "So let me go over to my Python evaluator", "I've got a Python shell running over here", "So I can type in something like", "And it gives me back that value", "I can type in a real number", "I can even type in  if I can type it  I can type in  oh and", "I did not type it properly", "So let's type it in that way", "I can type in a Boolean value", "We'll come back to why I got an error in a second", "As I said  I can also ask Python to tell me what is the", "type of an object", "So I type in  in a bad pun that special keyword type", "followed by an open parenthesis", "This is because this is a function", "We'll come back to that later on", "I can give it an expression", "And it tells me that this is an object of type int", "Or you could say", "And this tells me this is an object type float", "So I've got simple data objects", "OK let's go back here and carry on", "What can I do with data objects", "Well I want to create commands", "I want to do things with them", "So I can start building up expressions", "And expressions are composed of operators and", "objects  data objects", "They can be combined to denote doing something", "different to them", "And the syntax for most simple expressions is simply what's", "shown here", "We have an object  an operator  and another object", "Objects are those simple things we started with", "although we can see that they could be more compound", "expressions that reduce to objects", "And so what are the kinds of operators", "Well  simple things we can do", "Let's start with just numerical kinds", "of things  all right", "So I can add two data objects together if they're ints", "I can add", "I can subtract", "I can take products", "Now let's start with simple things", "If the objects are both ints  the result is going to be an", "int or an integer", "But if either one of them is a float the result is going to", "be a float", "Again  go over to my scheme  or my little scheme over here", "for dealing with Python", "And I could type in things like   plus   two ints", "and I get out", "If one of them is a float it gives me back a float", "And we'll talk about what it does in a second", "I can take the difference between two things", "That gives me the result I would expect", "And I can take the product of two things", "So   times   is", "Now  coming back over to my slides here I've done sums", "I've done differences", "I've done products", "Division is a little different", "Division if they're floating point numbers will do the", "thing we do expect", "But if they're both integers the result", "is simply an integer", "And it's the quotient without taking the remainder", "So let's look at that", "If I take     divided by     I get out   and     which is", "what I expect", "If I take     divided by   I also get   and", "But if I take   divided by   it gives me back the quotient", "part of the division  or if you like the whole number part", "of   and", "If I want to get the remainder I use the percent sign", "remainder   gives me back the component that's left", "behind after I've done that", "And then finally what I can do is I can", "take things to a power", "So I can take   to the second power", "And I get   times    which is of course", "squared  which gives", "So I now have a set of things that I can actually run in", "terms of creating expressions that are integers or floats", "combined with some operator", "All right  what might I do with that", "Well let's look at some simple examples here", "I've already done some examples  but I", "certainly add things", "I can multiply things", "But I can also do things like say take   plus   add them", "together and multiply by", "And the way Python is going to deal with this it it's going", "to take the expression inside the parentheses  the   plus", "this portion here and reduce that or get that value which", "is   before it does the multiplication", "Now what happens if I say   plus   times   without the", "parentheses", "Well we can run it", "That gives me", "And what's happening here is that  in fact  I'm first", "executing that example before I do the remainder", "And this is basically something that says I've got", "some order in terms of how I would deal with things", "So let's look at that in a little more detail", "The parentheses basically define sub computations", "I want to complete those to get values before I go on to", "evaluate a larger expression", "So in my first example I reduce the   plus   to", "because it's inside the parens and then do the", "multiplication", "On the other hand  if I don't have parentheses then the", "operators are executed in a particular order", "There's a precedence to them", "Which means go from left to right  but we start first with", "exponentiation", "Having done all of those then we'll do", "multiplication and division", "And having all of those we'll then do the addition and", "subtraction", "Which is why without the parentheses I do the   times", "first and having gotten   I then add   to it to get the", "next component that I want", "OK  so we can create simple expressions", "What else might we want to do", "Well we'd like to compare things", "We'd like to be able to do comparisons of different kinds", "of numbers", "For this I have again  a sequence of", "simple arithmetic things", "I have ways of saying something is greater than", "Something is greater than or equal to", "Less than", "Less than or equal to", "And those are my first four here", "So greater than  greater than or equal to  less than  less", "than or equal to", "Let's look at some examples", "I can ask  is   greater than", "Of course the answer is no", "Is   greater than", "The answer is no", "But   is greater than or equal to", "So I get out true", "I have the same thing doing the last line comparisons", "If I want to see if two things are equal I use this kind of", "strange looking thing here with the double equal sign", "And we'll see why", "So I can say is   equal to", "And the answer is true", "And to see if something is not equal to I use what's often", "called bang or the exclamation point followed", "by the equal sign", "So I can say is   not equal to", "That's false", "But   we know is not equal to", "And that's true", "So what do I have now", "I can do simple comparisons", "And I can do that on integers", "I can do that on floats", "So I'm now ready to start doing simple", "arithmetic kinds of things", "I also have though Boolean values  truth values", "So I have some simple operations on those", "I have  for example  an expression that says given two", "expressions who are Boolean I can take the and of those and", "that will be true if both a and b are also true", "I can also take the or of two Booleans a and b and the or of those", "two Booleans is true if", "either a is true or b is true", "or both are true  And  of course", "I can take the compliment", "If a is true then not a is false", "If a is false then not a is true  We'll come back to those later", "on  but those are simple operations", "on Booleans", "What else might I have  Well the last piece I need is that", "sometimes I want to convert an object of one type", "into an object of another type  This is called", "type casting or type conversion  And that is something that", "we can do in Python  We can convert", "an integer into a floating point basically  creating a   after the decimal point", "And to do that we use", "the special function float to which we can give an integer", "And it gives us back the floating point value", "Going the other direction we can also do we can take", "a floating point number and take", "the integer part which gives us back that quotient component", "that part before the decimal point", "losing the remainder  With that", "we're now set  We can actually start", "moving on to put all these pieces  together  which we're going to do in the next part"], "-VjpRFaz5f4": ["Eric Grimson  I want to show you a visualization that gives you an idea", "of bisection search", "Just to give you a way of thinking about how this actually works", "So imagine I have a sequence of sorted items  like these right here", "What does bisection search say", "It says I'm going to start by looking at the middle element", "If I'm lucky  it's the thing I'm looking for", "If not  I can use the difference between what I'm looking for and that", "element to decide that it has to be in the lower half", "And so I can instantly take these things and ignore them", "Having done that  I'm now going to look at the middle element of what's", "left  and say is the thing I'm looking for there", "If I'm lucky  it is", "If not  I'll use again the difference between what I'm looking for and that", "element to decide which half I can throw away", "For example  might be able to toss those away", "And then I can look here and eventually decide whether I've got the", "thing I'm looking for or not", "The idea is that on each stage  I can take half of the remaining things and", "ignore them", "Throw them away  which makes this a very efficient way", "of doing the search"], "j9as5xwUwA8": ["In this eighth lecture we're going to talk about how to measure the", "complexity of different algorithms", "We'll give you a model of what we mean by complexity  how to estimate how", "much time a computation will take for an arbitrarily large input argument", "Our goal is not to estimate actual time  but rather to reason about", "different classes of algorithms and their inherent complexity", "We'll use this idea to introduce a range of classes of algorithms from", "constant to linear  to more complex classes  such as polynomial and", "exponential", "At the end of this lecture  you will be able to categorize the complexity", "of algorithms  and especially to compare the costs of decisions you", "make in designing an algorithm"], "SQUNkr4bQyQ": ["Well  what we have is a bunch of observations that we made with our", "experiment", "You can see them here plotted as the blue points", "And what we'd like to do is to somehow discover the most likely line that", "represents the theory that we hypothesized that explains how the", "spring works given the observations that we have", "So what we did is that  for a particular force that's being applied", "we have the notion of adjusting the parameters of our prediction to come", "up with a particular prediction", "And what we'd like to do is to adjust those parameters so that the", "prediction is the most likely one given the observation that we made", "And we discover that the difference between the two of those observations", "and the prediction we described as the error", "So the likelihood that the prediction is the right one is sort of determined", "by the size of the error", "So we take the i th observation and we compute the error by subtracting off", "the i th prediction", "And so this is the likelihood here of such an error occurring", "And the likelihood gets bigger the smaller the error is", "And we saw that on the previous slide  that small errors are much more likely", "than large errors", "And what we'd like to do is to now say  OK  well  I have many such", "observations that I've made", "And the likelihood of making all those observations will be  like with", "probabilities  the product of all the individual likelihoods", "So if I'm going to go off and look at the likelihood of each observation", "what I'm going to do is to then multiply all those together", "And here's what my job is going to be", "I want to choose the parameters of my prediction", "So in this case  it would be the constant   over k", "That's the slope of the line", "I want to choose the slope and then the intercept at the line such that", "that particular choice of parameters maximizes the likelihood", "So I want to maximize this product", "So we want to maximize the product of the likelihoods of the errors", "So that will actually be the same as minimizing   over the product", "So if we want to minimize this product of the likelihood of the error  so", "over the product", "So let's work on that a little bit", "Let's actually start by taking the log", "It turns out that whatever parameters will minimize the   over the product", "will also minimize the log of that expression", "So let's take the natural log  natural log Ln", "And so the natural log of   over this product of", "well  let's see", "So the natural log of   over something is minus the", "natural log of the product", "And the log of the product is the sum of the log", "So we basically all do the same summation here", "And now what we want is the natural log of this error", "And I'll write it out this time", "Observations minus the predictions", "OK", "So the likelihood of the error", "So we're still trying to minimize this", "That's our goal", "And now what we're going to do is take advantage of our knowledge about what", "this error  the likelihood looks like", "So we're going to use our knowledge to expand this further on the next slide", "So just carrying on from the previous slide  we're going to want to minimize", "this sum  which is the natural log", "And now I'm going to go off and write it in the likelihood of the error", "So it's    over   pi sigma squared", "And I'm just using the formula here for the normal distribution", "So this will be e and this will be minus", "And now the error itself here was the observed value minus the predicted", "value squared  all over the variance of the errors", "OK", "So that seems pretty straightforward", "Let's go ahead and simplify that", "So I'm going to take care of the minus sign here as I do the simplification", "So let's see", "The natural log of a product is the same as the sum of the natural logs", "And the natural log of   over something is minus the natural log of", "the something", "So we'll use that minus to cancel out some of this", "So this will be the same as the natural log of the square root of   pi", "sigma squared  plus", "I'm going to move this minus sign again in", "minus the natural log of this guy  which the natural log of e to the", "something is something", "I'll take care of that minus sign", "And so this will be observation minus the prediction squared", "all over sigma squared", "OK", "And we're going to be wanting to sum all those up", "So this is the same sum as before", "And we've just used the minus sign and expanded out the log a little bit", "Now let's observe that some of these terms are constant", "This is a constant  as is this guy", "He doesn't change", "The error processes are sort of stable and their statistics are stable as", "we're making our measurements", "And so what we discover is that this guy here  particularly if we're doing", "a minimization problem  this is all proportional", "And I can just get rid of the constants", "They won't affect the minimization at all", "The same choices for the parameters of the prediction that minimize this", "equation will also minimize this equation", "So I'm just taking out all the constants", "We don't need them here to help us with our minimization problem", "And I end up with that  which is sort of a magic result in the business of", "processing data points", "This is what's called the Sum of the Square of the Errors  or SSE for", "short  Sum of the Square of the Errors", "And if we minimize that  then we'll have made the most likely choice of", "the parameters", "If we choose parameters such that we minimize the sum of the square of the", "observed errors  then that will be the most likely predictor for the", "observations that we have", "And we actually have sort of a nickname for this guy", "We often call this sort of as shorthand  the least squares", "Finding the values of the parameters for the prediction that minimize the", "sum of the square of the errors is a very common thing to want to do to", "data points", "And in fact  pylab has a built in procedure that will do that for us", "It's called polyfit", "Let me show you how to use it", "The first example here is finding the parameters for a linear predictor", "So we're making the assumption that the prediction in this case of the", "extension of the spring is based on a linear relationship between the mass", "and the observation that we make", "So we're asking polyfit to find us the parameters a and b", "So it's going to find us those given in our case a bunch of forces that we", "applied to the spring and a bunch of observations that we made", "And its job is to find the best such set of parameters that minimizes the", "sum of the square of the errors", "We can also asked for fits with higher degree polynomials", "Here's one that does a parabolic fit", "So this would be a second degree equation", "Here we're assuming that the relationship between the prediction", "and the observation  or the basic parameters and the observation is", "governed by a second order equation  so ax squared plus bx plus c", "So given  again  the forces that we've applied and the observations we made", "of the extensions  we could get a second order fit", "And in fact  if we set this parameter to    we would be fitting a cubic", "equation  so forth and so on", "So our next step is to actually use these routines and try to find those", "parameters given the observations that we made"], "2e6pE07JJ8M": ["ERIC GRIMSON  We've now seen a bunch of examples of recursive functions", "Seen some of the power of them", "We keep coming back to this idea of break a problem down into smaller", "versions of the same problem", "Really great way of trying to tackle a problem", "We're going to do one last thing", "And that goes back to when we ran fib", "When we ran Fibonacci  we might have noticed that as we made the arguments", "larger and larger  it slowed down", "Which is not surprising", "It's calling itself multiple times", "But suppose we wanted to actually count the number of times that fib", "called itself recursively", "Multiple ways of doing it  but one of the ways in which we can do this is to", "use what's called a global variable", "What does that mean", "Well  so far  all the functions have communicated with their environment", "strictly through their parameters and their return values", "If it's when we call a new function  it creates an environment with some", "parameters passed in", "It does some work internally  and it returns a value as the", "value of its response", "We can make a variable or declare a variable to be global", "And what this means is that the name is defined at the outermost scope of", "the program  rather than the scope of the function within which it appears", "It's global because it's going to appear up at the top level", "It's going to be part of what we want to deal with when we're interacting", "with  for example  the Python shell", "As it notes here  this can be a bit dangerous", "And we'll talk about that in a second", "But let's just look at how we might do this", "So  here's the idea", "We're going to call this a metered version of Fibonacci", "It has much the same form as before", "There is the recursive call  just as we had before  using a", "different name  of course", "But we do two things", "Right here  we make a declaration that says the variable numCalls is global", "That means it's going to be bound way up at the top  at the highest level", "environment", "Inside of fibMetered  we're going to actually change numCalls", "This says every time we call fibMetered  we're going to increase", "that global variable by one", "Great", "So that's going to count how many times it's called", "We can test this with a little test script here", "I'm going to run fib for some number", "I'm going to have i roll over from   up to n", "And notice what I'm going to do", "Each time I go through the loop  I'm going to again say numCalls is a", "global variable", "It's defined up in that top level place", "And I'm going to set it to zero", "That is going to have the effect of in the global environment changing", "numCalls to zero", "And then I'm going to actually do some work and print up some results", "I'm going to do the work of figuring out what Fibonacci is", "The call to fibMeter will  every time it calls it  change numCalls by one", "And when I'm done and when it returns  I can print out how many times was", "that actually called", "OK", "Let's see what happens if we do this", "I'm going to go over and start up over here inside of my IDLE environment", "And if I load that in  let's actually do a test on fib", "And this put means we're going to do up to five", "And it now tells us  oh cool", "When I call a fib on zero  the answer is one", "It was called one time", "Makes sense", "When I call fib on one  the answer is one", "It was also called one time", "We knew those were the base cases", "And then you can see the responses as we move up", "So let's make this a little bit bigger", "Let's do testFib", "oh  let's make it up to", "Then we'll see what it does here", "You see it's moving pretty quickly", "It's starting to slow down a little bit", "But we're actually now calling testFib in that metered form", "And it's showing us how many times it's called", "Also notice  if you look at the numbers  it's clear that we're", "resetting numCalls each time around", "And that  if we go back to our slides  came from right here", "Each time through the loop and testFib  we reset numCalls to zero up", "in that top environment", "So that when we go ahead and call fibMetered  it is starting from zero", "and doing a count for each time it calls recursively within itself", "A nice tool", "A tool that's really kind of handy  and something that we'll come back to", "because it is a way of being able to keep track of some things", "But I want to finish with a couple of comments", "First one is use it with care", "Putting a variable as a global variable is destroying the", "locality of the code", "One of the beautiful pieces about recursive code is all of the function", "call contains within it all the information it needs", "The parameter's passed in  it does all the work internally  locally  and it", "simply returns a value back out", "That is an elegant way of being able to not only think about what's going", "on  but to be able to deal with the code", "Once we have global variables  they can be modified or read in a wide", "range of places", "And that's going to make it really easy to break the locality  especially", "if someplace outside of the function we're dealing with makes a change for", "global variable and that affects the computation inside that local call to", "a procedure", "This is going to allow the potential for introducing bugs", "And most computer scientists will be very strong about arguing that one", "should not use global variables if at all possible", "It is much better to encapsulate the computation locally", "But here's an example where we're metering things  where having a global", "variable can be really handy"], "CJh-mscFZgU": ["ERIC GRIMSON  So now we have lists", "ordered sequences of arbitrary elements  but they can be mutable", "We've already seen some operations on them", "But there's a lot of other operations that we'd like to have and", "we do have on lists", "So for example  we can iterate over them", "What does that mean", "It says inside of a for loop or a while loop  but certainly inside of a", "for loop  I can have a call with a loop variable that's iterating over", "that structure", "And let's look at an example of it", "So I've already bound that variable Univs", "And so this says I'm going to let e  in turn  be each element in Univs", "And I can do things like print up some information about them", "And since each of those elements is itself a list  I can have another", "loop  where I loop over e  letting u be each element inside of there", "Then I print something out", "And if we just go over to my idle screen here  I'm just printing out", "so what's the value of Univs  what's the value of Univs", "And then  at the bottom  you can see that loop  where  in fact  I print", "some information and I loop through each of the pieces", "inside of that structure", "As with tuples  what that iteration is doing is it's setting up an internal", "index  starting at    and walking down each element of the list till it gets", "to the end of the list  with the index pointing to each element in turn", "letting me extract and do something with it", "And that something might be  in fact  printing or looping over", "that interior structure", "So I've got iteration", "This sounds pretty nice", "What else do I have", "Well  we've already seen that I can add things to lists", "And I did that with append", "Now again  if I go over to my idle shell  I can do Techs append", "In fact  before I do that  let's just remind you", "Techs is a list of MIT  Caltech  and RPI", "And suppose I say I'm going to do Techs  and I'm going to", "append to it the Ivys", "If I now look at the value of Techs", "a ha", "as I would have expected", "Remember what we said about append", "It's a method  which is why we've got that funky little period there", "And it's a method that  in fact  has a side effect", "It mutates", "It causes a side effect in which  in particular  I'm going to take Techs as", "a list  and I'm going to change the end of it to add a new element in", "And this new element  in this case  was itself a list", "So the structure is now a list four long  the first three elements of", "which are just strings  the fourth element of which is a list", "And that's what got printed out there", "Now  suppose I said  that's nice  but I don't want to have a whole list", "hanging off as appendage", "I'd like to have a list with everything at the same element", "I'd like to flatten them", "In that case  what I'd really like to do is to take two lists and", "concatenate them together", "It's called flattening", "And we can do that using the plus operator", "So I'm going to reevaluate these pieces again", "Let me just bring them back into my environment", "And I'm running through that loop  because now what I'd like to do is", "just go back to where I have with Techs before", "There's Techs", "And I'm now going to ask flat to be a name for what I get by concatenating", "Techs and Ivys together", "The plus sign's saying just do a concatenation", "And if I look at flat", "ah  nice", "it is a sequence  a list of elements  all at the same level", "So append sticks something in at the end of the list", "Addition or concatenation puts copies of two lists together", "And notice it creates a new list", "And to see that  let's see what happened with Techs", "Ah  yes", "It has not changed  and neither has Ivys", "That's actually important", "And so to look at that  what that's really saying is that in the case of", "append  I am mutating", "I'm changing one of the lists", "In the case of concatenation  I'm creating a new version of those lists", "I'm literally creating a copy of it and then adding a copy  if you like", "of the second list to it  as well  which allows me to separate out", "different ways of thinking about how I might want to manipulate lists", "So I can mutate when I need to  but I might want to just make", "copies when I need to", "And I can do that", "Let's look at one last example", "And this is going to look at an example of both where things go wrong", "when I'm iterating over lists and how I get around that", "And for that  I'm going to bring up a new piece of code", "And the piece of code here is going to be something that's going to look at", "removing duplicates in a list", "So the idea is I want to have two lists", "And I'd like to get back a list with just those elements that only appear", "once inside of the list", "So I could write a little loop to do it", "Here it is", "I'm going to remove duplicates", "Now I have two lists  L  and L", "I'm going to loop over L", "And I'm going to say  for each element in L   if it's in L   let's just", "remove it from L", "And again  remove is a method", "There's the dot", "Don't worry about the details of it", "But it basically takes the list L   takes the first instance of that", "element e   and takes it out of the list by mutating", "So let's look at what happens if we do this", "And in fact  we can load this up into our idle shell", "And if I do that  let's look at what happened here", "In fact  let's look at it in a little bit more detail", "L  I'm going to start off as the list", "", "L  is the list", "And I'm going to remove the duplicates between L  and L", "Ideally  I would like that to be just having the list L  be those elements", "that are not duplicated in L", "But if I  in fact  look at what L  is  printing it out  I get", "the list", "So why does that happen", "Well  let's look at that in a little bit more detail  as well", "The problem is that inside of the loop  Python is keeping track of where", "it is in the list using this internal counter", "We already said  as it iterates over L   it's keeping a little index that", "says where it is", "When I decide to remove something from L   I'm going in and", "changing the list", "But I don't adapt the counter", "So I can literally change the list by one  which means the counter is now", "pointing to a different place in the list  because if I shorten the list by", "one by removing something from the front  the counter  if it was", "pointing  for example  at a second point in the list  is now pointing at", "the third point in the list", "So when we mutate a list  we change its length", "But Python cannot adapt to that", "And obviously  that's a problem  because it doesn't do what we'd like", "So when we are doing mutation on lists while iterating over them  that's", "probably not a good idea  at least not on the list we started with", "So how could we do this better", "Well  let's clone", "And what does clone say", "It says  let's make a copy of the list", "And I can do that with this very simple form here", "If I take the list L  and I say  in square brackets  just a simple colon", "it says  give me all the elements from the first to the last", "but make me a copy", "And now I can loop over L Start  but mutate L", "So this is changing L   but this is looping over a copy of L", "And if I do that  which was the second piece of code I had there  that's why", "in fact  it will print out just", "It removes the   and   from L  because those are duplicates  but it does it", "without getting confused about where it is inside of pieces", "And so what this says is that we want to use a copy of L  as L Start", "And notice  by the way  I actually have to make a copy", "If I were simply up here to have said instead  let's use L Start just to be", "L  rather than L  with that funky thing at the end  it", "would not have worked", "Why", "Because if I say this form  L Start points to the value pointed to by L", "which is the list itself", "And I'm back to the first state", "By using L  with the colons  I literally make a copy", "And now I can walk down a copy checking for duplicates while changing", "the original list itself", "So now we've seen properties on lists", "We can iterate over them", "And we can do it while mutating them", "And when we need to  we'll want to use clones to make copies of lists so that", "we make sure that we keep track of where we are inside of that structure"], "ftu1cc1A8q8": ["ERIC GRIMSON  I want to look now at one last example on doing some", "interesting things with graphs", "Part of what we've been trying to show you is how graphs capture a range of", "problems and some ways in which we can explore them", "We're doing it quickly", "We don't expect you to fully grasp everything about graph theory  but we", "wanted to give you a flavor of how graphs can be really valuable in", "solving certain kinds of optimization problems", "The last example I want to look at is something called a clique", "And you may remember this from middle school", "It has some of the same flavors", "There are some problems for which finding subgraphs or subsections of a", "graph can be important  especially subgraphs that are complete", "And what does complete mean", "Complete means that for every node in that subgraph  it has an edge to every", "other node in that subgraph", "It's called complete because it has a complete set of edges", "Now that doesn't say the whole graph is complete", "It says  given a graph with some edges in it  we'd like to find what are the", "places in it that have portions that are complete", "Now there are lots of places where this is valuable", "Finding  for example  sets of people in a social network that all know each", "other is a simple example of this", "Finding subjects in an infected population that all have had contact", "with one another can also be really important   for example  in disease", "control or in checking the spread of a disease", "Network traffic  network flow  can often be analyzed by", "using clique problems", "So this idea of finding a clique can be really valuable", "Just to show you an example", "Let's think about users in a social network", "For a given user  we'd like to say things like", "can I find the set of all other users that know this person and that also", "know everyone else in the group", "What's the largest set of users like that", "Or  having found the largest set  can I pull that maximal clique out and", "then find the next largest set", "And in essence  partition the graph up into clusters or components of people", "that all know one another", "How might I do that", "Well  we're going to get to that in a second", "But I want to stress this idea of using cliques", "actually is very valuable", "It's used  for example  in analyzing communications networks", "It's used to design circuits  doing layout", "It's used in computational biology to analyze gene expression data", "It's used by places like Google and others to analyze social networks", "And it's used by the Centers for Disease Control and other such places", "to do things like analyzing disease networks among infected populations", "So all of these are examples of places were cliques are of value", "And as I said  or hinted  already  for cliques we're particularly going to be", "interested in finding a maximum clique or a max clique", "A clique", "set of nodes in a graph that has a complete set of edges", "Every node is connected to every other one", "And I want to find the largest such subgraph", "Now there are some wonderful algorithms for doing this  some very", "efficient ones  but they're fairly complex", "And so for our purposes  we're just going to use the brute force method", "going way back to the beginning of this class where we talked about", "straightforward methods for generate and test if you like", "methods for doing that", "And what we can do here is the following", "We're going to first find all the subgraphs of a graph  all the", "different partial collections of nodes  if you like  in a graph", "For each one  we're going to test to see if it's complete  and then we'll", "just keep track of the largest one", "That will give us the maximum clique", "And we could then  of course  extend that recursively", "Once we've done that  we could pull those nodes out of the graph  remove", "them from the graph  and go ahead to find the next largest clique and keep", "on doing it", "Let's do that in the next segment"], "pflzzK47wEo": ["While the meat of the course is in this Courseware section", "we have some other resources for you to access in the", "header at the very top of the page", "You are currently in the Courseware section  where most", "of the instructions and assignments will be located", "The Course Info section contains any announcements", "that the course staff would like you to see", "It also has all of the handouts associated with the", "course  including the syllabus and calendar", "If your course uses a textbook  you should be able", "to find an online version of the textbook in", "the Textbook section", "The Discussion section has a question and answer forum", "where you can ask questions have them answered by the", "course staff or your fellow students", "The Wiki section is where all of the students in the course", "can keep their collective course notes", "Finally  you can see how you're doing in the course in", "the Progress section", "You can see your overall edX profile  including your", "current enrollment if you click on your username in the", "top right corner of the page", "You should also be able to change your personal", "information from this dashboard", "The next several videos will go into more depth on", "Discussion Forum usage  Wiki usage  and any course specific", "features that you may need"], "pv1TnTohJo8": ["JOHN GUTTAG  Hello", "I'm back again", "We concluded the last segment looking at these two plots", "We observed that the means in the plots are about the same  both in the", "neighborhood of      but that the standard deviations were quite", "different and that the spread was much tighter when we flipped the coin", "times per trial than we flipped it   times per trial", "The distribution of results in each of these plots is close to what's called", "a normal distribution", "A normal distribution peaks at the mean  as we see here  and falls off", "symmetrically  or at least close to symmetrically  to the left and right", "of the mean", "The shape of the normal distribution is said to resemble that of a bell  so", "it is sometimes referred to as the bell curve  though I have to say  try", "as I might  I don't see much in common between the normal distribution and", "any of these bells", "Scientists often refer to the normal distribution as a Gaussian", "distribution  in honor of the astronomer Carl Friedrich Gauss", "Normal distributions are frequently used in constructing probabilistic", "models for at least two reasons", "One is they have nice mathematical properties  as we'll see shortly", "And two  even more importantly  they actually occur quite", "frequently in practice", "Normal distributions are nice mathematically because they can be", "completely specified by two parameters  the mean  often written", "with the Greek letter mu  and the standard deviation  something we've", "already talked about quite a lot  often written with the", "Greek letter sigma", "Knowing these two parameters is equivalent to knowing the entire", "distribution", "So far we've looked at two functions from random that draw from a uniform", "distribution  random choice and random random", "Now I want to look at a function that draws from a normal distribution", "That function is random gauss", "Let's look at this code", "We've got a function here that's going to produce a Gaussian  or normal", "distribution", "It starts with the mean and the standard deviation and", "some number of samples", "It initializes the samples to the empty list", "Then for i in range number of samples it calls random gauss  which as you", "might guess takes two parameters  the mean and the standard deviation  and", "return some value based from the normal distribution defined by these", "two parameters", "Then when I'm done  I'm going to use pylab hist to plot it", "All right", "Let's run it and see what we get  coming over here to the code window", "I'll set the mean to", "maybe      it's the same thing", "the standard deviation to    and we'll look at     samples", "Wow", "It kind of does look like a bell  doesn't it", "I'm sorry for my previous snarky comments", "So we can see it's peaking near the mean  which we said should be    and", "then falling off almost symmetrically", "Let's see if it's really symmetric", "We can zoom in up here", "Well  you can see it's not symmetric", "If I took more samples it would be closer to symmetric", "But it's pretty close", "And of course  as we zoom out again  it really does look pretty good", "For normal distributions  the standard deviation can be used to produce", "something called a confidence interval", "The basic idea is instead of estimating an unknown parameter by a", "single value  for example  the mean of a set of trials  a confidence interval", "provides a range of values that is likely to contain the unknown value", "and a confidence level that speaks to the question of how certain are we", "that the unknown lies within the range or the interval", "For example  a political poll", "and as I record this  the US is buried in political polls", "might indicate that a candidate is likely to get  say     of the vote", "plus or minus", "And typically  even though it's not always stated explicitly  when people", "don't state the level  they typically mean a    confidence level", "So what this would mean is that the pollster believes that with a", "probability of      the candidate will receive somewhere between    and", "percent of the votes", "Together  the confidence interval and the confidence level indicate the", "reliability of an estimate", "As you can imagine  it's almost always the case that increasing the", "confidence level will widen the confidence interval", "If you think about it  it makes a lot of sense", "If I want to be    confident that my unknown lies within the interval  then", "I probably need a bigger interval than if I only wanted to", "be  say     confident", "Keep in mind that the calculation of a confidence interval requires", "assumptions about the nature of the space being sampled", "Most typically  it assumes that the distribution of errors of", "estimation is normal", "The empirical rule for normal distributions provides a handy way to", "estimate confidence intervals and levels given the mean", "and standard deviation", "For example  approximately    of the data", "I say approximately", "falls within one standard deviation of the mean  again  for a normal", "distribution", "Roughly    of the data falls within   standard deviations of the mean", "And almost all  roughly      of the data  will fall within   standard", "deviations of the mean", "Well  this provides us an interesting and useful way to think about  say", "polling data under the assumption that the errors are normally distributed", "It provides a useful way to think about  oh  quiz scores  assuming that", "the scores on the quiz are normally distributed", "But there's a difference between those two", "When we think about quiz scores  we actually have ground truth", "We can plot all the quizzes for  x and compute the mean and", "the standard deviation", "And we know that it's exactly right  because we're not sampling", "The pollsters are sampling", "They don't have ground truth", "So what do they do", "Well  you could imagine that maybe they run many  many different polls", "take the average of the polls  look at the standard deviation  and reach a", "conclusion that way", "And indeed  some people do that by aggregating polls", "But typically for an individual pollster that's way too expensive", "So they instead conduct a single poll and rely on something called the", "standard error", "The standard error provides an estimate of the standard deviation", "It works under the assumption that errors are normally distributed and", "that the sample population is small relative to the actual population", "It can be estimated from a percentage  p  that's the percentage of the", "population that's being sampled  and the actual sample size  n", "So the standard error is defined by the following rather simple equation", "p  the percentage sampled  times   minus n", "so you can think of that as percentage not sampled", "divided by n  and then all of that to the     power  or the square root"], "fwEyyCo5dxo": ["JOHN GUTTAG  Hello  and welcome back to", "We're about to move away from probability  but before I do  I can't", "resist looking at a probability question that has stumped many", "supposedly clever people  the so called Monty Hall problem", "The problem is based on a television game show called Let's Make A Deal", "The show was popular in the  s and ' s", "Imagine that you're on that show  and you're given the choice of three", "doors  one  two  or three", "By the way  the people who were on the show dressed up in silly costumes in", "the hope it would attract the idea of the host  Monty Hall  who would invite", "them up front to play", "Behind one of the doors is a car", "Now  OK  maybe it wasn't this car in the  s", "And behind the other two doors are goats", "The contestant is asked to choose a door", "After", "let's assume you're the contestant", "after you have chosen a door  the door remains closed", "Monty Hall  who knows what is behind the door  now has to open one of the", "two remaining doors  and the door he opens must have a goat behind it", "After Monty opens a door with a goat  he will ask you  the contestant  to", "decide whether you want to stay with your first choice  say door number", "one  or switch to the last remaining door  in this case  door number two", "What should you do", "Well  the audience will shout all sorts of advice  but you should ignore", "it and figure it out yourself", "The problem has been around for quite a time  and the literature suggests", "that most people get it wrong the first time", "In    Parade Magazine published a correct solution to the problem  and", "approximately     readers wrote to claim that the magazine got it wrong", "By the way  among those     readers      claimed to have PhDs", "I hope none of them were from MIT", "If you were taking this class at MIT  you would now have the opportunity to", "play the game for fabulous prizes", "Since you're not  you'll have to settle for my working the", "probabilities", "I'm going to do that in two different ways", "So let's look at the first way", "Assume that without loss of generality  you choose door one", "Now  Monty will open another door  and again  let's assume without loss of", "generality  he opens three", "And there stands the goat", "When the game started  it was equally likely that the car was behind door", "one or two", "Because we know it wasn't behind three", "It was placed at random", "So  one and two are equally likely", "Therefore  it doesn't matter", "You can switch or not switch  and the odds will be the same", "Sound plausible to you", "It does to most people  but in fact  the argument is flawed", "Let's look at the problem a different way", "Again  you're the player and you make a choice", "With the probability of      the choice is correct", "That means that if you could choose the other doors  the probability of", "the goat or the probability of the car being behind doors two or three  the", "remaining one is", "So with probability a third  you are correct  and the car is indeed behind", "the door you chose", "But with probability      you were wrong  and the car was behind one of", "the other doors", "Now comes the key moment", "Monty opens the door that he knows does not contain the car", "Note that this choice is not independent of the", "choice made by the player", "The player has made a choice  say door one  forcing Monty to", "choose two or three", "He does not want to open the door with the car  because then the game would", "be over  so he opens the other door", "So in fact  by switching  the contestant has a", "probability of winning", "It's tricky", "When we work probabilities  we always have to think about whether or not we", "are looking at independent events or related events", "To drive this point home  I want to look at some code that", "simulates the game", "So  here's the game", "I'm going to simulate it for   trials", "And I'm going to pass in this choose function  and we're going to look at", "two different ways that we might choose which door to open after the", "contestant has made a choice", "We'll look at the number of times the contestant wins", "the number of wins by not switching   we'll look at the number of times a", "contestant wins by switching  and the number of times a contestant doesn't", "win it all", "The door will be behind one  two  or three  and the guests will have to be", "one  two  or three", "So for t in range numTrials  we first choose a place to", "put the car at random", "The contestant then makes a guess at random", "We then call the choose function  this one  which takes as an argument the", "guess and the door behind which the prize exists  because remember Monty", "knows that  and it makes a choice", "If two open is a prize door  then there's no win", "Of course  if we play the game according to Monty Hall rules  this", "will never happen  because he won't open the prize door", "But we're going to explore the other option where he chooses at random", "Otherwise  if the guess is the prize door  the contestant wins by sticking", "Otherwise  by switching", "And then  we'll return the number of stick wins and the", "number of switch wins", "Here are two possible choose functions", "The first one is the one that is used on Let's Make A Deal", "Essentially  Monty is just choosing the door that the contestant didn't", "choose and that has a goat", "The other possibility is a random choice  where Monty will say  if the", "guest door is one  we'll open either two or three", "So perhaps  it might be the car", "Otherwise  one or three  else one or two", "Finally  we'll have a function that displays the results", "I'm showing you this  because it's using yet another pylab plotting", "function  pylab pie  which produces a pie chart", "OK", "Let's go over to the code window and run it", "So  we'll first run it the way the game works calling it with Monty", "choose  and we'll display it", "And we'll produce another figure in which we make the random choice  and", "we'll display it", "Well  notice that if we play by the game rules  indeed  it's the case that", "you double your odds by switching  shown by this pie chart", "Course since there's randomness  it's not exactly", "but pretty close", "On the other hand  if we play the game randomly  then in fact  it doesn't", "matter  because an independent decision is being made  and indeed", "the odds are unchanged by switching"], "i8fuPLQCW5A": ["PROFESSOR  In order to find the optimal solution for the     knapsack", "problem  first let's use a slightly more formal problem statement", "We have a list of N items and we know each of their weights", "So we have an N element vector w with a separate weight for each of the N", "items  and an N element vector V which has the values for", "each of the N items", "We also know that the total weight the backpack can hold is capital W", "So we can sort of express the optimal solution as follows", "We start off by defining a vector t  which tells us what the", "taken objects are", "And so the i th element of t is   if item i has been taken by the burglar", "In other words  it's in the knapsack", "And it's   otherwise", "And so what we", "the problem we're trying to do is to maximize the sum over all the", "items of t i   v i", "So let's see how that works", "So if the item has not been taken  t i is    and that particular index", "doesn't contribute to the sum", "If the item has been taken  then t i is    and that means the value is", "added to the total value of the knapsack", "So we want to find an assignment of  s and  s for the vector t i such that", "we'll maximize the value subject to the constraint", "And now we have to put in the weight constraint", "So that means that the total weight of the items in the backpack", "So again we're summing over all the items of t i   w i is less than the", "maximum weight the backpack can hold", "So the technique now of finding that maximum is we'll enumerate all", "possible combinations of items", "So let's think about what the vector of t looks like for a particular", "combination", "What we have is a vector  and it has N elements in it", "So here's our vector", "And the length of this vector is N  And then each of the elements can be", "or   depending on whether or not the corresponding item has", "been taken or not", "So if we think about this  we can say  well how many different t's are there", "How many different ways are there to fill in this N element vector", "Well  the first item can either be taken or not  so", "there's two choices there", "And the second item can be taken or not so there's two choices there", "And so forth and so on for all N items", "So if we think   if we count up now the number of possibilities  each one", "of the N locations can be either   or    so there are   n possible", "combinations", "And now what we want to do is choose the best one that satisfies the", "constraints", "So what we'll need to do is once we have a particular t", "that we want to choose", "want to evaluate  we'll go off and we need to compute two values", "We'll need to compute the total weight  so I will go from   to N", "so that'll be t i   w i", "And if we do that  we'll compare that with the maximum weight", "And then if that item passes that test  if that particular combination", "results in a weight that will fit in the knapsack  then we can go off and", "compute the total value of that particular trial knapsack and remember", "the best one that we see as we go through all possible", "combinations of objects", "So the only hard part of writing the code is to figure out how to generate", "all possible combinations of N items", "Here's one way of doing it  and it is inspired by the counting argument from", "the previous slide", "What we're going to do  and it happens here on this line  is that we're going", "to think of the vector t", "the N element vector t", "as a binary number", "So that means as we think of all the different combinations of    's inside", "of the vector t  what we're really doing is looking at all the integers", "All the possible N bit integers", "So here what I'm doing is i is going to basically one by one enumerate all", "the N bit integers", "And those are numbers in the range of   to   to the N", "OK  so that's what that range does", "And then for a particular integer in that range  we're going to look at the", "binary representation of that integer  and whenever there's a   bit we'll", "include the corresponding item into the combination that we're building", "So we start off with an empty combination here  and then we're going", "to slowly add to the combination", "And when do we add to the combination that we're building and add an item", "Well  we basically test each of the bits inside the integer i", "So we take the integer i  we right shift it by however", "many bits that we're", "according to the bit we're trying to test  so if we're trying to test the", "th bit  the low order bit  we shift by zero  which does nothing", "We want to test the next bit up  we shift by    so now we're testing the", "'s bit  and if we shift by   we'll be testing the  's bit  so", "forth and so on", "We're very simply checking to see if that bit is", "And if that bit is    then we do  in fact  add item j to the combination", "we're building", "And when we're all done  we go ahead and return that as the next", "combination in the list", "You can see that we've written our power set  our", "function  as a generator", "Because we're not really interested in having the whole list in", "our hands at once", "We're basically going to be iterating through the list  checking each", "possible combination to see if it has a legal weight  and if so  whether its", "value is greater than the value that we've seen", "Here's the Python code that implements the exhaustive search that will find", "the best combination of items for the burglar to choose", "Here's the power set function that we described on the previous slide that", "generates a list showing all the possible combinations of N items", "This is the actual exhaustive search function", "It starts off by initializing this little memory about the best knapsack", "seen to date", "So the best value currently is    and we don't have a best knapsack yet", "And now we're going to look at every trial knapsack in the list of all", "possible combinations of items that we are passed in here as an argument", "So for each trial knapsack  which is a set of items  we compute the total", "weight of that set and the total value of that set  and then we see if we", "found something good", "So first we check the knapsack weight against the maximum weight we're", "allowed  and if we actually pass that test  we check to see if the", "knapsack's value is better than the best value we've seen so far", "And if it is  we update the best value and remember that trial knapsack", "And when we're all done  we simply return the best knapsack and its value", "that we found in our exhaustive search", "And then  as usual  we have our little testing function that lets us print", "out the answer", "So let's save that away and then go try it out", "testBest", "Ah ha", "We discover actually the best burglar could have done is    by stealing", "the clock  the painting  and the book"], "VAAia4PpxZc": ["LARRY RUDOLPH  My name's Larry Rudolph  and I'll be your instructor", "for this course  Introduction to Computer Science and Programming", "From MITX on edX", "This course will teach you how to use computation to", "solve real world problems", "It's aimed at students with little  or no  prior experience in programming", "but with a desire to learn how to use computation to solve problems", "It is aimed at students who have no  or little  prior experience in", "programming  but do have a desire in how to solve problems using", "computation", "It's not a programming course", "Although you will learn how to program", "It's not a mathematics course", "Although you will use mathematics", "And it's not a theory of algorithms course", "Although you will learn how to appreciate really clever algorithms", "x is a challenging and rigorous course", "It's an MIT course", "As such  the lectures and text will appear clear  logical  orderly and", "understandable", "When you do the finger exercises and problem sets  you may find that they", "are challenging", "Why", "Because there's a lot of material  and it's going to take a while for it to", "become clear  logical  orderly and understandable in your brain", "I've been doing research in high performance parallel processing for", "many years", "I started programming over   years ago when I was in ninth grade", "Recently  I founded a company called ReDigi  which is a marketplace for", "used digital goods", "It's taught me how to communicate with a large customer base", "that's mostly silent", "This is all in addition to the fact that I've been teaching computer", "science courses for the past   years  both at MIT and at other universities", "Halfway through the semester  we'll have a town hall meeting", "It'll be your opportunity to interact live with an MIT faculty member", "By that point  you should know a lot about programming", "and computer science", "And I look forward to very interesting interactions", "Most  if not all of the lectures  are by professors Grimson  Guttag and", "Terman  and are the result of years of refining this material while", "teaching it at MIT", "I  however  will remain behind the curtain along with my great staff", "ensuring that everything runs smoothly  and the course is a success", "for all participants", "We want to make sure you have all the tools to succeed in this class", "Our staff will be in the forums everyday to answer your questions", "But you  too  can answer each other's questions", "The moment that you understand a difficult concept  you are the perfect", "person to answer other people who have yet to understand that concept", "Remember  the best way of learning something is by teaching", "Here are some tips for your success", "x is fast paced", "Please try not to fall behind", "As soon as the videos are released  watch them", "As soon as you're finished watching your video  do the finger exercises", "Get started on the problem sets as soon as possible", "We try to keep things into bite sized chunks", "So there's no reason to postpone them", "We practice the philosophy of learn by doing", "The finger exercises may not be trivial", "The problem sets may be challenging", "Not everything is in the preceding video", "You are going to have to find the solution", "How do you do that", "Read the text", "Re watch the video", "But mostly  experiment", "Play with the interpreter", "Type different examples", "Computers don't care about how many times you make the same mistake", "Computers do not get bored", "Computers do not yet have feelings", "And most of all  computers are not judgmental", "Please complete problem set one as soon as possible  even before watching", "the first set of videos", "You'll find the interpreter is your friend", "Use it as much as possible", "Type whatever you want into it", "And don't worry about making mistakes", "You'll learn by doing", "Again  this is a course in experiments", "The more you type in and the more mistakes you make  the more you learn", "If you're still confused after consulting the textbook and trying the", "experiments  then search the web or search the forums", "Try not to move on until you understand the solution", "If you don't understand the solution  post to the forum again", "Now stop listening to me  and go learn some computer science"], "j-d7-5lWcT4": ["Eric Grimson  OK", "We've talked about designing a test suite", "That is finding a set of samples of inputs and expected outputs  that we", "can use to test whether our code's doing what we expect it to or not", "And we talked about both black box testing  and glass box testing as ways", "of designing test suites", "What happens when we're ready to actually start doing the test", "What should we do", "Here  and we're going to do an example a little bit later on in this lecture", "here what we're going to do is alternate between two important parts", "of testing", "We're going to start with what we call unit testing", "That says take a module  a function for example  and check it", "Check it on input values whose results we know what to expect", "Run the suite basically on the module to make sure that", "the module runs well", "This will catch algorithm bugs  that is places where I got a bug  either in", "how I encoded the algorithm or in terms of how I", "thought about the algorithm", "Once I've checked the modules  I'm going to move on to what we call", "integration testing  which is to check that the system as", "a whole works correctly", "If I've got multiple functions that are interacting with one another  I", "want to make sure that even if the modules do the right thing  that the", "whole system does well", "And this will typically catch  what we might call interaction bugs", "And by that I mean places where an incorrect value is being communicated", "to another function", "Or an assumption about input is being broken as I move back and forth", "And once I've done that  I want to cycle", "I want to go back around  and having done integration testing and fixing", "things  go back and check the modules as unit testing  and then check", "integration testing", "And cycle until I'm convinced that I've caught all the bugs that I'm", "likely to find", "So we're going to think about how we deal with doing unit testing and", "integration testing", "Now there's another piece of testing that's really useful to do", "And that's to build a test driver", "What does that mean", "Well  drivers are code that actually set up to do the testing for us", "So I'm not just typing things in by hand", "The idea is that in a driver we're going to set up an environment  and", "what we mean by that is we're going to set up a piece of code that creates", "bindings for global variables   data structures  other pieces that I need", "to do the testing  is then going to take that test suite", "that sequence of inputs", "and run the code in each one  and save the results and report back out", "So a test driver is basically a piece of code that does the testing for us", "Builds the environment  takes and implements the test", "suite  and runs it", "Nice thing about drivers are that they basically simulate parts of the", "program that use the unit being tested", "So they're going to do the actual simulation of the", "testing that we want", "Now if there are interactions with other pieces of code  what happens if", "we haven't already debugged those", "And there we can often use what's called a stub", "A stub simply simulates parts of the program that are used by the unit", "being tested", "And when I say simulate  if I've already built the code", "and it runs  great", "But even if I haven't  I can still get the same effect", "For example  by building a table of input output pairs  and using that to", "simulate the behavior of that particular piece of code", "The advantage of a stub is that it's going to allow you to test units that", "depend on software even if you haven't written it yet", "Maybe not be able to test everything", "But remember since I'm building a test suite with particular set of cases  I", "can basically say if this code was there  here's what it should do", "And that stub will let me go back and actually fix  or test rather  the", "piece of code I'm testing inside of the driver", "So when I get to testing in a second  but what does it say then", "It says  having built a test suite I start with unit testing", "Having tested all the units I'm going to go to integration testing", "And I'm going to cycle back and forth", "But one of the key things to remember is  when I'm done debugging and I", "think my code has been corrected  it's really important to do what we call", "regression testing", "That is go back  and check that the program still passes all the tests it", "used to pass", "Even though a piece of code may have run correctly before  because I've", "changed things there's no guarantee I haven't accidentally", "messed something up", "And so a really good practice is to go back and re run the tests I've run", "before to make sure that they still work", "And that regression testing will ensure  in a sort of principled way", "that the tests I'm running are actually running correctly"], "FP4Hw1IEWCA": ["PROFESSOR  Hmm  it looks like every time we do a calculation involving a", "new mass and its corresponding displacement  we're computing a", "slightly different value for k", "Does that mean that the spring constant is actually changing a little", "bit every time that we hang a weight on the spring", "Well  probably not", "It looks like there's a process at work that's causing our measurements", "to be slightly off every time we make one", "A good first step whenever we're trying to figure out what's up with", "our data is to plot it  to look at it visually  and to see if we can spot", "what's going on", "In order to figure out what's going on  we're going to have", "to look at the data", "And here's a couple Python procedures to help us do that", "The first procedure here  getData  its job is to read the data in from a text", "file where we've entered the data", "So it opens the file  and the first line of the file is just a header line", "that describes the format of the data in the rest of the file", "We don't need that here  so we'll read in that line and discard it", "And then  for all the other lines in the data file  we'll read", "each of them in", "Each line comes in as a string", "And then we're going to take that string and split it into substrings", "that correspond to the non blank portions of the line", "So the first substring is the first non blank portion of the line  which", "will be the data measurement", "And the second substring is the second non blank portion of the line  which", "is the mass measurement", "We then go off and convert those two strings into floating point numbers", "and append them to the appropriate list that we're using to accumulate", "the results", "And when we're all done  we return the masses and the distances in two", "separate lists", "The plot data routine is now takeover  and its job is to plot the data", "So it goes off and first reads in the data", "And the reason that we've separated the reading in of the data  the I O", "from the analysis  or  in this case  the plotting  is in case the format of", "the data file changes in the future  we'll only need to rewrite the getData", "portion of the Python procedures", "The first thing we do once we get the data is to go off and convert it into", "the pylab array data type  a very handy data type for doing numerical", "manipulation", "And here we see an example of how handy it is", "On the next line we want to multiply each element of the xVals array by the", "gravitational constant", "In other words  what we're doing is  we're busy converting the masses that", "we measured into the forces that they applied to the spring", "And this statement here  an array times a constant  will multiply each", "element of the array times whatever that constant is", "The rest of the procedure goes off and then creates a plot  plotting the", "forces applied against the distances measured", "The data points will appear as little blue circles  so the b means please", "make it blue  and the o is please make them a circle", "Let's run it and see what the data looks like", "Here's the results  we can see we get the sort of plot that we might expect", "The x axis is the force that was applied to the spring", "The y axis is the displacement we measured  and here are all the data", "points that we measured from applying everything from the  th kilogram up", "to the full kilogram weight", "Let's see what we can make of that", "So is this what we were expecting", "Well  our hypothesis tells us that this should be the relationship", "between the weight and the extension that we measured", "That implies that if we sort of solve this for the extension  that we expect", "it to be mg  so this guy here is the force  divided by the", "spring constant k", "So that means that what we expect  also all the measured points to fall", "on a line with slope   k", "Graphically  what that would mean is that we'd expect to find some line", "that had all the data points on it  and the slope of this line should be", "the inverse of the spring constant", "At least that's what this equation here is telling us", "Well  that's not quite what we got", "Let's see if we can figure out what went wrong", "So what did we expect was going to happen", "Well  we have this theory", "So we have this notion that there's a linear relationship between the force", "that we apply  so here's a particular force  F sub i  and", "the observed extension", "So we have this prediction", "So this will be our prediction for the i th force and our prediction for what", "the offset that should be is equal to the force divided", "by the spring constant", "So this is a line of slope   k", "Well  what actually happened is  we have some measurement up here", "And that measurement differs from the prediction by a certain amount", "So here's my i th observation", "And there was clearly some sort of error that crept in and so we have the", "sort of model that what really happened was here", "But because of some error in our process  we actually made a slightly", "different observation", "Maybe we'll make some progress if we think of it that way", "So here's the error  and that's a difference between the i th", "observation and the i th prediction", "So the question is  what can we say about what our expectation is for", "those errors that are creeping into our measurements", "In many experiments in the real world the errors that we're seeing are", "actually the accumulation of many  many  many small random effects", "For instance  a position measurement  such as the one we're taking  might be", "affected by the sums of all sorts of little vibrations  the footsteps in", "the room  machinery across the room  machinery down the hall  that's", "causing a small vibration which causes our error", "measurement to be off somewhat", "Let's sort of see how that might affect our experiment", "So what I want to do is to model errors", "So we're going to model the errors that we're going to measure", "basically  as random numbers", "So this is the assumption that the errors aren't really related directly", "to the experiment we're making", "They're effects that are added on to the results of the experiment", "And just to sort of see what's going on  I'm going to show you a", "probability density function here for a particular class of errors which are", "distributed between   so the errors  basically  will lie in the range", "between    and", "So this is basically between    and", "And the idea is that  with this particular probability density", "function  that the errors are much more likely to be small than they are", "to be large and close to one", "So let's run a little experiment  and here's our experiment", "First thing we're going to do is to draw   numbers from that probability", "distribution", "So we can write some Python code that says  using this probability density", "function  please give me a random number between    and", "And it will choose   such numbers", "Then we're going to sum them up", "So each one of those numbers that we draw will represent a small error from", "some random source", "And it's really the cumulative effect of all those errors that", "we'll want to do", "So we're going to sum them  and obviously sort of the smallest value", "we should get should be like", "And at the other extreme  we might get something as big as    as the sum", "We're actually going to see what the distribution looks like", "Having done that particular sum  we'll save it away in a histogram and repeat", "times", "So we're going to build a histogram of what all the sums look like", "And we're going to do it for     such experiments", "Let's write a little program and see what the results look like", "Here's a Python procedure  testErrors  that will let us run our little", "experiment", "What testErrors does is  for the number of trials that we've asked for", "in this case the default value for trials is      it will go off and", "select a certain number of points  in this case    from a particular", "probability distribution  in this case a triangular distribution that goes", "between    and", "So that's exactly the distribution that we graphed on the slide", "It will then sum up the results of each of those random selections  and", "then it will keep a list of all the sums that it creates for all", "trials that we're doing", "When we're done  we're going to plot the results in a histogram using the", "handy hist function from pylab", "And let's see what we get when we do it", "So I'm going to save this out and run it", "Of course  with     trials of   points each  it can take a", "little time to run", "And here we see the results", "What we have", "what this little graph is telling me that  of the     trials  some", "of them resulted in a sum which was exactly", "That's a little surprising  but maybe not too surprising", "We had pretty much an equal chance of having a negative error and a positive", "error  and we expect many of the errors to end up", "canceling each other out", "And that sort of what we see in this diagram", "The highest probability of the sums are grouped right around", "And then that probability drops off dramatically as we get into situations", "where many errors would have had to have been on one side of the", "distribution  which becomes increasingly unlikely as the number of", "trials grows", "So what we're going to do now is to think a little bit", "about what we see here", "So what we saw from our little experiment looking at the accumulation", "of many small errors is that the net effect of all the errors being added", "together has a probability distribution that looks like so", "And that's a curve that we've seen many times", "So the result is that the probability of all of our sum of the errors  that", "probability distribution converges on the normal distribution as the number", "of trials in our experiment increases", "So if we  instead of doing     trials  we had done     or a", "million trials  we would start to see that the histogram would trace out", "very precisely a normal distribution", "Sort of amazing", "Another observation that comes to us courtesy of the central limit theorem", "And that basically tell us that we get the same result no matter what error", "distribution that we choose", "We chose a triangular distribution  but we could have chosen a uniform", "distribution  or a Gaussian distribution  or  in fact  any", "distribution that has a finite mean and variance", "So the only requirement is that we the distribution have a", "finite mean and variance", "And if so we'll get the same conversion to a normal distribution", "if we look at the accumulated sum of many small errors  and in fact  they", "don't even have to be identically distributed", "So what's sort of amazing is that if our errors that we're seeing in our", "experiment are the result of the accumulation of many small random", "processes  we can actually say something about the probability", "distribution of those errors", "Let's just quickly remind ourselves what the normal", "distribution looks like", "Here it is over here  plotted for a bunch of different values of the", "variance sigma squared", "The distribution is completely characterized by two parameters", "One of the parameters is the mean", "And that's the central axis of the distribution  in this case  we're", "plotting normal distributions with a mean of", "The other measurement is the variance  which is a measure of the width of", "this curve", "With those two factors in hand  we can actually write a little equation that", "describes the PDF  the Probability Density Function  for a normal", "distribution", "So that's f x  and we have a normalization constant  which is", "over the square root of   pi sigma squared  and then we get the", "exponential part", "So it's E and it's x minus x minus the mean squared all over sigma squared", "You can see what that means  that is the argument x gets bigger  the", "probability associated with that becomes exponentially smaller", "There's some special names we apply", "If mu is equal to   and the variance is equal to    we call that the unit", "normal or maybe the standard normal distribution", "So let's put it all of it together", "So when our observation errors are due to the accumulation of many small", "random processes perturbing the measurements ever so slightly  we can", "say something about the likelihood that the error will be", "of a certain size", "And we'll just use our information about the errors being normally", "distributed to write the following formula", "So this is really just the information from the previous page  except here", "I've made the assumption that the mean of    which implies that the errors", "balance out over time", "And that's typically true with many error processes", "Now this is actually a really neat fact  it basically tells that large", "errors are basically much less likely  I mean  exponentially less likely", "than small errors", "And we're going to use that fact  now  to go back and finish the analysis of", "the data points", "But it was really important to sort of establish how the measurements we're", "taking are differing from our expected predictions", "And now  we're going to use this information about this probability", "distribution  this likelihood distribution  to help us figure out", "the best way to sort out the actual data  or the actual predictions  from", "the observations that we made"], "kpa7QyOtIHI": ["TA  Hi", "Today I'm going to be talking to you about default values and keyword", "assignment", "So what you see on the right here is a fairly silly complex function that", "I've concocted just for this particular exercise", "So we call it complex function because it has so many of these variables that", "it needs in order to function", "Something  another thing  number of silly walks  and so on", "It's a whole lot of variables  and believe me  if you do a whole lot more", "programming  either in this class  or when you go out in the world of", "wonderful programming stuff  you'll probably have to come up with your own", "versions of complex functions that are taking a whole lot of", "variables as well", "So the problem with complex functions is that when you call it  you have to", "specify a whole lot of things", "And sometimes it can get confusing", "Let's say that something  I want something to be a cat  and another", "thing to be a dragon", "And number silly walks will be    and the cans of spam to be", "And that thing should be random  sort of random indicator is true", "And I love furry things  so furry should be true", "And frogs found  let's say we found just one frog", "And unfortunately  the doomsday device is not complete", "So that's false", "So you call that  it responds with the output of the function", "If you give it all those variables  and that looks all nice and good", "But the problem is what happens when you want to change something", "You have to type in the whole thing in over again", "Complex function  and let's say t and dog", "silly walks", "Let's see", "cans of spam  let's say that everything else is the same", "So that was a whole lot of work  and a lot of painful stuff to try to change", "those three first things", "And that's kind of painful  but what can you do", "Well  I guess we could try to simplify things a little", "If all we're going to change is just these first three things  we could", "make a new function  like the one below over here", "Where the user is only required to specify the first three things  and", "everything else is pre specified for the user", "Wonderful", "You've made life simpler by making a simple looking function", "Let's try it out", "Simple function", "This time I'm just going to say t and a dog  and", "And things look better", "You don't have to type so many things", "You just have to type three things  instead of  I don't how", "many things that was", "But it was a whole lot of things", "So that was nice  but it comes up with a problem", "What if you needed to change one of these things", "Like  let's say you wanted to change the cans of spam", "Instead of always being    you needed just this one particular time  you", "needed cans of spam to be two", "Then I guess you could just change it in the function definition  save it", "reload it in Python", "And this  I'm just going to copy and paste it", "And then you'll find that indeed  the cans of spam is two now", "Well  that's a whole lot of work for your users of the function", "And fairly bad programming practice to have to change the definition of your", "function every time you needed to change a variable", "You ought to make it a variable again", "But then  if you keep on doing that by adding it to its list of variables", "cans of spam  you're back to square one", "If each of these things you only occasionally need to change  and you", "have to add it to the function definition every time  you end up with", "your complex function all over again", "So that's not good", "Can we come up with something better", "Well luckily  Python thought about this problem and came up with the idea", "of default values", "So over here we have this function again  and it's the exact same as", "before  except now we've set this equal sign and some numbers after a", "few of these variable names", "For example  cans of spam equals    and this indicator equals", "true  and so on", "So what this does  if the user doesn't specify a value for cans of spam  it", "sets the value of cans of spam equal to   and runs the function as usual", "Same thing with all these other variables", "So now I can call this function  complex with defaults", "Complex with defaults", "With a cat  a werewolf  and     silly walks", "And it'll run just fine", "So it had set can of spam equals   and all the other variables to its", "default values", "Wonderful", "And this time if I needed to change the can of spam to    all I had to do", "is just add number   for cans of spam  and everything else is just the", "default value", "So I don't have to change anything else", "And now we have   cans of spam", "Great", "That saves us a whole lot of time", "But it's still not quite there", "Well  what if we needed to change the number of frogs found", "Its kind of really far out in our list of variables  so if we did that  we", "kind of had to type it all out again", "So   was cans of spam  say true for randomness in the indicator  and", "unfortunately  it's a non furry thing", "And let's say  I forget how many frogs I said I wanted", "Let's just say", "And we didn't have to specify the is doomsday device complete", "So we can write all of this out  hit Enter  and now we do", "have   scary frogs", "Oh  yeah", "I didn't need to do that", "But   scary frogs are very scary  and they deserve their own", "line and syntax error", "Anyway  so that was  I guess slightly better  since you didn't have to type", "is doomsday device complete", "But it was still kind of problematic", "You had to type all those other things that you didn't really need to", "because those were the default values", "Luckily  Python comes up with another cool solution for this problem", "So now complex with defaults", "I can just say something is cat  and I do have to say a value for cat  and", "another thing for number of silly walks  since those do not have any", "default values", "So let's see", "Another thing is werewolf again  and that number of silly walks is", "And this time  if I just want to change the value of frogs found from", "the default value  I can just specify it by using a keyword", "assignment like this", "Frogs found", "Let's see if frogs found is", "So when I do that  it sets the frogs found variable to    and everything", "else to its default values", "That is really cool and powerful", "Now  it does come up with some  just use a little bit of caution when using", "keyword assignments", "You can't  for example  do something like this", "You have to put the keyword assignments after list of variables", "because if you do keyword assignment before then  you'll come up with a", "syntax error", "And also  you can even specify the things that do not have default values", "with the keyword assignments  like this", "So complex with defaults", "You can say something equals cat", "And let's say that I don't want to specify another thing yet", "Let's just say I want to specify the number of silly walks this time", "And number of silly walks", "Let's say that's", "And let's say that another thing is  oh  let's say a vampire", "So it just sets something to cats  even though another thing is the", "second variable in the function definition", "I can specify another thing as the third thing as long as I use keyword", "assignments", "Same thing with number of silly walks  even though in the function it's the", "third number  or the third variable", "I can make it the second thing by using these keyword assignments", "This kind of notation makes it easier for you to keep track of what values", "you're passing into your function", "Sometimes when you're working on a long project  you can easily forget", "what the order of variables are", "So writing it this way will help make it more obvious when you're reading", "back and saying  hm  what was this   over here", "What did it correspond to", "Using keyword assignment lets you make the code a whole lot more readable", "So that's it for today", "I hope you found this feature of Python as useful as I did", "Have a good day  and don't let the frogs be too scary at you"], "o8tmvzs6F4Q": ["OK  we've now seen a mechanical description of the evaluation of", "procedures  both what happens when we define them  and what happens when we", "actually use them  when we do a computation where we use the body of", "the procedure", "We described a mechanical way of using environments  let's look at a couple", "of examples to really drive home that process", "Here's a simple example", "Let's suppose I want to compute the power of some number to some other", "power  a to the power of p", "I'm going to do it with just successive multiplication", "I know that Python provides a built in version of this", "But I would  say  for example  wanted to take a to the p th power", "And I do it by multiplying a by itself  storing that result away  then", "multiplying that by a  then multiplying that by a", "And then just keeping track of how many multiplications do I need to do", "until I've done p of them  and keep track of the result  and return it", "when I'm done", "So here's some code to do it", "And it's pretty straightforward", "In fact  we just saw it earlier", "It was in my earlier example", "I'm going to input some number for x", "I'm going to input some number for p", "And I'm going to make sure it's an int by doing a type casting there", "I'm going to set up an intermediate variable  or a place", "to store the result", "And I'm just going to run through that loop  where I'll print something up to", "tell me where I am  and I'll change the value in result", "Let's look at an example to see if this does it", "So if I go over to Python  I can load that computation", "It is now saying give me a number  let's give it", "It says give me an integer  let's give it", "Oh  and it prints through the stages  telling me at each iteration what the", "current result is", "It starts as    and then it's   and then it's   squared  and then it's", "cubed  and then it's   to the fourth", "Wait a minute  didn't I want to take it to the fifth power", "Well  notice that my print statement is just printing before I", "actually do the work", "And in fact  when I'm done  what I've done is  I'll return", "the value in result", "And there it is  it's", "OK  we saw how that computation would take place previously", "Now  let's capture it in a procedure", "So I'm going to define a procedure called iterative", "power  there's the name", "I'm going to give it two formal parameters  x and p", "And then the body of the procedure is much like what I have for my", "computation before", "I've got an internal definition of result  which I'm going to use", "And the only big difference is  when I'm done with the computation of that", "for loop  I've got that special keyword return", "That says return the value of this expression  which is just the value of", "result  when I'm done", "Let's try it to see if it works or not", "I've already loaded this over here", "So if I say I'm going to int   yeah  yeah  iterative power  I'm going to", "compute that", "Let's do   to the", "It runs through exactly the same stages  and notice what it printed out", "at the end", "It printed out the value of the computation", "And in fact  if I were to bind this and say z is equal to IterativePower", "of   and    it runs through the computation", "And if I ask for the value of z  there it is", "So it does the computation I want  now let's think about what happens inside", "of the environments  how it does the scoping of the variables", "So if I were to evaluate that definition  which I did  by loading it", "into my Python environment  what it does is  it creates a binding for the", "name IterativePower to a procedure object", "And inside there  I have a list of formal parameters", "and I have the body", "I also have an environment pointer that points back to the environment in", "which I did the definition", "In fact  we know we're going to use it", "If I now call iterativePower with   and    what do we say happens", "We get  first of all  the value of this expression  iterativePower  it", "points to that  it's a procedure object", "I get the values of each of these expressions with respect to this", "environment", "Numbers are always numbers  so it's just   and", "And then I create a new environment  which I'm calling E", "This new environment here", "It has as a parent the environment that the procedure", "object has as a parent", "And then  inside of that environment I bind these formal parameters to the", "values of the expressions passed in", "And then relative to this environment  I now evaluate the body of the", "expression", "Ah  that's really cool", "Because now  I've basically reduced a computation to a simpler computation", "I'm now evaluating this expression or sequence of expressions relative to", "this environment", "And that environment contains the bindings I want", "So in fact  if I evaluate that body  what does it do", "Well  the first expression it evaluates says bind result to", "And notice where that happens  it happens down here in this environment", "Not up in the global environment where I want to have some value that I might", "want to think about", "It's happening inside of this environment created", "by a procedure call", "Having done that definition  I run through the for loop", "And that says look up the value of x  which is right there", "Look up the value of result  which is right there", "Multiply them together and change the binding for result", "And then do it again and again  you get the idea", "All of this computation takes place in this environment  E", "What that says  then  is that the loop rebinds that local variable until we", "get to the exit  until when we're done and we hit that return expression", "And return says look up the value of result in this environment", "Because that's where I'm doing the computation for the procedure", "There it is", "That's what's actually returned", "Cool  that's exactly what it said we should do", "Now  let's drive home a point", "Imagine that we had actually done some bindings for x and p", "before we called it", "In fact  let me go back over here to Python", "And I want to say  let's set x equal to", "Let's set p equal to", "Let's set result equal to", "And now let's call z as iterativePower   and", "It runs through the computation", "And notice what's happening", "What's the value of z", "Well  that is   to the seventh power", "But more importantly  what's the value of x", "Still", "The value of p", "Still", "The value of result", "Still", "Those were bindings in a global environment", "When I called the procedure  it created its own frame  its own", "context  did all the computation", "And that local environment had separate bindings for x and p  which", "are not visible to the environment where we did the function call", "So this point captures that notion of encapsulating the computation", "And what that then says is  to say it in a little more detail  we have", "bindings for x and p up here", "When we call the procedure  we do local bindings to the values passed", "in  we do local bindings for result", "And when we do that computation  the evaluation of the body only sees the", "bindings down here in E", "So we created a black box", "Details don't matter", "I can re use this procedure anywhere by simply using its name", "If I decide to change  for example  the names of the parameters in here", "I'm free to do that", "And it doesn't change any computation that relies on just using", "iterativePower", "So procedures give us this wonderful notion of abstraction"], "7m8pab1MfYY": ["Congratulations", "Now you know how to use one of the basic building blocks of", "the course", "If you look to your left  you will see a table of contents", "for all of the aspects of the course", "Right now  since you are playing this video  you're in", "the overview section  which contains various aspects of", "administrivia including these tutorials", "Continuing to look to your left  if you click on the", "various chapter labels  you will see the course content", "that it's associated with each chapter", "You will not change content or interrupt a video until you", "actually click on a new course element to navigate to", "Each chapter contains activities that you are", "expected to complete  including presentation", "sequences  which you should watch and participate in in", "order to learn new material concepts", "You should also complete the homeworks and activities in", "order to get more practice and solidify your understanding of", "the material", "Many courses will grade you based off of your performance", "on homework questions", "The next section will describe how to enter", "and check your answers", "Note that in this sequence  even though the next section", "will give you feedback it will not affect your grade on any", "aspect of your interactions with that x So you should feel", "free to experiment"], "WdFrWzyYoQg": ["Eric Grimson  Welcome to  x", "In this first lecture  we're going to talk about some of the fundamental", "principles of computation and computational thinking", "For example  what does a computer actually do", "What are its fundamental operations", "How do those fundamental operations support what we call imperative", "knowledge or how to methods", "What are the basic elements of a computer that enable it to compute", "things  described by algorithms  or how to recipes", "And finally  how can we use a language  a programming language in", "our case  to describe those recipes"], "mylsICZfBpo": ["Now  we've seen how to define functions  how to invoke", "functions  and especially how to understand the mechanisms", "by which Python keeps track of bindings of variables  both", "parameters of functions and other variables in order to be", "able to execute the kinds of computations that we want", "Let's use this to look at a slightly more interesting", "example and to see how having functions allows us to easily", "refine computations", "In particular  let's go back to that idea that we had", "earlier of bisection search", "This is going to let us try and find roots of numbers", "And we can now capture that in a procedure", "In fact  what we have here is something called findRoot", "It looks exactly like the code that we wrote as a script", "Except it's now captured as a procedure", "It has number  a power  and an epsilon", "And that's basically saying we're trying to find the", "number  a  such that a  to the p minus x", "That difference is less than epsilon", "Or if you like  we're trying to find an approximation to", "the p th root of x", "The code looks much like what we had before", "The only difference is that we've got a return down here", "to return the answer when we want to get", "the answer back out", "And it does this by taking  initially    and the value x", "as the starting points  calling those high and low or", "low and high rather", "Taking the midpoint as a guess and checking to see  if it's", "not in the right place  is it too high or too low", "And using that either to search the bottom", "half or the top half", "Again taking the midpoint and using that to decide whether", "to search the bottom half or the top half", "And to keep on going", "Let's try running this", "So let's go over to IDLE", "And we're going to actually try and run findRoot", "So here we go", "We've got findRoot", "And let's take an example", "Let's find the root of    the square root of    to within a", "pretty good approximation", "And we know the answer should be", "It does pretty well", "Let's do findRoot  of", "And let's do the cube root of that", "We know it should be", "That's pretty good", "Now let's try findRoot  of minus    the", "cube root of that", "Which we know should be minus", "Oh goodness", "It's hung up", "Hm", "What's going on", "Well let's stop this", "And let's go back over here", "And let's put in a little print statement", "Let's put a print statement in right here that will just", "print out the current value of the answer", "And let's reload that", "And let's go back and try this computation again", "So let's see what happens if we try findRoot", "Huh", "OK  let me stop that", "What happened here", "Why does this fail on this example", "This got caught up  obviously  in an infinite loop", "And it looks like it's trying to guess at minus", "all the way along", "And we can actually see the problem", "The problem is in the logic  basically  in terms of what we", "take in terms of what's too big and what's too low", "If we're looking between   and the number  and we take the", "mid guess  if the square of it is too small  it says we're", "too low and we're going to move up to the top half", "But when it's a negative number  if the square of it's", "too small  we're going to move up to the wrong half", "The logic here is wrong for negative numbers", "So  how would we fix that", "Well  we could try and change the logic for both one  saying", "if it's negative  do one thing  if it's positive  do", "something else", "But in fact  there's a really nice little fix", "Which is rather than looking over things just between   and", "x  let's basically say   look  if the number is positive  I", "want my low guess to be   and my high guess to be x", "But if the number is negative  I want to reverse the logic", "I'd like my low guess to be x  the negative number  and my", "high guess to be", "And now I will do the search in the negative range rather", "than the search in the positive range", "And this little change there does exactly what I'd like", "While I'm at it  I'm going to clean things up", "I'm going to add a little clause in here that basically", "says if it's a negative number  don't try and take", "even powered roots of that because we", "know we can't do it", "So it's going to catch things that I don't want to", "try and deal with", "Part of what we're seeing here is that as I test things  I", "ought to be thinking about a range of test cases", "I started off initially just with positive numbers", "I was taking roots of them", "And it's only when I got to a negative number that I", "realized I had a gap in my reasoning", "And I needed to think about it", "With that in mind  we can go back and fix it", "And in fact  I want to create  now  findRoot", "I've got that over here in my Python", "And if I now try findRoot  on minus", "And I take the cube root of that", "I get what I would like", "That's great", "OK", "Now that we've got that  let's see we might take roots of", "Again  notice my tests have all been larger numbers", "What about a number between   and", "So let's try and find the root of      the", "square root of that", "Huh", "Looks like it's stalled again", "It looks like it's stuck", "What's going on", "Something is not working here", "So let me stop out of that and ask the question why does it", "fail in this case", "Well  in some sense  the reason we can think about if", "we think about what bisection search is doing", "So we've made these changes", "But we're failing on that case", "So let's think about it", "When we call find root with a number between   and  I don't", "know  some big number  bisection search says take", "we could have started with     but take   and that number and", "take the midpoint", "And that's going to get us closer to the guess that we", "would like", "And we're going to keep doing that", "But when we call it with a fractional argument  like", "we're basically saying in our code start with", "something between   and a quarter", "And our first guess is going to be at an", "Ooh  that's not good  right", "That's moving in the wrong direction", "We know that the solution is out here somewhere", "But we're going to focus only on this range", "And we're going to get caught into an infinite loop or we're", "just going to zero down at the minus end", "The original idea used the fact that the root of x was", "between   and x", "But when x is fractional  the root is actually", "between   and", "And I want to focus my search on that range", "I'd like to start zeroing in only on that range", "So it turns out that there is a nice  easy", "way to fix this code", "And it simply says change my initial guesses", "So if it's a number above    my min will be minus   and the", "number will be whatever the original number", "was as the high end", "And I'm going to do the right kind of search", "If it's negative  it's going to be down at the other end", "But if it's fractional  between minus   and    I'm", "going to focus the search just within that range", "I've called this findRoot", "And if in fact I now try that  I will find that findRoot", "does the right thing", "Oh  only if I type findRoot  will it", "So let's try that again", "FindRoot  of     to", "And what about negative numbers", "Oh  right  I can't take the square root", "of a negative number", "So let's try something a little different", "findRoot    let's do it with a quarter", "But let's find the cube root", "And that gives me a good approximation", "And if I do the same thing with minus      and I find", "the cube root  great", "And you know what  I should go back and check some of the", "earlier ones I did as well just to make sure I haven't", "accidentally broken things that I had done originally", "So if I do   to end a small epsilon  a ha  I get", "the thing I'd like", "And if I do minus   cube root  small number  again I", "get the thing I'd like", "So why is this advantageous", "By writing a function  I make it easy to write test cases", "I make it easy to check them", "And it let's me  more importantly  easily go in and", "just fix things inside the function", "If I was writing this as a script  I would have this code", "replicated in many places throughout my code", "And if I discovered this area  I would have to find every one", "of those places and change it", "Here  the encapsulation of the function isolates the change I", "have to make to just the code inside of the function", "And that's really powerful", "I'm going to add one last thing now to my function", "something that you should do as a good programmer", "And that's to add a specification", "And that's the thing showing up here in a triple set of", "double quotes", "This  basically  defines as the creator of this code what", "the user ought to expect", "And I've given a description of it", "I've said x and epsilon are either integers or floats", "Power is an integer", "Epsilon is positive", "Power is greater than or equal to", "Those are assumptions I'm making", "And if those assumptions are met  then this function should", "return a float that satisfies certain properties", "That spec is really valuable because it lets a user  or in", "fact a coder  understand what the intent of this code is", "And in fact  if I were to use that when I type findRoot", "into a Python shell and I open up the paren to give it a set", "of parameters  it will print out that information for", "me to remind me", "The reason this is valuable is that the specifications now", "become a contract between the implementer and the user", "It defines assumptions", "What are the conditions that the implementer is assuming", "must be met by users of the function", "It's typically constraints on the parameters  like what kind", "of type it should be", "Sometimes it defines acceptable ranges of values", "And in essence  it tells the user  if you don't satisfy", "these constraints  all bets are off", "It often will also provide guarantees", "It will specify conditions that must be met by the", "function  provided that it's been called in a way that", "satisfies the assumptions", "It says I'm going to guarantee you an answer that satisfies", "these conditions if you give me good inputs", "And that spec lets us complete this notion of the black box", "All the user needs to know is the details of the", "specification", "And they can freely use the code wherever they would like", "relying on it giving back answers that satisfy the", "guarantees that the implementer put on them", "This allows us  then  to sort of", "close the loop on functions", "What do functions do", "We now can create new procedures and treat them as", "if they were primitives", "It closes the loop in which we can create new primitives to", "add to our code", "And the functions have two really nice properties", "They satisfy the property of decomposition", "That says we can easily now break problems up into modules", "that are self contained", "And they can be reused in other settings", "So I might have a module that's used in a cube root", "function  and in a square root function  and in a quadratic", "root function", "And that module I can easily reuse any place", "I would like it", "The second big property we've talked about  and that's", "abstraction", "Functions let us hide details", "The user just needs to know how to use the function", "He does not need to know the interior details", "And that simplifies design by suppressing details that are", "not essential to the thinking of a user trying to do", "something more complicated", "And so functions  now  are a great addition to the set of", "things we have in our toolbox"], "mExCdX2EPyY": ["PROFESSOR  In the modern world  we often have to search through many", "alternatives to find out which combination will", "give us the best result", "For example  what stock portfolio will give us the greatest return at", "acceptable risk", "Or what combination of trams and buses will get me across town in time for", "the concert tonight", "Or we might want to know what choice of rocket booster and trajectory will", "provide the minimum transit time for a space capsule to Mars", "These problems  called optimization problems  have been studied for many", "years and good computational solutions exist for many of them", "If you have your own optimization problem  you'll probably find it can", "be reduced to one of the classic optimization problems  and you'll be", "able to adopt one of the existing solutions", "Over the next few lectures  we're going to be looking at some of the", "classic optimizations", "And of course  you'll get to experiment with some of the", "solutions in Python", "As we tackle each of the problems  spend some time thinking about how you", "would approach the problem", "It can be a lot of fun", "Let's get started", "Optimization problems share some common characteristics", "Suppose we wanted to find the minimum airfare from Boston to San Francisco", "on a Monday or Tuesday", "Well the first thing we notice is that the statement of the problem has an", "implicit objective function", "So there's our objective function   the minimum airfare", "So often the objective function involves mins or maxes or biggest or", "smallest or something like that", "Notice that some objective functions actually require us to look at all", "possible solutions so that we can choose the one that is the minimum or", "the maximum", "After all  how would we know that we had found the minimum unless we", "examined all the other ones to see that they were bigger", "The second thing that we notice is a set of constraints this", "solution must satisfy", "In this case  we're interested in flights that happen", "on Monday or Tuesday", "That seems pretty straightforward", "We could obviously generate solutions and check to see if they satisfy the", "constraints", "And then if they do  we can apply the objective function and decide if this", "is the one that we are looking for", "Sometimes a set of constraints can help constrain the search", "That's why they're called constraints", "For example  with the airfare  we might only consider flights that were", "flying on Monday or Tuesday  and from the set of all possible flights  that", "would be a considerable reduction in the amount of work we would have to do", "to come up with a final answer", "Before we look into how to write computer programs to solve", "optimization problems  let's take a moment and look at some of the more", "interesting ones", "Here's a classic optimization problem from the world of chess", "The goal is to place  in this case    queens on an   by   board such that", "none of the queens is attacking each other", "That would mean that no   queens occupy the same", "row  column  or diagonal", "Well if we're going to program a computer to solve this problem  we", "might try a simple brute force approach where we would start by", "placing the first queen on a square and then think about where we could", "place the second queen", "And we wouldn't be able to place it anywhere in the first column  nor in", "the first row  the second column  or in the second row  the second column", "But we could place the second queen here", "And then we could go on and think about how to place the third queen and", "the fourth queen  so forth and so on", "We might eventually come to a situation where it would be impossible", "to place some queen  because there would be no remaining position on the", "board where that queen could go", "And that might mean that we'd have to back up and reconsider one of our", "earlier choices", "For example  the final solution might involve having the second queen", "actually be in this square", "And then we'd have to redo the placement of all", "the subsequent queens", "So this is an example that we're sort of step by step slowly enumerating all", "possible solutions", "Well in this case  there are   squares on   by   board  and we're", "trying to choose   of the locations", "So   choose   is about   billion possibilities  so the enumeration", "would take a long time", "However  we will eventually come to an answer  and one of the characteristics", "of optimization problems is that there's almost always a brute force", "approach that involves an exhaustive enumeration of all the possibilities", "Another classic problem is bin packing", "In this problem  we're given many objects of different sizes  and our", "goal is to pack them into bins of a fixed capacity", "And so in this case  our capacity of each bin is", "So we can see here that if we stack up objects of size    and    and", "we've basically almost filled up the first bin", "The goal of the problem is to pack all the objects in the bin  but if we can", "is to minimize the number of bins", "You can imagine there's many different ways to think about how to go about", "this problem", "For example  you could just simply take the objects as they came and", "stack them up one at a time in a bin  and when the next object wouldn't fit", "you simply move to the next bin and keep going until you've used up all", "the objects", "Of course that would leave a bunch of bins with room at the top  and", "perhaps  some small object would fit there", "So another alternative would be to simply leave bins open all the time", "and every time you have an object  you look for the first bin", "that will it fit in", "Or maybe you look for the bin that has the most room and put it in there", "Or maybe you'll look for the bin that has the least amount of room remaining", "but which the object would fit in", "So forth and so on", "It's actually fascinating to think through all the different ways you", "could tackle this problem", "You can see that if we tried to enumerate all the possible solutions", "however  particularly when there's many  many  many choices to be made", "it would be almost computationally impossible", "It would take years of computer time to figure out what we're doing  to", "figure out all the possible combinations", "So this is an example of a problem where almost certainly we'll have to", "figure out a heuristic or approximate solution that will let us make some", "progress and hope that it produces  as best we can  the", "smallest number of bins", "For our next example  suppose you worked at a cabinet shop and your job", "was to cut doors and cabinet sides out of large sheets of plywoods", "The objective function is to minimize the waste", "What you'd like to do is to take any lumber that ends up getting thrown", "away and make sure that's the least amount of lumber possible", "The constraint that you have to satisfy is that you can only do", "guillotine cuts", "Now  in a cabinet shop  you have to use a table saw to make a cut  and the", "table saws really want to cut all the way across a piece of stock  like so", "So that would be a guillotine cut  the first one you would make", "So the goal is to figure out a plan for laying out the pattern and then", "the sequence of cuts to minimize the waste and only do guillotine cuts", "What's interesting about this particular problem is you notice that", "once we've made our first cut  we have a similar subproblem", "So in other words  now we have a smaller problem that's exactly the", "same of taking these   pieces and laying them out on a smaller piece of", "plywood and solving the problem once again", "So this is often a structure you find in optimization problems  where you're", "sort of have to think a little bit about how maybe solving the problem", "involves really solving   subproblems and then looking to see if the", "solution produces a minimum cost", "Here's an example with a different kind of cutting", "Imagine that this is a description of an electrical grid  and we have a", "generating station at this end  and a city down here at this end  and the", "intermediate points are all substations", "And the arrows represent the capacity and the numbers represent transmission", "lines and their capacity", "And what we're interested in doing is computing the maximum flow from the", "starting point down to the ending point", "How much current can flow through this network", "Well  the answer to this problem is related to the following observation", "Suppose we make a cut through the network  and we realize that", "so a cut would divide the network in half so that s is in one half and t is", "in the other half", "And we realize that all the current flowing from s to t would have to", "cross that cut", "What we would like to do is to find the cut  that so called min cut  the", "minimum cut", "And what we'd like to do is to minimize", "OK  if we look at the capacity of all the cut edges  what we'd like to do is", "to sum up that capacity  and we'd like to minimize that sum", "So if we find the min cut through the network  that will actually tell us", "the maximum flow that can go from s to t", "As you can see  there's a lot of possible ways to make cuts in this", "network  and to do so without examining every possible cut is sort", "of a tricky business", "As a final example  consider the problem a traveling salesman faces", "He has a territory with cities with rail lines connecting the cities", "He would like to find the minimum cost trip that's subject to the following", "constraints", "He'd like to visit each city exactly once  and at the end of the journey", "he would like to return home", "So this is one of the classic graph problems", "So the vertices represent cities  the lines represent the opportunities to", "travel from one city to another  and the goal here is to find a path now", "through this graph of cities that visits each city exactly once and", "returns to the start", "Now the question is is that the minimum cost  such trip", "Can we figure out a way to do this that doesn't involve enumerating every", "possible trip", "The challenge of optimization problems is that they are hard to solve", "Hard in the sense that finding the solution you're looking for  the", "optimal solution  requires examining all the possible", "combinations of items", "So that's why this field is often given the name combinatorial  so", "studying of all the different combinations  optimization  because", "we're going to then look through each of the possible combinations and see", "if it's the one that is the best solution to the problem that we have", "The reason it's hard is that the time to examine all the combinations of a", "set of items grows exponentially with the number of items", "And what I mean by that is if I go ahead and add a single item to the", "collection  if I think about now all the possible combinations of items", "what I will discover is that I will have a doubled the number of", "combinations", "And so as I go from   to   to    the problem is getting exponentially", "harder  twice as hard each time", "And the reason that's a problem is that real world challenges often have", "a very large number of items that you need to consider", "So as the problem is growing exponentially more difficult with each", "item  we can see that if we have   items that the problem may  in fact", "take us too long to solve using the exhaustive techniques of looking at", "each possible combination", "So instead  we're going to have to look around for approximate solutions", "to these problems", "We give that the fancy computer science term of heuristics  something", "that will let us not examine all the solutions but come up with a solution", "more quickly"], "9rVsdCMxeiA": ["Eric Grimson  Welcome back to  x", "In this second lecture we are going to start developing knowledge of", "programming languages", "We'll talk about how a computer converts a description of a how to", "method that we write in a high level  although a semantically constrained", "manner  into a set of instructions that its internal", "circuitry can execute", "To do this  we're going to begin to introduce the basic elements of", "Python  the language we're going to use in this course", "We will introduce a bunch of things", "Numbers  expressions that combine numbers arithmetically  ways to", "compare objects like numbers  Boolean operations on logical expressions", "ways to abstract expressions by giving them names", "strings or collections of characters and words and operations on them", "combining expressions in a linear manner  and simple ways to make", "decisions and to take different options or branches", "based on those decisions", "At the end of this lecture  you should be able to write simple programs that", "manipulate numbers or strings  make decisions  and print out results"], "uuw89vV7bGg": ["ERIC GRIMSON  So we've been seeing recursive functions", "We started to see the power of them", "They're a really powerful way of thinking about breaking a problem down", "into simpler pieces", "And as we saw with things like Towers of Hanoi  what looks like a very", "complex problem sometimes has a beautiful solution by thinking", "recursively in terms of smaller versions of the same problem", "We're going to do one more example  because so far what we've really", "focused on is things dealing with numbers", "And while that's great  we can use recursion in other places", "So here's an example of doing recursion on non numerical values", "In particular  suppose we're given a string of characters and we'd like to", "know is it a palindrome", "And if you don't remember  a palindrome says  does it read the same", "left to right  and right to left", "Is it the same in either order", "Classic example  attributed supposedly to Napoleon  although that's highly", "unlikely  is something like   Able was I ere I saw Elba   And if you look at", "it on the slide  you'll see if I read it from left to right or from right to", "left  it's exactly the same", "Another wonderful example", "Are we not drawn onward  we few  drawn onward to new era   Another", "great example of a palindrome", "So we're going to try and build this", "We're going to do it  though  in a couple of stages", "First one is  we're going to strip out all of the spaces  the punctuation", "Because they won't really matter", "We just want to know are the characters the same", "And secondly  we don't care about capitalization", "So we're going to reduce all of the characters to lowercase", "And then we're going to tackle this problem in terms", "of a recursive function", "So how do we solve it", "We first convert the string to just characters", "We'll look to that in a second", "And solving it recursively is actually pretty easy", "If I have a string that's either of length zero or of length one  it's a", "palindrome", "So length one is just one character", "Otherwise  to solve this  what I'm going to do is take the string and ask", "the following question", "If the first and last character are the same  then", "they satisfy the condition", "And let me then simply look at the remaining string  throwing away the", "first and last character  and ask is that a palindrome", "Wonderful", "There's that recursive property again", "If I can break it down into that problem  I'm set", "So I could write code to do that", "Just to give you the example again  this says I'm going to take something", "like  Able was I were I saw Elba  and reduce it to just that string of", "characters without the spaces or any punctuation", "And then  to test whether that string is a palindrome  that's the same as", "asking are the first and last characters the same", "Is that test", "And if I take everything else in between  I can ask is that also a", "palindrome", "If the answer to both of those is true  then the bigger problem is also", "palindrome  and I'm done", "OK", "So here's the code to deal with it", "And there's a few new things I want to point out here", "I'm defining isPalindrome to be procedure", "Inside of there  I've got two definitions for other procedures", "And that's a little different", "These are now called internal procedures", "But this is perfectly fine", "These are quite straightforward ways of creating new procedures", "And in particular  they are going to belong only to this function", "If you think about our environment model  when I call isPalindrome  it's", "going to evaluate the body", "Which is going to cause these two definitions to be", "evaluated and created", "And the bindings for those names is going to be within the frame resulting", "from the call to isPalindrome", "So only isPalindrome has access to those", "This is a nice way to capture functions if they're really only going", "to belong to a single function", "The first one is just doing what I asked earlier", "That is to convert this string into just a set of characters", "There are a couple of things I want to point out here", "The first one is right here", "Here we're actually using a method of a string", "We're going to come back to that later in the term", "But it simply says  given that s is a string  the dot notation says get the", "method called lower associated with that", "That is a procedure or a method  so I'm going to call it by giving an open", "and close paren after it", "And in essence  what that does is it uses a particular internal procedure", "or method or function to convert s into all lowercase", "And I'm going to rebind that to s over here", "Then I'm just going to run through a loop", "I'm going to store a ans  or answer  a string of all of the characters", "And for each character in that converted s  I run through a loop", "where I first check to see is it one of the lowercase characters", "So c in that string literally basically says for each character in", "there  I return", "if it is in there  I return an answer", "If it's not in there  I don't add it in", "And this loop lets me walk through all the characters in s  keeping only", "those that are lowercase values", "And I just return the answer", "All right", "Some housekeeping", "Palindrome  or isPal  the actual checking  is exactly", "what I would expect", "It says  if I've got something of length less than or equal to one  it's", "a zero or one  the answer is true", "It is a palindrome", "And otherwise  notice what I do", "I use the properties of strings", "I get the first and last character  and I say  are those the same", "And if they are  I then also ask is everything else the same", "And notice this slicing right here", "This pulls out substring out of s  starting at the first not zeroth", "element and stopping just before the last one", "So getting everything but the first and last character", "And there's the recursive call", "And then finally  isPalindrome simply uses toChars to convert the string", "calls isPal on that  and returns the answer computed by that as the answer", "to the overall solution", "And if we want to actually check this  we can", "If I go over to my IDLE window and I load this in  I can now say", "isPalindrome  and I will give it some simple example", "So let's do abba", "That should be a palindrome  and it is", "I'm going to ask if my colleague John Guttag has a last name that is a", "palindrome", "And the answer is close  but not quite", "If he changes his name  which he will not do  to Guttug  it is a palindrome", "And finally  just as one last example  let's look at Able", "was I ere I saw Elba", "And that is also a palindrome", "And this is doing exactly the kinds of things we would have expected", "Now this is a nice example of a broader kind of problem", "This is  as some of the other things have been  is an example of what we", "call a divide and conquer algorithm", "And that kind of approach says  to solve a hard problem  we can do that", "by breaking it into a set of sub problems", "more than one", "with the property that the sub problems are easier to solve than", "the original one", "Either because they are a smaller version of the same problem  or they", "may just be an easier sub problem to solve", "And that the solutions of the sub problems can be combined to solve", "the original", "In the case of testing palindromes  I'm checking two things", "And these are tests on the first and last character and a simpler version", "of the same problem", "And the answer to both of those combines together to give me the", "answer to the overall problem", "We're going to come back to these ideas of divide and conquer", "algorithms later on", "They are an incredibly powerful tool that we're going to use in many places", "to solve interesting and challenging problems"], "DKCKJJSYRU0": ["ERIC GRIMSON  So we've now seen some nice examples of", "using guess and check methods to find answers to things", "But we want to take a slight to detour", "We'd like to use guess and check but not just for", "integers value  not just finding", "cube roots of integers", "We might like to try and find them for other values", "But to do that  we have to think about using floating", "point numbers or float", "And to do that  we also then need to take a little bit of a", "detour to understand how floats are represented inside", "of the computer", "So bear with me for just a little bit", "We're going to talk about floating point representations", "and then bring that back to see how we can still use those", "ideas to find approximation algorithms to get solutions", "using guess and check methods", "So floats approximate real numbers  but how do they", "actually do this", "And let's think for a second though  what is a decimal", "number  the kind of number we normally deal with", "Well    is really                             which of", "course is just", "So it's", "That's because we're using base    handy because we got", "fingers and   toes is an easy way to do counting", "Computers  not having fingers or toes  do things a little", "differently", "They represent things in terms of binary numbers or powers of", "basically because in electronics it's easy to have", "a switch either be on or off  have a   or a", "So a binary number will be a sequence of  's and  's that", "has the same form", "So the binary number               is the same as", "which of course is", "So if we wanted to convert it to decimal  that's basically", "is equal to", "So decimals  base    binary numbers  base", "Internally  the computer represents", "numbers in binary form", "So one of the things we'd like to figure out is so how does", "it actually get to that kind of a stage", "So let's look at that", "What does it mean to think about converting a decimal", "that we type in into a binary form", "How does the computer convert it into a form it can use", "And then how are we going to think about that", "Well  let's take an example", "Suppose we give the computer some number", "We'll call it x", "And it turns out x is actually               in binary", "But we don't know that", "We want to figure that out", "Well  knowing that it has some form like that", "what could we do", "The first thing we can do is if we take the remainder of x", "with respect to", "What does that say", "Well  that's says if we're going to divide each of these", "elements by   since x is this sum  we can", "divide that by   evenly", "We can divide that by   evenly  that by   evenly  that", "by   evenly", "But this only cannot", "So when we do that  the remainder that's left is", "whatever that bit is", "And that gives us the last binary bit  which is a", "That's cool", "So taking the remainder back with respect to   gives us the", "lowest order bit", "If we then divide x by    what we really do is we just shift", "the bits left", "You see that if we divide x by   that's going to change that", "to a    that to a    that to a    that to a", "This goes away because remember we lose it", "And what we've done  oh  just get exactly that form", "We've shifted all the bits left by", "And we can now do the same thing", "If we take this new value and get the remainder of that with", "respect to    it's going to give me that  which", "gives me a second", "And then shifting left will reduce that to    that to", "then I'll keep going", "And that will allow me to successively peel off each of", "the bits in order", "So we can convert any decimal number into a binary form", "Here's a little piece of code to do it", "Let's just walk through it very quickly", "This part up here I'm just going to let you look at it", "but it's pretty straightforward", "It's basically saying if the number I'm trying to convert", "is negative I'm going to take the absolute value  but I'll", "keep track of that so I can put the negative sign back out", "in front when I'm done", "And then what does this piece in here do", "Well  it basically walks through what I just said", "It says I'm going to set result initially to be an", "empty string", "I'm going to gather up the bits", "And then if the number is    I just return", "Otherwise  oh  there is one of those little iterative loops", "It essentially says  let me strip off the bottom order", "bit  put it onto the result", "There's a concatenation of the string  puts it to the left of", "whatever I've already gotten", "Change number by dividing by    which shifts the bits left", "And keep going", "So this is getting me the next bit", "This is just shifting left", "And I do that  OK  until I get a number that's less than", "And when I do  I'm done", "result holds the thing I want", "And all I need to do is just put a negative sign out in", "front if in fact what I started with", "was something negative", "So this is just doing a conversion back", "Cool", "Let's take a check of this", "See what it does", "So here in IDLE  I've got an example of that", "I've set a number to be", "And let's look at what happens if I do that conversion", "I type it in", "Huh", "Nothing showed up", "That's right", "Because I didn't ask it to print anything out", "But I know that result now holds the value I want", "And it says as a string there is   in decimal converted", "into a binary form", "I could change to something else", "Make it", "And do the same thing", "Save it away", "And again  I need to see where the result is", "I can do that over here", "And go back down to where it was", "Here is the result", "And since I know   is a power of    that form looks", "roughly right", "So what are we doing", "Given a decimal number  we can convert it into binary form", "And that's literally what the machine will do inside", "Now let's think about what this says", "First of all  I want to be able to get good", "approximations to things", "So what about fractions", "Why don't we deal with a fraction", "Well  let's think about a number like     which   ooh", "there a nice bug here", "This should be", "Sorry about that", "In binary  it would be      which would be           or", "", "So it has the same form", "Now how could we figure out how to", "convert this into binary", "Well  suppose we could find a power of   big enough so that", "when we multiplied it by this fraction it turned it into a", "whole number", "If we can do that  then we could take the whole number", "convert it into binary using the method we just had  and", "then when we're done divide by the same power of", "It's just going to shift to the right", "So  for example      we kind of know this", "We multiply it by", "It gives me", "That's in decimal form", "I could convert   to binary form  which we know", "is just", "And now that I've got that  I could just divide by    which", "is equivalent to shifting the binary point  if you like", "three slots over to get", "Cool", "Let's do that", "Here's my code", "And it's really got almost exactly the same form", "It's a little bit more than we had before  but let's just", "look at it", "I've got something up here that's just going to input an", "x so I'm not having to type new values in", "And here's a little iterative loop that simply looks for the", "power of   that converts it into a whole number", "So it's just going to loop over p  looking for a value of", "p such that   p   x is a whole number", "Its remainder with respect   is equal to", "Cool little check", "I'll just do that", "Once I can do that  then I'll take x and I'll", "multiply it by   p", "I've converted it now into a whole number", "And there  I just did what I did before  simply run through", "that test to see how do I convert it back", "into a binary form", "And once I'm done  then the last piece is I need to make", "sure I put enough zeroes out front by looking at how many", "values are there between the size of p and the length of", "the result", "And then having done that  I just need to find the right", "place to put the decimal point", "And there's a funky little piece of code that is", "basically finding the spot in between p where", "we want to do it", "We'll let you look at the details of it", "But that's basically what this code does  finds the power of", "p to make it a whole number  does the conversion  and then", "converts it back", "OK", "So let's see what we got here", "Go over to my IDLE", "And I've got a piece of code that captures that", "All right", "There's the piece of code right there", "And let's run it and see what happens", "I'm going to run that piece of code", "It says give me a decimal number", "In this case between   and   because that's where I'm going", "to deal with it", "Well  let's try", "Ahh", "Runs through three steps to get the remainders  and it", "converts it into that binary form which", "we saw before", "Sounds cool", "Let's try it again", "We enter this   oh  I don't know  something simple", "Ohh  it's working away here", "And it's working away really hard trying to find something", "And it says  my goodness  the binary representation of the", "decimal     is   ohh  look at that", "", "Well  you get the idea", "It's really boring and repetitive", "Ha", "So what happened here", "That's a little different", "We didn't get some nice  crisp  clean form", "And in fact that's going to be an important factor when we", "think about binary numbers and decimal numbers", "and especially fractions", "So what's one of the implications", "If there is no integer p such that x     p is a whole", "number  then the internal representation is always going", "to be an approximation", "And in fact what happened here was that the Python system", "eventually stopped trying to expand it out any further and", "simply gave us a representation out to some", "arbitrary number of bits that are set by the internals of", "the Python system", "So if it's not something that can be turned into a whole", "number by a power of p  it's always going to be an", "approximation", "This has an important implication", "It says  when I want to test two floats to see if they're", "the same I shouldn't use something like this because it", "might not be true because the approximations", "may be slightly different", "I'm always better basically saying  is the absolute", "difference between them smaller than", "some arbitrary amount", "And we're going to use that a lot", "This is a standard place where people get into trouble by", "trying to test the quality of two floats and then being", "surprised when in fact the code doesn't", "do what they'd like", "One of the things you could ask is  so why does print of", "give us back     if in fact     is represented as", "this long  funky kind of thing", "And the answer is because the designers of Python decided to", "set it up this way  that it automatically rounds to some", "number of bits in order to give", "something that's much crisper", "But in fact     is not represented as     inside of", "the machine", "That's going to be important now as we think about taking", "this idea of iterative algorithms  especially", "guess and check algorithms  but dealing with floating", "point numbers", "And we're going to do that in the next segment"], "mixmc-woOF8": ["ERIC GRIMSON  We've now added tuples  we've added lists  we've started to", "see the kinds of things we can do with them  all the sorts of things we'd", "like to do", "We can slice  we can index  we mutate the list  we can apply functions to", "all of those pieces", "We're going to add in one last data structure that is a further", "generalization of the kinds of things we've been building", "And that data structure is a dictionary", "So a dictionary's a generalization of a list  but now the indices  the ways", "to get to elements of the dictionary  don't have to be integers", "If you think about it  a list is a linear sequence of things  and its", "indexed starting at             all the way up to the end", "Now  with dictionaries  the places or the ways to get to elements of the", "dictionary can be any value that's immutable", "Hm  what does that mean", "First of all  we're going to start referring to these indices not as", "indices  because that implies integers  but as keys  because the", "keys can be arbitrary in form", "And a dictionary then is simply a collection of key value pairs", "That is  a pairing up some key and an associated value", "The syntax for this is shown here", "We use curly braces to indicate that this is a dictionary  and each of the", "pairings is a combination of some key  a colon  and some value", "They're separated by commas  so the commas tell me where the ends of each", "one of those are", "So I'm giving the name monthNumbers to a collection of Jan    Feb    Mar", "and   Jan    Feb  and   Mar", "So I've got pairings both ways", "Each pairing has both a key and a value in it", "OK", "If I've got that   and in fact  I'm just going to show you over here  I've", "got monthNumbers defined  and it is that pairing of these pieces", "Now  what I can do is  I can start doing things on this", "So the first one is  if that's monthNumbers  one of the first things", "I can do is I can get out elements of it", "So I could say  for example  if I wanted to get the value associated", "with a key  I simply give it that value of the key as an index  and it", "gives me back the thing I'd like", "Or I can say  if I want monthNumbers of the value associated with the key", "too  I can get back that as well", "So we get things by giving it a key", "So it's a lot like a list  except that now the things that go in are", "arbitrary expressions", "They don't have to be integers", "It's also important to notice", "and here's what we can do if we give it a second one", "It's important to notice that the entries in a dictionary are unordered", "and they can only be accessed by a key  not an index", "And in fact  if you look back on my idle screen  you can see when I", "printed out monthNumbers  it gave me the dictionary", "And notice they weren't in the form that I typed them in", "I type them in with Jan and    and yet it has   and Jan as being the first", "element of it", "And so if I somehow say gee  I'd like to get what I think is the  th entry", "of monthNumbers  which would be that   Jan pairing  it's going to complain", "because in fact  I can't index by number", "I have to index by key", "OK  so what can we do with dictionaries", "Well  we can do insertion", "So for example  I can go over to monthNumbers  and I can", "add something new", "And I would do that as you might expect", "I'm going to give it as an assignment statement saying  associated with the", "key Apr as a string  I want the value", "And that has now added to the dictionary monthNumbers so that if I", "ask for the value associated with key Apr  it gives me back", "So I've just inserted something into there", "I can also iterate over a dictionary  and I want to show you", "an example of this", "I'm going to bring this up here  and I'm actually going to", "type it in over here", "I'm going to create a variable called collect  which is going to be", "initially an empty list", "And then I'm going to loop over this dictionary I created  monthNumbers", "So I'm creating an generator iterator  e is going to vary over each of the", "elements of that", "And I'm just going to append to the end of collect  that entry", "And if I now look at what collect is  ha  cool", "Its a list", "Oh  and notice what it put in", "It looks like it has put in the keys associated with each one of these", "things  and that's actually very good", "OK  so I've got the keys associated with each one", "And indeed  if I want to look at this  I can compare that to", "monthNumbers of keys", "And that's just a method", "And we'll come back to methods later on  but basically it's a method", "associated with the dictionaries  which is going to give back to me the", "list of all of the keys  and it turns out to be in exactly the same order", "Not a big deal", "All I wanted you to see was the idea that we can iterate over a dictionary", "doing things to the elements if we want to  and that's great", "The final thing that we can do is stress that the keys can be complex", "I can create a new dictionary where my keys now are tuples", "The tuple      or the tuple     have values associated with them", "I can ask for the value by giving it that key", "And notice the form", "I have to actually give it the key", "Open paren    comma    close paren  and it will get back for me the value", "in the dictionary", "It's also important to stress that these keys must be immutable", "So I can use a tuple as a key  but not a list", "And that makes sense because if I'm storing something with a key in a", "value  and I can somehow go along and change the key  that's going to really", "mess things up", "I can't have mutable keys", "They need to be immutable", "And this is one place where it's advantageous to have both a tuple that", "can't change  and a list which we can change", "This is intended to be just a brief introduction to dictionaries", "We'll come back to them and their methods later on", "But now  what you've seen is we can have arbitrary collections of", "elements  ordered collections like tuples and lists  and collections like", "dictionaries that are simply indexed by arbitrary kinds of things  and", "we've got functions that can start operating on those kinds of data", "structures", "And that's going to add a lot of power to the kinds of things we can do"], "nUQtUX3zDoU": ["JOHN GUTTAG  Hello", "We've now introduced some basic ideas about probability", "And we're about to start building on those ideas today", "In particular  we're going to look at how computational systems are so very", "convenient for modeling behaviors of noisier  uncertain systems  especially", "in estimating the values of parameters of those systems", "Before we start  it's worth noting that the history of probability is", "intimately connected to the history of gambling", "It is the existence of uncertainty that makes gambling possible", "And the existence of gambling provoked the development of much of the", "mathematics needed to reason about uncertainty", "So I guess it's a good thing that people were willing", "to lose their money", "Contributions to the foundations of probability theory by Cardano  Pascal", "Fermat  Bernoulli  de Moivre  and Laplace  among others  were all", "motivated by desire to better understand  and profit", "from  games of chance", "Most of the early theory revolved around games using dice", "Reputedly  Pascal's interest in the field began when a friend asked him", "the following question", "would it be profitable  given   rolls of a pair of dice  to bet against", "their being at least one double six", "You'll recall there's one six on each six sided die", "Amazingly  this was considered a hard problem in the mid  th century", "Pascal and Fermat  two pretty smart guys by the way  exchanged a number of", "letters about how to resolve this issue", "Of course  to us it should now seem like a very easy question", "On the first roll  the probability of rolling a six on", "each die is one sixth", "So the probability of rolling a six on both die is one sixth squared  which", "we know equals", "Therefore  the probability of not rolling a double six on the first die", "is      and the probability of not rolling it on each of the die is", "", "If we look at   rolls  we have to look at", "So what value is that", "Well  let's go over to our Python window and check it out", "We can look at it in IDLE here and say that it should be", "to the  th", "Ooh", "It's very close", "So you can see why Pascal's friend really didn't feel he could answer", "this experimentally  that it required some analysis to see", "what the answer is", "But as it is  you can see that it's just not quite there", "Not quite a half", "OK  that's what the math says", "I'm a skeptic  and I wrote some code to check Pascal's math", "I know  who am I to think that I should question the great Pascal", "What the heck  it's my course", "All right  so we have rollDie  which we've looked at before", "And we're going to check Pascal", "We're going to pass in number of trials  that will be an integer  and", "roll  which will be a function", "And in a little bit we'll see why", "We'll start with yes equals zero for i in the range number of trials  for j", "in the range", "We'll roll a first die", "We'll roll a second dle", "If they both come up six  we'll set yes to one  and then we'll break", "And when we're done  we'll print the probability of losing equals   minus", "yes over the number of trials", "Let's give it a shot", "We'll call check Pascal      trials", "And we'll pass in the function rollDie  defined up here  that gives", "us a fair die", "Pretty darn close to what Pascal computed", "And probably  if I'd done more than     trials  it would", "have been even closer", "Now we have to remember that both Pascal's math and my simulation only", "hold under the assumption that each die is fair", "ie  the outcome of a roll is truly random and each of the six outcomes is", "equally probable", "That's not always to be taken for granted", "The pair of dice pictured in this slide were excavated from Pompeii", "And you can see that one of them has been opened up", "And that's because there was a little weight inside there to make sure that", "when it was rolled  in fact  it was not equally probable that each side", "would end up down", "More often than it should have  the slightly heavier side", "would end up down", "Right  let's just for fun build some cheating dies ourselves", "So I'm going to replace rollDie with this other function  rollLoadedDie", "It starts by saying if random random  and you recall that returns a random", "value in the range zero to one  is less than   over       I'm going to", "return six", "Now if I wanted to die to be fair  I would have made this six", "But I don't", "I want six to come up just a tad more often than it really should", "And then the other five numbers are equally probable", "Not a big difference  but let's see what it does to the outcome", "And now you can see why I made roll a function  rather than building it in", "to the check Pascal simulation", "So we see here  well  I got a slightly different answer this time when I ran", "the simulation with the fair die", "But a really big difference when I put in the cheating die  notice the", "probability has dropped dramatically", "So there are two morals from this story", "The first  don't play a game of dice with somebody who brings their own", "dice to the game unless you know them very well  or you don't", "care whether you win", "More importantly  is the moral that simulation is a wonderful tool for", "exploring what if questions", "I asked the question  what if I made the die just a little bit unfair  so", "much that no one would notice it", "Would it change dramatically the probability of winning", "or losing the bet", "And we saw that it would", "And that's one of the reasons people love simulations  is they can explore", "these kinds of questions", "The simulation we just looked at  like many other simulations we played with", "is an example of something called the Monte Carlo simulation", "The term Monte Carlo simulation was coined in   by Stanislav Ulam  and", "Nicholas Metropolis  two very well known  th century mathematicians  in", "homage to the game of chance played in the casino in the principality of", "Monaco  pictured here", "Ulam  who's best known for designing the hydrogen bonbs with Edward Teller", "invented the Monte Carlo method in    even though we didn't", "name it until '", "Here's his own description of how we invented it   The first thoughts and", "attempts I made to practice the Monte Carlo method were suggested by a", "question which occurred to me in   as I was convalescing from an illness", "and playing solitaire   He probably was not playing it on a", "computer  by the way", "The question was  what are the chances that a Canfield solitaire laid out", "with   cards will come out successfully", "After spending a lot of time trying to estimate them by purely", "combinatorial calculations  I wondered whether a more practical method than", "abstract thinking     oh  I hate that abstract thinking", "might not be to lay out say    times and simply observe and count the", "number of successful plays", "This was already possible to envision with the beginning of the new era of", "fast computers", "And I immediately thought  as I'm sure all of you would  of problems of", "neutron diffusion and other questions of mathematical physics", "Later in    I described the idea to John Von Neumann  and we began to plan", "actual calculations   Of course fast  the fast computer is a relative term", "Ulam was probably referring to the ENIAC  pictured here", "It could perform a grand total of     additions per second", "And by the way  it weighed about     tons", "It was really big  as you can see here", "Just for perspective  today's computers perform about     additions", "per second and weigh  I don't know  something like      tons  maybe", "The first known use of Monte Carlo simulation on a practical problem was", "in the Manhattan Project during World War II", "It was used to predict what would happen during a nuclear fission", "reaction  something that they had been unable to solve mathematically and", "were enormously pleased that they had found an alternative approach", "But really  Monte Carlo simulation didn't take off until the ' s  when", "computers became both more common and more powerful", "A Monte Carlo simulation is a method of estimating the value of an unknown", "quantity using the principles of inferential statistics", "The key words here are estimating  we will not typically be able to get", "exactly the right answer using the Monte Carlo simulation  and", "inferential", "We're inferring something", "I'm not going to go into the mathematics of all of this", "It's rather complicated  and I would certainly get it wrong", "But the intuition is really quite simple", "The intuition is that a random sample tends to exhibit the same properties", "as a population from which it is drawn", "So for example  if I randomly sample the people in this course  say I'd", "sample     of them  and    turn out to be female  and the other  I guess", "you should be     turn out to be male", "we probably have no hermaphrodites  I'm going to assume that that ratio is", "representative  not just of the     people I sampled  but of everybody", "taking the course", "As we'll see later  this is valid only if I take enough samples and my", "samples are truly random  which makes them representative of the entire", "population", "We can see this a little bit more easily if we think", "about flipping coins", "Suppose Harvey Dent flipped a coin  and it came up heads", "You would not infer from this that the next flip would be heads", "But suppose he flipped it twice  and it came up heads both times", "You might reason that the probability of this happening for a fair coin  ie", "a coin where heads and tails are equally likely  was a quarter", "So even with two in a row  you're not going to conclude that", "the coin isn't fair", "But suppose he flipped it   times  and they all came up heads", "At that point  you might feel safe in inferring that the coin has a head on", "both sides  ie  it is a two headed coin", "This is an Australian coin", "Who knew", "Your belief on whether the coin is fair or not is based on the intuition", "that the behavior of a sample of   flips is similar to the behavior of", "the population of all flips of the coin", "This belief seems pretty sound when all   flips are heads", "It just seems highly unlikely that would happen by accident", "After all  if the coin were fair  the probability of getting a hundred heads", "in a row would be", "pretty darn unlikely", "Suppose  on the other hand  you flipped it  and you've got   heads", "and   tails", "Well  you could feel safe predicting that there are both heads and", "tails on the coin", "But would you really want to predict that this would be the ratio you would", "see if you did another   flips", "Or for that matter  how good would you feel about even predicting that you'd", "get more heads than tails", "I wouldn't feel very good", "Let's look at a simulation that shows us why you shouldn't  either", "The function flip is intended to flip a fair coin numFlip times and return", "the fraction of flips that come up heads", "For each flip  random random   returns a random floating point number", "between   and", "The midpoint of this number      is arbitrarily assigned the value tails", "However  given the vast number of floating point values between zero and", "one  it's highly unlikely that this will affect the result", "I then accumulate the number of heads and return the number of heads divided", "by the number of flips  thereby giving me the ratio of heads to tails", "Because every flip that's not a head must be a tails", "Let's see what happens when we run it for i in range", "So that will be the number of trials", "We're going to call flip  well  let's do a small one first", "Let's call flip with   coins and see what we get", "well  not much of a trend there", "Let's just try it again for fun", "We should get different numbers", "and a", "very low ratio", "So if we look at this  and we see that we've got numbers that seem kind of", "all over the place  it seems that it would be inappropriate to assume much", "other than  maybe  that the coin has both heads and tails from any one", "trial of   flips", "That's why  by the way  we needed to do multiple trials", "Because otherwise  if we just ran one  we came out with the number  we might", "get fooled into believing it", "Well  let's see what happens if instead of   flips  I do a million", "flips  a million per trial", "Well  the numbers are all different  but not very different", "So notice how much tighter this distribution is than the distribution", "we had either of the previous times we ran it", "So intuitively  we can feel much better about this experiment and in", "fact come away convinced  probably  that the coin really is fair", "In the next segment  we'll talk about why our intuition that this really is", "the right answer is actually justified"], "LYbCruklFEQ": ["PROFESSOR  So congratulations", "You've made it almost all the way through this course", "In this last lecture  we're going to try and wrap up what we've been", "talking about", "So in fact we want to do two things", "We want to first talk about what have you done", "Where have you been", "What are the key things that you learned in this course  what are the", "key lessons we want you to take away from this course", "And the second thing we want to do is we want to talk about", "where you're headed", "What have you learned  and more importantly  how might you use the", "knowledge that you gained in this class to think about new things as you", "move forward", "So let's start by talking about what's actually going on this course", "And we're going to start with a strange question", "What do computer scientists actually do", "In some sense  why might you have taken this course", "Well  we hope you've taken this course because you want to learn to think", "like a computer scientist  at least some of the time", "So what's a computer scientist actually do", "Well  they think computationally", "Well  duh", "That's kind of an obvious statement", "What does it really mean to say that", "A little more carefully", "a little less of a trivial answer  if you like  is that computer scientists", "use a set of tools", "They use abstractions", "They use algorithms", "And they use automated execution in order to solve problems", "So a better response is that you don't need to think about all of the details", "of something in order to build a model of it", "That's an abstraction", "You know what details to suppress so you can focus on key things", "You know how to think in a mechanical way", "a sequence of instructions", "That word  recipe  we used way back at the beginning of the class as a way of", "structuring how to execute a set of operations that let you deduce new", "information from initial information", "And we see ways in which you can capture all of that in a language that", "describes methods that can be automated to actually solve all of", "those problems", "One of the things we want to argue is that computational thinking is really", "a fundamental skill", "Every well educated person ought to know how to think computationally", "And indeed  this is a skill that is going to be used by everybody in the", "very near future", "Certainly by the mid  st century", "So that notion of computational thinking is really valuable", "And what does that say", "Well  just like the old days  one talked about the three Rs", "And yes  I know it's a bad pun   reading  arithmetic  and writing", "We would like to argue that the ubiquitousness of computing and", "computational thinking and computers  the fact that they're embedded", "everywhere  is going to enable the spread of computational thinking as a", "fundamental skill for every well educated person", "With that in mind  let's say a little bit more about what does that", "computational thinking mean", "What's the actual process", "And here  this is just reminding you of the kinds of tools you've gathered", "If we approach a problem from a computational", "perspective  what do we say", "We start by trying to identify or invent useful abstractions", "What does that mean", "We want to take elements of a problem and capture them in objects", "abstractions", "where we were suppress some details", "They're internal to the abstraction", "They matter only to the implementer of that abstraction", "But to the user of the abstraction  those details are not relevant", "What is relevant is the contract one has with that abstraction", "If you give that abstraction certain inputs  it will give you back a", "particular output", "If you deal with an abstraction in a particular way  it will act in a", "well designed and specified way", "So we suppress details and we formulate interfaces", "And those are our abstractions", "Those are the elements on top of which we then build a computational process", "And then what we say when we talk about how to think computationally", "We said given those abstractions  given those elements of a problem  we", "want to formulate a solution to the problem by using experiments", "Building those abstractions  we want to formulate what are the steps one", "should use to execute those instructions or to use those", "abstractions to compute something new", "And having formulated a problem as a computational experiment  we then", "design and construct a sufficiently efficient implementation", "So we start up here with abstractions", "We then formulate a solution as an experiment", "We're going to do some computation on it", "And we then design and construct an efficient implementation of the", "experiment", "That's where our algorithms come in", "And having designed that  we then validate the experiment  or the setup", "of it  rather", "That is  we debug it", "We make sure that it actually is going to do what we expect it to", "And having done that  we then go ahead and run the experiment", "Now  running the experiment isn't the only stage", "We also want to make sure that the things that we set up   the model we", "built actually makes sense", "And so when we run the experiment  we need to also evaluate the results", "Do these results make sense", "Do they satisfy preconditions", "Do they pass the laugh test  if you like", "Do they actually satisfy all the things that we would like", "And that says if  in fact  they do  great", "We've computed what we want  and we can move on", "But if they don't  then we need to repeat", "We need to go back around through this loop and refine our", "experiment and continue", "But that computational thinking  that designing the experiment then we can", "actually use computationally  is a key element of what we do", "Now  with that in mind  we can then specify three elements that you've now", "learned about how to think computationally", "The three As", "So the first one is that notion of abstraction", "Key elements here are how do you pick the right abstraction", "How do you decide how to break a problem down into modules or chunks", "that have well defined interfaces between them and that capture elements", "of the computation in a matter where we can suppress the details and just", "use the attraction", "We want to do that using multiple layers of abstraction", "We certainly saw that  for example  when we talked about object oriented", "programming in classes", "We also saw that with algorithms  where we might build one algorithmic", "module  suppress those details  and build on top of that another", "algorithmic module  suppressing details within that  and so on", "So we want to think about different layers of abstraction and using those", "simultaneously", "And of course  once we've defined those layers  we need to define the", "relationships between them", "And that really is a key element of how we think about abstraction", "Second element is automation", "It's really important when we build abstractions to build them in a way in", "which we can mechanize the use of those abstractions", "We can specify a set of well defined stages or operations that access or", "manipulate elements of the abstractions", "And one of the things that we saw that's very central to computational", "thinking is the fact that mechanization  that building a", "computer algorithm that does everything  is possible because we", "have very precise and exact notations and models for things", "That was the elements  if you like  of our syntax and our semantics of our", "language  as we talked about", "And the second key element is that there is a machine that can interpret", "those notations", "That is our interpreter", "That is our evaluator  underlying all of the evaluation that we do", "And then the third A are the algorithms", "These are the specifications  the recipes  the ways in which we detail", "the things that we're going to deal with", "And again  the key element with our algorithms is that they", "follow certain patterns", "They obey certain rules", "And we've learned those rules", "And those rules are  by and large  independent of the programming", "language in which we described those algorithms", "With that idea of computational thinking  one of the things that we", "can then say is we've got a language  we've got abstractions to details", "With that  we can also then think about some examples", "And I want to give you two of them", "The first one is when we think about a problem computation", "The kinds of questions we can now ask are how difficult is this problem  and", "how best can I solve it", "We've already seen that the theory of computer science gives the precise", "meaning to these questions and to their answers", "We saw that certain problems have more complexity", "That solutions to them inherently involve some minimum amount of", "computation", "And that some classes of problems are much more efficient", "to solve than others", "And it gives us a sense of where we want to be when we think about how to", "tackle a particular problem", "We also saw that different kinds of algorithms tackle different kinds of", "problems better", "And those tools we're going to come back to when we think about how to use", "them to best solve a problem", "One of the key things we saw with computational thinking is that we can", "think recursively", "And this means not just that we use a recursive program to solve something", "It also talks about how we solve a problem", "That if we're given what seems like a very difficult problem  often we could", "reduce it to a simpler version of another problem  or to a simpler", "version of the same problem", "The latter one  of course  is the standard recursive version", "But this idea of reducing or embedding or transforming problems into other", "solutions is really handy", "So part of your goal as a computational scientist is to create", "and store away a set of standard methods for solving problems", "So that when you get a new problem  you can use it to say  is this a", "problem I can reduce to a problem that I already know how to solve", "And if I do  how do I do that transformation in a way that lets me", "solve the original  more difficult problem", "That idea of recursive thinking  we've seen many times", "And just to show you a favorite example of it  you can obviously", "create things that recursively unwind into simpler or smaller versions of", "the same problem", "But of course  somewhere way down here in the middle  you do need to have a", "base case to stop the unwinding of the computation", "But that's basically what we've been doing in this course", "We've been thinking about how to approach problems computationally", "In the next section  we're going to move on to talk about what actual", "tools have you learned"], "bGx4MAxsVuI": ["JOHN GUTTAG  In the last lecture segment  we produced one rather", "uninteresting plot", "We'll start this one by producing two uninteresting plots", "Let's go through the code that produces them  because the code is at", "least  INAUDIBLE  a bit interesting", "First line of code  it's the same line we started the last program with", "Pylab is a notion of current figure", "Executing the statement  pylab figure  some argument  let's say n  sets the", "current figure to the figure numbered n", "Subsequently executed pylab commands implicitly refer to that figure until", "another pylab figure command is executed", "Therefore  the next line of code  pylab plot  will draw some points and", "connect them with lines on figure one  as we saw in the last segment", "The next two lines begin by changing the figure to figure two  a brand new", "figure  and then plotting some points on that figure", "Now we see something we haven't yet seen  pylab savefig", "This function will save whatever the current figure is  in this case figure", "two  into a file named  in this case  Figure Eric png", "PNG is the file extension", "It stands for Portable Network Graphics format", "This is a public domain standard for representing images", "We now go back to figure one  draw some points on that", "And then we'll save it in a different file  this one  Figure Grimson png", "If you look closely  you'll see there's something different about this", "pylab plot command", "I've only given it one list of values", "Last time when we looked at this  we said we need to give it the x values", "and the y values in order to get points on a Cartesian plane", "Here  I've only given it one set of values", "When you only give it one  it's the y values", "The x values will then default  in this case  to range of whatever the", "length of the y values is", "So here the x values will be          and", "All right", "Let's look at the code and run it  and see what happens", "We're over here looking at the code in the idle window", "We'll run it  go over to the shell", "Well  it's finished  but you'll notice no plot has appeared in my screen", "Why is this", "You may recall from the previous segment  that in order to actually", "make the plot appear  we have to call pylab show  which I", "did not do this time", "However  if I go look under here  we'll see the folder in which I was", "running the program  and two figures have appeared in that folder", "We can look at them", "And we see Figure Grimson up here and Figure Eric here", "Nothing very interesting  other than the fact that they exist", "Let's look at a slightly more interesting example", "The code we see here in the editing window is designed to show the magic", "of compound interest", "Don't worry about the algorithm", "It's pretty simple", "It's what you would expect", "Let's run it and look at the plot", "Oh dear", "We don't seem to have a plot", "Well  what do we have instead", "Well instead  we have a lot of red ink", "If we come over here to our shell window  what we'll see is that there's", "an error in my code", "And specifically  the dimensions of x and y are incompatible", "Now  what does that mean", "It seems to be a fairly obscure way of saying that the sequence of x values", "and the sequences of y values are not of the same length", "Hence  it was unable to draw the plot", "If we look at the code  well  we can see why", "I built y values with this loop where I looked at range years       and I", "look   built the x values with this statement  simply years", "So I have one fewer x value than y value", "I can fix that", "Let's run it now and hope we get a better looking", "hope we get some plot at all", "We do  and here it is", "But what is this plot showing us", "If we look at the code  we can deduce that this is a plot showing the growth", "of an initial investment", "Now let me show you the code", "Excuse me", "If we look at the code  we can deduce that this is a plot showing the growth", "of an initial investment of      at an annually compounded interest rate", "of     which would be astonishingly high in this day and age", "However  if you just look at the plot  you can't really infer this", "It could be a plot of almost anything", "All plots  to be useful  need to have informative titles", "And all axes should be labeled to tell us what the numbers", "actually stand for", "So let's go and change our code to do that", "First  let's insert a title", "We do that with the command  pylab title", "It takes a string as an argument", "Next  let's label the x axis", "And finally  let's label the y axis", "OK", "Let's see what happens when we run this revised code", "Get rid of the old figure", "Now we see I have a title", "I have an x label  and I have a y label", "Now  anybody looking at the figure can tell the story it's", "really trying to show", "Couple more things I want to tell you about drawing plots  and then we'll", "move on to another topic for a while", "For every plotted curve  there's an optional argument that's a format", "string indicating the color of the curve to be plotted", "The default color is blue", "Format string for blue is b", "That's why everything you've seen so far is blue", "You can also indicate the line style", "And the default for that is a solid line indicated by a", "dash or a minus sign", "So we see that the default is b dash", "And that is what we see", "Suppose I don't like that default", "Suppose I like red better than blue", "Let's go back to the code here", "I can go back to where I did the plot  and if I want  I can just put an r", "And now if I do the plot  we see that the line is red", "Well  suppose I don't want a line", "Suppose I want to see individual points", "I can type r o  or think of o as a circle  to see circles", "instead of a line", "And now if I run it  I get the plot", "It's also possible to change the type size and the line width used in plot", "This can be done using keyword parameters in individual commands", "Let's look at some code that does that", "This code shows the growth of principle as before  but I've now", "played around with some things", "So for example  rather than using the default line width  I set the line", "width to be", "You might wonder    what", "That's   points", "A point  for those of you who are not typographers  is     of an inch", "For those of you who prefer metric measurements  I leave it to you to do", "the conversion", "The next line  I've changed the pylab title to set the font size of", "the title to   points  the font size of the x label to   points  and the", "font size of the y label to a whopping   points", "Not because I think this is artistic  but because it produces something", "that's quite bizarre and fun to look at", "I don't recommend that any of you produce plots that look like this  at", "least not if you want to get a nice grade on them", "If you get tired of changing these things in the code  it's possible to", "change the default values", "The default values are stored in something called a   rc file", "Why rc", "It's derived from the   rc file extension used for runtime", "configuration files in the Unix operating system", "I'm not going to go through changing the rc settings now", "If you want to see how to do it  you can look it up in the text", "Or you can look it up on the online references we pointed to in the", "previous segment"], "-8T8AXxVFZg": ["Eric Grimson  OK  so we want to think about computational", "problem solving", "We want to understand  what does it mean to think", "computationally", "That leads to the philosophical question  so", "what's computation", "And like a good philosophical question  that leads to", "another  deeper philosophical question", "To answer that question of what's computation  let's", "start by asking the question  what is knowledge", "And  as we're going to see  we can divide", "knowledge up into   parts", "There's declarative knowledge  which we can think of the", "statements of fact", "And there's imperative", "knowledge  or how to's methods", "Statements of facts give us true  but  as we'll see  they", "don't necessarily help us think about how to find new", "information", "Imperative knowledge  how to methods or recipes  give us", "ways of finding new information  and that's going", "to be really valuable to us", "Now  to look at this  let's look at an example", "So  what do we mean by declarative knowledge", "Well  here's a piece of declarative knowledge", "That first statement says  the square root of a number x is a", "number y such that y   y   x", "You know that's true from high school algebra", "It's a statement of truth", "It tells us something about how to decide whether a", "particular number is a square root or not  but can we use", "this to actually find a square root", "And the answer is no", "If we have a number x equal to   and we're trying to find", "the square root of that  and somebody gives us a guess y", "we can use this statement to test to see if", "which it does", "But it doesn't tell us how to find the guess", "So declarative knowledge  which is what much of", "knowledge is based on  isn't what we need", "We want a different kind of knowledge  and for that", "fortunately  we have imperative knowledge", "As we said  imperative knowledge is how to kinds of", "knowledge  or methods or recipes for finding something", "and here's a recipe for deducing square root", "It's actually attributed to Heron of Alexandria  although", "there's some debate as to whether he was the original", "creator of this algorithm  but it dates from the first", "century AD", "And you can see the description here", "Description says if I want to find the square root of some", "number x  I'm going to start with a guess", "I'll call it g", "I'm going to take g and multiply it by itself and look", "if that result is close enough to x", "If it is  I'm going to stop  and say that g is the answer", "Otherwise  I'm going to make a new guess by averaging g and", "x g   and using this new guess  which I will call g", "again  I'm going to repeat the process until we get something", "that's close enough", "Notice  this is a mechanical set of steps and it has some", "basic forms", "Right here there's a test", "It's going to let us know when we're done", "when we're close enough", "If that test isn't satisfied  then there's some simple", "calculations  like here  that tells us what to do", "And then  finally  there's a flow of control  or a loop", "that tells us how to keep executing the same sequence of", "operations until we get  in fact  to a", "place where we're done", "This is something that tells us how to find a square root", "This is imperative knowledge and this is what we want", "OK  let's try it out", "Here's a little description of that", "Let's see what happens if we were actually to do it", "So I'm going to do a simple little simulation", "I want to find the square root of", "And  yeah  I know the answer is    but let's think about", "what might happen here", "I'm going to start with a guess and I'm just going to", "initially guess", "Heron of Alexandria's algorithm says", "multiply   by itself", "That  of course  gives me", "Is   close enough to", "I don't think so  so let's get x g   which is about", "And now  let's take the average of x g and g", "So we add g and x g   take the average of", "that  and we get", "And then our little recipe says take", "that and do it again", "So this now becomes my new guess", "I multiply those together", "I happen to know that comes out to be about", "I've gotten closer to    but it ain't there yet  so that's", "not close enough", "Again  let's take x divided by this g which turns out to be", "about      and then I take g and x g and I average them", "and I get", "And my algorithm says  my recipe says  take", "this and do it again", "multiplied by itself is about      and I'm going to", "say  you know what  that's close enough  so my little", "recipe says there's the answer", "Not perfect  but close enough", "So  Heron had it right", "This looks like a pretty good algorithm", "This is a way of describing a method for doing something", "and that idea  that notion of a recipe  is something we're", "going to use a lot", "So we can think of algorithms as being recipes  sequences of", "mechanical steps for doing something", "We put that analogy to a little bit more use  we can", "see that recipes have much of the same form  real recipes", "Imagine I want to make some custard", "Here's my recipe", "I'm going to take all the ingredients of the custard", "that mixture  put it into a pot over some heat  and I'm", "going to stir it", "As I stir it  every once in a while  I'll dip a spoon into", "the custard  pull it out  and run my finger across the back", "of the spoon", "If the spoon is clear  then I'm done and I'm going to", "remove the custard from the heat and let it cool", "If not  I'm going to repeat", "And notice what we have here", "Again  we've got a test  right there", "And we've got a way of  in fact", "changing the flow of control", "So  normally  the flow runs this way  but based on that", "test  we have a way of going back up and", "continuing the path", "And this pattern is something we're going to repeat a lot", "So  you want to capture recipes and we need to figure", "out how to get the computer to do that for us  which is what", "we're going to talk about next"], "3nWlFHGKNAk": ["ERIC GRIMSON  We've been looking at optimization problems", "These are problems where we want to find a solution that satisfies some", "function  some measure  some estimate of performance", "And we've seen that often those optimization problems can be thought", "of as search problems", "We write an algorithm that looks through the space of possible", "solutions  trying to find a solution that maximizes or minimizes some", "measure of success", "And  ideally  we've seen that those solutions  or those search solutions", "will be efficient", "They may not look at the entire space", "They'll take advantage of the structure of the problem to find", "efficient ways to maximize some measure", "We want to generalize that idea to take it in a different direction  and", "we're going to take it in a different direction by looking at optimization", "problems over graphs", "So what's a graph", "Well  let me give you an example", "Imagine you are a college student  which you may well be  and you want to", "go home for the holidays", "So you'd like to plan a flight that gets you there", "Imagine you had data on all the flights between cities in the US  or", "major cities within the US  including information about the prices", "Let's also assume that for any pair of cities  A and C  if I want to fly from", "A to C through B  that is  A to B to C  the cost of that flight A to C is", "the same as the cost from A to B and the cost from B to C  If I have that", "what might I like to know", "Well  I might like to know what's the best set of flights that has the", "fewest stops between two cities", "I might like to know what's the least expensive airfare between two cities", "Or  even constrained things like what's the cheapest flight from A to C", "that doesn't go through more than one other stop along the way or no more", "than two other stops along the way", "All right  so you can imagine I might like to do this", "What does a graph have to do with this", "Well  let's think about how to capture this problem", "Here's a map of the United States  where I've marked off some of the", "major hubs  that is  airports through which airlines fly with a large number", "of flights  so San Francisco  LA  Chicago  for example", "Each one of these cities I've marked here I can think of as an", "element of the graph", "It's a piece of information  an object  if you want to think of this", "in terms of our object oriented system  with some information on it", "What else would I like to know", "Well  I'd like to know where are the flights", "So I could mark in all the connections between these hubs  that is  places", "where there is a flight  a direct flight from one point to another", "So for example  from San Francisco to Denver  there's a flight", "Now having marked those in  let's abstract away this problem", "Let's throw away the map and just capture an abstraction", "And now I have a graph", "And what's the graph", "Well  it's got some nodes  or elements  with information", "associated with them", "And it has some edges  or connections  things that link those nodes", "Let me describe that a little more carefully", "A graph is two things", "It's a set of nodes or vertices  my blue dots in that previous diagram", "And those nodes or vertices are connected by a set of edges or arcs", "arrows in this case", "Those edges indicate relationships between the nodes  and we're going to", "use that in a second to actually think about doing optimization", "Now  if the edges are uni directional", "they only go one way  you can only fly from San Francisco to", "Chicago but not back", "then we say the graph is a directed graph or a digraph  and the arrows", "here would be one directional", "If they go both ways  we just say it's a graph", "If we think about my example  I could imagine finding paths through that", "graph from one airport to another that minimizes the number of", "stops along the way", "That would just be the fewest number of edges I have to pass through in", "order to get there", "But if I want to know about cost  I need additional information", "And so often with a graph  I'm going to have other information", "If we add a weight  or a cost  to each edge  then we say the graph is a", "weighted graph and that says I can solve other kinds of problems", "So for example  here I've added in  for each edge  the cost  the cost of a", "flight between those two cities", "And now I can actually start answering questions like  what would be the best", "flight from San Francisco all the way out here  for example  to Boston that", "minimizes  for example  the total cost  or it minimizes the total cost", "subject only going through one or two additional cities", "Now I can start thinking about optimization", "problems over these graphs", "This is actually going to be really powerful", "Now why are these actually useful", "Well  graphs let us represent a wide range of different kinds of problems", "And they lead  naturally  to questions that could be answered by a particular", "kind of search problem  something we're going to deal", "with in this lecture", "We've talked about it in terms of transportation networks  that's kind", "of obvious", "But there are lots of other places where a graph is a very natural way of", "capturing a problem", "Web traffic", "imagine I've got a set of web pages", "Those could be the nodes in my graph", "The edges would be the links", "A page links to another page  and note they may be one directional", "And then  the weights could be how often are those links used  and I", "could ask questions about traffic in a particular collection of", "pages on the web", "Another nice example is epidemiology  dealing with diseases", "If I want to track the spread of a disease  I might gather information", "where the nodes are people with information about the disease", "They have the disease", "They've been exposed to the disease", "They're immune to the disease", "The edges would indicate interactions between those people", "They know each other", "They know each other well", "And the weights  in fact  would capture exactly that  the level of", "interaction", "And using that  I could track the spread of a disease to try and", "identify the sources  to try and identify populations that are isolated", "from other populations", "We'll see lots of examples of using graphs  and especially solving", "optimization problems  over those graphs"], "mTsArBWQbhs": ["PROFESSOR  We've got the concept of a graph", "Let's build some data structures to handle it", "So what do we need in a graph", "Well  we need a node  and we can certainly do that using classes", "And that's pretty straightforward", "What would a node be", "Well  it's just going to be a version of an object that's going to inherit", "the basic things from objects right there", "And what do I need", "Well  I need to initialize it", "And here I'm simply going to take the name has an argument  and that's what", "I'm just going to store away", "So I'll store away the name inside of the node", "I can of course get the name back  and I'll have a way of printing things out", "appropriately", "And that will just be print out the name", "Very straightforward", "What else do I need", "Well  I need an edge", "I need edges  actually", "Things that connect nodes together", "So here  an edge will take a source and a destination node", "So the initialization will be something that takes the source and", "the destination and stores those away inside each instance of an edge", "Obviously every edge is different", "It's going to have its own source and destination", "And of course if I have those things internally  I need to get them back so", "I can get the source  or I can get the destination", "Notice while I haven't said it here  it is almost certainly going to be the", "case that those sources and destinations are going to be", "instances of a node", "And that means when I return the source  I'm returning the actual", "instance of the node  which means I can get things like its name out of it", "if I want to", "And in fact  if I want to print out an edge  I've got something that does the", "string method  and it simply gets a printed representation of the source", "which is a node  adds an arrow to it  and then the printed representation of", "the destination", "And that's how it's going to print it out", "Straightforward things", "Check them out yourself  just to make sure they make sense to you", "But these are pretty standard implementations of objects", "What about a weighted edge", "Well  the only difference here is that not only do I have a source and a", "destination  but I have a cost  or a weight associated with it", "So I'm going to have a weight  here which I will default to one in case I", "don't pass it in", "Add that to my representation", "I can return it", "And I'll change the way it prints out to actually include some information", "about the weight along the edge between the source and the", "destination", "Again  code that you can look at  it should feel comfortable to you because", "you've seen things like this before", "OK", "More interesting is building a graph", "And I'm going to start by building a directional graph", "A one directional  or digraph", "What does a graph have", "Well  it's got two kinds of things", "It's got nodes  and it's got edges", "And I need to make some decisions about how to represent them", "For the nodes  I just want a collection of them", "And I'm going to use a built in Python representation called a set", "And don't worry about this", "A set is just a collection of objects that has the property that only one", "instance of each object can be in it", "I can do methods over top of them", "For our purposes  just think of it as a way of collecting together objects", "For edges  I'm going to make a decision  because the edges need to", "capture information about how things are connected", "And for here  I've got a lot of choices  and I'm going to choose to", "use what's known as an adjacency list", "And the idea is that for every node  as I build the graph up  I want to", "know to what other nodes can that node connect", "And I'm going to use that with a dictionary", "And I want to walk you through it to let you see how this might work", "So I start up  I create a graph", "It's initially going to have a set with no nodes in it  and an empty", "dictionary  because there's no nodes  therefore there are no edges", "If I'm going to add a node  what I'm going to do is basically say first  if", "the node is already in the set of nodes  it's an error", "Otherwise  I'm going to use the set property to simply include that node", "into the collection of nodes I have", "So this is taking advantage of the fact that this is a set", "And notice what I'm doing", "For the edges  I'm creating a dictionary", "So in that dictionary under that node  I create initially an empty list", "This said I've got a node  but it has no neighbors", "When do I get the neighbors", "Well  I just added the nodes", "What happens when I add an edge", "Well  I'm going to add an edge to my graph", "Remember  the abstraction of our edge was that it had a source and a", "destination", "So from the edge  I'll get out the source  and I'll get out the", "destination", "Those methods simply give me back those two nodes  and now what am I", "going to do", "Well  if in fact the source or the destination is not part of this graph", "I've got an error", "I will throw a value  or raise an error  rather  on that", "Otherwise  notice what I do", "Into the dictionary  under the edges right there  I look up", "the value under source", "Because I'm going from that node", "Remember  it's a dictionary", "So I'm going into the dictionary  saying give me back  aha  a list", "And into that list  I'm going to add destination", "So if I've added something to that list now  now that node has  for", "example  some initial destination as part of its list", "And if I added another edge from the same source to another destination", "that list would have destination one and destination two", "So what have I done", "My adjacency list here says I'm representing edges as a dictionary", "For every node there's an entry in the dictionary and that entry is a list of", "all the children of that node", "The nodes to which it can reach", "And that notion of children we're going to come back to later on", "As you can see here  there's a few more things under a digraph  but this", "lets me add nodes  and lets me add edges to my graph", "What else do I have", "Well  I'd like to get information back out", "So I've got a method that gives me back all the children of", "a particular node", "And notice the form", "I get at the edges  representation", "Which is a dictionary", "I look up the entry for a particular node in that dictionary  and that", "returns for me  ah  yes", "A list of all the other nodes that I can reach in one step from that node", "The children of that node", "I also want to know  is a node in the graph", "I used it earlier  there it is", "I'm just checking to make sure it's in my collection  and I'll have something", "that prints out a nice representation of this graph", "I'm not going to worry about the details", "You can try it out for yourself", "But there's the representation of a digraph", "Nodes as a collection are set  and edges represented as a dictionary", "showing the relationship of connection from any node to all the children that", "can be reached", "OK  what else might I need here", "Well  that's a digraph", "What about a graph", "Well remember  a graph is bi directional", "It has connections A to B  and B to A  So this is really easy", "It can just be an extension of a digraph", "The only difference is it's going to have a different add edge method", "And in particular  what's it going to do", "It's going to say when I want to add an edge to a graph  well  I'll add an", "edge to the digraph going from source to destination", "And then I'll build a new way edge  or reverse edge that goes from", "destination to source", "Oh  I just pull out from the edge the two pieces  and build something going", "the opposite direction", "And then I use the digraph add edge method to add that edge in", "Done", "Nice and straightforward", "There's our implementation of a graph", "What can we do with it", "Well  now that we've got it  we can start asking", "some really nice questions", "What's the shortest path", "Given two nodes in the graph  find the shortest sequence of edges that go", "from the source to a node  to a node  to a node  to the destination", "And the properties are that the source node is the first edge  of the first", "edge rather is that initial one  N", "The destination node of the last edge is N   and for every sequence in that", "the shortest path  the source node of EB is the destination node of EA", "It just says I can link them together", "I might want to find the shortest weighted path", "Same thing  but instead of choosing the least number of edges  I'm", "choosing something that minimizes the sum of the weights along the path", "And as we'll see later on  we're going to look at problems like", "cliques and min cut", "Finding a set of notes for which there's a path  or often a path with", "the maximum length between every pair in the set", "And given two sets of nodes in a graph  a cut is a set of edges whose", "removal will eliminate all the paths from every node in one set to each", "node in the other set", "And the minimum cut is the smallest set of edges that accomplishes that", "These we'll come back to later", "These we're going to look at now", "Just to give you a sense of this  here's an example of how I might build", "up a graph", "I've got a set of nodes", "I've just given them simple names                 and    and I'm going to", "create a graph", "Don't worry about the stuff down here  by the way", "These are things we're going to get to", "But notice how I could create this graph", "I build a list of nodes", "I need a set of names  and the names are just the numbers", "And so in particular then  what do I do", "I create a node for each one of those names  and I put it into the set", "creating those nodes  or the list  rather  I should say", "I'm going to build those in a second", "I'm going to create a digraph  and then for each node in that list  I'm", "going to add it into the graph", "And then finally  I need to build in the edges", "So the first is I'm going to build is an edge from zero to one", "This edge right there", "And so I take those two nodes out of my set  create an edge", "add it into the graph", "And if you look through the rest of this  you'll see this is simply", "building the edges described here to create that overall structure", "And that G becomes my digraph on which I can do interesting things  which I'm", "going to do shortly", "There's the process of building a graph", "Create the nodes  add them into the graph itself  and then build the edges", "by taking each of those nodes  creating an edge  and", "adding it into the graph"], "8iQAhz7rzVs": ["PROFESSOR  As scientists and engineers  the way we understand the", "world around us is design experiments and take measurements", "The world's a complex place  however  and those complexities often conspire", "to make the measurement process somewhat problematic", "Vibration  temperature  electrical interference can all have subtle", "influences on the measurements that we're taking", "Our goal in this lecture is to study how computation can help us understand", "our experimental data and process it to help reveal the underlying truths", "As a first step in understanding experimental data  let's remind", "ourselves what we're about", "So usually one of the first things we do is to develop an hypothesis of how", "things work", "So this is a simple statement that says if I do x  y will happen or", "something equivalent to that", "If we have a hypothesis  we'll quickly want to design an experiment and then", "take some measurements", "And it's really these measurements that will tell us what the results of", "the experiment were", "And in fact  we often will interchange the order of these two things", "Sometimes  we've measured  done some experiments  and we're interested in", "making a hypothesis that explains the results", "Other times  we have a theory about how something works  and we're trying", "to design an experiment to prove the theory", "In either case  once we have the measurements  then we're going to use", "computation to do several things", "The first thing we're going to do is probably evaluate the hypothesis", "What we'd like to do is determine if the measurements we made give us some", "evidence that  in fact  our hypothesis is true", "The hypothesis may involve a certain unknown  some constant to", "proportionality  and one of the things we'd like to do with the measurements", "if we decided that  in fact  the hypothesis is true is determine the", "values of these unknowns in the hypothesis", "And finally  and this is maybe one of the most important things that we're", "going to use computation for  is if we have a validated hypothesis  we would", "like to use it to predict consequences", "And in fact  these may be consequences that would be very hard to do", "experimentally or very costly", "So  for example  if we've understood orbital mechanics  we may wish to use", "the computer to use the mathematical model of orbital mechanics to predict", "the trajectory we should take in order to successfully have a", "rover arrive at Mars", "Let's see how this might work in practice", "In    the English scientist Robert Hooke proposed the following", "hypothesis about how springs work", "The power of any springy body is in the same proportion with the", "extension", "So let's see what he's talking about here", "So  if we take this common piece of gym equipment   a bunch of springs", "with handles on it   and we bolt one handle to the wall  and then we start", "pulling on the other end of the spring   we apply", "some force this way", "the spring will stretch", "And  in fact  we can measure the amount of stretch  and we'll call that", "the extension", "And as anybody who's tried this knows from experience  the farther you", "stretch it  the harder the spring is pulling in the opposite direction", "So the spring will busily be exerting some force to counteract the", "extension  and that force will be proportional to the amount of stretch", "that you're putting into it", "And that constant of proportionality is called the spring constant", "If k is small  it's a very weak spring  and in fact  it doesn't take", "much force to either compress or extend it", "For example  a ballpoint pen can easily be controlled", "The little spring inside can be compressed with a single", "push of your finger", "On the other hand  if the spring constant is large  that means it's a", "very stiff spring", "So  example of a very stiff the spring is like a car spring  where it takes a", "tremendous amount of force to compress it even a little bit", "Let's design an experiment to test Hooke's law", "To do that  what we're going to need to do is to figure out how to apply", "unknown force to the end of the spring", "And we're going to do that by hanging a weight on the end of the spring  and", "the force  the downward force  applied by that weight is going to equal to", "the mass of the weight times the gravitational constant", "That's the acceleration due to gravity  which is  I'll say", "meters per second squared", "And so  when we hang a weight  we get a downward force", "That will cause the spring to stretch", "So the spring stretches out  and the more it stretches  the greater the", "extension  obviously", "So  here's the measured extension of the spring here", "We can measure how far the spring stretches when we add the weight  and", "we're going to get an upward force by the spring resisting the extension", "And in fact  that upward force  according to Hooke's law  is equal to", "the spring constant times the amount of extension", "Eventually  the system will reach equilibrium", "And equilibrium happens when everything stops moving  which must", "mean that the downward force exerted by the weight is equal", "to the upward force", "In other words  everything's exactly balanced and there's no more forces", "acting on the weight  so the weight isn't moving and the spring isn't", "stretching any farther", "And what that will tell us is that at that point  the downward force  mg  is", "equal to the upward force  kx", "We went off and performed that experiment", "We took many different weights and hung them on the end of the spring", "and here's a listing of all the different masses that we use from", "kilograms up to     kilogram", "And we measured the extension in meters that each weight produced", "So  let's figure out  can we compute k from this", "Well  if Hooke's law is true  then we know that mg   kx", "We decided that on the previous page", "That implies we should be able to compute k by taking the force that was", "applied by the weight and dividing it by the extension", "Let's try it", "So  our first weight was     kilograms", "The gravitational constant is     meters per second squared", "And we'll just divide that by the measured extension  which is about", "of a meter    centimeters", "And if we do the arithmetic   you know  we can type that little formula", "into Python or use a old fashioned calculator or even more old fashioned", "instead of working it all out by hand", "we end up computing that k is equal to     Newtons per meter", "So  are we done", "Was it really that simple", "Seems like we didn't really need to take all of these measurements", "We used the first one to do the calculation  and if everything is", "perfect  all the rest of the computations should come up with the", "same result", "So  why not as a finger exercise do the same computation that I just did", "except use the second measurement"], "SVQuLOiHJeE": ["ERIC GRIMSON  OK", "We've seen recursion", "We've seen this idea of breaking problems down into a simpler version", "of problems", "But at this stage  you may be looking at it and going  oh  come on", "The examples you're showing  they're easy to solve in an iterative fashion", "What's the big deal here", "So I want to show you an example of a problem that is beautifully captured", "by thinking recursively  and really hard to do if you're going to try to", "think iteratively to give you the power of that recursive thinking", "And the problem is an historical one  or a classic one called", "the Towers of Hanoi", "And here's the legend behind it", "The legend is that there's a temple in Hanoi", "In that temple  there are three very tall spikes", "And initially  one of those spikes starts off with a stack of", "different sized discs put on it  holed in the middle so you can lay them out", "And they are initially in increasing order of size", "Smallest one of the top  all the way down to the largest one on the bottom", "For various reasons  the priests in that temple are trying to move that", "stack by moving the discs one at a time  and they have a property", "They move one disc per second", "But the idea is that they can only move one disk at a time  and they can", "never cover up a smaller disc with a larger disc", "So they want to think about  how can we make that happen", "And we'd like to write some code to print out the set of", "instructions for them", "Let's look at a demo to see how this works", "I want to think about Towers of Hanoi", "I want to think about how to solve it", "And I'd to think initially about  just could I solve it iteratively", "So let's start with some simple examples", "I've got a very simple version of Towers of Hanoi here", "And if I start with just a stack of size one  then moving it to some place", "is really easy", "I just move it  right", "And if I now think about how to generalize this", "Now  to move a stack of size two  I've got to be careful as I do the movement", "that I don't put a bigger over a smaller one", "That looked OK", "If I want to move a stack of size three  well  again  I've got to be", "really careful as I do this  making sure I'm always moving just smaller", "ones on top of smaller ones and so forth", "And I'm sure you see the idea", "And let's see what happens if we do a stack of size four", "Can we actually make this go", "Again  I'm trying to move different versions of these things around", "And I've gotten it to the point where  oh good  now I can actually", "get that one over", "And so now  I want to do those pieces  move this one to that place  I've", "still got to be really careful and if you're watching closely  you'll", "realize  I did it correctly", "OK", "So how do you write code to do this for", "Wow  looks hard", "But let's think about it recursively", "If I think about it recursively  I want to move a stack of", "size n to some target", "Here's the simple solution", "I take a stack of size n minus    move it to the spare spike  move the bottom", "one  and move then this stack over there", "And that's easy", "That's straightforward", "That's exactly what we want", "Let's think about it again", "Recursively  we're saying we'll take a smaller size problem  solve it  solve", "the base case  and then resolve that smaller size problem and we're set", "OK", "Having seen a set of examples of different sized stacks  we can now", "come back to asking this question", "How would you write a program to print out the right set of moves", "And as you saw  trying to think about that iteratively is hard  but thinking", "about it recursively is really easy", "Because what did we say to do", "We said  to do this move  the simple thing to do is to move a smaller sized", "stack  move that entire thing on to the spare place  move the bottom disc", "the basic one  to the place you want to go  and then move that smaller size", "stack back to the place you wanted to go to", "So it's just  solve the smaller problem  solve the basic problem", "solve the smaller problem", "It's a little different than before", "We've got two recursions here", "but the idea is exactly the same", "We could write some code to do that  and that's pretty straightforward", "I've got a little function that basically says  I'm going to print out", "a move going from a stack labeled as the from stack to the to stack  and", "that's just going to say  here's the instruction", "And then the recursive call to Towers is pretty easy", "If I'm in the base case  n is equal to    I'm going to simply print out the", "move  move the stack from the from place to the to place", "Otherwise  move a smaller stacked on to the spare spot  from the place I", "started to", "Then  move what's left  stack of size one  on to the target location", "And now having put that smaller stack on spare  move it to the target", "location  and I'm set", "Let's look at an example", "So  here is that code  and I can simply say  let's move", "Well  let's start off with a simple one", "And I'm just going to give it some names", "I'm going to say this is f  t  and s  for from  to  and spare", "And it says on the base case  just move onto the place you want to", "If I want to do something a little bigger  I can do that", "And that looks like what we did before", "It says  take the smaller disc off of the first stack  put", "it on a spare location", "I've now got one disc left on the bottom one  move it on to the to", "location  and then move from spare back to to to make it go", "And I can do  as you might expect  much larger size problems", "To give it a stack of size five", "Well there it is", "It's a lot of moves  but it gets it done", "What's important about this is to see how thinking recursively made this", "really easy", "To move a stack of size n  move a stack of size n minus", "onto the spare location", "Move the bottom disc where I'm trying to go  move that smaller stack over to", "where I'm trying to think about", "Really easy to think about  and this is really nice"], "7-mC6P2B6Ac": ["PROFESSOR  So we're beginning to build up the kinds of things we", "want to do in Python", "We can certainly type expressions directly into a Python interpreter", "for example using an interface such as an IDLE shell  a shell that I've been", "talking to as I've been showing these examples here", "But that's not going to be as convenient", "We don't want to be constantly having to type things in", "In general  we're going to want to include statements inside of a program", "file  a separate file that we store away inside the computer and then use", "To do that  we're going to talk about both how we deal with that  but if", "we're going to do that  then executing an expression from a script that's", "stored away in a file will not produce any output", "When I talk to the shell  it gives me an output", "But inside of a script  it's not going to do that", "We're going to need to give it an explicit command", "And for that  we need statements  not expressions", "And in particular  if we want to get an output  one of the things that we", "can do is we can actually use statements like print", "And then I can give it an argument", "Now  inside the shell  print does exactly what evaluating the", "expression would do", "But inside of a piece of code that I've stored away in a file  it will do", "something different", "And of course  by the way  print can be doing something like actually", "getting the value of an expression before printing it out", "So it gets the value of the expression and then returns it", "So we're going to need to have a way of actually specifying when we want to", "get output showing up on our shell  which I've just done", "Similarly  we're also going to potentially need a", "way of getting input", "We're going to write programs or scripts that we're going to store away", "and then execute later on", "We're going to need a way to actually incorporate input from a user", "And for that  we'll use a little Python function called raw input", "Let me show you a simple example of this", "If I go to my Python shell and I type in name     and then I'm going to use", "raw input  which is a Python special function  it takes", "as argument a prompt", "So I'm going to give it a prompt as a string", "Enter your name", "because it wants a string to prompt", "And when I execute this  what raw input is going to do when I call", "it  it is going to print that out as a prompt", "And it is then going to wait for the user to type something", "into the Python shell", "So if I type this  there's what it printed out", "It's now the prompt", "It says   Enter your name", "I'm going to give it something", "And what raw input does is it takes whatever's typed in as a string of", "characters and returns that as a string", "So if I give it Eric  my name  I've now bound name to have a value", "I can go look at it", "And name is now bound to the string Eric", "That's great  because it says I've now got a way of using things where I ask", "the user to provide input", "It just did it", "And that special function is provided a prompt and then taken input and", "stored it away", "Because raw input takes the input and treats it as a string  if in fact I", "wanted to give it a number  I would have to do some typecasting", "Having input it in and given it some variable name  I'd have to do an int", "or a float   on that name to convert it into the form I want to make sure I", "actually now have it as a number", "In this case  though  I gave it in as a string", "And so now that I've got it there  I can just use it", "I said I've just got the value name", "But I could do other things with this as well", "For example  I could say  let's print out   and I'm going to give it a", "sequence of things", "Are you", "and I use the value of name", "and I'll put all of those pieces together", "And I can say   Are you Eric", "That  of course  is also really nice because now I'm able to use things", "that I've typed in as input and just use them any place I", "would like to use them", "Once we've got that  now we can start using the variable names anywhere that", "you'd use an expression", "So we just saw an example of that where I said  for example  we bound", "the name name to a particular string", "And I can use it elsewhere", "Here are some other examples", "I can give the variable myString a particular value of 'Too much'", "I can give the variable weather 'snow'", "And then I can print up things by just concatenating together the pieces as", "we just saw", "So I begin to start having this opportunity to", "actually put things together", "Now  one of the reasons we'd like to be able to do this in a file rather", "than just generally is that we can then save it", "We can edit it", "We can reuse it", "We can do things with it that we wouldn't otherwise do if we're just", "typing directly into a shell", "With this  we can start now building up some very simple code", "I want to start with a very simple example", "Suppose we actually type the following set of instructions into a file", "And I've done that over here", "If I go to my Python window  I've built a little file called Lecture", "Slide Four", "And I've typed in a set of expressions", "So the first one is going to bind x to", "The second one is going to take x times x  get that", "multiplication  and rebind x", "And right here I've got what's called a comment", "That is  after that pound sign      I've got some", "description of what's there", "Now  this is a boring little description that says I'm scoring the", "value of x", "And then I have another set of instructions", "I'm going to ask it to print out the value of x", "I'm going to have y get some input  turn it into a Float  and I'm going to", "print out some value of that", "Having saved this away in a file  I can now ask that file to be loaded", "into a Python shell", "Separately  we're going to talk about details of how to do it", "But the simple way to do it here is that I simply use the command F", "Notice what happened over here", "The shell restarted", "The shell basically said  I'm just reading in a file", "And notice what appeared", "It did a print", "That print came from this print statement", "I'd already bound x to", "I'd multiply it by itself  rebound x to be", "And now I'm executing this statement", "And it's waiting for me to input something", "So if I go back over here and I input the value    it reads it in  turns it", "into a Float by doing that type conversion  and then it prints out", "remember from back over here", "y times y and gives me that answer", "So this is a simple little example of what we call a straight line program", "It's a straight line program because I execute each instruction in turn", "I simply walk through the sequence of instructions", "But you now saw a little interaction", "And you see how I can build code in a file  load it into the shell  and have", "it do some work", "There are some observations", "We've already made them", "But let's just talk about them", "You see comments appearing after the pound sign", "And while my simple comment here was pretty boring  in fact  in general  I", "want comments because they tell me things about what I was thinking about", "as I wrote the code", "They're going to help a user understand the decisions the", "programmer made", "And in fact  a really good piece of code should be well commented and", "therefore should be very readable by a user to understand where things are", "Second observation we made is this is a straight line program", "There's no variation in the order", "It simply walks through things in order", "And of course  more programs are going to require more sophisticated control", "of the flow through the code", "And we're going to get to that next"], "fgrbzv_HQeE": ["OK  we've now seen graph search", "depth first search  breadth first search", "And we've seen  in fact  searches where both depth first search and", "breadth first search will find solutions  find paths", "with the fewest edges", "That may be what we want", "But there are also times where we might want more information", "Let's go back to our original example of finding flights", "from one city to another", "We could find the sequence of flights that involves the fewest stops", "That would be the minimum number of edges", "But we might be more interested in minimizing time or minimizing cost", "and that's information that's on the weight on an edge", "So if our edges are weighted  we need to find other solutions   solutions", "that minimize that total cost", "Turns out that for depth first search  the algorithm we've shown you is quite", "easy to modify", "Rather than just counting the number of edges  we", "simply sum up the weights", "And we keep searching to find the solution", "the path that minimizes that sum", "Structure of the algorithm  other than that change  is basically the same", "For breadth first search  in fact the first found solution", "may not be the best", "Because it's minimizing by the structure of the algorithm  the number", "of steps   the number of edges", "And so one needs more sophisticated methods to actually try and solve it", "Just to give you a difference  or a sense of the difference between them", "let's look at a couple of simple little examples", "Here's that graph abstraction we had at the beginning of our lecture about", "different flights", "If we're just minimizing the number of edges   for example  going from here", "to there  either algorithm will find it", "And in fact  there are a number of different solutions", "So here's one", "It's got four legs", "Here's another", "It's got four legs", "And in fact  there are a bunch of them with four legs", "Here's another one with four legs", "We're minimizing the total number of edges along a path", "When we take weights into account  for example the cost of the flight  then", "things are little bit different", "And in fact in this graph  one could actually run an algorithm to show that", "the best solution is this one  which has a cost of    plus    plus", "plus     which is", "And you can explore this for yourself to discover that any other path", "through this graph  in fact  has a higher cost", "So sometimes we want to solve minimal problems or optimization problems with", "weighted edges", "Sometimes it's just the total number of edges", "All right  with that in mind  why are we doing graph optimization", "Well  as we said  we have lots of problems that are naturally expressed", "as a set of transitions between a state of a system", "And those often can be easily solved as a graph search", "Simple examples would be ones where the actual structure the problem is", "itself a graph", "Travel through a physical network  whether it's a flight network or", "whether it's actually something like using your GPS to find driving routes", "from one location to another", "In those cases  the nodes naturally correspond to physical locations  like", "hubs or intersections", "And the edges naturally correspond to physical structures", "flight paths  roads", "But there are other problems are also well described as graphs", "Imagine you're trying to program a robot to accomplish some task", "Here  the nodes may be the state of the system", "the locations of pieces or the location of the robot", "And the edges are actions that that robot should take to change the state", "of the system", "Again  well solved as a graph problem", "And indeed  that leads to a more general sequence  or", "collection of problems", "Those are problems where a physical system is being handled or", "manipulated", "And here  the nodes are descriptions of the state of the system", "parameters that describe the position or state of the system", "And the edges are actions that will move  or transitions if you like  that", "will move the physical system from one state to another", "And again those are well solved by graph optimization problems", "And that says  basically  what we've shown you are two very handy tools for", "doing depth first and breadth first search  to find a sequence of", "transitions that transforms a system to a desired goal state", "These methods can find optimal solutions to a wide range of problems", "that are described in this matter  and they're going to be really valuable as", "you use these tools to solve problems of interest to you"], "9VqKk8cn6Cg": ["ERIC GRIMSON  Now we've got the idea of being able to", "generate guesses for things", "Building on this idea of iteration", "If we think about the code we just looked at in the previous", "segment  while loops generally iterate over", "a sequence of choices", "And often  especially in exhaustive enumeration  that", "sequence of choices is a whole series of things in order", "In examples we've seen so far  they've all", "been ints  or integers", "If we're doing that kind of iteration  that kind of loop", "over a sequence of choices  Python provides a very nice", "specialized mechanism for handling this", "And it's called a for loop", "And the idea of a for loop is   well  first of all  let", "me talk about the syntax of it", "It has the following form", "There is the special identifier for", "And then some identifier", "this will just be a name of something  so I put it in", "these angle braces to indicate", "That could be  for example  for in", "And then it's the key word in", "And then some sequence  some collection of choices", "followed by a colon", "And then indented  a code block", "So as before  this is going to tell us the things that we", "want to do   that code block", "And that's the form of it", "Here's the basic idea behind a for loop", "That identifier is initially bound to the first value in", "the sequence", "The code block is then executed", "The identifier is then bound to the next", "value in the sequence", "And that code block is executed", "Now if we stop here  you may get worried", "You say  well  aren't I going to go through all possible", "choices in the sequence", "And the answer is yes", "I'll do that until I either run out of choices or until I", "hit a special keyword called break", "When I hit a break statement  it pops me out  or stops me", "from computing things inside of that for and takes me to", "the next piece of code", "So break will be a way to tell me  based on some test  when I", "actually want to jump out of the code", "All right", "We're going to look at an example of a", "for loop in a second", "But there's the basic idea", "I'm simply going to walk down the sequence of choices  doing", "something until I get to a test that causes me to hit a", "break or I run out of possible choices", "I've got one more piece", "How do I generate a sequence of integers  if that's what I", "want to do", "I could generate sequences in a lot of cases  but in many", "cases  as I've seen  I like to do everything from  say", "up to some point", "And for that  I've got a built in", "function called range", "And range  with one argument n   notice it's in between", "those parentheses there", "will give me the sequence of integers from   up to but not", "including n", "If I want to get a sequence starting at some other point", "I can give range two arguments  m and n", "And it will give me the sequence of integers m  m plus", "all the way up to but not including n", "With those two ideas  let's see what happens if we go back", "and clean up our cube root finder", "Here's the code", "It's similar to what I had before  but it's", "now a little crisper", "And that's a good thing", "Again  I'm going to have something that asks me for an", "integer that I'm going to deal with", "I'll input it and to make sure it's an integer by doing a", "cast or a type conversion on it", "And then notice the for loop right here", "There's my identifier  for answer  ans  in", "And there's range  so notice what range is going to do", "It's going to generate a sequence of integers", "all the way up to the absolute value of x", "The for loop says for answer in that range  starting at", "I'm going to execute the body", "Notice the form of the body", "The body has a test  and if the test is true  it's going", "to hit a break", "So there's our form", "There's the generate step", "And there's the test step  or if you like  the check step", "I'm going to  in turn  have answer take on the values", "zero  one  two  three  et cetera  up until x", "Once I get past x  I'm going to stop", "But inside of that loop  I'm simply going", "to say  let me check", "If answer cubed is equal to absolute value of x  the thing", "I'm looking for  I'm done", "And I'll hit break", "And when I hit break  it throws me out of the loop and", "takes me down to the next piece of code", "And in that case  I'll now check", "Now why do I have to do one last check", "Well  I don't know whether I hit a break or whether I", "actually ran out of values to try", "So I'll see which case I'm in", "If I'm in place where I'm out of values   in other words  if", "answer cubed is not equal to the absolute value of x  which", "meant that this test was not what caused us to get there", "I'll return the fact it's not a perfect cube", "Otherwise  well  I'll just do what I did before", "Make sure I know which sign I want to use and then print out", "the right thing", "Let's check it out", "Over here in IDLE  there's my code", "It's got all of those pieces", "And if I now just run this  it's going", "to ask for an integer", "I'll just give it my good old", "There it is", "Let's try it again", "And let's give it minus", "And there it is", "Let's try it one more time", "And  I don't know  we'll give it something more interesting", "OK", "I probably knew that wasn't a perfect cube", "It's a pretty efficient code", "So what is this doing", "It's generating a sequence of options exhaustively by using", "range to do them one at a time as I need them", "And inside of each  it's doing a check to see have I found", "the value I want or not", "And with that generating check idea  I can write actually a", "piece of code that does a nice job of finding", "the things I want", "We're going to build on this idea as we move on"], "d-SBFpxf8Bk": ["We've been building up a lot of tools in our system for thinking about", "computation  thinking about algorithms  thinking about solving", "problems  fusing algorithmic and computational thinking", "And we want to now switch a little bit  because if you think about it", "everything we've done so far has really dealt with a particular", "kind of data type", "And think of the different algorithms we've seen", "We've seen exhaustive enumeration  we've seen guess and check  we've seen", "bisection  we've seen divide and conquer  all different kinds of", "algorithms that are really valuable", "But all of them have so far really been applied to just simple data", "types  primarily to numbers and occasionally to strings", "That's nice  but we're going to have problems where we actually want to", "think about structuring data in much more complex ways  gathering together", "different pieces and different organizations and being able to write", "algorithms that can manipulate those  as well", "And so for those  we're going to need more compound kinds of data types", "And we want to turn to those", "In this segment  we're going to talk about three kinds of compound data", "tuples  lists  dictionaries", "Each of them has its own strengths", "Each of them has its own pluses", "Each of them has occasion issues that you have to worry about", "So we're going to start with the simplest and work our way up", "And that means let's start with tuples", "So what's a string", "A string is an ordered sequence of characters", "Wouldn't it be nice if we could generalize the idea of a string to an", "ordered sequence of elements  but where those elements could be", "arbitrary things", "They don't just have to be characters", "They could be words  they could be numbers  they could be potentially", "even other structures", "So we'd like to do that where we can have that kind of ordered sequence and", "the elements can be  as we just said  more than just characters", "So let's look at that", "We're going to go over here and take a little version of that inside of IDLE", "And in particular  let's create something like  I'm going to say", "tuple   is going to be the numeral    the string 'two'  and the numeral", "And notice the syntax we use here", "The syntax is an open paren  a close paren  and a sequence of elements", "separated by commas", "Now  if I want to see what the value of t  is  I could print it out", "I could actually just ask for t   since I'm talking to the IDLE shell", "And you see it gives me back exactly that string", "I could make more complicated things", "I could say I want t  to be the tuple whose first element is t  and whose", "second element is the string 'four'", "OK  what does that look like", "Well  let's look at what t  prints out as", "Ah  this is a little different", "And that's actually going to be a value to us  right", "So if I think about it  t   I said  was going to be a", "tuple of two elements", "And the first of them happens to itself be a tuple", "So in fact  t  has the form of a tuple as its first element  followed by a", "string as its second element", "So there is the first element", "There is the second element", "And that's nice  because it says the elements of a tuple can themselves be", "tuples  which could have inside of them  of course  other tuples", "And we've now got an ability to start putting together more complicated", "kinds of things  which is great", "OK  so what kinds of operations can we then run on tuples", "Well  they're going to have some similarity to the things that we've", "already seen in dealing with strings", "So I now have inside of IDLE t  and t", "They're two tuples", "I can do concatenation", "If I do t    t", "huh  interesting", "Now  let's think about that", "That addition operator  we said  was overloaded", "And we know it can add together the numbers", "We know it can add together strings", "And we know it basically does concatenation", "That is  it stitches together things", "So when I do t    t   it literally gives me the elements of t  followed", "in order by the elements of t", "And you can see them there on the screen", "There is    'two'     which are the elements of t", "followed by the tuple", "'two'     and then the element 'four'", "So concatenation just stitches them together  as we would", "have seen with strings", "What else have we got", "Well  we can index", "We can go into a tuple and get out an element", "And notice the syntax here", "Given a tuple", "and there it is", "I've actually created something by adding or", "concatenating   tuples together", "I'm going to use the square bracket", "well  let's call it that  just the square parentheses", "or the square bracket", "to tell us which element we want", "So if we say  take the tuple t    t   my parens around it tell me it is a", "single tuple", "I'm going to ask for the third element", "Ah  and we can see where that make sense", "We already saw that for t    t   the zeroth element was the numeral    the", "first element was the string 'two' the second element was the numeral    the", "third element is in fact that tuple  the thing that I stitched together as", "I put it in into it", "So again  indexing  just like before  starts at    and it simply walks down", "that ordered sequence to find the right element", "What else could we do", "Well  we know  on strings  we can slice", "We get out portions of strings", "We can do the same things with tuples", "So I could take the tuple t    t", "There it is", "And I can say  give me back the slice starting from the second element", "indexing initially from", "and completing just before the fifth element", "And there it is", "And if we look up above it  you can see it skips the zeroth and first one", "and then has a second  third  and fourth", "And it stops just before it gets to the fifth element  which  of course", "we know there actually isn't one of", "Great", "So we're getting tuples having a lot of the power of strings", "but just more general", "There's one other operation that we can use", "And that is a singleton", "So what is a singleton", "Well  how do I create just a single element of a tuple or a tuple with", "just   element", "And here  I'm going to create it by saying  I'm want to make t  be string", "'five' followed by a comma  followed by a paren", "And then I can do things like saying  what's t    t    t", "And it has now added it at the end", "And the question is  why do I have this funky little comma in here", "Why don't I just say that I want to have an open paren in the 'five'", "Well  let's look at an example", "Suppose I do that with a number and I say  what's the value of this", "Oh  right", "The parens are telling me to group it together", "So it's just the number    whereas if I wanted to get a tuple with just a", "in it  by giving the comma there  annoying as it is  it tells me that", "this is a tuple whose first element is    and it has no additional elements", "And there we go", "And then  once I have the tuple  I can add it to other pieces  as I just did", "Great", "Got a set of operations that hold", "What else can we do", "Well  with strings  we could iterate over them", "We could have a loop that walked down the string  each element at a time", "We can do the same thing with tuples", "So let's look at an example", "Here's the little piece of code that's going to find the common", "divisors of n  and n", "It assumes that they're both positive integers", "And it's going to give us back a tuple containing all the common divisors", "How am I going to do that", "Well  let's look at the code", "I'm going to set up divisors initially to be   oh  look at that", "the empty tuple", "So this is telling me that divisors is a tuple that currently has no elements", "in it   that open close paren", "OK  Then I'm going to run through a loop", "I'm going to let i run from   up to the smaller of n  and n", "Actually  that extra     there makes sure I get up to all of them", "I'm going to have it run up to the smaller of the", "And then what am I going to do", "I'm basically going to say  gee  if the remainder when I divide n  by i is", "and the remainder when I divide n  by i is    then", "this is common divisor", "So I'm going to add it in", "And notice the form there", "There it is again", "I'm creating a tuple with just the element i", "And I'm using the overloaded   operator to add that to the end of the", "tuple that is what divisors currently points to", "And when I'm done  I'm going to return divisors", "Let's check it out  see what this does", "So if I go over to my little system over here and I call find divisors", "and let's run it on   and", "Yeah  very nice", "It gives me back a tuple", "And those are  if you think about it  all the common divisors of   and", "Great", "OK  so what else did I just do here", "Well  I actually did a little loop over them", "And that's what I wanted to get to", "This is simply creating the tuple by walking through a sequence of ranges", "But now let's look at the second part", "Suppose I now say  I'm going to set divs to be what I just did   find", "divisors of   and", "And we know what that is", "And now I'd like to walk down that tuple  adding up all the numbers  just", "get the sum of them", "So I'm going to set total to    no big deal", "And then  for d in divs  I'm going to add d into total", "And again  we're reminded that    says is the same as saying total   d and", "set total equal to that", "And if I do that  and I now say  what's the value of", "total  there it is", "", "OK  the key thing I want you see is right here", "This is now iterating over a tuple", "And the for loop knows how to do that", "Python's implementation basically says  if this data type is a tuple", "it's going to keep a little internal counter  starting at   and walking", "along until it gets to the length of that tuple", "And at each iteration through the loop  it is letting d  the loop", "variable  point to the value indicated by whatever that internal pointer", "points to within the tuple", "So it's going to start off with d  initially at    then    then    then", "then    then    in the little example we saw here  where divs was", "in fact  that tuple", "So what have we seen", "Generalization of strings  an ordered sequence of elements  where the", "elements can be anything   they're called tuples", "and they have many of the same properties", "We can index  we can slice  we can concatenate  we can loop over them", "all really valuable properties  which means that the algorithms we've been", "writing we might now be able to apply to these kinds of data structures"], "-gLoe0n1CEQ": ["Let's visualize what this idea of checking if something is", "a palindrome does", "The basic idea is to check the first and last letter to see", "if they're the same", "And then if they are  to check the remaining middle portion to see if", "it's a palindrome", "So here's ablewasiereisawelba  all reduced down just", "to lowercase letters", "And so at the first step  we check to see are the two end cases the same", "They are  and that reduces to checking a smaller thing", "Again  we check to see if the first and last character are the same  they", "are  and that reduces to checking a smaller thing", "And at each stage  we keep checking the end characters", "In this case they are all the same  and we keep reducing to smaller and", "smaller versions of the same problem"], "mB26qQckcHc": ["JOHN GUTTAG  Hello  this is John Guttag again", "It's been a while since you've had the opportunity or maybe  I should say", "the misfortune to view a segment recorded by me for", "But I'm back", "I hope it's OK", "We spent a fair amount of time this term looking at the role of", "computation in understanding data", "Thinking statistically about data is a relatively new invention dating to", "about the  th century", "Since its invention in the middle of the  th century  people have used", "statistics both to inform and to mislead", "Some have willfully used statistics to mislead  others have been merely", "incompetent", "Which gets me to the topic of today's lecture    There are three kinds of", "lies  lies  damned lies  and  worst of all  statistics   This quote is often", "attributed to Mark Twain", "But he attributed it to Benjamin Disraeli", "And it's probably appropriate that we should attribute it to a politician", "And then there's my second most favorite quote about statistics   If", "you can't prove what you want to prove  demonstrate something else and", "pretend that they're the same thing", "In the daze that follows the collision of statistics with the human mind", "hardly anyone will notice the difference", "In this lecture  we'll list a few ways in which one can be fooled into", "drawing inappropriate inferences from statistical data", "I trust  by the way  that you  as a   student  will use this information", "only for good  i e", "to become a better consumer and purveyor of statistical information", "not to be a deceiver", "Let's start with the statement that statistical measures do not tell the", "whole story", "In    the statistician F J  Handscomb published a paper containing", "this table", "It contains the x  y coordinates of the points in each of four", "different data sets", "I don't expect you to assimilate all of this at a quick glance  so I'm", "going to provide you with an executive summary to show you that  in many", "ways  these four data sets are statistically similar", "They have the same mean for x and y in each  the same variance for x and y", "the same correlation between x and y  and  moreover  if we do a linear", "regression  we'll see that we get the same curve for each of x and y  as", "depicted here", "Does this mean that there's no obvious way to distinguish these data sets", "from each other", "No  one simply needs to plot the data  the actual data  to see that the data", "sets are not at all alike", "So for example  as we look at this  we can see that this and this don't even", "resemble each other", "And in fact  there's no resemblance between any of the four of them", "Keep in mind  that there are an enormous number of different", "statistics that can be extracted from any data set", "By carefully choosing among these  it's possible to convey a variety of", "different impressions about the same data", "Is it hopeless", "No", "There's a very simple antidote to this", "look at the data itself", "So by plotting the points here  we can see that  in fact  these data sets", "were not at all alike", "OK  let's move on to a slightly different topic", "Throughout the term  we've emphasized the utility of graphics for quickly", "conveying information", "However  when used carelessly  or worse yet  maliciously  a plot can be", "highly misleading", "Consider for example  this chart depicting housing prices in the United", "States Middle Western states", "This chart suggests that  in fact  housing prices have been very stable", "or were very stable during the period   to", "This might cause you to scratch your head", "Wait a minute   you might think   Wasn't there a housing crash in", "followed by a global financial crisis   Indeed there was  which", "raises the question   Why don't we see it in this chart   The reason is that", "I have very cleverly", "perhaps maliciously", "chosen a y axis  which I've displayed logarithmically and with a very large", "dynamic range", "I've showed housing prices ranging from    to          when in fact", "the only interesting part is here", "But you really can't see what's going on there because I've made that part", "intentionally  very small", "Let's look at another chart that shows exactly the same data", "Here  I've done the opposite", "I've made the dynamic range on the y axis small", "ranging from      to       depicted it linearly  therefore", "exaggerating the changes and making a bad situation look even", "worse than it was", "Let's look at another interesting picture  this one", "from a journal article", "So before I do this  I should ask you to think about your initial and to", "hope that it's not either a C or a D  Why", "Because if it is  you're likely to get a bad grade in this course  or so", "might the authors of this article have concluded", "And they conclude this in part by looking at this table", "You can see here that people whose initials are C or D get considerably", "lower grades than those lucky people  for example  with an A", "Well  not really  because  again  what the authors have done is choose a very", "small dynamic range here  so  in fact  this difference and that difference", "are not really so large", "By the way  the article concluded that students with the initial C or D were", "more accepting of poor performance and therefore performed more poorly", "Of course  one could just as easily concluded that professors don't like", "students with the initials of C or D and therefore give them bad grades", "In fact  in later segments of this lecture  we'll see lots of other", "reasons to be suspicious of the conclusion in this article"], "Ys5yKRESAOw": ["John Guttag  Hello", "In the last segment  we looked at a simulation in which we did repeated", "trials of n coin flips", "We saw that as n got larger  the ratio of heads to tails became similar", "across the trials", "Eventually for each of the trials  the ratio was quite close to", "That's to say  close to half the flips came up heads and half tails", "I observed that this should lead us to conclude something", "about the next flip", "that heads and tails were about equally likely", "But why did I think I could conclude that", "That's the topic of this segment", "What I was depending upon is something called the law of large numbers", "sometimes called Bernoulli's law", "So contrary to many people's views  the law of large numbers have nothing", "to do with really big numbers like this", "What it really tells us is that in repeated independent tests with the", "same actual probability", "and by the way  we may have no idea what that is", "p of a particular outcome in each test", "the chance that the fraction of times the outcome occurs differs from p", "converges to   as a number of trials goes to infinity", "By the way  this handsome fellow here is Bernoulli", "It's worth noting that the law of large numbers does not imply  as too", "many seem to think  that if deviations from the expected behavior occur", "these deviations are likely to be evened out by opposite deviations in", "the future", "This belief is something known as the gambler's fallacy", "It's nicely illustrated by thinking of the game of roulette", "For those of you don't know the game  it starts with the wheel", "And one drops a little ball in the wheel", "gives the wheel a spin", "Eventually the wheel stops spinning", "And the ball settles in one of these slots", "Most of the slots are either black or red", "A few are green", "For the moment", "actually for the rest of this segment  let's ignore the green slots and", "pretend that they're all either black or red", "If the wheel was fair  half the time the ball should come to stop in a red", "slot and half the time in a black slot", "Despite this probability  an amazing thing happened  as reported by Huff", "and Geis in their book  How to Take a Chance", "I quote from that book", "On August       at the Casino in Monte Carlo  black came up a record", "times in succession", "There was a near panicky rush to bet on red  beginning about the time black", "had come up a phenomenal   times", "In the end  the unusual run enriched the casino by some millions of", "francs", "So let's think about what was really going on", "So once red had come up   times in a row  the supposedly smart gambler", "said  wow  that's a surprise", "How often should that happen", "Well  about one out of     times", "pretty unlikely", "And they said  therefore  we're going to have to eventually have the same", "number of blacks and reds", "So in order to even it out  we're going to need to see more blacks in", "the future", "I better bet on black", "Well  once red had come up   times in a row  people did the probability  and", "said  well  the chances of that are about one in   and     million", "really unlikely", "and said  what's the chance of   in a row", "One out of about   million", "Well  that  they thought  was highly unlikely", "Hence  the stampede to bet", "Hence the extra profit for the casino", "So what was wrong with this logic", "Well  it's true that if you started with no spins  it would be perfectly", "reasonable to say the probability of getting   reds in a row was one out", "of   million", "On the other hand  if I already have   reds in a row  what's the chance of", "getting   reds in a row", "Exactly the same as the chance of getting red on any one spin", "that is to say  a half", "And the reason for that is that these were independent events", "When we think about the law of large numbers  we should also realize that", "large is a relative concept", "Imagine flipping a fair coin on the order of       million times", "That's kind of hard to imagine", "Your thumb would get very sore if you did that", "But pretend you could", "If you could do that  you would expect to encounter several sequences of a", "million heads", "Now if you would only look at those subsequences where you saw a million", "heads in a row  you could easily reach the wrong conclusion about the coin", "So you can't just look at a subsequence of a very", "large random sequence", "You have to look at the whole thing to reach any conclusion", "In fact  if every subsequence of a large sequence of events appears to be", "random  it's highly unlikely that that sequence itself was generated by a", "random process", "If your iPad Shuffle doesn't play the same song twice in a row at least once", "in while  you can bet that it's not really random", "Finally  notice that in the case of coin flips  the law of large numbers", "does not imply that the absolute difference of heads minus tails", "converges to", "In fact  the more flips we do  the larger we can expect the absolute", "difference to get", "What converges is the ratio", "Now let's look at a small function that illustrates the law of large", "numbers at work", "The function flipPlot takes two arguments", "The minimum exponent and the maximum exponent", "It initializes some things to the empty list", "It then builds the x axis for what we're going to plot", "that is to say  the number of flips we're going to experiment with", "And it looks at all flips in range from   to the minimum exponent to   to", "the maximum exponent", "So it will try", "let's say  minimum exponent were", "et cetera", "So the number of flips will grow exponentially", "The first thing it does is after building the possible x values  it", "then goes through and conducts the experiment", "For each value in x axis  it will flip that many coins and keep track of the", "heads and tails and the ratio of heads to tails", "Finally  it will produce a couple of plots with appropriate titles and", "labels for the axes", "Let's run it and see what we get", "We have two figures", "And let's go over and look at those figures on the PowerPoint so that I", "can draw on them", "The first figure plots the difference between heads and tails", "If we look at it quickly  it seems to suggest that the absolute difference", "between the numbers of heads and tails fluctuates at the beginning  crashes", "and then steadily rises", "However  we should be careful before we believe that", "Because what we have to keep in mind is that in fact we only have two", "actual data points to the right of x equals", "We have this point and this point", "We happen to have connected them by lines  which could mislead us into", "thinking we have a trend  when in fact all we have is isolated points", "The moral here is whenever you look at a plot with this kind of lines  asked", "how many points it actually contains before jumping to any conclusion", "Looking at the next plot  what we see is that mostly it appears", "to be a flat line", "Well  this too is deceptive", "In fact  there's a fair amount going on over here on the left", "But it's hard to see", "The reason it's hard to see is that we have enormous dynamic range here on", "the x axis as we did in the previous plot by the way   ranging from   up to", "million", "not that much dynamic range in the y axis", "Therefore  action over here in the left side is very compressed", "Fortunately  we can fix that", "What we see with this kind of scaling is what's called linear scaling", "That is to say the points on both the x and the y axis are evenly laid out", "The distance from   to     is the same as the distance from a million to", "million", "That makes it hard to see what goes on between  say    and     or   and", "even", "Fortunately  all these problems in x position we've talked about are easily", "fixed in Python", "Let's go look at code that does that", "This code is the same as the previous implementation of flipPlot  except", "I've added some additional code at the bottom that provides us with different", "presentations of the same data", "I want to emphasize it's the same data   just presented", "in a different format", "So what I've done is instead of drawing those lines  I've just plotted", "the points as blue circles so that we can easily see how many points we", "really have", "Also  I've changed the x and y axis of the first plot to be semilog", "x and semilog y", "We'll see what that means in a minute", "And on the second plot  only to be semilog x", "And again  we'll see that in a minute", "Let's run it and see what we get", "Well  we get the same first two plots", "And I won't bore you by looking at those", "Let's look plots   and", "Let's look at plot   first", "This is the heads tails ratio", "So notice that as before  the y axis ranges from     to", "There was not much dynamic range there", "So there was really no reason to change it", "But the x axis is now logarithmic", "So there are as many points between       and       as there are between", "and", "This allows us to see clearly what's happening on the left side of the plot", "where things are changing more quickly", "So this plot suggests pretty strongly that the ratio of heads to tails", "converges to   as the number of flips gets large", "That's a good thing", "Let's look at the other plot", "Here's Figure", "Once again  the x axis is logarithmic", "But now I've also made the y axis logarithmic", "Because there was so much dynamic range there  we couldn't really see", "what was happening down near the lower left hand corner", "It now emerges as if there is a trend", "clearly not a perfect trend", "of the absolute difference between heads and tails growing with the", "number of flips", "We can be a little bit suspicious because it bounces up and down", "But the trend is  I think  pretty clear", "OK", "Let's wrap this segment up with a couple of observations", "Perhaps most importantly  we should point out that it's never possible to", "be assured of perfect accuracy through sampling unless you sample the entire", "population", "I want to emphasize the word  assured   you might actually get the", "accurate answer", "But you can't know it's an accurate answer without sampling the entire", "population", "And of course  for coin flips  we were speculating on an", "infinite number of flips", "We can't do that", "And in fact  in most cases  you can't sample it", "One might flip a coin twice and get one head and one tail and conclude", "from that that the probability of getting each is a half", "Because that's what you've got with your two flips", "Well  you'd have the right answer", "But you would've gotten there through totally bogus reasoning", "What we'll talk about in the next segment is how many samples we need to", "look at before we can have some justification that the conclusion", "we're reaching really is sound"], "FuJyo3kNgto": ["SPEAKER  We've been building up a lot of tools in our", "system for thinking about computation  thinking about", "algorithms  thinking about solving problems  fusing", "algorithmic and computational thinking", "And we want to now switch a little bit  because if you", "think about it  everything we've done so far has really", "dealt with a particular kind of data type", "And think of the different algorithms we've seen", "We've seen exhaustive enumeration  we've seen guess", "and check  we've seen bisection  we've seen divide", "and conquer  all different kinds of algorithms that are", "really valuable", "But all of them have so far really been applied to just", "simple data types  primarily to numbers and", "occasionally to strings", "That's nice  but we're going to have problems where we", "actually want to think about structuring data in much more", "complex ways  gathering together different pieces and", "different organizations and being able to write algorithms", "that can manipulate those  as well", "And so for those  we're going to need more compound kinds of", "data types", "And we want to turn to those", "In this segment  we're going to talk about three kinds of", "compound data", "tuples  lists  dictionaries", "Each of them has its own strengths", "Each of them has its own pluses", "Each of them has occasion issues that you", "have to worry about", "So we're going to start with the simplest and", "work our way up", "And that means let's start with tuples", "So what's a string", "A string is an ordered sequence of characters", "Wouldn't it be nice if we could generalize the idea of a", "string to an ordered sequence of elements  but where those", "elements could be arbitrary things", "They don't just have to be characters", "They could be words  they could be numbers  they could", "be potentially even other structures", "So we'd like to do that where we can have that kind of", "ordered sequence and the elements can be  as we just", "said  more than just characters", "So let's look at that", "We're going to go over here and take a little version of", "that inside of IDLE", "And in particular  let's create something like  I'm", "going to say  tuple   is going to be the numeral    the", "string 'two'  and the numeral", "And notice the syntax we use here", "The syntax is an open paren  a close paren  and a sequence of", "elements separated by commas", "Now  if I want to see what the value of t  is  I", "could print it out", "I could actually just ask for t   since I'm talking to the", "IDLE shell", "And you see it gives me back exactly that string", "I could make more complicated things", "I could say I want t  to be the tuple whose first element", "is t  and whose second element is the symbol 'four'", "OK  what does that look like", "Well  let's look at what t  prints out as", "Ah  this is a little different", "And that's actually going to be a value to us  right", "So if I think about it  t   I said  was going to be a tuple", "of two elements", "And the first of them happens to itself be a tuple", "So in fact  t  has the form of a tuple as its first element", "followed by a string as its second element", "So there is the first element", "There is the second element", "And that's nice  because it says the elements of a tuple", "can themselves be tuples  which could have inside of", "them  of course  other tuples", "And we've now got an ability to start putting together more", "complicated kinds of things  which is great", "OK  so what kinds of operations can", "we then run on tuples", "Well  they're going to have some similarity to the things", "that we've already seen in dealing with strings", "So I now have inside of IDLE t  and t", "They're two tuples", "I can do concatenation", "If I do t    t", "huh  interesting", "Now  let's think about that", "That addition operator  we said  was overloaded", "And we know it can add together the numbers", "We know it can add together strings", "And we know it basically does concatenation", "That is  it stitches together things", "So when I do t    t   it literally gives me the", "elements of t  followed in order by the elements of t", "And you can see them there on the screen", "There is    'two'     which are the elements of t", "followed by the tuple", "'two'     and then the element 'four'", "So concatenation just stitches them together  as we would", "have seen with strings", "What else have we got", "Well  we can index", "We can go into a tuple and get out an element", "And notice the syntax here", "Given a tuple", "and there it is", "I've actually created something by adding or", "concatenating   tuples together", "I'm going to use the square bracket", "well  let's call it that  just the square parentheses or the", "square bracket", "to tell us which element we want", "So if we say  take the tuple t    t   my parens around it", "tell me it is a single tuple", "I'm going to ask for the third element", "Ah  and we can see where that make sense", "We already saw that for t    t   the first element was the", "numeral    second element was", "sorry  the zeroth element was the numeral    the second", "element was the symbol 'two'  the third element was the", "numeral    and the fourth element   or third if you want", "to think of it because I'm counting from    is in fact", "that tuple  the thing that I stitched together as", "I put it into it", "So again  indexing  just like before  starts at    and it", "simply walks down that ordered sequence to", "find the right element", "What else could we do", "Well  we know  on strings  we can slice", "We get out portions of strings", "We can do the same things with tuples", "So I could take the tuple t    t", "There it is", "And I can say  give me back the slice starting from the", "second element", "indexing initially from", "and completing just before the fifth element", "And there it is", "And if we look up above it  you can see it skips the", "zeroth and first one  and then has a", "second  third  and fourth", "And it stops just before it gets to the fifth element", "which  of course  we know there actually isn't one of", "Great", "So we're getting tuples having a lot of the power of strings", "but just more general", "There's one other operation that we can use", "And that is a singleton", "So what is a singleton", "Well  how do I create just a single element of a tuple or a", "tuple with just   element", "And here  I'm going to create it by saying  I'm want to make", "t  be string 'five' followed by a comma", "followed by a paren", "And then I can do things like saying  what's t    t    t", "And it has now added it at the end", "And the question is  why do I have this funky", "little comma in here", "Why don't I just say that I want to have an open paren in", "the 'five'", "Well  let's look at an example", "Suppose I do that with a number and I say  what's the", "value of this", "Oh  right", "The parens are telling me to group it together", "So it's just the number    whereas if I wanted to get a", "tuple with just a   in it  by giving the comma there", "annoying as it is  it tells me that this is a tuple whose", "first element is    and it has no additional elements", "And there we go", "And then  once I have the tuple  I can add it to other", "pieces  as I just did", "Great", "Got a set of operations that hold", "What else can we do", "Well  with strings  we could iterate over them", "We could have a loop that walked down the string  each", "element at a time", "We can do the same thing with tuples", "So let's look at an example", "Here's the little piece of code that's going to find the", "common divisors of n  and n", "It assumes that they're both positive integers", "And it's going to give us back a tuple containing all the", "common divisors", "How am I going to do that", "Well  let's look at the code", "I'm going to set up divisors initially to be", "oh  look at that", "the empty tuple", "So this is telling me that divisors is a tuple that", "currently has no elements in it   that open close paren", "OK  Then I'm going to run through a loop", "I'm going to let i run from   up to the", "smaller of n  and n", "Actually  that extra     there makes sure I get", "up to all of them", "I'm going to have it run up to the smaller of the", "And then what am I going to do", "I'm basically going to say  gee  if the remainder when I", "divide n  by i is    and the remainder when I divide n  by", "i is    then this is common divisor", "So I'm going to add it in", "And notice the form there", "There it is again", "I'm creating a tuple with just the element i", "And I'm using the overloaded   operator to add that to the", "end of the tuple that is what divisors currently points to", "And when I'm done  I'm going to return divisors", "Let's check it out  see what this does", "So if I go over to my little system over here and I call", "find divisors  and let's run it on   and", "Yeah  very nice", "It gives me back a tuple", "And those are  if you think about it  all the common", "divisors of   and", "Great", "OK  so what else did I just do here", "Well  I actually did a little loop over them", "And that's what I wanted to get to", "This is simply creating the tuple by walking through a", "sequence of ranges", "But now let's look at the second part", "Suppose I now say  I'm going to set divs to be what I just", "did   find divisors of   and", "And we know what that is", "And now I'd like to walk down that tuple  adding up all the", "numbers  just get the sum of them", "So I'm going to set total to    no big deal", "And then  for d in divs  I'm going to add d into total", "And again  we're reminded that    says is the same as saying", "total   d and set total equal to that", "And if I do that  and I now say  what's the value of", "total  there it is", "", "OK  the key thing I want you see is right here", "This is now iterating over a tuple", "And the for loop knows how to do that", "Python's implementation basically says  if this data", "type is a tuple  it's going to keep a little internal", "counter  starting at   and walking along until it gets to", "the length of that tuple", "And at each iteration through the loop  it is letting d  the", "loop variable  point to the value indicated by whatever", "that internal pointer points to within the tuple", "So it's going to start off with d  initially at    then", "then    then    then    then    in the little example", "we saw here  where divs was  in fact  that tuple", "So what have we seen", "Generalization of strings  an ordered sequence of elements", "where the elements can be anything", "they're called tuples", "and they have many of the same properties", "We can index  we can slice  we can concatenate  we can loop", "over them", "all really valuable properties  which means that", "the algorithms we've been writing we might now be able", "to apply to these kinds of data structures"], "jJqP3ZUSy5E": ["Now that we've introduced the idea of a function definition  I want to spend", "a little bit of time giving you a mechanical way of thinking about how", "function implications work and in particular how the right kinds of", "values get stored in the right places", "So we're going to use the idea of what's often called an environment to", "understand how bindings of variables take place", "And here's the basic idea behind an environment", "It's going to be a formalism for tracking the bindings of", "variables and values", "And it will in fact apply to general bindings of assignment statements as", "well as more broadly to when we do function calls", "So indeed  whenever we do an assignment statement  that simply", "pairs a name and the value of the other expression together in a table", "if you want to think of it that way  that we call an environment", "If we want to get the value of a name  invoking that value or that name", "rather  just asking for the value of that name simply goes to the table", "and looks up the value  and returns it", "Generally when we're talking to a Python shell  there is an environment", "It's often called the default or global environment", "And it contains the bindings of all the expressions that we put in as we", "deal with it", "And then  the key piece of this is when we evaluate a definition  it", "pairs the name of the function with the details of the function without", "actually evaluating those details", "It creates a pairing up the name to what we call a procedure object", "Let me show you a graphical way of thinking about this", "Here's a little bit of a description that we're using", "I have evaluated two expressions", "I've evaluated an expression that binds x to   and that binds p to", "And over here  I have my global environment", "This is the environment to which the Python shell is talking", "And in fact  when I evaluate these assignment statements  they create", "bindings of names to values", "x is bound to", "p is bound to", "I've also bound result down here", "bound to   over in that environment", "That gives me variable names and values as associations", "And now imagine I want to run a little piece of code  this", "little for loop here", "I'm not going to worry too much about the details", "We'll come back to it", "But basically  this four loop is going to run using an iterating variable", "turn over the range from   up to p minus    which we know is going to be", "and", "It's got a print statement in there", "But it's also got an expression down here", "And here's what will happen if I evaluate that", "We know what should happen", "But in terms of the environment  when I want to evaluate this expression  it", "says get the value of result by looking it up over here in the", "environment", "Get the value of x by looking it up here in the environment", "Multiplying them together  and then rebind result to that value", "That was when term was equal to", "Having done that  we go back and we say turn equal to", "And we do the same thing", "We get the value of result", "We get the value of x by looking them up in this environment here  doing the", "computation  and rebinding result to", "Turn goes up one more", "That's equal to", "It's going to be the last one", "And we again  do the same kind of computation  getting result  x", "multiplying together and rebinding result", "So my rules  now  are just amplified a little bit", "I'm actually just keeping track in this environment of the bindings of", "variables  looking them up when I need them  and re changing them with", "assignment statements when I have to", "So after I've executed all of this  my environment would look like this", "So that if in fact I said to Python  what's the value of result  it would", "look it up in that environment and return the value", "So this computation does what I expected it would do", "But we can see how this idea of an environment gives us a little bit more", "formalism for thinking about what happens as we do those evaluations", "Now  let's see what happens when we create a procedure object", "I'm going to bind  in this case  x to   and y to", "And there are my bindings right there for it", "And when I give the Python shell a definition  whether I load it in from", "a file or I type it in  it is going to associate with the name in the", "environment  what we call a procedure object", "So it's got an identifier that says this is a procedure", "And inside of it  it has the parameter list", "And it has the body of the procedure", "And notice the form which is important", "It doesn't have substitutions for x and y here", "It has them as variable names", "That means that this procedure here can be used multiple times", "And that's great", "I've now captured that computation", "I can refer to it by name because that name's available in that environment", "And I ought to be able to use it", "Great", "So that procedure object is something that sits available to me  but again", "has not been evaluated", "We don't have substitutions for x and y there", "There is variable names", "And the last piece is this little thing here we call", "an environment pointer", "And it  from the procedure object  points back to the environment in", "which that procedure was defined", "And we're going to see why we want that", "But it basically tells us the context relative to which I want to evaluate", "my procedure objects", "So this arrow points to the binding", "This arrow is an environment pointer that comes back", "Here's what happens when I actually call a function", "If I want to evaluate some expression followed with  in parentheses  some", "other number of expressions  which would be what a function call would", "look like  I first evaluate this expression  which is a name", "And that says I'm going to just look it up in the environment", "And I will get back the value which is that procedure object", "I then evaluate all of these other expressions to get the values of the", "parameters", "Then I bind those parameter names in the procedure object to the values of", "the arguments that has passed in", "And I do that in a new frame  which has  as a parent  the environment in", "which the procedure was defined", "That's going to create a new context", "It's going to look just like an environment", "It's going to have names  in this case the parameters  with values", "associated with them", "And relative to that environment  I'm going to evaluate", "the body of the function", "And that's going to do just exactly the same rules", "So I evaluate the body of the procedure relative to this new frame", "So for example  if I were to now call max of   and    right there I'm going", "to bind the value of that to z when I'm done", "What do I do", "I first get the value of max", "It's right there", "And it is pointing to that object", "I get the values of   and", "Those are easy", "They're just numbers", "And then I bind the parameters of the procedure in a new frame", "I'm calling this one E  for Environment Two", "I bind them to the values that I just got", "And then relative to E   I'm going to evaluate this body", "That's great", "Because now what do I have", "I have a way of saying if x is greater than y   and where do I get the x", "It's right there", "It's relative to this frame", "So I only see that value of x", "I only see that value of y", "I don't get confused by things up here in the global frame", "Because I've created a new environment right there", "And relative to that environment  I evaluate the body of the procedure", "Now you can see  this encapsulation is going to protect the interior details", "so that it doesn't matter  in fact  what names I use for the parameters", "here  or whether they have bindings elsewhere  because they're not going", "to get seen by Python", "It's going to use the local context  and  in this case  return the max of", "these  which is the value", "Mechanistic", "Yes", "A little bit boring", "Yes", "But really valuable for understanding exactly how the computation keeps", "track of what values to use  what variable names to use  and how to use", "the steps to do the computation we just captured inside", "that procedure object"], "NDAb2bewzbI": ["PROFESSOR  At this point  the burglar's probably wondering why we", "bothered with the greedy algorithm", "Shouldn't we just go ahead and use the exhaustive search to find the optimal", "solution all the time", "To get some insights into how to best answer the burglar  let's look at the", "computational costs of each of the algorithms", "We can figure out the expected run time of the greedy", "algorithm as follows", "Remember  the first step was to sort the items in order of their metric", "so in metric order", "If we remember how long it takes to sort a list of N items from a previous", "lecture  we know that sorting the number of operations", "involved is O N log N", "So that's log base    where N is the number of items in the list that we're", "trying to sort", "And then we're going to process that list", "We're going to take one pass through the list  and we're going to evaluate", "each item in turn to see whether or not we're", "including it in the knapsack", "So we're going to process the list", "And we do a constant number of operations for each of the", "elements of that list", "And so the total number of operations of this processing phase", "is basically O N", "In other words  it's proportional to the length of the list", "So  the overall number of operations involved in the greedy algorithm is", "first  we have to do the sort  and then following that  we have to make a", "pass processing the list", "And all together", "well let's see  if we do order of calculations  that means that when we", "add two orders of  we just simply pick the larger of the two", "as our overall estimate", "the term that will dominate as N gets large", "So  what we see is that the running time of the greedy algorithm is", "dominated by the short time  which is O N log base   N", "What about the run time for the exhaustive search  which lets us find", "the optimal solution", "Well  the first step in there  we needed to enumerate all the possible", "combinations of items", "And that has cost order O   N   because there's   N possible", "combinations", "Secondly  for each of the combinations", "so  we're going to end up multiplying these two costs together", "So for each of the combinations  what we need to do is", "to compute two things", "We need to compute the weights of all the items in that particular", "combination  and we need to compute the values", "And in the worst case  there is N elements in each of these two lists", "so the cost of these two operations is each O N   and together", "they're also O N", "So now  what's the overall cost of the exhaustive search", "Well  we need for each combination in the list of all possible combinations", "we are going to have to do another set of calculations  which is whose cost", "is shown in", "So if we put those together", "multiply them together", "we end up with order O N   N", "So what does all this order of computation mean for the burglar", "Well  let's suppose that N was", "How long is it going to take the burglar to do what he wants to do", "So if we're using a greedy algorithm  the number of operations is", "proportional to N log N  And  see N is", "And log base   of   is    and so that's approximately", "Suppose we were able to do each of the   some odd operations that's", "required in a microsecond  a millionth of a second  then we're talking a", "total time which is somewhere on the order of   microseconds", "How about the search for the optimal value", "So with   items  the number of operations is going to be proportional", "to N     N  which is", "Wow      is a big number", "That's approximately", "And again  if we can do one of these operations every microsecond  a", "million operations per second  this comes out to be somewhere in the", "neighborhood of   years to do an exhaustive search involving   items", "OK", "So you're the burglar", "You have a choice of a greedy algorithm  which may not return an", "optimal value but at least you'll be done tonight", "You know  it will take you a small fraction of a second to decide what", "items to stuff in your sack  and then you're out of there", "However  if you're a very picky burglar and you want to have the", "optimal solution  is it looks like what you have to do is to go case the", "joint  go back to your house for about two centuries while you run the", "calculation about which combination of items you want to take  and then you", "can come back  assuming they're still there I suppose  and grab the optimal", "sack of items", "OK", "Well this hopefully illustrates why it is we often end up using heuristics", "for many of these combinatorial optimization problems  because", "checking out all the possible combinations is just prohibitively", "expensive when we have a very large number of objects", "So  heuristics win", "The poor burglar", "On the one hand  we've offered to spend a small fraction of a second to", "find a solution that's not optimal  or go home and spend two centuries coming", "up with the perfect solution", "Isn't there some middle ground", "Happily  the answer is yes", "There's a technique called dynamic programming  which can be used to", "speed up the searches that are often at the heart of finding solutions to", "optimization problems", "We'll look at that technique in lecture"], "jL4wZ8-RjTs": ["In this ninth lecture  we're going to look at search algorithms", "Many computational problems involve searching to find items in collections", "of data objects", "We will generalize the idea of bisection search to more generic", "binary search  where we use information to reduce the search space", "in half at each step", "We'll show that if the data is sorted  this is a very", "efficient way to find objects", "But if the data is not sorted then we have to find ways to", "transform the data set", "And we'll look at two different sorting algorithms", "Finally  we'll show that if we're going to execute multiple searches of", "a data set then the combination of sorting and binary search is a very", "powerful method"], "bFKqJNSw4zE": ["SPEAKER  We've been building up a lot of tools in our system for thinking", "about computation  thinking about algorithms  thinking about solving", "problems  fusing algorithmic and computational thinking", "And we want to now switch a little bit  because if you think about it", "everything we've done so far has really dealt with a particular", "kind of data type", "And think of the different algorithms we've seen", "We've seen exhaustive enumeration  we've seen guess and check  we've seen", "bisection  we've seen divide and conquer  all different kinds of", "algorithms that are really valuable", "But all of them have so far really been applied to just simple data", "types  primarily to numbers and occasionally to strings", "That's nice  but we're going to have problems where we actually want to", "think about structuring data in much more complex ways  gathering together", "different pieces and different organizations and being able to write", "algorithms that can manipulate those  as well", "And so for those  we're going to need more compound kinds of data types", "And we want to turn to those", "In this segment  we're going to talk about three kinds of compound data", "tuples  lists  dictionaries", "Each of them has its own strengths", "Each of them has its own pluses", "Each of them has occasion issues that you have to worry about", "So we're going to start with the simplest and work our way up", "And that means let's start with tuples", "So what's a string", "A string is an ordered sequence of characters", "Wouldn't it be nice if we could generalize the idea of a string to an", "ordered sequence of elements  but where those elements could be", "arbitrary things", "They don't just have to be characters", "They could be words  they could be numbers  they could be potentially", "even other structures", "So we'd like to do that where we can have that kind of ordered sequence and", "the elements can be  as we just said  more than just characters", "So let's look at that", "We're going to go over here and take a little version of that inside of IDLE", "And in particular  let's create something like  I'm going to say", "tuple   is going to be the numeral    the string 'two'  and the numeral", "And notice the syntax we use here", "The syntax is an open paren  a close paren  and a sequence of elements", "separated by commas", "Now  if I want to see what the value of t  is  I could print it out", "I could actually just ask for t   since I'm talking to the IDLE shell", "And you see it gives me back exactly that string", "I could make more complicated things", "I could say I want t  to be the tuple whose first element is t  and whose", "second element is the string 'four'", "OK  what does that look like", "Well  let's look at what t  prints out as", "Ah  this is a little different", "And that's actually going to be a value to us  right", "So if I think about it  t   I said  was going to be a", "tuple of two elements", "And the first of them happens to itself be a tuple", "So in fact  t  has the form of a tuple as its first element  followed by a", "string as its second element", "So there is the first element", "There is the second element", "And that's nice  because it says the elements of a tuple can themselves be", "tuples  which could have inside of them  of course  other tuples", "And we've now got an ability to start putting together more complicated", "kinds of things  which is great", "OK  so what kinds of operations can we then run on tuples", "Well  they're going to have some similarity to the things that we've", "already seen in dealing with strings", "So I now have inside of IDLE t  and t", "They're two tuples", "I can do concatenation", "If I do t    t", "huh  interesting", "Now  let's think about that", "That addition operator  we said  was overloaded", "And we know it can add together the numbers", "We know it can add together strings", "And we know it basically does concatenation", "That is  it stitches together things", "So when I do t    t   it literally gives me the elements of t  followed", "in order by the elements of t", "And you can see them there on the screen", "There is    'two'     which are the elements of t", "followed by the tuple", "'two'     and then the element 'four'", "So concatenation just stitches them together  as we would", "have seen with strings", "What else have we got", "Well  we can index", "We can go into a tuple and get out an element", "And notice the syntax here", "Given a tuple", "and there it is", "I've actually created something by adding or", "concatenating   tuples together", "I'm going to use the square bracket", "well  let's call it that  just the square parentheses", "or the square bracket", "to tell us which element we want", "So if we say  take the tuple t    t   my parens around it tell me it is a", "single tuple", "I'm going to ask for the third element", "Ah  and we can see where that make sense", "We already saw that for t    t   the zeroth element was the numeral    the", "first element was the string 'two' the second element was the numeral    the", "third element is in fact that tuple", "the thing that I stitched together asI put it in into it", "So again  indexing  just like before  starts at    and it simply walks down that ordered sequence to find the right element", "What else could we do", "What else could we do", "Well  we know  on strings  we can slice", "We get out portions of strings", "We can do the same things with tuples", "So I could take the tuple t    t", "There it is", "And I can say  give me back the slice starting from the second element", "indexing initially from", "and completing just before the fifth element", "And there it is", "And if we look up above it  you can see it skips the zeroth and first one", "and then has a second  third  and fourth", "And it stops just before it gets to the fifth element  which  of course", "we know there actually isn't one of", "Great", "So we're getting tuples having a lot of the power of strings", "but just more general", "There's one other operation that we can use", "And that is a singleton", "So what is a singleton", "Well  how do I create just a single element of a tuple or a tuple with", "just   element", "And here  I'm going to create it by saying  I'm want to make t  be string", "'five' followed by a comma  followed by a paren", "And then I can do things like saying  what's t    t    t", "And it has now added it at the end", "And the question is  why do I have this funky little comma in here", "Why don't I just say that I want to have an open paren in the 'five'", "Well  let's look at an example", "Suppose I do that with a number and I say  what's the value of this", "Oh  right", "The parens are telling me to group it together", "So it's just the number    whereas if I wanted to get a tuple with just a", "in it  by giving the comma there  annoying as it is  it tells me that", "this is a tuple whose first element is    and it has no additional elements", "And there we go", "And then  once I have the tuple  I can add it to other pieces  as I just did", "Great", "Got a set of operations that hold", "What else can we do", "Well  with strings  we could iterate over them", "We could have a loop that walked down the string  each element at a time", "We can do the same thing with tuples", "So let's look at an example", "Here's the little piece of code that's going to find the common", "divisors of n  and n", "It assumes that they're both positive integers", "And it's going to give us back a tuple containing all the common divisors", "How am I going to do that", "Well  let's look at the code", "I'm going to set up divisors initially to be   oh  look at that", "the empty tuple", "So this is telling me that divisors is a tuple that currently has no elements", "in it   that open close paren", "OK  Then I'm going to run through a loop", "I'm going to let i run from   up to the smaller of n  and n", "Actually  that extra     there makes sure I get up to all of them", "I'm going to have it run up to the smaller of the", "And then what am I going to do", "I'm basically going to say  gee  if the remainder when I divide n  by i is", "and the remainder when I divide n  by i is    then", "this is common divisor", "So I'm going to add it in", "And notice the form there", "There it is again", "I'm creating a tuple with just the element i", "And I'm using the overloaded   operator to add that to the end of the", "tuple that is what divisors currently points to", "And when I'm done  I'm going to return divisors", "Let's check it out  see what this does", "So if I go over to my little system over here and I call find divisors", "and let's run it on   and", "Yeah  very nice", "It gives me back a tuple", "And those are  if you think about it  all the common divisors of   and", "Great", "OK  so what else did I just do here", "Well  I actually did a little loop over them", "And that's what I wanted to get to", "This is simply creating the tuple by walking through a sequence of ranges", "But now let's look at the second part", "Suppose I now say  I'm going to set divs to be what I just did   find", "divisors of   and", "And we know what that is", "And now I'd like to walk down that tuple  adding up all the numbers  just", "get the sum of them", "So I'm going to set total to    no big deal", "And then  for d in divs  I'm going to add d into total", "And again  we're reminded that    says is the same as saying total   d and", "set total equal to that", "And if I do that  and I now say  what's the value of", "total  there it is", "", "OK  the key thing I want you see is right here", "This is now iterating over a tuple", "And the for loop knows how to do that", "Python's implementation basically says  if this data type is a tuple", "it's going to keep a little internal counter  starting at   and walking", "along until it gets to the length of that tuple", "And at each iteration through the loop  it is letting d  the loop", "variable  point to the value indicated by whatever that internal pointer", "points to within the tuple", "So it's going to start off with d  initially at    then    then    then", "then    then    in the little example we saw here  where divs was", "in fact  that tuple", "So what have we seen", "Generalization of strings  an ordered sequence of elements  where the", "elements can be anything   they're called tuples", "and they have many of the same properties", "We can index  we can slice  we can concatenate  we can loop over them", "all really valuable properties  which means that the algorithms we've been", "writing we might now be able to apply to these kinds of data structures"], "Zoy7t4LbAPY": ["PROFESSOR  We've been looking at the idea of exhaustive search", "And we just saw  when we want to do this on things that don't have a", "finite number of choices  real value to floating point numbers  for", "example  we've got a problem", "We need to make the step size small in terms of how many", "different things we sample", "But as we keep making it smaller  it's going to make the search take longer", "and longer", "Because if we're going to do it  we're going to put a lot of effort into", "trying to find the right answer", "So we'd really like to have a way of having things still be very efficient", "yet  find the answer we want", "And it turns out  for a lot of problems  we can do that using a", "wonderful idea called bisection search", "So what do we know", "Let's go back to the idea of trying to find the square root", "We know that the square root of x lies somewhere between   and x", "We're assuming x is positive just to make life a little easier for us", "That's a mathematical fact", "Now  what we did was we said let's start with", "Then    plus a little bit", "Then    plus   times a little bit  and then   times   times a little bit", "trying all of those examples  until we got to something that was close enough", "to the answer we wanted", "That's exhaustive", "Rather than doing that  suppose instead we say  look  we know that the", "square root of x is somewhere between   and x", "So let's just pick a guess right here in the middle", "Let's call that g", "Let's just pick the midpoint between   and x and try it", "Now  if we're lucky  the answer is close enough and then we're done", "That's unlikely", "But even if that is not the case  we have a good situation", "Even if we're not close enough  we can now ask was that guess g", "too big or too small", "Well  if g   is bigger than x  then we know that it's too big", "We know that the square root has to lie somewhere between   and g", "And that says we can now instantly just focus on this portion", "Doing that  we can  again  take the midpoint of that", "Let's call it another version of g", "A new g", "And again  we can say  is that close enough", "If not  is it too big or too small", "For example  in this case let's assume that g   is less than x", "That says g is too small  and what does that say", "It says  we know that the actual value has to lie somewhere between my new g", "and the previous g that I guessed", "And again  we can pick the midpoint and guess again", "If this works  and it does  this is really cool", "Because it says  at each stage of this bisection search I'm cutting in half", "the size of the range of values I have to look at", "We're bisecting them  which is why it's called that", "At each stage we reduce the range of values that we have to search by half", "And that is going to be really powerful", "Rather than just at each stage throwing away a little bit  we're", "cutting down the problem  a big portion  each time through", "So can we capture that idea", "The answer is  sure  and it's not that hard to do", "Again  there's some code", "It looks a little bit daunting  but it's really not as bad as you think", "What does it say", "It says  I'm going to have some value of x I'm going to start with", "OK  I'm going to pick an epsilon which is going to tell me how close I am", "and I'm going to keep track of how many guesses I did as well", "I'm going to set up  initially  a low and high value  which are to start", "with   and the value of x", "That's my range where which I want to be trying to do the computation", "My answer is initially going to be the midpoint halfway between low and high", "And then  what do I do", "I run through one of these little loops where  again  I basically say", "am I close enough", "If this is true  then I'm too far apart", "I'm not close enough", "And in that case  well  I'll print out some information that tells me where I", "currently am", "I'll change the number of guesses and I'm about to make a new guess", "And if I'm not close enough  what does it say to do", "It says  if my current answer squared is less than x  I'm too small  and I'm", "going to change the lower end to be that guess", "I'm moving up the lower end", "On the other hand  if answered squared is bigger than x  then I'm too high", "and I'm going to reduce the high down to the answer", "And I'm just going to keep doing that", "If I keep doing that I'm going to keep chunking this thing in half  and", "having done either of those two pieces I then change my", "answer to gain the midpoint", "And I do this one more time", "So I'll just keep cycling through this  cutting in half each time  the", "size of the problem until I get to something that's close enough", "We hope", "OK  let's see what happens if we do it", "Here's some code in my IDLE system that has it", "It has exactly that", "Let's do this  basically  let's start with something simple which we said", "was going to be", "And let's see what happens if we evaluate that", "Oh  look what happens", "I start off  and let's look at that  I start off with a range", "between   and", "And the answers is the midpoint", "I then  cut down the high end", "I then  cut down the high end again", "I then  cut down the low end", "I then  cut down the low end", "And you can see at each stage it's reducing the range", "And after only   guesses I get a pretty good guess for what the square", "root of   is", "It's not exact", "I happen to know it's    but in only   guesses I got it", "Remember  last time we did     guesses to get to something that", "wasn't  in fact  much better", "In fact  it wasn't even as good as this guess", "So notice how it's cutting down the problem at each stage", "All right  let's go try this other version of this  right", "", "Let's see what happens if we find  using by section first  the square", "root of that", "We see it cranking along", "Wow  in   steps  it got to something that took a million steps the last", "time around", "In   steps it gets to a pretty good approximation", "Let's try something even bigger", "Let's see what happens if we do that one", "All right", "Again  you can see if you look at these numbers how quickly", "it's zeroing in", "In only   steps  it got to the square root of a pretty big number", "So in fact  this does it really well", "What can we observe out of this", "Well  here are some things that we see", "First of all  bisection search radically reduces", "the computation time", "And this is part of that original message that it's not just having a", "fast computer", "It's being smart about how we think about solving the problem", "And in this case  being smart about how we generate the guess is going to", "be really important", "So when does this idea of bisection search work", "Well  it should work well on problems where there's a", "sort of ordering property", "Meaning  that the value of the function being solved varies", "monotonically with the input value", "Another way of saying it is here the value I'm looking for is g", "Then  it grows as g grows", "And that says that there's this nice ordering of the solutions or the", "potential solutions  and so picking a midpoint gives me a good way of", "cutting the problem in half at each stage", "We're going to come back to this idea of bisection search", "throughout the term", "It's a really powerful tool  but you can already see how dramatically it", "reduces the computational cost"], "zhKN60gDjk8": ["So far we've been building up our repertoire of Python", "expressions", "We've seen numbers and strings as primitive data objects", "We've seen assignment  the ability to", "give a name to a value", "We've seen input and output characteristics", "We've seen the ability to make comparisons  and we've added", "in looping constructs", "Things like for and while loops", "With that set of tools  they turn out to be sufficient to", "give us what we call a Turing complete language", "And what does that mean", "It says just with that set of tools  anything that's", "computable  we can compute", "So we can compute anything", "That's actually amazing", "With just that set of tools  anything that's computable  we", "can capture with a description using those sets of tools", "Sounds like we're done", "And of course we're not  and part of the reason we're not", "is the code we're able to write so far  those scripts", "that we've done lack what we call abstraction", "And let me give you some reasons of what I mean by", "that  and then what the definition of abstraction is", "For example  as you saw before  every time I want to", "use a script  I've got to reload the file", "And if I want to do it with some different parameters", "I've got to change the values of variables", "before I run that file", "Moreover  or more importantly  I can't use the same variable", "names other places in the code", "If I've got a piece of code this using x  y  and z  I've", "got to make sure that they're not accidentally getting", "changed somewhere else", "So I'm stuck with having to be very careful", "about the use of names", "And finally  imagine I've got a piece of code that's", "computing the maximum of two numbers", "I might want to use that many places", "I'm going to have to copy it throughout the code", "Doesn't sound too bad  except it gets very quickly", "cumbersome to be able to maintain that code", "Suppose I change my mind about the actual details of how I do", "that computation", "I've got to then search through the code and find all", "the places where I was doing that  and make that change", "Otherwise I'm going to mess up", "So I lack abstraction  and what we're going to do is add", "the idea of a function", "A function is going to give us a way to capture a", "computation  to wrap it up in a package and then treat that", "function as if it were a primitive", "Something provided to us by Python that we can just use", "Let's look at that", "Here's a very simple example  just to get us started", "Suppose that we want to take two numbers whose names  or", "variable names are x and y  and we want to compute the", "maximum and bind that to the name z", "Here's a very simple script that would do it", "Assuming I've got values for x and y  I just do the", "comparison", "If x is greater than y  I bind z to x", "So there's a binding there  and if not I bind z to y", "But as I already said  notice the problem here", "I'm going to have to copy this everywhere that", "I want to use it", "That's going to be a real pain", "And I can't reuse x and y  because if I did  I might", "actually change the values here  and that's", "going to be a problem", "So I want to capture this", "I keep using that word capture  let's", "see what that means", "The idea is that we want to wrap up that computation  that", "set of mechanical steps  that recipe within a particular", "scope so that we can treat that function  that", "computation as if it were a primitive", "Then I could just use it by simply calling its name  using", "the name  and I'll get back that procedure object  and", "giving some input into that function", "We'll see how to do that in a second", "But a key thing by doing this is that the internal details", "the steps inside of the computation are going to be", "hidden from the users", "They won't know what they actually are  they're going to", "just treat this like what we call a black box", "Something that we can use that satisfies a particular", "contract  but we don't need to know the details inside", "And more importantly  what happens inside won't have any", "effect on computations outside the scope of this function", "What does it look like", "Well  here's the syntax for a definition of a function", "It's got  let me in fact give you the next", "pieces of it here", "It's got a keyword  def  that tells Python I'm about to", "create a definition of the procedure", "It has a name for a function", "And I've put that here in angle braces just to say it'll", "be some particular instance", "And the name can be any legal Python name", "And then within parentheses  we're going to have a sequence", "of       or more formal", "parameters  names for variables", "And those names are going to be used in the function body", "And then we have a colon here", "That is followed by the body of the function  which is any", "sequence of legal Python expressions that's going to do", "the actual computation", "And what we'll see is that within that body  we're going", "to use the names of the formal parameters to identify the", "places where we want to use the values associated with", "those parameters", "So those very lanes are going to be used inside", "the function body", "And of course there's an indentation here just to help", "us determine the scope  or the length of the function", "procedure itself", "That's the syntax", "Let's look at an example", "Well  let me go back to my idea of taking", "the max of two numbers", "Here's a nice function definition", "I say define  and there's the name  max", "Inside of the parens here I've got two formal parameters  x", "and y  and then the body is simply a description of the", "computations I want to do", "And I'm going to compare x to y  and depending on the value", "whether x is greater than y or not  I'm either going to", "return the value of x  or return the value of y", "We'll come back to return in a second  but let's just think", "about how would we use this", "So we invoke this  or we call it  as we say  by simply using", "this sort of an expression", "We say I want to bind z to  and there's the assignment", "statement  the value that this function max gives me on these", "arguments   and", "When we do that function call  when we invoke max of   and", "we literally get the values of these expressions", "and those are easy", "In this case they're just numbers", "And given those values  we are going to locally bind x to the", "value of    y to the value of    just as if they were like", "assignment statements in a very particular scope", "And then relative to those bindings  the body expressions", "are going to be evaluated", "And you can see  then  this is going to do exactly what I did", "with my little script", "So that's cool", "Now  what about the body", "Well  I said the body can be any legal Python expressions", "And in the process  if you like  when I invoke or call a", "procedure definition  it's having bound the variable", "names to the values", "I will simply execute or evaluate each of the", "expressions of the body in turn until one", "of two things happens", "Either I run out of expressions  I get to the end", "of the body  in which case a very special value called None", "is returned  and that is the value of the computation", "And if you think about my invocation  I said I was going", "to bind z to some value", "If I get to the end of the expression and there's nothing", "returned  I'm going to just bind it to None", "Alternatively  I will keep executing instructions until I", "hit that special keyword return that we saw earlier", "And in that case  the expression immediately", "following that keyword return is evaluated  and that value", "is returned as the value of the function call", "That value becomes  if you like  the semantic value of", "calling that function", "And that suggests if you look back at my code  I'm going to", "be able to then in fact do the computation  and I'm going to", "be able to reuse it multiple times to get", "the max of two numbers", "So  to summarize this then  the sequence of events are", "when we call a function  the expressions for each parameter", "are evaluated the normal way they would be in Python", "And they are bound to the formal parameter", "names of the function", "Should be   expression for each parameter name", "We then transfer control to the first expression in the", "body of the procedure  in the body of the function  and we", "start evaluating", "And those expressions are evaluated or executed until", "either that return keyword is reached  in which case we get", "the value of the following expression and return it back", "or we run out of expressions  thereby returning None", "And after that  the implication is bound to the", "return value  and as that return value is what is passed", "out to whatever asks for it  and control transfers to the", "next piece of code", "In the next segment  we're going to look at some details", "of understanding mechanically how this happens  but there's", "the idea of a function definition"], "e7IErqC25nU": ["ERIC GRIMSON  So we've now starting to see some", "interesting examples of recursion", "In the case of Towers of Hanoi we saw an example of where the", "recursive call might involve multiple subproblems", "in that case too", "We also will see examples of recursion where it may have", "multiple base cases", "And let's look at another classic", "example  Fibonacci numbers", "The history of this is several centuries ago Leonardo of", "Pisa  also known as Fibonacci  wanted to model how quickly", "rabbits breed", "And he built a model that's not completely realistic  but", "still gives you an interesting process", "And he described it as follows", "He took a newborn  or he wanted to take  rather  a", "newborn pair of rabbits    male    female  and", "put them in a pen", "He assumed that rabbits mate at age of   month  and that", "the gestation period for a rabbit is also a month", "So after   month rabbits can mate  a month later  the", "female will produce offspring", "And in particular  he assumed that the females will always", "produce a new pair    male    female  every month from the", "second month on", "And finally he assumed that rabbits don't die", "Which is not true  but it's an interesting way to try and", "deal with it", "And the question was  how many female rabbits are there at", "the end of   year    years  however many years", "So  that was the model", "Here's how we can actually think about it", "computationally", "We want to know the number of females", "So at the end of   month  let's call it", "we've got   female", "That's what we started with", "After the second month  there's still   female  but", "she's now pregnant", "And at the third month  she's going to deliver", "So  in fact  not only is there now that female  but there's a", "second female", "pregnant", "not", "And in general  we can figure out the formulation of the", "recursive expression  if you like", "Because in general  every female alive at month n     is", "going to produce a female at month n", "It takes   months for that to happen", "Those new females that are generated at month n  can be", "added to those that were alive the previous month  because", "those are the new females", "So the total number of females at month n is the number that", "were alive at month n      because each one of them has", "produced a new offspring  plus all the ones that were alive", "at month n", "And so you can see at month   there will be", "At month   there will be", "At month", "There will be", "At month   there will be", "And now you can see we're just adding to create the next one", "At month   there will be", "At month   there will be", "And    and so on", "OK", "We don't really care whether this is a good model for", "rabbits  although you can see why Australia may be suffering", "the problems it does when   rabbits were introduced into", "their ecosystem", "But let's think about just writing code to capture it", "Description is nice and easy", "And notice here  Fibonacci has   base cases", "Base case for the zeroth month", "Base case for the first month", "That base case in both instances is", "And then the recursive case is what we just described", "OK", "And the code  nice and simple", "I'm going to add   new thing here  which is this assert", "statement right here", "So let me spend a second on that", "Here's my definition for Fibonacci", "I've got a specification", "It says assume that x is an integer and it's greater than", "or equal to", "If that's the case  I'm going to return the", "Fibonacci number of x", "Assert is something that basically takes an expression", "which is a Boolean  and in this case  it's an expression", "that has   subexpressions  both of which are Booleans", "And what assert does is it a checks to see is that", "statement true", "So here what you see we've been doing is we're saying", "given x  let's make sure that it is  in fact  an int by", "checking its type", "And let's make sure that it satisfies the condition of", "being greater than or equal to", "And if both of those are true  then the body of the procedure", "will be evaluated", "But if either of them is not  if the overall expression for", "the assert is false  it's going to stop", "and return an error", "Inside of fib  it's exactly what we'd expect", "I've got two base cases", "I happen to be checking them with just one Boolean", "combination", "Two base cases and a value to return and otherwise I'm", "returning  just like in towers  a recursive call done", "twice  I'm returning the sum of fib x", "and fib x", "OK  let's try running it", "So I'm going to go over to idle", "I have my version of fib", "And let's check", "Let's check the base cases  fib    should be", "It is", "fib    should be", "And then what did we also know", "Well  we said that fib    ought to be the", "sum of those two", "And it is", "fib    ought to be the sum of the previous two", "And it is", "fib    ought to be the sum of the previous two", "And it is", "And you can see it's doing pretty well", "And so  how many at month", "", "Gets bad fairly quickly", "Just to give an example of that  at   it jumps up", "And If I go to something like say fib      or fib", "it's climbing pretty quickly", "But there we are", "We've got a way of computing Fibonacci", "Great"], "QgDq9EieZTg": ["ERIC GRIMSON  Now  you may still be a little concerned", "I've tried to show you that  using this environment model", "we can see how the computation of a recursive function should", "do the right thing  but you may still be", "saying  wait a minute", "Does this really work", "How do we know that our recursive code will work", "And when I say will work  how do we know both that it's", "actually going to stop  and how do we know that it", "computes the value that we want it to", "So I'd like to walk you through that a little bit just", "to give you a sense of how we can reason about it", "Let's start with the iterative version", "iterMul we know terminates because b starts out initially", "positive  and each time through the loop  it", "decreases by", "And just by simple logic  if it starts out as a positive or", "non zero  non negative value as an integer  and we keep", "decreasing by one  at some point  it's going to get down", "to    which was our test case  and it's going to stop", "Great", "Now  what about recursive mul", "We can actually reason about it in a similar way", "We know that recursive mul  if it's called with b as the", "value of    stops  because there's no", "additional work to do", "The code simply said return a value", "So we know it stops  and we also know it gives us back the", "right value", "What else do we know", "Well  we know from our code that if we call recursive mul", "with an integer bigger than   as a value of b  it makes a", "recursive call with a slightly smaller version", "in fact  b", "But by exactly the reasoning that we just used here  we can", "apply the same argument to that call", "It's going to make a recursive call with a", "smaller version of b", "And because b is reducing by   each time  it started a bigger", "than    eventually we have to get to a place where it has a", "recursive call with b      which says we're going to get", "back down to that case and we're going to stop", "Great", "So we know it stops", "How do we know it does the right thing", "Well  we're going to come to that", "And to do that  I'm going to burrow with a little bit of a", "side tour a tool for mathematics", "Because in fact  what we can do is we can use the idea of", "mathematical induction to reason about code", "What's mathematical induction  say", "Well  if you haven't seen it before  here's a simple", "definition", "If we want to prove a statement  a mathematical", "statement that is indexed on the integers  that is  it's a", "statement where one of the parameters is an integer  if", "we want to show that that statement is true for all", "values of n  here's how mathematical induction works", "We're first going to prove that it's true for n's", "smallest value  which will typically be when", "n     or n", "And then we're going to prove that if that statement is true", "for an arbitrary value of n  you can show that it must be", "true when n is   bigger", "If we can prove these things  we can prove it's correct for", "small values  and we can prove that  given any value  it's", "true for the next larger value", "Then induction says we can assume it is true for all", "values of n", "That's powerful  because it's a way of helping us deduce", "that our code  if we can use it there  works all the time", "This may sound a little funny  so let's look at a very simple", "example from math", "And here's the simple example", "If I add up all the integers from       all the way up to", "n  the claim is that that is equal to n   n      all", "divided by", "That's a little statement of fact from mathematics", "But let's see how induction would actually", "let us prove that", "So if we wanted to prove it  what do we have to do", "Well  we've got to look at the base case  the simple case", "If n      what do we know", "Well  this left hand side of that equation is just    so", "that's done", "In the right hand side  I'll substitute n", "If n      that says            well that's    so", "we know it's true", "OK", "The inductive step says that we need to now assume that", "this statement is true for some value  let's call it k", "And what we need to then show is that  as a consequence  we", "can also established that it's true for k", "So we're assuming it's true for smaller versions of the", "problem  and we want to show it's for", "the next larger version", "If we can do that  then can prove it's", "true for all values", "So what do we need to do", "We need to show that this is equal to that", "OK  but this left hand side  that is just the same as", "taking this part   k", "And that part  we've assumed is true", "That was part of our assumption", "We said it's true for smaller versions", "So we know why that one is given by this definition", "So that is simply this plus that", "OK", "That's nice", "And then  I can just do a little bit of algebra", "I'm not going to do it here  but if I just do the additions", "together  by a little bit of algebra  I can show that this", "piece here becomes that piece", "Ah  and that's exactly what I wanted to prove  because this", "is just that definition where n   k", "What have I done", "All right  so  I show it's true in the simple case  and", "then I said  let's assume it's true for all", "cases up to some size", "Given that I can prove it's true for the next larger case", "by induction  I can assume that it is true for all sizes", "Great", "What does that have to do with code", "Well  the same logic applies to code", "There's my recursive mul  and let's look what we have", "In the base case  we can show that recursive mul stops  if b", "it just returns a value  and more importantly  it gives", "us the right answer", "It gives us back a", "OK  a     is just a", "And then what do we know", "In the recursive case  we can assume that recursive mul", "correctly returns an answer for problems of size", "smaller than b", "And then what do we know", "Well  by this step right here  we know that this is not only", "going to give us an answer  it's going to give us back the", "correct answer for a   b      and therefore  we can deduce", "that this will return an answer because it's just doing", "an addition  and giving us back the right answer", "So it must give us back the correct answer for", "problem size b", "And therefore  by induction  we've just shown that this", "code always stops and returns the correct answer", "And when we say always stops  stops if we give it an", "appropriate value for a and b", "We're not going to do a lot of proofs throughout this course", "but this is one nice way of seeing how thinking", "recursively actually works very well", "And we're guaranteed  if we do it properly  that it will give", "us correct answers  and it will terminate"], "J1zJNuEFw2U": ["So we're going to do one last example in this sequence", "We've been looking at approximation algorithms", "We've been looking at guess and check  exhaustive", "enumeration", "We saw when we wanted to move to floating point  we needed", "to be a little more clever  and that led us to the idea of", "bisection as a smart way of reducing the computation at", "each stage  especially when we have functions or problems", "where there's a monotonic relationship between the value", "we're looking for and the guesses we're making", "There's one other  very powerful  algorithm for doing", "approximations  due to Sir Isaac Newton  often called the", "Newton Raphson algorithm because it was found at the", "same time by Newton and by Raphson", "Here's the basic idea behind it", "We want to find the root of a polynomial", "I'll remind you a polynomial  p x   is some sequence of", "coefficients and powers  so it's a n   x to the n th power", "a n       x to the n minus first power and so on", "It's just a sequence of numbers times powers of x  and", "what we often want to do is find a value r such that p r", "is equal to", "We want to find the root  the place where  on that x axis", "that graph crosses", "Now  that sounds like a lot of math", "Let's make it a little simpler", "A simple way to think about this is if we want to define", "for example  the square root of    we just need to find", "the root of the polynomial x", "Makes sense  if we combine the value of x such that x", "is equal to    we're done because that's", "the thing we want", "Now  what Newton showed was that for things like", "polynomials  if g is an approximation to the root  the", "place where it's equal to    then g   p g    p' g  is a", "better approximation  where p' is just the derivative of p", "And if you haven't done calculus", "don't worry about it", "We'll show you in a second what that means  but this is a", "powerful tool", "Newton proved this  that given an approximation  g   p g", "p' g  is a much better approximation", "OK  so what does this have to do with things", "Well  let's look at an example  a really simple case", "Suppose our polynomial is just some coefficient c times x", "k  then its first derivative is just  cx", "And in particular  if the polynomial is just something", "simple  like x     k  then the derivative is just  x", "Why is that nice", "Well  Newton Raphson says that given a guess g for the root", "a better guess is just shown right here  is g   g     k", "all divided by  g", "And remember  we were using this form to find square", "roots  because it says if k is the value of the square root I", "want to find  then that's the polynomial I want to use", "So this little formula says here's a better way of finding", "a guess for the square root of k", "All right  let's put that together", "We can now have another way of generating guesses  which we", "can check  which turns out to be very efficient  so here's", "some code that would do it", "Again  I've got a little epsilon that tells me how", "close I want to get", "Let's assume I'm looking for the square root of", "We'll try some other examples in a second", "I'm going to give an initial guess  which", "will just be y", "It's not a very good guess  but it's", "reasonable place to go", "And look at the code", "Very crisp  very clean  very efficient", "It basically says check to see am I close enough", "Is the difference between the guess   and y less than or", "equal to the epsilon", "If it's bigger than that  I'm not close enough", "And then Newton says get a new guess by taking the old value", "of guess  taking guess        divide it by     guess  which", "is the derivative  and use that to create a", "new binding for guess", "You just keep updating", "Do that until I get close enough  and when I'm done", "just print out the result", "Nice and crisp", "What's this doing", "It's generating guesses", "There's the generation", "But it's not doing it exhaustively", "It's using this property of mathematics together  and then", "it's testing  right here  to see if I'm done", "So it's another example of a generate and test kind of", "algorithm  and let's look at what happens if we run it", "So in my IDLE  I've got just a version of that", "I'm going to do it with   to start with", "And if I evaluate this  it prints out its guesses  starts", "with a value of    and then goes to", "And you see  in just   guesses  it gets", "a pretty good answer", "Let's try a different example", "Let's try our good old example of", "Again  if I evaluate that one  you'll see again  in basically", "five steps because the first one was using   and a half", "it gets to a quite good approximation of it", "Let's try something even bigger", "I'll go back over here", "Let's do my example of   and let's evaluate that", "And if we do that", "huh", "What did it take me", "in   steps  it got to a really", "good solution", "So this is what", "This is another way of simply figuring out how to generate", "good guesses and then testing them", "So we've now seen several examples", "We've got this idea of iterative algorithms", "We're using the same piece of code over and over again", "We're using that to build up this idea of a guess and check", "method where we guess solutions and then check them", "We use a looping construct to generate the guesses  and then", "we just check and keep going", "And what have we seen", "We've seen we could do exhaustive enumeration  where", "we just do a whole bunch of trials", "We could cut down on the search in a clever way by", "simply using bisection  bisecting the range of places", "where we're looking for guesses until we get to", "something close enough", "Or for the group finding case  which it turns out to be a", "very general case  we can be really efficient by taking", "advantage of a mathematical property to very quickly cut", "down on where the solution lies", "Those are examples of iterative algorithms  and", "they're examples  in particular  of guess and check", "methods that turned out to be really powerful", "And we're going to give you a chance to explore those as we", "move through the class"], "bckOwpozezo": ["Chris Terman  Our next example comes from the world of text formatting", "where we're trying to position the words on a page to produce an", "attractive and readable layout", "Two challenges here", "First  we have to come up with a good metric for measuring the", "goodness of a layout", "And secondly  we want to structure the problem in such a way that there's a", "good possibility of overlapping subproblems as we do our search", "Compare how we choose to structure the subproblems for the layout problem", "versus how we did it for the      knapsack problem", "I think you'll find there's a lot of similarities", "Our goal in this problem is to find the optimal layout of words in a", "paragraph so as to make the result look the most pleasing", "This over here is simply the operation of a greedy algorithm  where we take", "the words as they come along  and we keep adding them to the line until we", "run out of space and the next word would cause us to go beyond the", "margin  so what we have to do is to start a new line", "So this is the result of a simple greedy layout algorithm", "People don't like this because of the large indentation here", "And in fact  there are four spaces here at the end of this line", "And that's considered to look ugly", "They would much prefer a layout that looks like this  where the right", "margin is kept as even as possible", "In this case  that's achieved by having two spaces at", "the end of each line", "So this is what we would like to achieve if possible", "And the way that was reduced to an algorithm", "and this is following the example of Don Knuth and his tech layout language", "is we simply compute the number of spaces at the end of each line", "We're going to actually omit the last line from this calculation  because we", "don't mind if the paragraph has extra spaces on its last line", "So we're going to omit the last line", "But otherwise  what we're going to do is to compute the number of spaces in", "each line  take the cube of that result  and sum it up to compute the", "badness of a particular layout", "And we're trying to find the layout that has the", "minimum amount of badness", "So in this case  with the four spaces at the end of the second line  we end", "up with a badness of   cubed  or", "In the better example  over here we see we have basically two spaces at", "the end of two lines", "So the total badness is", "And so  according to the badness measure  this layout is to be much", "preferred to the original greedy layout", "So how do we divide the line breaks problem into subproblems", "Well  here's our formulation", "We're going to define formula called lineBreaks  which  given a list of", "words  a starting column   so initially that will be zero  because", "we're starting on the first column of the first line", "and a maximum width  which is the total width in the previous example", "that was   columns", "that we want the paragraph to be laid out with  is going to return the", "actual paragraph", "So this is a string  which represents the optimal laid out paragraph", "And this is the cost of the badness", "So this is what we're trying to minimize here", "So how do we break an initial problem into subproblems", "It goes as follows", "What we do is we consider taking the first word from the list and basically", "saying  look  there's no line break after this word", "So what we're going to do is to lay out the rest of the list  but we're", "going to start after the first word", "So the remaining words will start on the same line as the current word", "except the starting column will be moved over by the width", "of the first word", "Plus a   that corresponds to the spaces between the first word and the", "rest of the words", "So the subproblem is  please lay out all the rest of the word list  but", "leave room in the current line for the current word", "And when we get back  we'll simply modify the string that represents the", "paragraph that's been laid out to include us at the beginning of the", "first line of that paragraph", "And then  as we return up  more words will accumulate on each line", "So that's the first alternative", "The second alternative is to say  look  maybe what we'll do is to put a", "new line after the first word in the list", "In other words  the first word in the list will actually be the end of the", "current line", "So laying out the remaining words will basically start on a new line", "So the column that we're going to ask for all the rest of the words to be", "laid out on  the starting column  will be starting at zero", "OK", "And so again  we have the subproblem", "And then  when we get back the answer for the subproblem  we'll go off and", "add our word at the beginning of that list  but instead of separating it", "from the remaining words by a space  we're going to make sure that the", "remaining words start on a new line", "So we'll put in this new line character here", "And since our current word is at the end of a line in the paragraph  we'll", "go off and compute the cost  now  and add that to the", "total cost of the paragraph", "So what we do is we go through the entire word list until we get to the", "end  and then we're slowly building the paragraph back up  computing the", "cost every time we run across the end of a new line", "The lecture code includes an implementation of the line breaks", "algorithm along the lines we just discussed", "There are two cases where we terminate the recursion", "One is when we reach the end of the paragraph  there's no more", "words to lay out", "And the other is if the word that we've just placed on the line actually", "go goes past the end", "In that case  we want to return an infinite cost for this alternative", "because it's illegal for a word to go past the margin", "Otherwise  we've implemented the two alternatives just", "as described before", "one where the remaining words are laid out on the same line as the current", "word  and the other in which the remaining words are laid", "out on a new line", "We simply choose the least costly of the alternatives to return as the desk", "layout for the word list  including the first word", "Just for comparison  we've included a definition of a greedy layout", "algorithm  so we can see what sort of badness it computes  and hopefully our", "layout algorithm will do better", "And we've included a couple test cases", "One is the short word list that we used at the beginning of this segment", "And the other is a longer statement involving a piece of", "the Gettysburg Address", "Notice we're doing an exhaustive search of where to place the new", "lines  and we would anticipate that with this long a list  that the", "recursive search   the exhaustive search   will in fact run for a very", "very long time", "Let's give it a whirl", "Let's start by testing this on our short list", "So we're going to test breaks  and we're going to use the original little", "five or six word paragraph  and we're going to lay that out in", "a width of   columns", "And you can see that our optimal layout did achieve a cost of", "And the greedy layout had the cost of    just as we computed", "on the first slide", "Now  let's try our longer example", "So this is with the second word list  the Gettysburg Address", "or the first couple paragraphs of the Gettysburg Address", "Let's try it with a width of", "And in fact  you can see that it's not going to return  because it's off", "trying that optimal layout", "And it's going to have to work for a very long time  because the exhaustive", "search  or trying every possible combination of line breaks  is", "essentially computationally intractable", "So I'm going to stop that", "And you can see  I was really deep in the recursion", "And then  what I'm going to do now  is go off and memoize line breaks", "So  memoize   So this is the advantage of having that", "general purpose function", "We don't have to rewrite any of our code", "We're just going to apply our general purpose technique for dealing with", "overlapping subproblems  was to use our little cache of previously", "computed answers", "So now  if we do that  and we test it now", "again  using the long list with the    we can see that we get our answer", "right away", "The line breaks had a total cost of", "And you can see the margin here is as smooth as it felt it could make it", "The greedy breaks had a cost of", "And the real difference here occurs on this line  where we can see that after", "the word great  there's a large indent because of  battlefield", "being such a long word", "And that's what caused this cost to go through the roof", "So this is yet another example of a implementation where there must be a", "large number of overlapping subproblems", "And it's interesting to think about why that is"], "2Y5CrREsJ-4": ["ERIC GRIMSON  OK  we're almost ready to start getting our", "computer to do things for us", "As we've said  we want to take that idea of computational", "thinking  taking a problem and breaking it down into a", "sequence of mechanical steps that will let us deduce", "solutions to that problem", "And we want to be able to take that description and somehow", "convert it into a form that the computer can do", "the work for us", "That says we need a way of describing those sequences of", "steps  and that's where the programming language comes in", "Programming language is going to define both the syntax and", "semantics that we need to translate our computational", "ideas into mechanical steps", "Syntax  I'll remind you  says how we put together legal", "expressions", "Semantics says  how do we deduce the meanings associated", "with those expressions  which is going to let us solve the", "problems that we want", "We're almost ready to start talking about a programming", "language  but we need to make one more choice", "And that choice comes down to the kind", "of programming language", "One way to think about this is  no matter which language", "we use  the interaction with the computer will all be", "roughly the same", "We're going to take an input and", "provide it to the computer", "That's what we call the source code", "That input is then going to go through some kind of", "computational process", "And when we're done  we'd like to get a result printed out or", "returned by the computer", "And right here is where that computational process is going", "to take place", "And we have some choices here in terms of how the computer", "actually deals with taking our input and", "reducing it to an output", "And let's look at what those choices might say", "One choice is that we can use what's called a low level", "programming language", "Low level says that the instructions we type in or", "that we enter into the computer are very similar to", "the internal control unit we saw last time", "Those instructions might be at the level of saying  move data", "from one location of memory to another  or execute a simple", "ALU  or arithmetic logic unit operation  like", "add  subtract  compare", "It might also involve jumping to a new point in the sequence", "of instructions based on that comparison", "But the programming would be done in a very low level", "Once you make that decision to use this kind of a programming", "language  then the stages within the computer are pretty", "straightforward", "There is a process called a checker  which takes that low", "level code and just confirms that the syntax is correct and", "that the static semantics are correct", "And then  it passes the sequence of instructions on", "through a process called the interpreter that simply", "follows that sequence  much as we saw last time  ending up", "with some output that gets printed back out to us", "So on a low level language  we're programming  basically", "at the level of the machine", "That's one option", "There's a second option  though  which is to use what's", "called a high level language", "And a high level language uses more abstract kinds of terms", "We might want to talk about having the computer think", "about  invert a matrix  compute a function  compare", "two complex data structures", "We'd like to be able to program  if you'd like  at the", "level of thinking about higher kinds of abstractions", "Now here  again  we've got a choice", "In a compiled language  those abstractions are then first", "checked  as they did before  but then converted back into", "low level code", "So there is a special thing  or special process  inside the", "computer called a compiler that takes the checked", "sequence of instructions and reduces or converts them back", "down to those basic computer instructions that we know we", "need and those are then run through the interpreter in", "order to execute the actual process", "So this is certainly one way to do it  a compiled language", "There's an alternative", "And the alternative is  again  to have a high level language", "run it through the checker as before", "But in an interpreted language  there's a special", "program that converts that source code to an internal", "data structure and then sequentially converts each", "step into a low machine instructions and executions", "That says we're going to  one instruction at a time  do the", "conversion and execution", "And in this case  this is the kind of like", "you're going to use", "In this course  we're going to use Python  which belongs to", "this class of interpreted programming languages", "Now  you might say  so what are the choices", "What are the tradeoffs here", "And there are a couple of tradeoffs", "In a compiled language  the code typically is faster", "because we do all the work ahead of time  through the", "compiler  to convert our instructions into the low", "level machine instructions", "So we can make them very efficient  which means they'll", "run faster", "But one of the challenges is if we have a bug or an error", "in our code  when the compiled code hits that error  it can", "often be difficult to figure out what caused it", "Because we're way down in the weeds of those compiled", "instructions and figuring out what corresponding point in", "our actual instructions led to that error can be a challenge", "In an interpreted language  it can be a little slower  not", "badly  but a little slower  because we're doing the", "conversion on the fly  one instruction at a time", "On the other hand  when we do hit an error or a bug  it is", "usually easier to determine what caused that error because", "we know exactly at what point in our code we were at when", "that error occurred", "Again  there are tradeoffs here", "Different people like", "different versions of languages", "For us  we're going to use Python  which has this", "property of being an interpretive language"], "AU66NP1kQm0": ["Eric Grimson  All right  we want to measure complexity", "We're going to use this random access machine model  which says we're going", "to count basic steps", "And we want to measure this in the worst case", "And we want to measure it basically as a function of the size of the problem", "So what we need is a formal way to talk about the relationship between", "the running time and the size of the input", "And as we suggested  what we're mostly interested in is what happens as the", "size of the inputs gets very large  as it approaches infinity", "So let's look at an example of how we might capture that", "a little more formally", "And in particular  let's look at a little example", "I've written a function that's got   loops in it", "I'm first going to loop for i from   up to", "And I'm going to set answer equal to i", "It's a boring thing to do  but because I want to do something like that  I'm", "going to do it", "Then I'm going to loop for i from   up to x     for whatever the input x is", "And I'm going to just increase the answer by one", "And then  finally  I'm going to have a nested loop", "I'm going to loop for i from   up to x", "And for each version of i  I'm going to loop for j from   up to x", "And I'm going to set answer to increase by", "Not a big deal", "What I want to know  though  is what amount of time does this take", "And ignoring the issues of the overhead  if you like  of running the", "for loops  you can see that in this first loop here  there are going to be", "steps  no matter what x is  because I'm doing it     times", "For this second loop  there are going to be x steps  depending on what the", "input x is", "And for this final loop  well  I'm going to do this inner loop x times", "And I'm going to do that another x times", "So I'm going to do x squared things", "So I've got an expression that basically says  I've got", "plus x plus", "And I've got a  x squared there", "The   is  I guess  if I really think about it  I'm doing   steps here", "And I should actually have a   there  because I'm really doing   steps", "there  as well", "All right  so I've got        x    x   if each of these things is a", "basic operation", "OK  with that  let's think about this", "Again  I'm going to change this slightly", "That should really be  x", "I've got        x    x", "So let's think about x", "If x is small  the constant term dominates", "This term is really the big one", "It's going to be  if x is    then     out of the  basically", "and actually  it should be", "steps are in the first loop", "But still  almost all of it's done in the first loop", "On the other hand  if x is large  then this term dominates", "So for example  if x is a million  then the first loop takes a tiny  tiny", "fraction of the time", "The second loop takes only a tiny fraction of the time  because we've", "got a billion in summed operations that we're doing here", "And you can see that  in fact  in this case  all of this is", "dominated by this term", "We really only need to consider  when we look at code then  that nested", "loop  the quadratic component", "And does it really matter if this part takes  x   steps as opposed", "to  say  x   steps", "A little bit  but not really", "In our example  if our computer executes   million steps per second", "then the difference might go from five and a half hours down to two and a", "quarter hours", "So the   does matter in terms of practical time", "But on the other hand  if we could find a linear algorithm here", "something that varied with x  not with x    then this thing would run in a", "fraction of a second", "And so again  it goes back to saying those multiplicative factors probably", "are not crucial", "It's really this order of growth that is the most important thing that we", "want to deal with", "So what we're saying is we want to use asymptotic complexity", "And what does it mean", "We're going to describe the running time in terms of the", "number of basic steps", "If the running time is a sum of multiple terms because of multiple", "components to the code  we're going to keep the one with the", "largest growth rate", "And if that remaining term is a product  we're going to drop any", "multiplicative constants", "And so here's where the asymptotic portion comes in", "We're worrying about it as the problem size goes to infinity", "That's really what we're concerned about here", "The notation we'll use", "we borrow from theoretical computer science   it's called big O notation", "It comes from the Greek letter Omicron  which Donald Knuth picked", "when he was measuring these kinds of things", "And we'll use big O as a way to give an upper bound on the asymptotic", "growth of a function", "What we're going to do next is look at some examples of the different kinds", "of asymptotic growths that we have", "And these capture  if you like  different classes of", "complexity of functions"], "Zi3q2FB1fDo": ["JOHN GUTTAG  Hello This is the fourth and last segment on random walks", "We ended the last segment with the observation that the distance from the", "origin seems to grow with the number of steps but that we didn't have any", "good intuition about quite how fast", "I want to start today's segment by drawing a plot that will give us some", "intuition about that", "We look over here at the code  we will see that I've replaced drunkTest by", "something called drunkTestP", "This is essentially the same as drunkTest  except  rather than", "printing something on the screen  I'm producing a plot", "Also  to simplify the plot  I'm ignoring the maximum and minimum", "distances  and only plotting the mean for each trial", "Let's run it and see what we get", "As expected  we can see that the distance does grow fairly", "significantly with a number of steps", "Now if we stare at it  maybe we can get some intuition", "Let's look at this one point way out here in the upper right", "We see that's almost   steps away and with a total of     taken", "So maybe  just maybe  there's a relationship between the square root", "of the number of steps and the distance", "Let's write some code to see whether that seems to be true", "So now we can look at drunkTestP", "It's like drunkTestP  except in addition to plotting the distances", "I'm going to just plot the square root", "So we can tell them apart  I'm going to put the distance on a blue solid", "line  and the square root is going to be on a green dashed line", "I'm going to use appropriate labels", "And then produce a legend so that we'll be able to look at the graph and", "see what it means", "Let's run it  see what we get now when we run drunkTestP", "Sure enough  the two of them seem to track", "They're not identical  but they're pretty close", "It does appear that the mean distance is just consistently a little bit less", "than the square root", "We could think that perhaps that's a result of just randomness", "But I've done this a lot of times and it seems to be pretty consistent", "But I'll leave it for now as an exercise to the student to try and", "think about why you might have this small but consistent difference", "between the mean distance and the square root", "Instead of dwelling on that  what I want to do is go back to something we", "started with when we first began to put this simulation together", "You might recall that rather than just implementing a drunk  we implemented", "two classes  drunk and usual drunk", "We did that so that we could later experiment with", "different kinds of drunks", "And that's what I want to do now", "So here's the usual drunk  the class we've been simulating thus far", "I want to look at a small variant  somebody call the cold drunk", "This is a drunk that hates to be cold", "And when forced or when randomly taking a step North  rather than", "taking a full step  a   unit", "he's a little bit reluctant and so he only takes     units", "Not quite a full step northward", "Obviously working in the Northern Hemisphere  I guess  where North is", "where it's colder suppose if we wanted to do it in the Southern Hemisphere", "we'd have to change it", "Now  I want you to think for a minute about how much", "difference this should make", "Is the difference going to be small  because after all  the difference", "between     and     is not great", "And what direction is it going to be in", "Is the distance going to be larger or smaller", "You might think the distance will be smaller  because after all  a quarter", "of the time the drunk is taking a slightly smaller step", "Or you might think it would be larger  because the southward steps are not", "fully canceled by the northward steps", "It's not obvious to me  but that's why we can run a simulation to find out", "But before we do  I want to look at one other kind of", "drunk  a different subclass", "We are calling this an EDrunk  for Euclidian drunk", "You may recall  that in our first implementation  the usual drunk  we", "simplified things by saying the drunk moved either East", "West  North  or South", "I now want to remove that simplification and allow the drunk to", "say  move on a diagonal", "To do that  we're going to use a function we haven't looked at before", "called random random", "That's probably the most important function in the random class", "It's a function upon which all the others are built  in fact", "And what that does is it returns a random number in the range     to", "So we'll first get deltaX in that region", "Now notice that this will always be a positive number", "And we surely don't want our drunk to always be wandering eastward", "So we'll take another use of random random", "And we'll say  if it's less than      then we'll make deltaX", "equal to minus deltaX", "And you might think  oh this is introducing a little bias  because I", "said less than  and suppose it hits", "Well the truth is  it will almost never be     because the number of", "floats in this range is so large", "It's highly improbable you'd hit any particular one of them", "Then we'll do the same thing over here for y", "And so now  we've got new values and then we'll return the", "tuple deltaX  deltaY", "almost ready to run a simulation  but not quite", "Why not", "Well  let's go back and look at what simWalks did", "You'll notice that I did something that perhaps I shouldn't have", "I hard coded usual drunk in this code", "So that in fact  I have no way to experiment with any drunk other than", "the usual drunk", "Probably not good programming  and fortunately something", "that's easy to fix", "So let's now go over and look at the code where I fix it", "So over here  we see a modified version of simWalks", "I've added an extra parameter  dClass  short for drunk class", "And now when I instantiate it  rather than using the constant usual drunk  I", "use whatever value this parameter has", "Once again  we see the great leverage we get in Python from the fact that", "everything  including classes  are first class objects so we can use them", "in a uniform way", "And then I've made a modification to drunkTest as well", "Let's look at it over here in the PowerPoint so I can draw on it", "The interesting part is I've added this loop", "I'm going to iterate over the three classes of drunk    usual    cold", "and  e   For each class  I'll start with meanDistance is equal to the", "empty list", "And then I'll run the simulation as before  getting the average distance", "of a walk for that kind of drunk", "And then  still within this loop  I will produce a plot for the drunk", "And I'll use as a label for the plot  the name of the class", "So we see yet another underbar underbar operator", "DClass   name will return the name of the class", "And that will allow me to have a legend that tells us which plots", "correspond to which class", "And then there's some boring code afterwards that just", "produces the plot", "We won't bother with that", "All right  let's come over and run it  and see what we get", "Wow", "This might not be what you expected", "You can see here  the top line   the green line   is the cold drunk", "He seems to be moving considerably further than the other two  despite", "the fact that a quarter of the time he's taking a shorter step", "This is the usual drunk behaving as we saw last time", "And then the E drunk seems to be moving kind of like the usual drunk", "but not really as far", "And in fact  the distance seems to be getting greater", "Should we believe that these results are dispositive  or", "are they just fluke", "There is randomness here  they could just be a fluke", "Well over the next few weeks  we'll look at mathematically sound ways to", "answer this question", "But for now  I'm just going to run another trial and see if we get kind", "of the same answer", "So I'll run another trial of", "pretty much the same thing", "The distances are a little bit different  but the trend is almost", "identical to what we saw before", "Now you can go back and ask  is this what you expected", "If not  think about why not", "If you think hard enough  you'll be able to come up with some theory", "maybe a good one  maybe not a good one", "But I think this would be a really nice topic for", "discussion on the  x forum", "Why do these plots look the way they do", "OK", "Let's wrap up this lecture by thinking about what I want you to carry away", "from this segment", "So the first thing is that starting with abstract data", "types makes life easier", "Because we had locations and drunks and feels  we could  in a very", "straightforward way  write the simulation itself", "We saw that subclassing is useful", "Because we started with the abstract class drunk  we could then create", "several subclasses that would let us explore the behavior of different", "kinds of drunks", "We saw that once the basic structure is in place  we can try different", "experiments", "We can play with different length walks  with different kinds", "of drunks  et cetera", "And finally  we saw that we can use plotting to get insight into trends", "how things change with respect to the number of steps", "OK", "Thank you"], "CIld2wLmjXI": ["ERIC GRIMSON  We've now seen a bunch of examples of recursive functions", "Seen some of the power of them", "We keep coming back to this idea of break a problem down into smaller", "versions of the same problem", "Really great way of trying to tackle a problem", "We're going to do one last thing", "And that goes back to when we ran fib", "When we ran Fibonacci  we might have noticed that as we made the arguments", "larger and larger  it slowed down", "Which is not surprising", "It's calling itself multiple times", "But suppose we wanted to actually count the number of times that fib", "called itself recursively", "Multiple ways of doing it  but one of the ways in which we can do this is to", "use what's called a global variable", "What does that mean", "Well  so far  all the functions have communicated with their environment", "strictly through their parameters and their return values", "If it's when we call a new function  it creates an environment with some", "parameters passed in", "It does some work internally  and it returns a value as the", "value of its response", "We can make a variable or declare a variable to be global", "And what this means is that the name is defined at the outermost scope of", "the program  rather than the scope of the function within which it appears", "It's global because it's going to appear up at the top level", "It's going to be part of what we want to deal with when we're interacting", "with  for example  the Python shell", "As it notes here  this can be a bit dangerous", "And we'll talk about that in a second", "But let's just look at how we might do this", "So  here's the idea", "We're going to call this a metered version of Fibonacci", "It has much the same form as before", "There is the recursive call  just as we had before  using a", "different name  of course", "But we do two things", "Right here  we make a declaration that says the variable numCalls is global", "That means it's going to be bound way up at the top  at the highest level", "environment", "Inside of fibMetered  we're going to actually change numCalls", "This says every time we call fibMetered  we're going to increase", "that global variable by one", "Great", "So that's going to count how many times it's called", "We can test this with a little test script here", "I'm going to run fib for some number", "I'm going to have i roll over from   up to n", "And notice what I'm going to do", "Each time I go through the loop  I'm going to again say numCalls is a", "global variable", "It's defined up in that top level place", "And I'm going to set it to zero", "That is going to have the effect of in the global environment changing", "numCalls to zero", "And then I'm going to actually do some work and print up some results", "I'm going to do the work of figuring out what Fibonacci is", "The call to fibMeter will  every time it calls it  change numCalls by one", "And when I'm done and when it returns  I can print out how many times was", "that actually called", "OK", "Let's see what happens if we do this", "I'm going to go over and start up over here inside of my IDLE environment", "And if I load that in  let's actually do a test on fib", "And this put means we're going to do up to five", "And it now tells us  oh cool", "When I call a fib on zero  the answer is one", "It was called one time", "Makes sense", "When I call fib on one  the answer is one", "It was also called one time", "We knew those were the base cases", "And then you can see the responses as we move up", "So let's make this a little bit bigger", "Let's do testFib", "oh  let's make it up to", "Then we'll see what it does here", "You see it's moving pretty quickly", "It's starting to slow down a little bit", "But we're actually now calling testFib in that metered form", "And it's showing us how many times it's called", "Also notice  if you look at the numbers  it's clear that we're", "resetting numCalls each time around", "And that  if we go back to our slides  came from right here", "Each time through the loop and testFib  we reset numCalls to zero up", "in that top environment", "So that when we go ahead and call fibMetered  it is starting from zero", "and doing a count for each time it calls recursively within itself", "A nice tool", "A tool that's really kind of handy  and something that we'll come back to", "because it is a way of being able to keep track of some things", "But I want to finish with a couple of comments", "First one is use it with care", "Putting a variable as a global variable is destroying the", "locality of the code", "One of the beautiful pieces about recursive code is all of the function", "call contains within it all the information it needs", "The parameter's passed in  it does all the work internally  locally  and it", "simply returns a value back out", "That is an elegant way of being able to not only think about what's going", "on  but to be able to deal with the code", "Once we have global variables  they can be modified or read in a wide", "range of places", "And that's going to make it really easy to break the locality  especially", "if someplace outside of the function we're dealing with makes a change for", "global variable and that affects the computation inside that local call to", "a procedure", "This is going to allow the potential for introducing bugs", "And most computer scientists will be very strong about arguing that one", "should not use global variables if at all possible", "It is much better to encapsulate the computation locally", "But here's an example where we're metering things  where having a global", "variable can be really handy"], "UreW8x38Z2Y": ["PROFESSOR  Hi", "The first thing I want to talk about is something the statisticians refer", "to as data enhancement", "That's a fancy way of saying people read more into data than the data", "actually implies", "Especially when data is viewed out of context", "Consider the following  on April       CNN  a US television network", "broadcast the alarming fact that Mexican health officials suspect that", "the swine flu outbreak has caused more than   deaths and", "roughly     illnesses", "That's pretty scary stuff  until you put it into context", "So let's ask the question  how many people die  not from the swine flu", "but from the ordinary garden variety seasonal flu in the US", "Do you think it's", "Every year", "Maybe as many as", "How about", "Maybe", "Maybe", "In fact  it's", "And that     puts this   in a rather different perspective", "Here's another interesting example", "An often  quoted  and indeed  accurate statistic  is that most automobile", "accidents happen within   miles of home", "Well  it's true", "But so what", "Most driving is done within   miles of home", "And besides  what does home even mean in this context", "The statistic is computed  as it happens  using the registration of the", "vehicle as the home", "That suggests that maybe you could reduce the probability of getting into", "an accident by registering your car in a place where you're", "never going to be", "Let's look at a more relevant example", "Another thing that you should be wary about is extrapolating from data", "It's not always a bad thing", "In fact  we spent a lot of time earlier in the term talking about", "extrapolation", "Fundamentally  we use polyfit to fit curves to data  and then used it to", "make predictions about data points we hadn't seen", "That's clearly an example of extrapolation", "On the other hand  you may remember that we also showed the flaws in", "extrapolation  when we looked at a spring  and showed what happened when", "we use our fit to extrapolate how the spring might behave", "beyond its elastic limit", "Extrapolation should be done only when you have a sound theoretical", "justification for doing so", "And indeed  I'm always very cautious when I see straight line", "extrapolations", "Let's look at an example", "Here are some actual data about the growth of the internet", "in the United States", "And you'll notice  for a period of time  it actually grew in what was", "pretty much a straight line", "From    to", "This was during the period from   to", "Let's see what happens if we use this to extrapolate beyond", "We'll take   these were the data points we looked at earlier  and we'll", "extrapolate to  well  today", "", "What do we see", "We see that nearly    of the people in the US are", "currently using the internet", "It really doesn't seem likely", "There's one more statistical fallacy that I want to discuss", "And that goes by the name   The Texas sharpshooter fallacy   Any of you", "lived in Texas", "It did not acquire this name because people in Texas are believed to be", "particularly vulnerable to fallacies", "But it's that there are an awful lot of people with guns in Texas", "OK", "Imagine that you're driving down a country road in Texas  such as this", "beautiful road", "And you see a barn that has four targets painted on it  and a bullet", "hole  right in the center of each target", "Well  you stop  the owner of the barn comes out  and you would tell him you", "really admire his accuracy", "Yes sir   says the owner   I never miss   A few minutes later  his wife", "comes out and says   That's true", "There ain't a man in the state of Texas who's more accurate with a", "paintbrush   What does she mean", "Well  as it turns out  what the farmer did is he was aiming for the", "middle of this wall", "But in fact  he's a terrible shot and the shots went all over the place", "Didn't worry him", "He went out and got his paintbrush  painted a target around each  creating", "the illusion of being a sharpshooter", "Well  you might think this is silly  and no one would", "ever do it in practice", "But in fact  it unfortunately happens all the time", "A classic of the genre appeared in   in a paper written by researchers", "at the Royal Cornhill Hospital in Aberdeen", "They reported that they had discovered the following astonishing fact", "Anorexic women are most likely to have been born in the", "spring  or early summer", "Between March and June  there were    more than on average", "And    more in the month of June itself", "Well  let's look at that worrisome statistic for women born in June", "The team studied   women who had been diagnosed as anorexic", "If you assumed that they were evenly distributed over the year  that would", "tell you that the expected number per month is   over    which is", "approximately equal to", "Well  if    more were born in June  that would tell us that they must have", "seen   of their women born in June thereabouts", "Let's write a small program to see how likely it is that this", "happened purely by chance", "Here's the code  June probability", "As always with our simulations  we have a number of trials", "And we're going to look at the number of times we get    or more  women", "born in the month of June", "So we'll look at   women", "We'll choose a random number from   to", "If it's    the month of June  we'll increment the number of women born in", "June by    and if at the end of the trial it was at least    then we'll", "increment june  by    and when we're done  we'll compute the probability as", "usual by dividing by the number of trials  and print the result", "Let's see what happens if we run it", "Come over here  we'll look at the code", "And we'll try juneProb  say     trials", "Well  it looks like the probability of   births in June was a little bit", "more than", "Let's try it again", "Just to see how consistent it might be", "Still a little bit more than", "One more time  just for good luck", "A little bit less than", "But we can assume that  if it happened purely by random  the number", "would be about", "And that would say that with more than    confidence  they really do have an", "interesting result", "So perhaps these researchers were onto something", "Or  perhaps not", "What's wrong with the logic is the following", "You have to think about what the initial hypothesis of the experiment", "was  and the details of the experiment", "Had they started with the hypothesis that June was a month in which more", "anorexics were born  then the test I just showed you would've been the", "appropriate test for looking at the statistical", "significance of their results", "But that's not what they did", "What they did is ran an experiment  looked at   women  found the month", "with the most births  which happened to be June  drew a bullseye around it", "and then checked the significance", "So what they should have done is not tested the probability of having   or", "more births in June  but   or more in any month", "Let's look at what happens if we run code to do that", "Here is the code that does that", "Not much more complicated than the code we just looked at", "I'm going to check all the months  find the month with the most births", "and then ask   Does that month have at least   births in it   And compute", "that probability", "So now  let's try that", "We'll go anyProb of", "Oooh", "That's a lot more than", "Try it again", "And again a third time  for good luck", "Well  here it looks like we're somewhere in the neighborhood of", "That really does not pass the statistical significance test", "And so we can assume that they really don't have a solid result  because", "once again  somebody has fallen prey to the Texas sharpshooter fallacy", "To reiterate what I said before  the important point here is that the", "statistical significance of a result depends both upon how the data was", "derived and how the result was derived", "And indeed  in this case  it depended upon the initial hypothesis", "The moral is you can't look at the data in isolation without", "understanding the experiment that generated it", "OK", "I could go on and on in this vein", "There are just so many entertaining ways to abuse statistics", "But by now  you probably got the message   maybe you got", "it a long time ago", "The message is it's just it's just as easy to lie with numbers as it is to", "lie with words", "When you look at statistics  make sure that you understand what is actually", "being measured  and how those statistically significant results were", "computed  before you jump to any conclusions", "Thank you"], "BvooIjkNJ24": ["ERIC GRIMSON  OK  we're almost ready to start getting our", "computer to do things for us", "As we've said  we want to take that idea of computational", "thinking  taking a problem and breaking it down into a", "sequence of mechanical steps that will let us deduce", "solutions to that problem", "And we want to be able to take that description and somehow", "convert it into a form that the computer can do", "the work for us", "That says we need a way of describing those sequences of", "steps  and that's where the programming language comes in", "Programming language is going to define both the syntax and", "semantics that we need to translate our computational", "ideas into mechanical steps", "Syntax  I'll remind you  says how we put together legal", "expressions", "Semantics says  how do we deduce the meanings associated", "with those expressions  which is going to let us solve the", "problems that we want", "We're almost ready to start talking about a programming", "language  but we need to make one more choice", "And that choice comes down to the kind", "of programming language", "One way to think about this is  no matter which language", "we use  the interaction with the computer will all be", "roughly the same", "We're going to take an input and", "provide it to the computer", "That's what we call the source code", "That input is then going to go through some kind of", "computational process", "And when we're done  we'd like to get a result printed out or", "returned by the computer", "And right here is where that computational process is going", "to take place", "And we have some choices here in terms of how the computer", "actually deals with taking our input and", "reducing it to an output", "And let's look at what those choices might say", "One choice is that we can use what's called a low level", "programming language", "Low level says that the instructions we type in or", "that we enter into the computer are very similar to", "the internal control unit we saw last time", "Those instructions might be at the level of saying  move data", "from one location of memory to another  or execute a simple", "ALU  or arithmetic logic unit operation  like", "add  subtract  compare", "It might also involve jumping to a new point in the sequence", "of instructions based on that comparison", "But the programming would be done in a very low level", "Once you make that decision to use this kind of a programming", "language  then the stages within the computer are pretty", "straightforward", "There is a process called a checker  which takes that low", "level code and just confirms that the syntax is correct and", "that the static semantics are correct", "And then  it passes the sequence of instructions on", "through a process called the interpreter that simply", "follows that sequence  much as we saw last time  ending up", "with some output that gets printed back out to us", "So on a low level language  we're programming  basically", "at the level of the machine", "That's one option", "There's a second option  though  which is to use what's", "called a high level language", "And a high level language uses more abstract kinds of terms", "We might want to talk about having the computer think", "about  invert a matrix  compute a function  compare", "two complex data structures", "We'd like to be able to program  if you'd like  at the", "level of thinking about higher kinds of abstractions", "Now here  again  we've got a choice", "In a compiled language  those abstractions are then first", "checked  as they did before  but then converted back into", "low level code", "So there is a special thing  or special process  inside the", "computer called a compiler that takes the checked", "sequence of instructions and reduces or converts them back", "down to those basic computer instructions that we know we", "need and those are then run through the interpreter in", "order to execute the actual process", "So this is certainly one way to do it  a compiled language", "There's an alternative", "And the alternative is  again  to have a high level language", "run it through the checker as before", "But in an interpreted language  there's a special", "program that converts that source code to an internal", "data structure and then sequentially converts each", "step into a low machine instructions and executions", "That says we're going to  one instruction at a time  do the", "conversion and execution", "And in this case  this is the kind of like", "you're going to use", "In this course  we're going to use Python  which belongs to", "this class of interpreted programming languages", "Now  you might say  so what are the choices", "What are the tradeoffs here", "And there are a couple of tradeoffs", "In a compiled language  the code typically is faster", "because we do all the work ahead of time  through the", "compiler  to convert our instructions into the low", "level machine instructions", "So we can make them very efficient  which means they'll", "run faster", "But one of the challenges is if we have a bug or an error", "in our code  when the compiled code hits that error  it can", "often be difficult to figure out what caused it", "Because we're way down in the weeds of those compiled", "instructions and figuring out what corresponding point in", "our actual instructions led to that error can be a challenge", "In an interpreted language  it can be a little slower  not", "badly  but a little slower  because we're doing the", "conversion on the fly  one instruction at a time", "On the other hand  when we do hit an error or a bug  it is", "usually easier to determine what caused that error because", "we know exactly at what point in our code we were at when", "that error occurred", "Again  there are tradeoffs here", "Different people like", "different versions of languages", "For us  we're going to use Python  which has this", "property of being an interpretive language"], "aTuYZqhEvuk": ["ERIC GRIMSON  Now that we've added functions to our", "armamentarium of tools  we're going to see that that gives", "us a lot of power in terms of thinking about computational", "ways of tackling problems", "Functions give us  as we said  that ability to abstract  to", "capture a computation and then wrap it up as if it were a", "primitive  gives the user the ability to treat a function", "like a black box", "You suppress the details and you just use the contract", "that specification that says  if you give me things that", "satisfy certain constraints  this function will give you", "back answers that meet particular desires", "That's great", "But even functions can come in different flavors", "And there's some real power to thinking about different ways", "of tackling a computational problem", "And I wanted to spend a little bit of time in this section", "talking about that", "Let's start with what we've seen so far", "We've really been using looping constructs as our way", "of building algorithms", "And those looping constructs  things like while loop  a for", "loop  lead naturally to what we would refer to as iterative", "algorithms", "They iterate their way through the loop  going over and over", "the same computation with slight changes", "And in particular  we can think of an iterative", "algorithm as capturing computation in a set of what", "we could call state variables", "These are variables that describe the state of the", "computation", "And those variables update or change their values on each", "iteration through the loop", "Let's look at an example", "So here's a simple little example", "Imagine that we want to do multiplication  and we're", "going to do it just using successive addition", "Our computer only comes with addition", "It doesn't come with a built in multiply", "I know that's dumb  but it gives us a simple", "example to deal with", "If we wanted to do that  to do multiplication by successive", "additions  then a simple way to think about it is to say if", "we want to multiply a by b  we're just going to add a to", "itself b times", "And iteratively  what does that mean", "Literally  we could say computation's going to be", "captured by two variables", "One is the iteration number", "Which time through the loop am I at", "That number  let's call it i  arbitrarily  is going to", "start off at b", "And the second thing we're going to need is a state", "variable that captures how many additions", "we've already done", "What the result is so far", "Let's just call it result", "So that's the current state of the computation", "And that starts off at zero", "So notice  each of these state variables has an", "initialization", "We started off somewhere", "And then we think of the computation as iterating", "through or updating those state variables", "And those update rules  in this case  would be that on", "each iteration i  my iteration number  is going to reduce by", "one and result  the thing that's holding the", "computation  is going to take the current value of result", "add the value of a to it  and that becomes the new value of", "that state variable", "So these state variables have the property that if I stop", "the computation at any point  they tell me", "exactly where I am", "And they have the property that not only are they", "initialized  but at least one of them will have a condition", "for telling me when I can stop", "And in this case  I'll stop when the iteration count", "gets down to", "I know I've done all the things I need to do", "We've seen examples like that  but this idea of iteration is", "nicely captured", "And if we put it into code  in fact  we see something that", "very nicely builds on that", "We initialize one state variable", "In this case  we're going to just use the parameter passed", "in as the other state variable", "And it's initialized when it is passed in", "And then the loop simply has updates", "There's the updating of those state variables", "And let me make a simple comment about this format", "since we haven't used it before", "That format is the same as saying let result be bound to", "result plus a", "And this one is saying let b be bound to b minus", "It's simple  little shorthand for doing that kind of", "computation", "And of course  when I'm done  I'm going", "to return the result", "We've seen these kinds of examples before", "And you can see how iteration's a nice way of", "thinking about it", "That loop actually captures what the changes in the state", "variables are at each point", "And if we wanted to try it  we could certainly go", "over here to Python", "And there is my definition of iterMul", "And if I load it into an IDLE environment  then I can", "certainly say things like  give me the iterative", "multiplication of   and    and it does the right thing", "And I can even be more fancy about it and say things like", "And it does it pretty quickly", "We haven't shown out the intermediate stages of the", "loop  but you've seen enough examples of this to realize", "that it is  in fact  doing that counting down of b while", "accumulating the results in result and then", "returning the value", "Great"], "r-lL6JT665g": ["JOHN GUTTAG  Good morning  or good afternoon  or good whatever time it is", "where you are", "Last week  we looked at random walks as an introduction to simulation and", "stochastic programming", "We looked at things quite informally", "Now  I want to lay down some of the foundations we need to understand", "stochastic situations more rigorously", "Before I do that  I want to start with a little bit of philosophy", "There's something very comforting about Newtonian mechanics", "You push down on one end of the lever  and the other end goes up", "You throw a ball up in the air", "It travels a parabolic path and then comes down", "When we first learn about physics  we learn the lovely equation f   ma", "In short  everything happens for reason", "The physical world is a completely predictable place", "All future states of a physical system can be derived from knowledge about", "its current state", "For centuries  this was the prevailing scientific wisdom", "And then along came quantum mechanics and the Copenhagen doctrine", "It's amazing  for such a remarkably pretty city  that it could be the home", "of such a deeply disturbing concept", "The doctrine's proponents  led by Bohr and Heisenberg  argued that at its", "most fundamental level  the behavior of the physical", "world cannot be predicted", "One can make probablistic statements of the form x is highly likely  but it", "would be inappropriate  they argued  to make statements of", "the form x is certain", "Other distinguished physicists  most notably Einstein and Schrodinger", "vehemently disagreed", "Eventually  after much discussion  it boiled down to the question of whether", "their world was causally non deterministic   that is to say", "not every event is caused by previous events   or predictively", "non deterministic   that is to say  the lack of knowledge about the world", "makes it impossible to make accurate predictions about the future states", "Einstein summed up his notion of predictive non determinism", "beautifully", "Quote  The essentially statistical character of contemporary theory is", "solely to be ascribed to the fact that this theory operates with an", "incomplete description of physical systems   That is to say  he believed", "the world would be predictive if only we could understand it better", "The question of causal non determinism is still unsettled", "However  whether we cannot predict events because they are truly", "unpredictable or because we don't have enough information to predict them is", "not usually of practical importance", "Let's look at a simple example", "I'm going to ask you  yes  you out there  is today your birthday", "And there's nothing probabilistic about the answer to this question", "You know whether today is or isn't your birthday", "And by the way  if it is your birthday  why are you spending it", "listening to me", "Anyway  I don't know  however  so even though there's no randomness here  I", "have to treat it as if it's random and the best guess I can make is that the", "probability of it being your birthday is a little bit less", "than one out of", "Why a little bit less", "Well  we do have to think about leap years", "While the Bohr Einstein debate was about how to understand the lowest", "levels of the physical world  the same issues arise at the macroscopic level", "Perhaps the outcomes of horse races  is spins of roulette wheels  stock", "market investments  and baseball games are causally deterministic", "However  there's ample evidence that it's pretty dangerous to treat them as", "predictably deterministic", "Of course  that won't stop some of you from losing lots of money because you", "believe otherwise", "OK  that gets us back stochastic processes", "We looked at this last week", "To remind you  a stochastic process is any process where the next state might", "depend on both the previous state and some random element", "Let's look at a couple of specifications to", "illustrate the point", "Both of these specifications are for a function for rolling a die", "Actually not two dice  but one die", "The first one says rollDie should return an int between   and", "This specification would allow a non deterministic implementation  but not", "require it", "It would be OK to always return to  or always return numbers in the sequence", "one  two  three  four  five  six", "The second specification  on the other hand  insists that rollDie be", "non deterministic   i e", "we cannot predict the number that it's returned", "So here  we have something that's called underdetermined  the", "specification doesn't tell us exactly what it does", "But here we have something that's genuinely non deterministic", "As we've already seen  Python include simple ways to write programs that use", "randomness", "Let's consider the following simulation of rolling the die", "We have that over here", "So I've got rollDie at the top", "This looks exactly like what we looked at last week  where we used", "random choice", "And then rollN  which merely calls rollDie n times and returns the result", "of the numbers returned as a string", "So for example  if I print rollN      I get a random string", "I can try it again  and presumably I will get a different string", "You can see it's a string  by the way  because when I type it from the shell", "we see the quote signs around it", "Now I want to ask you another question", "When I call rollN  would you be more surprised if it returned five ones  or", "some more random looking sequence", "Which of these is more random", "Well  it's a trick question", "Each of these is equally likely because the value of each roll is", "independent of the previous rolls", "That is to say the fact that I rolled a   the first time has no impact on", "whether or not I will roll a   the second time", "Two events are independent if the outcome of one event has no influence", "on the outcome of the other", "So now we know that each of these is equally likely  we can ask the", "question  how likely are they", "So for example  how likely is it that we'll get", "In general  when we talk about the probability of a result having some", "property  for example  being all ones  we're asking  what fraction of all", "possible results has the property", "That tells us that we need to start with the question  how many different", "sequences are there of length five", "Earlier in the course  we looked at binary numbers", "And we saw that given n binary digits  there were   n", "possible binary numbers", "When we looked at decimal digits  we saw that it was   n", "And now  with the dice  we're looking at digits base", "So the number of possibilities are going to be   n", "So for a six sided die  there are     possible sequences of length five", "That tells us is the probability of rolling   consecutive ones should be", "over       a pretty small number", "It's approximately equal to      or a simpler way to think about it", "out of     possibilities", "Pretty low  but no lower than the probability of any other particular", "sequence of five rolls", "Let's look at a simulation to check this", "So I'm going to use rollN  which uses rollDie to do the simulation", "getTarget takes a goal  which is a string  for example  five ones", "And then we'll roll the die that many times  the length of the string", "And we'll do this over and over again until it gets a string of five ones", "Well  if I call the goal ones", "And when it's done  it will return the number of attempts it took", "to reach the goal", "runSim calls getTarget multiple times", "And you'll remember from last week the importance of using multiple trials", "and then gets the average number of tries it took to reach the goal", "divides one by that number to get the probability of any single", "try being that goal", "Let's see what happens if we run it for five ones", "We're now going to run the simulation and see whether we get", "the answers we expected", "Just so you can remember what we expected  maybe I should print the", "probability", "And we calculated it to be roughly", "So now we'll run these and see what we get", "OK  we got two different answers", "We'd expect that  remember  this is randomness", "We'd also expected that neither answer is exactly what the calculated", "probability was", "After all  we only did   trials", "But both are pretty close", "They're in the right neighborhood  which should give us some confidence", "I've run this with much bigger numbers than   trials  and  as you might", "guess  the more trials I use  the closer we get to the actual", "probability", "Let's go on now and look at a different problem", "Suppose we want to know the probability of rolling the die five", "times without getting any ones", "So five rolls  no ones  as opposed to all ones", "One way to answer this question is to think about how many of the", "possibilities don't contain a", "We can and compute it as follows", "On the first roll the probability of not being a   is going to be", "any side of the die except the", "If we think about not rolling a   on either the first or the second roll", "it's going to be  I didn't get a   on the first roll  and I didn't get a", "on the second roll", "I can multiply that and not getting it neither the first two", "rolls will be", "Notice  by the way  that this is a smaller number than this", "That's exactly what we should expect", "After all  the probability of not getting it with two rolls ought to be", "smaller than the probability of not getting it with one roll", "So if we want to think about not getting any of the five rolls  what", "should it be", "", "How about the probability of rolling at least one", "Well  we know the probability of getting no ones in five", "rolls is", "We know that the probability of getting at least one of the many", "possible rolls is one", "So we know that the probability of getting at least one   must be   minus", "the probability of getting no ones", "That is to say", "Let's look at one more problem before wrapping up this segment", "Imagine that instead of watching this recording in the comfort of your home", "you are watching me live in a packed classroom with   other students", "Imagine further that if today is somebody in the room's birthday  I'm", "going to give them", "What's the probability that I have to open my wallet", "Well  in order to compute this  we need to make an", "assumption about birthdays", "And that assumption is that the birthdays are uniformly distributed", "And to simplify my life  I'm going to say they're uniformly", "distributed over   days", "This may not be true", "Maybe more kids are born in July than in January", "I don't actually know", "But we'll assume that every birthday is equally likely", "So if I look at those   students  and I choose    the probability of", "today being that student's birthday is", "Now if I take a second student  the probability of being that students", "birthday is also", "Can I just add those two to get the probability of it being", "one of their birthdays", "Absolutely not", "Think about it", "Suppose I had   students in the class  and I added them all up", "Then I'd get the probability of it being somebody's birthday was", "which is impossible because we know the probabilities always have to be", "less than or equal to", "So how do I do this", "I use the minus   trick  the trick we just used", "The probability of it not being the first student's birthday is", "The probability of it not being the second student's birthday is the same", "And so  if I look at   students  the probability of it being none of their", "birthdays is", "And I just have to subtract that from   to discover the probability of it", "being somebody's birthday", "And as it happens  that's about", "not so unlikely that I'm going to get stuck"], "FMGal3lXcjw": ["ERIC GRIMSON  So now we've got the beginnings", "of some simple programs", "We can write straight line programs  store them away in a", "file and run them in the Python interpreter", "whenever we want them", "But basically they're still pretty simple things", "A straight line because I'm just following a sequence of", "instructions in order", "So I'm still  essentially  doing things like a", "calculator", "When we talked about the machine we said one of the", "other things we wanted to be able to do was to make", "decisions  to do a test", "And on the basis of that test jump to some other part in the", "sequence of instructions", "Do one thing if the test is true", "Do a different thing if the test is false", "So we need branching programs  things that make decisions or", "branch based on that test", "And the simplest branching statement in Python is a", "conditional", "A conditional is the obvious statement because it basically", "says if we have some set of code when we get to the", "conditional we start by executing a test  which is a", "bool  a Boolean", "And based on that Boolean  that expression that either", "evaluates to True or False  if the value of that test is True", "then there's a block of code called the True block that we", "execute based on that", "If the value of the Boolean is False  then we may decide to", "do a different set of things", "So there's a second block of code called the False block", "the block of code we're going to do if the test is False", "Now that second block is actually optional", "We don't have to have it", "We always need to have the True one", "What do we do if the case is True", "But if we decide the thing is  False  we", "don't need to do anything", "We can simply skip that second portion of it", "Either way  after we've gotten through that conditional set", "of expressions  we can pick back up with the next sequence", "of instructions in the code just as we would", "sequentially before", "So this is a way of us now making decisions and based on", "the decision doing one thing in one case and something", "different in a different case", "How do we get Python to recognize that", "Well let's look at a simple example", "And here's some code  which I also have over here in a", "Python file", "I've got an instruction right here", "This first one that says  this one right there  that says I'm", "going to  as I did before  ask for some input", "And I want to create an integer", "And then I want to do a set of instructions", "And those set of instructions are going to first do a", "Boolean test", "So there's that Boolean", "And this is the remainder", "It says if the remainder of x divided by   is   that says if", "I divide that x by   there is no remainder", "So it says it's even", "In that case I'm going to print something out", "And notice the indentation here", "That's important", "That indentation tells me that this is a sequence of", "instructions to do based on what happens", "if the test is true", "And that could be arbitrarily many instructions", "I have similarly next to that if", "And that if is a special form there that says do the", "evaluation of this expression", "And it ends in a colon", "Below it I've got another keyword  else", "followed by a colon", "And this tells me where to find a block of code to", "execute if the test is false", "And again  notice the indentation here", "So what this says is I'm going to execute that instruction", "I'm then going to execute this test", "And if that test is True  then I will execute that set of", "instructions", "On the other hand  if that test is False I will look for", "or rather Python will look for the else and execute that set", "of instructions", "In either case  notice that there's no indentation here", "So this is now the next instruction after this entire", "conditional right there", "So let's go over to Python and see what happens here", "So there is my file", "I'm going to load that in", "It's now executing the first instruction", "So it's waiting and says  give me some input", "I need to give it an integer", "So I don't know  let's give it the value", "Ah  and it prints out a blank line which came from that", "first print statement and then the word even", "or the screen even", "And then notice it prints out the done with conditional", "Let's go back over here and load that up again", "So again it's waiting for an input", "I give it a", "Now  in this case  since the test is False it jumps to the", "False block of code  after the else", "Prints out a blank line", "Prints out screen odd", "And then in either case  as it said  that last expression is", "always the next expression done", "It prints out the done with conditional", "So you now see how I can make choices", "And I can branch", "I can do different things based on a", "particular value of a test", "And we see the format here", "In this case there's an if", "Some Boolean test followed by a colon followed by a sequence", "of instructions that are indented", "By the way  Python  or the IDLE system will do that", "automatically for us", "And then followed by an else", "OK let's make some observations here", "We've already done that  but just to remind you  that", "expression x remainder   is that equal to   evaluates to", "True when  in fact  x divided by   has no remainder", "As we said before  we're using the double quote for", "comparison", "I'm sorry  we're using the double equal sign for", "comparison", "Because a single equal sign is reserved for assigning a name", "to a value", "We've already talked about the", "indentation which is important", "It denotes a block of instructions", "And that indentation gives us a nice visual structure that", "helps reflect the semantic structure of the program", "We can look at the code and easily identify the different", "blocks of code associated with the True and the False block", "Now some variations we can do here", "We can have nested conditionals", "So if we look at this  we've got an if", "We've got a block of code", "But that block of code is itself an if  which has", "another indented version for the True version and a", "separate else there", "So let's now go over to Python and look at that", "Here's second file", "And I'm going to give an arbitrary value to x up here", "Just I'm going to set it to", "And then I want to see what happens if I evaluate this", "Well I can look at the code structure to find", "out a sense of that", "That first if I'm going to evaluate that expression and", "get a Boolean value back", "If it's True I'm going to go in and oh  I'm going to", "evaluate that next if", "And depending on whether that's True I'm either going", "to pick up that piece of code or pick up that piece of code", "And you could see the structure here", "If the remainder of x divided by   is   and the remainder of", "x divided by   is   then it's divisible by   and", "I'm going to print that up", "Otherwise if it's divisible by   but it's not divisible by", "then I'm going to basically print out something", "appropriate", "However  if that first test  this test up here is not True", "then I'm going to jump down to a different special form here", "called elif", "Which is else if", "And that says if this is not True  then let me", "do another if test", "Otherwise check to see if this is True", "So there's another Boolean expression", "And if that is True then I'll execute this piece of code", "But if it's not True then I'm going to go  hm  where am I", "going to go", "Well notice that I have no else clause here", "And that's OK", "Because if that's not True I'm simply going to skip to this", "point in the code and pick up the rest of it", "Now I could have put an else there and had that else do", "something  but that's a choice I have", "All right  let's go back over to Python and", "let's load this in", "Let's see what happens", "A ha", "It says divisible by   and", "Which said back here in my code  if I use my little", "cursor here", "It said that test was True and that test was True therefore I", "printed that up", "Let's look at a different version of this", "Let's change x to be", "And let's now load that in", "I need to save that away which I will do", "Ah  it didn't print out anything", "Why was that", "Well it's not divisible by", "So it goes to the elif clause  but it's not divisible by   so", "it simply skips down to the next point", "And one of the ways I could have fixed that was to come", "back over here and say otherwise print not", "divisible by   or", "Let's save that away", "Ah  and now that's where it picks up the else clause", "So you can now trace through the different ways through", "this code but using nested conditionals to control", "different branches", "So that I don't just have a binary branch", "I can have multiple branches through the code", "Another way to do this is to use compound expressions for", "our Booleans", "I don't need to do just a single Boolean test  but I can", "have two tests and put them together using the things I", "talked about earlier", "So I could say  for example  if x is less than y  or y is", "less than z then do something", "Otherwise  do something different", "So I can start putting together", "more complicated things", "And we're going to be able to start using those to also", "control how we move our way through", "these branching programs", "OK  so where are we with all of this", "Well now that we've got conditions we have the ability", "to do different things based on that choice", "And branching programs allow us to do that", "Notice  however  it's still the case that at most each", "statement gets executed once", "When I think about each statement in my code  I don't", "do them multiple times", "I may skip some of them depending on the task", "So each statement still gets executed at most once", "And as a consequence  the maximum time to run a program", "like this depends only on the length of the program", "We see that these programs  whether the straight line", "programs or simple branching programs run in what we call", "constant time  the amount of time it takes depends just on", "the length of the program", "These are still very simple programs  although we can now", "make some decisions on them", "And in the next lecture we're going to pick up on how we", "actually add one more piece to start getting more interesting", "elements to our programs", "But nonetheless  you now have the ability to start writing", "simple programs to do computations for you"], "qA24CgJ1Zc8": ["ERIC GRIMSON  OK", "So we've now seen how to create simple expressions", "We can take objects that are numbers", "like integers or floats", "We can combine them together with operators  so we say", "plus   or   plus   all in parentheses times", "That gives us a way of doing some simple computations  but", "it's pretty boring", "It basically says we got a calculator", "So we can type in expressions and get out values", "But we like to obviously do more", "complicated kinds of things", "One thing we need in order to make that happen is what we", "call a means of abstraction", "While we can certainly write arbitrary expressions  it", "would be valuable having written it down and gotten the", "value of an expression to be able to remember  to save it", "away by giving it a name  and then using the name to get the", "value back whenever we needed it", "Fortunately  we have that ability", "It's called assignment", "And in Python  the format of that is shown here", "We type in word or a sequence of characters followed by an", "equal sign followed by some expression whose value will", "then be associated with that word", "So if I go over to my Python shell  I can do things like", "I'm going to say  give the name pi", "And notice when it print it out  it doesn't mean anything", "It simply has done that assignment", "That is it basically", "as we're going to see later on   created a binding of the", "name pi to that value", "If I want to see the value of pi  I can simply ask the", "Python interpreter to give it to me  and it", "prints it back out", "So I could do another binding", "I can say  I've got a radius of", "Again  notice that it doesn't print anything out", "If I want to get the value of radius  I can ask for it", "But I can also now do things like create expressions", "So I'm going to assign the name area to", "And I can now write an expression as I would have", "before with now not just numbers but names whose values", "are also numbers", "So the area is pi r squared  where r is my radius", "And I can say  OK  what is the value of area", "And it did that computation", "So I have an assignment statement", "And notice here I'm using a single equal sign  which is", "why we use the double equal sign for comparison", "A word or a name  an equal sign  and expression says  get", "the value of that expression and bind to it or bind it to", "if you like the value of the name associated on the left", "hand side of that expression", "So let's look at that in a little more detail", "We say that we're binding a variable or a name to a value", "And what does that mean", "That statement pi equals     literally assigns the", "name pi to the value of the expression to the right hand", "side of the equal", "And you can think of this as literally creating a binding", "between a name and a value stored", "somewhere in the computer", "So over here are all the values that are stored away in", "the computer", "And I have somewhere within the computer a listing of all", "the names whose bindings I have done", "As we just saw  we can retrieve the value associated", "with the name by simply invoking the name  just asking", "for what is the value pi or pi", "Now I can change the bindings", "So having the bound a variable name  I can do another", "assignment statement", "So  for example  if I go back over to my Python shell  I", "could change the value of radius", "Remember  initially we had radius of", "Let's change it to something different", "Let's changes it to in fact", "I'm going to make this", "So how do I do that", "I say let's have radius be", "Now what's my value of radius", "There it is", "What that's done in my diagram over here is it's change the", "binding for radius", "Remember before it was", "It has now changed into something else", "But notice that area hasn't changed", "And in fact I can confirm that", "The area is still     point a whole bunch of stuff", "And that's because my evaluation of the binding for", "area having been done earlier has simply", "stored away that value", "As you can see right here  it doesn't have an", "expression of value", "And it is the particular value", "So rebinding radius does not change the binding", "associated with area", "An easy place to make a bug or have a mistake and something", "that you want to keep an eye out on as you move forward in", "terms of using these ideas"], "f3TskgnL_3U": ["ERIC GRIMSON  So now that we've understood our goal", "goals to capture how to knowledge by breaking problems", "down into mechanical steps and then to figure out how to turn", "that into something the machine understands  the", "computer understands  so that it can execute those steps for", "us  we're ready to start putting those pieces together", "In the next lecture  we're going to begin doing that on", "Python  but before we do we want to talk about   last", "piece  about what it means to create recipes", "Every programming language provides  as we've said  a set", "of primitive operations", "They're defined ahead of time  they're the components of the", "ALU that make the computer do its work", "So we're going to build on top of those", "Similarly  every programming language provides a means or", "mechanism for combining primitives to form more", "complex  but legal  expressions", "How do we put together sequences of operations", "How do we define the kinds of things that we want to do", "And finally  every programming language provides a mechanism", "or means for assigning a meaning or value to each", "computation or expression", "That's going to let us map between what the computer", "actually does and what we want it to do", "Knowing that a particular expression leads to a", "particular kind of value is going to allow us to deduce", "the sequence of operations that we want to use", "So when we talk about programming languages  we need", "to talk a little bit about the primitives  about how we put", "them together to make legal expressions  or more complex", "things  and then how the computer's actually going to", "deduce the value or meaning associated with an expression", "That means that when we talk about languages then  we'll", "start by first describing what are the primitive constructs", "What are the elements out of which we put things together", "In programming languages  we're going to see that those", "basic elements are things like numbers  strings  or sequences", "of characters  and simple operators", "And in a real language  or a natural language  the", "equivalent is  for example  words  in English", "What are the words of the programming language", "What are the basic units that we put together", "When we go to put them together  we will talk about", "the syntax of the language", "And that tells us which strings of characters and", "symbols constitute well formed combinations in the language", "In programming languages  well  as we'll see when we get", "to specifics  it'll be things like a number  followed by an", "operator  followed by a number  is a valid Python", "expression", "And it says  basically  apply that operator to those", "numbers to do the right arithmetic thing", "That's a well formed expression in Python", "We have the same thing in English", "There are words that can be put together in some ways but", "not in others", "So for example  in English  the sequence  cat dog boy  is", "not syntactically valid because it's not in the form", "of an acceptable sentence", "So in programming languages  we'll worry about", "defining the syntax", "How do you put things together", "In addition to the syntax  we also have the", "semantics of a language", "And semantics refers to the meanings associated with the", "expressions", "And we're going to make a distinction", "between   kinds of semantics", "First  there's static semantics", "That basically tells us which syntactically valid strings", "that is  sequences of words that satisfy the syntax of the", "language  which of those also have a meaning", "For example  in English   I are big  has the form of a", "noun  an intransitive verb  and another noun", "So it's syntactically valid", "It's in the right combination of what would", "normally be a sentence", "But it's not valid English because  I  is singular and", "are  is plural", "So this would violate the static semantics of English as", "a natural language", "In programming languages  we're going", "to see similar things", "For example  having a literal  followed by an operator", "followed by another literal  and a  literal  just refers to", "a number or a string or some other legal", "combination of things", "That literal operator  literal  is syntactically", "valid  but  for example  we'll see in Python that      the", "and the string  abc  is not semantically valid", "It's a static semantic error because we can't divide", "numbers by strings", "So again  as we talk about our language  we're going to talk", "about what are the static semantics of putting things", "together to create legal expressions", "And then  finally  there is the formal semantics  or full", "semantics of the language", "And that says  what's the meaning associated with a", "syntactically correct string of symbols that does not have", "any static semantic errors", "What's the meaning associated with an expression", "Again  we see the differences between natural languages and", "programming languages", "In natural languages  like English  sentences can", "actually be ambiguous", "For example  the phrase  I cannot praise this student too", "highly  has   different meanings", "can be  what you would take on the surface  which is", "saying   I really like this student   And   could be seen", "in a somewhat sarcastic manner as basically saying   It is", "impossible for me to praise this student   The meaning", "comes from other things  like context or intonation or those", "kinds of things", "So in English  the semantics often is straightforward but", "sometimes is interesting", "In programming languages  we're going to see that we", "always have exactly   meaning associated with a legal", "expression", "But we're also going to see that that meaning may  at", "times  not be exactly what the programmer intended", "And we're going to have to come back to that as we walk", "our way through determining how to associate appropriate", "meanings with different expressions", "But we will talk about the semantics of a language as we", "move through building up the expressions", "And we'll see that the semantics is what we want", "It tells us what is the meaning of an expression", "And we're going to want to work backwards from that", "semantics to deduce the right syntax to capture the", "primitive operations to get us to that meaning", "When we have these different pieces  we can also think", "about  so what can go wrong", "What can have things actually cause problems in the system", "And we'll see that we can get errors  or bugs  as they're", "sometimes called  in all of the", "different parts of a language", "Syntactic errors are quite common  but they're also", "easily caught by the computer", "It's pretty straightforward  in a modern programming", "system  to write an operating system or an interpreter that", "can actually check for syntactic errors before you", "try and run the program", "And good systems will not only catch them before you run the", "program  they'll also point you to the place and provide", "you with suggestions as to what you need to fix in order", "to make the program syntactically correct", "So the static semantic errors do occur  perhaps not as often", "as syntactic ones", "Some languages are very good at actually carefully", "checking  ahead of time  to catch these errors before", "running the programs", "Others are caught while you're actually", "interpreting the program", "Or another way of saying that is  in what are called", "compiled languages  as we'll see  the system will work hard", "to catch these errors before you ever get a chance to try", "and execute the program", "In languages like Python that are interpreted  we'll see", "that the program will walk through executing  or the", "interpreter rather  will walk through executing the whole", "program  and on the fly  will try and spot possible static", "semantic errors and alert us at that time", "of the downsides is that it is sometimes a little harder", "to debug these programs because you're only getting to", "the error when it occurs  and you have to work backwards to", "figure out what caused you to get to that place", "Finally  as we suggested  programs don't have semantic", "errors  in the sense that there is a meaning associated", "with the program if it is syntactically and statically", "correct  but the meaning may not be what was intended", "And so what are common problems", "The program crashes  or  said a little less", "bluntly  stops running", "That's because we made an error of some sort that causes", "a problem inside of the machine", "The program runs forever  or at least until we get tired of", "it and hit a particular command to stop it from", "running because it has entered  for example  into an", "infinite loop", "Or  perhaps the most troubling is that the program may", "actually produce an answer  but it's not what we intended", "And we're going to talk throughout the term about how", "to guard against those kinds of errors by practicing things", "that we call defensive programming", "So  let's pull this together then", "Our goal is we want to learn the syntax and semantics of a", "programming language", "Those are the details of both how to construct legal", "programs and get them to do interesting things", "But what we really want to do is to learn how to use those", "elements to translate our recipes for solving a problem", "into a form that the computer can use to actually do the", "work for us", "We want the computer to compute answers", "to interesting problems", "We want to provide the algorithm  the sequence of", "steps  that's going to make that happen", "And we want to do that by building off of the syntax and", "semantics of our programming language", "And stitched together throughout this is going to be", "this idea that to make this really work  we need to come", "up with smart ways of capturing the computation", "So that computational mode of thinking  that way of taking a", "problem description and breaking it down into a", "recipe  a sequence of how to steps  is going", "to be really valuable", "And throughout this course  we're going to build up a", "suite of tools to let us do that", "In the next lecture  we're going to start doing all of", "these pieces"], "qic9_yRWj5U": ["Now we've seen some examples of how bindings of variables", "take place when functions are called", "Let's do a couple of other examples to just really", "reinforce this point", "Because it's really important for you to understand bindings", "of variables and how they take place", "For this one  I'm actually going to just go over to", "Python and IDLE  and type in a little example", "Imagine I say I'm going to create f x  to have the", "following property", "I'm going to bind y to", "I'm going to bind x to be x   y", "I'm going to then print out the current value of x  that x", "is equal to", "sorry", "I'm printing out the string x is equal to and then the", "actual value of x", "And then I'm going to return the value of x", "And now inside of Python  I set x to", "I set y to", "And I'm sorry", "I mistyped that", "So let's do that properly", "There's y is equal to", "And I bind z to be f x", "And I run it", "And it says x is equal to", "And if I now ask  what's the value of z", "It's    x is", "And y is", "Hm", "I want to see  so why does that happen", "Why is it that x is now returning an", "internal value of   here", "But externally is", "And z is", "And y is equal to", "So why does this happen", "This is going to give us a chance  again  to look at what", "happens inside of the binding", "So let's look in detail at what happens here", "I create a definition of f", "And in my global environment for Python  that says I've got", "a binding of f to that procedure", "And to remind you  inside there  there's the formal", "parameter for x", "And there is the interior", "And I didn't repeat all of it", "It's got that print statement to it", "But basically there is that interior that deals with all", "of those pieces", "And notice that it's just there as text", "It hasn't actually been evaluated yet", "I then go ahead and do the bindings of x is   and y is", "equal to", "And at this stage in the computation  I've got bindings", "for them inside the environment", "Key thing to notice", "In the global environment x is    y is    and f is bound to a", "procedure object whose body has references to x and y but", "nothing more", "Let's move on in the computation", "I now say I want to invoke f", "I'm going to eventually bind z to the value returned by", "calling f on x", "But I'm invoking f of x right there", "What does that do", "Well I get the binding for f  which is this procedure", "And that says I'm going to copy this environment pointer", "So I'm going to create a new frame whose parent is that", "global environment", "And inside there  I'm going to bind a parameter x", "and that is coming from there", "to the value passed in by the value of the call to f", "And that x refers to this one", "OK  a little funky", "But it's important to see that the rules actually tell me how", "to do that", "My invocation of f says create a frame in which the formal", "parameter x is going to have a binding", "And what's the binding for that value", "It's the value of this expression", "And that expression is a variable name", "So I'm doing that evaluation here in the global", "environment", "I get that value of x  which is", "So I've now created a local binding for x to be", "And now I'm ready to move on", "So relative to this environment  I am now going to", "evaluate the body of f", "So let's step on", "The body of f says  first expression is to create a", "binding for y", "Remember that's happening here", "That's happening in the frame associated with the function", "invocation", "So I'm going to bind y  have the value   there", "That's interesting because it's not", "changing things up here", "It is making that binding there", "So that step of the computation", "creates that change", "And If I now move on  the next expression in f says get the", "value of x", "Remember  I'm doing that relative to this frame", "Get the value of y  which I'm doing relative to this frame", "And then do that computation and change the binding  which", "is why it goes from        and I'm changing", "that binding to", "From the perspective of f  it never sees that version of y", "It only sees this version of y", "From the perspective of f  it only saw that version of x", "which was originally", "And then the binding  this  happens in this frame", "And that's why that version of x changes", "Having done that  we can move on", "And it says return the value of x  which is    and that is", "what z is going to be bound to", "And that binding  remember  takes place up in this frame", "because that expression is being evaluated relative to", "the global environment", "It's a long winded way of saying notice that this", "particular expression here  the body of f  got a value for", "y that it had bound locally  got a value for x which was", "the local parameter  and did the change locally inside of", "that environment", "But the return value was a binding that took place up in", "the global environment", "And that's why if I were now to go ahead and print out", "control reverts to the global environment", "And that's where the values of x  y and z are visible  which", "is why I am going to  in fact  now do the values that I saw", "printed when I did that in my environment", "So the point of this is that those bindings actually take", "place in frames that make sense", "Here are some observations", "Each function call creates a new environment  a new scope", "where the bindings of the formal parameters and the", "values passed in take place", "And where  as we saw  local variables  things created as", "assignments within the body  take place  that", "local binding of y", "And that creates an environment in which we", "actually do the computation", "This scoping is often called either static or lexical", "Because the scope within which a variable has a value is", "defined by the extent of the code boundaries", "That definition of f had  lexically  a scope around that", "said I'm locally binding y", "I'm locally using the formal parameter of x", "All computations take place within that scope", "So that gives us a sense of why we see the particular", "examples that we just did"], "PauHW4ObHDo": ["In this sixth lecture we're going to introduce compound data types", "These are ways to combine simpler data objects into collections  for which we", "can then write algorithms to infer new information", "In particular  we will introduce tuples and lists", "And we'll talk about fundamental operations on these common compound", "data types", "Finally  we will show you a more general collection of objects called", "dictionaries  and methods for creating and manipulating them", "At the end of this lecture  you should be able to write functions that", "manipulate compound data objects  as well as those that deal with scalar", "objects  like numbers and strings"], "tyESRmeZK1E": ["Now that we've defined the Person class  let's move on", "Let's suppose  here at MIT  we want to keep track of MIT people  who are", "persons in all respects   they have names and birthdays", "like every other person", "but they also have a new attribute", "We're going to then use inheritance to build an MIT Person class that will", "inherit all of the Person properties  and in addition  provide for this new", "capability", "And we'll also add some new interface methods", "We'll make sure that we can assign ID numbers in sequence  so as we allocate", "people  they'll get a unique ID number in order", "And then we'll provide a way of programs to get a", "hold of the ID number", "And finally  we'd like to sort MIT people not by their name", "but by their ID number", "Let's look at the code", "So here's my idle buffer with the definition of the", "new MIT person class", "Notice that it inherits from Person", "So that means that the MIT person will have whatever attributes are defined", "below  in addition to whatever attributes were defined by Person and", "then also by object  because Person was a subclass of object", "So what we see here are some of the usual method definitions  plus there", "is the definition of a data attribute  called nextIdNum", "And that's something that all MIT persons will have access to and share", "And we'll see how that works as we talk about how new MIT persons are", "initialized", "So let's go run some code", "Person one is going to be an MIT person named Chris", "And person two will be an MIT person named John", "And just to have an example  we're going to make a second MIT person", "named John", "And finally  let's have a fourth person  just a regular person now  not", "an MIT person  named John", "So we have three Johns and a Chris", "So if we go off and ask for", "to ask Python to print what an MIT person looks like  it", "prints out my last name", "And the way that worked  of course  is that since there's no definition of", "the string method for an MIT person  the system then went and looked to see", "if there was a definition of the string method for Person  and in fact", "there was  and that was the method that got used", "When I created an MIT person  a couple things happened", "Let's look at the init code over here", "So the first thing that we do when calling the init method of MIT person", "is to actually go off and give the person init method a chance to run", "So we initialize all the attributes of a person  and then we'll come and", "continue by initializing the special attributes an MIT person", "So this call here is basically saying  look  I'm going to go call the init", "method of an MIT person  and I'm going to pass in the name of the object that", "I'm trying to initialize  and of course  the arguments that the person", "initialization needs  which is a name  and then   let's look at the next two", "lines  because they're sort of interesting", "So I'm setting up an instance variable now for MIT persons  of this", "particular MIT person called idNum  and I'm using the current value of MIT", "person dot", "So I'm reaching into the class  MIT persons  a class", "And I'm reaching in to the data attribute  in this", "case  called nextIdNum", "So I'm taking that integer value  which the first one will be zero  and", "using that to initialize ID number", "I then reach back into the class and increment the ID number", "So every time I'm initializing a new person  I'm not only setting up the", "values of information inside each MIT's person object", "I'm also reaching back into the MIT class for our shared variable  one", "that's shared among all MIT people  and using that as sort of a global", "resource to allocate unique ID numbers", "So what's the difference between   this is called a class variable", "what's the difference between a class variable and an instance variable and", "a global variable", "So if I had made this an instance variable  if I had said", "self nextIdNum down here  what I would be doing is I would be accessing an ID", "number for each instance  but then I would have no way of sharing", "information between one instance and another", "So instance variables are unique per instance", "And so if I'm trying to do something that's shared by all members of a", "class  I can't make them instance variables", "Why didn't I make it a global variable", "Those are all shared", "And the answer is  I could have made it a global variable  but now", "nextIdNum would be a name in my global name space that everybody would have", "to understand is a resource that's being used by MIT person", "So it sort of breaks the modularity", "There was a special shared variable that was needed for creating MIT", "people  and it would really start cluttering up my global name space if", "I have to declare everything that needs to be shared  to", "be shared by everybody", "I'd really wanted to do something that was just shared by MIT people  so", "that's why I made it a class variable", "So let's go off and see how well our ID numbering system works", "So I can go off and ask for the ID number of person one", "And the ID number of person two     so forth and so on", "So that all is working fine", "So let's finally test our less than compare", "That's what we'll be using for sorts", "So let's find out  is person one less than person two", "And remember that the ordering of MIT people is determined by their MIT ID", "and so I had person one's ID was    and persons two's MIT number was    so", "person one should be less than person two", "OK  how about  is person three less than person two", "So is the third person I allocated come before or after the", "second person allocated", "And the answer is  it doesn't come before  it only comes after", "So person three is less than person two", "Now person four this is not an MIT person  just a regular person", "So what if we ask that person four is less than person one", "Well that returns false  so let's think a little bit how that worked", "So person four is a regular person", "And person one is an MIT person  who  by the way  is also a person", "So if I go  isInstance person one a regular person  as well as an MIT", "person  the answer is yes they are", "So what's going to happen here is that   remember before  when we were", "discussing how sorting worked", "Python changes this Python expression into a call of the special less than", "method of the first argument", "So the less than method of the first argument is the less than method", "associated with person", "And so it's doing the sorting by name", "It's really asking whether the name John comes before or after the name", "Chris  and the answer is  in fact  it doesn't", "What happens if I do this the other way around", "Can I say  is p  less than p", "I get an error there", "So let's think a little bit about what that error is telling me", "It's really saying to me  it's pointing out that an attempt to reach", "into a person object", "I'm trying to get the ID number of a person object", "But ordinary people don't have ID numbers", "Only MIT persons have MIT numbers", "And so what happened was we did the same sort of operation", "What we did is we called the less than operator of the first argument", "well  the less than method of the first argument here", "I mean  this is an MIT person  so we'll be using this definition of less", "than when trying to do this comparison", "And this code actually assumes that the other argument to less than is in", "fact another example of MIT person", "And where the code failed was right here on this line when it tried to get", "the ID number of a regular person  and that regular person", "object had no such attribute"], "99LfboDePVE": ["ERIC GRIMSON  We've been talking about recipes", "mechanical process  how to methods for capturing ways of", "getting the computer to do something for us", "Now we can ask the question how do we actually get that", "recipe into a mechanical process", "inside of the computer", "What kind of things will we need to have the computer do", "that work for us  do that little Heron of Alexandria", "algorithm for computing square roots", "We actually got a couple of choices here", "First one is we could build a machine specifically to", "compute square roots", "It might sound odd", "We probably don't need something quite that", "particular", "But in fact early computers were exactly this", "They were instances of what were called", "fixed program computers", "And a fixed program computer was something that did a", "specific calculation and was designed to do exactly that", "In fact you've seen a fixed program computer", "A calculator is exactly that", "It does a set of arithmetic computation", "That's all it does", "It could be more complicated", "In fact some of the early computers were", "Atanasoff and Berry in   built a computer for solving", "systems of linear equations", "And even despite the fact that the technology wasn't quite as", "sophisticated as it is today  it did quite", "well at doing that", "During the war  Alan Turing  one of the most famous", "computer scientists  built what was called the bombe", "which was used to decode Enigma codes during World War", "II  again  a computer built specifically for that purpose", "but solving a very complex task", "The problem with a fixed program computer is that it", "does only that thing it was designed to do", "What we'd really like is a computer they can do anything", "we tell it to do", "And for that  we want a machine that can both store", "and manipulate sequences of instructions", "And those are called stored program computers", "And that's what almost every modern computer is", "It's a stored program computer", "So what does that say", "What does it mean", "Well  the idea behind a stored program computer is that we", "can take a sequence of instructions   we're going to", "talk in a second about how we create them   but a sequence", "of instructions  think of it as a program  that is going to", "capture the steps of our algorithm in order", "And we're going to be able to input that sequence of", "instructions inside the computer", "That sequence of instructions will be built from a", "predefined set of primitives", "Ah  that goes back to what we talked about earlier", "In most cases  those primitives will be very simple", "things  simple arithmetic  simple logic  simple tests on", "both numbers and characters  and the ability to move data", "around inside of the machine", "Very primitive operations", "We're going to see how to use those in a clever way  but", "that sequence of instructions is what we're going to read", "into the computer and store there", "Once we've done that  then inside the computer there will", "be a special program called an interpreter", "And that program basically walks through those sequences", "of instructions in order  executing each one in turn", "It's going to use the tests to change the flow of control", "through the sequence and to decide when to", "stop once we're done", "But it's going to simply execute a very simple set of", "instructions", "So the idea is we can read or load the", "instructions in the computer", "We might be able to change them around", "And then we can ask the computer to start at the", "beginning and walk through the sequence executing some", "computation", "Let's look at that in a bit more detail", "So here's a simple architecture for a computer", "It's got a memory", "It's got what's called an ALU or an arithmetic logic unit", "which is going to do those primitive operations for us", "And it's got a control unit that keeps track of where", "things are and asks the ALU to do work", "So when we read in some code  a program  it's basically", "going to create a set of instructions", "up here in the memory", "And inside the control unit  there's a special thing called", "a program counter that initially points to the first", "instruction in that sequence", "When we ask the program to run  when we ask the", "interpreter to execute the program  it starts by going to", "that instruction and executing it", "And that instruction will typically be something that", "takes some value out of memory  runs it into the ALU", "does some computation  and stores it back in memory", "Having done that  the program counter increases by    which", "means it goes to the next instruction", "And it executes that instruction which  again", "typically will be to take some values in memory  run them", "through ALU  do a simple computation  and", "store them back here", "And it simply keeps doing that  moving through the", "sequence of instructions   at a time  doing those very", "simple arithmetic and logic kinds of computations", "Every once in a while  it'll get to an", "instruction that is the test", "It's going to compare a number  to see if it's greater", "than     for example  or compare a character", "But it's going to do a simple test", "If that test turns out to be true  that test is going to", "actually change the program counter  causing the system to", "jump back to or jump forward to some other place in the", "code  changing where we are in the code", "And it's going to keep doing that", "And it will do that until  in fact  it reaches a point where", "it says  I'm done  at which point it will output the", "result here", "Those are the basic elements of a computer  a control unit", "here that has us follow through a sequence of", "instructions up here  causing data to flow through the ALU", "and back into memory  and occasionally using tests to", "jump around in the code", "And we're going to see very shortly how to start building", "up programs to do exactly that", "But that's what the computer does", "OK  that sounds neat", "So what are the primitives", "Essentially says if we can have a stored program computer", "we need to set a primitives", "We're going to need some way of controlling them  which", "we'll get to  but what are the primitives", "Well  it turns out that same guy  Alan Turing  showed that", "using just   primitives it's possible to compute anything", "that's computable", "That's amazing", "simple primitives are sufficient to compute anything", "that's computable", "And in fact we refer to that property as saying that any", "computer  any interpreter that has that property is what we", "call Turing complete  which by the way says anything you", "compute in   programming language you can compute in", "any other programming language", "Now having only   primitive sounds cool  but it also", "sounds like  man  if I've got to program everything by", "reducing it down to some really larger sequence of", "primitive operations  this is going to be a serious pain in", "some parts of the anatomy", "And it is", "So  fortunately  modern programming languages have a", "more convenient set of primitives", "And in the next lecture sequence  we're going to start", "talking about what those are in Python  the language we're", "going to use", "Not only do we have a more convenient set of primitives", "but a key thing a programming language will have is some way", "of being able to abstract methods  that is  take a", "description  that sequence of code that we've written  and", "use it to create a new primitive  thereby adding to", "the set of primitives that the system can use", "But nonetheless  as we've seen  just starting from", "primitives  we can build up an entire array of computation", "And anything computable in one language is going to be", "computable in any other programming language", "And that's amazing"], "EeGAH_Es_7s": ["Eric Grimson  Now we've seen black box testing  designing a test suite based", "on just pass through the specification", "A nice complement to that is glass box testing", "That's where we're going to use the code itself  the implementation  to", "guide the design of test cases", "Obviously looking at the code should give us a more complete handle  if you", "like  on trying to figure out where there might be possible bugs", "So let's think a little bit about what it means", "And again  the name sort of suggests it", "Glass box says I can see inside to figure out what's going on", "A glass box test suite  a good one  is called path complete  if every", "possible path through the code is tested at least once", "Now if you think about it  that's not always going to be possible", "If we've got a loop  we might be able to say what happens if the loop is", "executed once  executed more than once", "But to do one  two  three  four  five  up to a billion times  again we may", "not be able to test all of them", "But we can certainly talk about different samplings of", "test through a loop", "Same thing with a recursive function", "There maybe arbitrarily deep levels of recursions  where we may not be able", "to test all of it", "But the idea of testing multiple paths through the code", "And if possible all paths through the code  is really nice", "Notice by the way  even a path complete test suite can still", "miss a bug", "It will depend on the choice of examples", "But if it is path complete  if we're exercising every path through the", "code  at least we're more likely to find a bug if it's there", "Now let's look at a little example", "Here's a simple little piece of code for finding absolute value", "Assumes x is an int", "It's going to return x  if x is greater than or equal to    it'll", "return minus x otherwise", "And since I know that x is an int  I can do some good sampling here", "And you can see the code inside", "Now  what would a good test suite here be", "Well  one sample of a test suite would be to pick the values", "of minus   and", "It's certainly path complete  right", "If it's minus    it's going to take this path", "If it's positive    it's going to take this path", "So it's looking at both paths through the if clause", "On the other hand  it's going to miss a case", "And it will miss in fact  this case here  of looking at absolute minus", "which in this case gives me a bug", "Because in fact I should have had x less than or equal to here", "to catch that case", "What does that say", "It says it's not just being path complete  but we want to think", "about boundary cases", "And here the code itself gives us a boundary case", "Since that's the test  I ought to pick that up as one of the boundary cases", "When it's at that boundary  when it's below that boundary  when it's above", "that boundary", "But here's a case where I do explore all the possible paths", "I've got a path complete set of tests", "OK  so what can we do with this", "Well  here's some simple rules of thumb   in a second we're going to get", "to an example   but here's some rules of thumb for how you do", "good glass box testing", "First  make sure that both branches of all if statements are checked", "I just did that  in that particular case", "Similarly  insure that every except clause is executed", "We're going to return to this", "We haven't talked a lot about except so far  or exceptions", "But it's the same idea", "Every time I've got an exception  make sure I actually test that", "If I have a loop  a for loop  I want to have tests where the loop's not", "entered  where the body of the loop is executed exactly once  or the body of", "the loop is executed more than once", "As I said earlier  I can't do all possible versions of", "them more than once", "But I can sample those three because they tend to expose places", "where there are bugs", "Same thing for a while loop", "Do the same thing I did for for", "The loop's not done  done once  done multiple times", "But also I want to catch all the cases here where there are different ways to", "exit the loop", "If there are different parts of my loop or I can break out of it  I want", "to catch all of those", "If I've got a recursive function  I want to test what happens if there's", "no recursive call  it's just the base case", "What happens if there's exactly one recursive call", "And again  if there's more than one recursive call", "And you can see this pattern of none  one  and more  there and here", "And that's a common thing that I'm going to want to try and use  as I", "build different test suites for doing glass box testing"], "kbrZtHI5CSo": ["CHRIS TERMAN  With memoization in our toolbox  let's go look at some", "optimization problems", "Our goal will be to recast them in such a way that there's an opportunity", "for there to be overlapping subproblems", "And if we can do that  we can use memoization to eliminate the cost of", "doing the same calculation again and again", "First up is the     Knapsack problem that we saw in lecture", "Let's see how solving the     Knapsack problem can be recast as combining the", "solutions to a series of subproblems", "So if you recall from lecture    the problem was that we were given a set", "of objects  in this case  we have a list of six objects", "And we're supposed to choose the objects so as to maximize their total", "value subject to the constraint that the sum of their weights does not", "exceed the available capacity", "So we can state our problem sort of algorithmically by saying  look  we're", "going to build a function called chooseBest that takes a list of items", "and the capacity of the knapsack  and its job is to return two things", "One is the value of the items in the knapsack  of the maximum value that we", "can achieve by choosing items to put in the knapsack and the list of the", "items that achieves that maximum value", "And so what we want to do is to think about how to express the solution for", "this function as a combination of solutions to subproblems", "We're going to decompose the original problem into two subproblems", "In the first subproblem  we're going to consider the alternative where", "we've decided not to take the first item on the list", "So we've eliminated the clock from our list of items", "The remaining subproblem is to choose  from the remaining five items  is to", "choose the best combination that fills up a knapsack that has the same", "original capacity", "So this is unchanged from the original problem", "All that's really changed is that the list of items considered has been", "reduced by one  so all but the first item", "So as our first subproblem  we're simply going to say  look  we're not", "going to consider putting the first item in the knapsack", "So go  of the remaining items  in this case five items  please choose the", "absolute best combination that maximizes the value and come back with", "a list of those items and their total value", "The second alternative is to decide to take the first item and include it as", "part of our collection", "If we do so  then we're left with the following subproblem", "We have five items less to consider  but now what we've done is to reduce", "the available capacity of the knapsack by the weight of the first item", "because we are planning to put it into the knapsack", "So we have a new subproblem  which is to compute the best", "choice of the items", "So we're going to use  again  all but the first item", "But now we're going to ask for that selection to be made under the", "assumption that the knapsack holds less because we want to leave room for", "the first item that we're going to include", "So we go off and call chooseBest recursively  and get back the answer", "which for these five items in that capacity  for the capacity of", "please tell me the value  total value  of the items and the list of items", "that I will take to achieve that value", "What I'm going to do is to take that alternative solution  and when it", "comes back to me  I'm going to modify it slightly by adding the first item's", "value to the total value of that collection because I'm planning to", "include the first item", "And here I go off and add the first item to the list of", "items that are taken", "So those are the two alternatives", "What I'm going to do is to  in the first case  not take the first item", "and in the second case  take the first item", "And between those alternatives  I've covered all the possibilities of", "dealing with the first item", "In each case  I've generated a new subproblem  which involves figuring", "out the best choice among the remaining items  all the items but the", "first item", "So we have two alternatives", "In the first alternative  we don't take the first item", "And when we asked for that subproblem to be solved  we got back an answer", "involving a particular value and a particular list of items", "And then we made a second assumption", "so that was the first alternative", "The second alternative was to take the first item", "And we went off and solved the subproblem involving all the rest of", "the problems and then added the first item to the knapsack", "And when we did  we ended up with a maximum value of v  and the following", "list of taken items t", "Now all I have to do is combine the two solutions  and it's very simple", "We simply choose the one with the maximum value", "So we say  look  if the v  is greater than or equal to v   then what we want", "to do is to return the second option", "That was the most valuable collection  in this case", "including the first item", "Otherwise  the best alternative was the first one  where we didn't include", "the first item", "And for that  the list of items and their value was given by the answer to", "the first subproblem", "So you can say  oh  that's great  Chris", "This seems a pretty straightforward way of doing it   sort of recursively", "solving a succession of smaller and smaller knapsack problems and then", "combining their solutions to create a solution for the", "larger knapsack problem", "Notice that we're still doing an exponential search", "We're going to  at the end of the day  consider all possible combinations of", "either choosing or not using an item", "We're just structuring the search in a certain way", "The lecture code includes implementation of our recursive", "implementation of chooseBest based on those two alternatives", "We did have to add a few extra lines of code to deal with some issues that", "we didn't touch on earlier", "The first is  we have to figure out when the recursion terminates", "When do we stop calling chooseBest", "And that happens in two situations", "One  if the length of the items is  in fact     we have no items to choose", "So we return a total value of   and an empty list of selected items", "Similarly  if we're called with a situation where max weight is either", "or has turned negative  there's really no more room in the knapsack", "So  again  for that particular subproblem  we return a total cost of", "and no selections can be made", "So then we go off and we implement the two alternatives", "that we've seen before", "We compute the results from not including the first item in the", "knapsack and just make the best choice we can of the remaining items  but", "we're allowed to use the entire capacity of the knapsack", "In the second alternative  we make the same subproblem in the sense that", "we're asking for the best choice among the same list of objects  the ones", "everything but the first item", "But in this case  since we want to leave the room in the knapsack for the", "first item  we've gone off and reduced the capacity of the knapsack by the", "weight of the first item", "Then all that remains is really to select which are those two", "alternatives is our best choice for the original problem", "And the way we do that is simply by comparing the two costs  and we choose", "the most valuable of the two alternatives", "Noting that we can actually only select a second alternative which", "involves including the first item in the knapsack if the first item", "actually will fit in the knapsack", "So we've defined some helper code here", "We've built the same list of items as we had in lecture    the items from", "the mansion the burglar was trying to choose between", "And we've also included a function to build a random list of items that have", "random values and weights that vary from   to", "And we've gone off and built a list of   such random items", "And then we finally have a little helper function that lets us print out", "the result from various problems", "So let's go off and run this code", "So if we do testChooseBest by using our list of few items", "and if I remember correctly  the burglar could hold", "we see that  in fact  we get back the same list as we got when we did the", "exhaustive search in lecture", "Let's try the same thing  this time using our list of many items but with", "the same total weight", "So there's   items in this list", "And you can see we're not getting an answer", "In fact  we could wait a very long time and not get an answer because", "doing an exhaustive search through all possible combinations of   items", "involves     th operations  which is not something that's going to complete", "any time during this video", "So I'm going to suspend that", "But what I am going to do now is to test a hypothesis that there were", "overlapping subproblems", "So what I'm going to do is to go off and say  look  maybe some of these", "subproblems are being called with the same arguments", "So I'm going to memoize my chooseBest function", "And now if I go off and call testChooseBest on my list of many", "items  again with the same total weight  I'm hoping that it will", "complete quickly", "And in fact  it does", "You can see that it was able to sort through the entire list of", "alternatives quite quickly and come back with a list of items the burglar", "should take in order to maximize the value", "The observation here is that there must have been many overlapping", "subproblems because that's where memoization helps", "Some of those recursive calls to chooseBest must have involved the same", "arguments  in which case the memoization allowed us to complete the", "computation much more quickly", "So let's think a moment of why memoization actually helped", "chooseBest", "The first observation is that there's no guarantee that in all situations", "we'll have overlapping subproblems for chooseBest", "And in fact  as we'll see in a moment  the way the overlap worked was we only", "had a small number of weights we chose from", "In the worst case  we would still expect the behavior to involve a", "complete exhaustive search", "And in this particular implementation  that'll take exponential time because", "it's basically a constant amount of time for each level of the search", "And that means that if we explore all possible combinations  it'll take", "order    n", "So if there are many items to consider and many of them have similar weights", "why is it there was overlap", "Well  let's think about that for a second", "So here we are", "We're halfway through our problem here  or a little less than halfway", "What we've done is we've considered the different combinations that are", "possible for the yellow objects", "In other words  we've started our computation  and we're going through", "the different permutations of which of the yellow objects we can take", "And we're considering  for a particular combination of the yellow", "objects  the subproblem that we're left is to figure out the best", "combination for the green objects", "So where does the overlap come from", "Well  think for a moment about the different combinations", "There are   possible combinations of either taking or not", "taking the first object", "But what we'll discover if we look closely is that  in fact  that some of", "the combinations leave the same capacity", "So we're going to end up with the same capacity for the knapsack even though", "there's different combinations of taken objects", "So for example  there are four ways in which we can choose  out of the first", "four objects  in which the capacity is reduced by three kilograms", "So there's four ways to choose objects that amount to three kilograms worth", "of weight  right", "So we could choose this object and this object or the two in this guy", "that's the second choice  or the two in this guy  so that's three choices", "And finally  we can choose all three ones to come up with another way", "So for those particular combinations  we see that there's four different", "ways in which the resulting subproblem ends up with the green list with a", "capacity of        which would be", "So there are many overlapping subproblems", "In fact  so many that we could see that  in fact  memoization reduced the", "exponential runtime to something much closer to linear"], "vmz9pVWI2S4": ["Eric Grimson  In this fourth lecture  we are going to take our ideas of", "looping computations and abstract them", "That means we'll capture the idea of a computational method inside a", "function  allowing us to separate the details of how we do the computation", "from the use of the computation", "Something we call a black box abstraction", "This is a very powerful idea that will let us build complex collections of", "functions that compute very interesting things without getting", "bogged down in the details", "And in a way  that makes it easier to reuse methods  or to", "debug or correct them", "We'll also introduce a formalism called environments to help us", "visualize how using functions within a Python interpreter controls the", "assignment of names to values  how those values are retrieved  and how we", "can use those ideas to conceptualize new algorithms", "At the end of this lecture you will have the ability to write arbitrary", "computations as functions  and to use those functions as building blocks for", "other computations  a key element of computational thinking"], "NYBjfMwpvzs": ["ERIC GRIMSON  So now that we've understood our goal", "goals to capture how to knowledge by breaking problems", "down into mechanical steps and then to figure out how to turn", "that into something the machine understands  the", "computer understands  so that it can execute those steps for", "us  we're ready to start putting those pieces together", "In the next lecture  we're going to begin doing that on", "Python  but before we do we want to talk about   last", "piece  about what it means to create recipes", "Every programming language provides  as we've said  a set", "of primitive operations", "They're defined ahead of time  they're the components of the", "ALU that make the computer do its work", "So we're going to build on top of those", "Similarly  every programming language provides a means or", "mechanism for combining primitives to form more", "complex  but legal  expressions", "How do we put together sequences of operations", "How do we define the kinds of things that we want to do", "And finally  every programming language provides a mechanism", "or means for assigning a meaning or value to each", "computation or expression", "That's going to let us map between what the computer", "actually does and what we want it to do", "Knowing that a particular expression leads to a", "particular kind of value is going to allow us to deduce", "the sequence of operations that we want to use", "So when we talk about programming languages  we need", "to talk a little bit about the primitives  about how we put", "them together to make legal expressions  or more complex", "things  and then how the computer's actually going to", "deduce the value or meaning associated with an expression", "That means that when we talk about languages then  we'll", "start by first describing what are the primitive constructs", "What are the elements out of which we put things together", "In programming languages  we're going to see that those", "basic elements are things like numbers  strings  or sequences", "of characters  and simple operators", "And in a real language  or a natural language  the", "equivalent is  for example  words  in English", "What are the words of the programming language", "What are the basic units that we put together", "When we go to put them together  we will talk about", "the syntax of the language", "And that tells us which strings of characters and", "symbols constitute well formed combinations in the language", "In programming languages  well  as we'll see when we get", "to specifics  it'll be things like a number  followed by an", "operator  followed by a number  is a valid Python", "expression", "And it says  basically  apply that operator to those", "numbers to do the right arithmetic thing", "That's a well formed expression in Python", "We have the same thing in English", "There are words that can be put together in some ways but", "not in others", "So for example  in English  the sequence  cat dog boy  is", "not syntactically valid because it's not in the form", "of an acceptable sentence", "So in programming languages  we'll worry about", "defining the syntax", "How do you put things together", "In addition to the syntax  we also have the", "semantics of a language", "And semantics refers to the meanings associated with the", "expressions", "And we're going to make a distinction", "between   kinds of semantics", "First  there's static semantics", "That basically tells us which syntactically valid strings", "that is  sequences of words that satisfy the syntax of the", "language  which of those also have a meaning", "For example  in English   I are big  has the form of a", "noun  an intransitive verb  and another noun", "So it's syntactically valid", "It's in the right combination of what would", "normally be a sentence", "But it's not valid English because  I  is singular and", "are  is plural", "So this would violate the static semantics of English as", "a natural language", "In programming languages  we're going", "to see similar things", "For example  having a literal  followed by an operator", "followed by another literal  and a  literal  just refers to", "a number or a string or some other legal", "combination of things", "That literal operator  literal  is syntactically", "valid  but  for example  we'll see in Python that      the", "and the string  abc  is not semantically valid", "It's a static semantic error because we can't divide", "numbers by strings", "So again  as we talk about our language  we're going to talk", "about what are the static semantics of putting things", "together to create legal expressions", "And then  finally  there is the formal semantics  or full", "semantics of the language", "And that says  what's the meaning associated with a", "syntactically correct string of symbols that does not have", "any static semantic errors", "What's the meaning associated with an expression", "Again  we see the differences between natural languages and", "programming languages", "In natural languages  like English  sentences can", "actually be ambiguous", "For example  the phrase  I cannot praise this student too", "highly  has   different meanings", "can be  what you would take on the surface  which is", "saying   I really like this student   And   could be seen", "in a somewhat sarcastic manner as basically saying   It is", "impossible for me to praise this student   The meaning", "comes from other things  like context or intonation or those", "kinds of things", "So in English  the semantics often is straightforward but", "sometimes is interesting", "In programming languages  we're going to see that we", "always have exactly   meaning associated with a legal", "expression", "But we're also going to see that that meaning may  at", "times  not be exactly what the programmer intended", "And we're going to have to come back to that as we walk", "our way through determining how to associate appropriate", "meanings with different expressions", "But we will talk about the semantics of a language as we", "move through building up the expressions", "And we'll see that the semantics is what we want", "It tells us what is the meaning of an expression", "And we're going to want to work backwards from that", "semantics to deduce the right syntax to capture the", "primitive operations to get us to that meaning", "When we have these different pieces  we can also think", "about  so what can go wrong", "What can have things actually cause problems in the system", "And we'll see that we can get errors  or bugs  as they're", "sometimes called  in all of the", "different parts of a language", "Syntactic errors are quite common  but they're also", "easily caught by the computer", "It's pretty straightforward  in a modern programming", "system  to write an operating system or an interpreter that", "can actually check for syntactic errors before you", "try and run the program", "And good systems will not only catch them before you run the", "program  they'll also point you to the place and provide", "you with suggestions as to what you need to fix in order", "to make the program syntactically correct", "So the static semantic errors do occur  perhaps not as often", "as syntactic ones", "Some languages are very good at actually carefully", "checking  ahead of time  to catch these errors before", "running the programs", "Others are caught while you're actually", "interpreting the program", "Or another way of saying that is  in what are called", "compiled languages  as we'll see  the system will work hard", "to catch these errors before you ever get a chance to try", "and execute the program", "In languages like Python that are interpreted  we'll see", "that the program will walk through executing  or the", "interpreter rather  will walk through executing the whole", "program  and on the fly  will try and spot possible static", "semantic errors and alert us at that time", "of the downsides is that it is sometimes a little harder", "to debug these programs because you're only getting to", "the error when it occurs  and you have to work backwards to", "figure out what caused you to get to that place", "Finally  as we suggested  programs don't have semantic", "errors  in the sense that there is a meaning associated", "with the program if it is syntactically and statically", "correct  but the meaning may not be what was intended", "And so what are common problems", "The program crashes  or  said a little less", "bluntly  stops running", "That's because we made an error of some sort that causes", "a problem inside of the machine", "The program runs forever  or at least until we get tired of", "it and hit a particular command to stop it from", "running because it has entered  for example  into an", "infinite loop", "Or  perhaps the most troubling is that the program may", "actually produce an answer  but it's not what we intended", "And we're going to talk throughout the term about how", "to guard against those kinds of errors by practicing things", "that we call defensive programming", "So  let's pull this together then", "Our goal is we want to learn the syntax and semantics of a", "programming language", "Those are the details of both how to construct legal", "programs and get them to do interesting things", "But what we really want to do is to learn how to use those", "elements to translate our recipes for solving a problem", "into a form that the computer can use to actually do the", "work for us", "We want the computer to compute answers", "to interesting problems", "We want to provide the algorithm  the sequence of", "steps  that's going to make that happen", "And we want to do that by building off of the syntax and", "semantics of our programming language", "And stitched together throughout this is going to be", "this idea that to make this really work  we need to come", "up with smart ways of capturing the computation", "So that computational mode of thinking  that way of taking a", "problem description and breaking it down into a", "recipe  a sequence of how to steps  is going", "to be really valuable", "And throughout this course  we're going to build up a", "suite of tools to let us do that", "In the next lecture  we're going to start doing all of", "these pieces"], "R4uDE45cYI4": ["JOHN GUTTAG  I don't know about you guys out there at  X land", "But I confess I'm getting a little tired of the warm up and ready to", "build and run a simulation", "So let's do that", "If we look over here in the Idle window  we'll see that", "we've got three functions", "They fit nicely on the screen", "They will actually be sufficient to run the simulation", "I want to go over each of them in a little bit of detail", "And we'll do that over here on the PowerPoint side", "So the first function is Walk", "Not surprising  given what we're working with", "It takes three arguments  a field  a drunk  and the number", "of steps to be walked", "The first thing it does is it remembers the initial location of the", "drunk in the field by calling f getLoc d", "It then runs through a simple For loop for s in range number of steps", "f moveDrunk d", "So moves the drunk one step each iteration of the loop in the field", "And at the end  it returns the distance between the start and the", "final location of the drunk", "The next function is simWalks", "This will use Walk", "It takes a number of steps and a number of trials", "It begins by creating a drunk  for some reason named Homer", "It then places the drunk at the origin  in this case       initializes", "a variable that will be used to keep track of how far the drunk has moved", "in each of the trials", "And then for t in range number of trials  it creates a new field  adds a", "drunk to the field  and then calls Walk  gets the number of steps  and", "appends it to Distances  which eventually it returns", "You might be wondering for a minute where this came from", "We hadn't talked about that before", "Number of trials  which we're iterating over down here", "The function simWalk calls Walk to simulate one walk", "Because we're making a bunch of random choices during the walks  we don't", "want to infer too much about a typical walk from any one walk", "After all  we could have one walk in which the drunk just oscillates back", "and forth across the origin", "By running a large number of walks and then aggregating the results  we can", "get some inclination  some indication  of what a typical", "walk might look like", "We'll do that in drunkTest", "Number of trials", "I've just arbitrarily here", "I could have made it a parameter", "But I've included the number of steps", "So we'll take walks ranging from   steps to     steps", "For each of those  we'll call simWalks to get a distance", "And then we'll print three things  how far it was  that is to say how many", "steps were taken  the mean distance  because remember  we're running", "multiple trials  and the maximum and minimum distances to give us some", "insight  not only into what the average is  but what the variance is", "All right", "Let's go back over here to our idle window and actually run this", "All right", "We'll run drunkTest", "Default number of trials is", "That seems good enough", "Let it rip", "Now if we look at it  we let it rip", "We got some distances", "And interestingly  if we look at it  we see that indeed as our intuition", "had instructed us in the previous segment  the more steps  the further", "the drunk seems to be from the origin", "Well at this point  we could walk away happy and say  OK  we", "have the right answer", "Life is good", "Well maybe", "How do we know", "How do we know there's not a bug in the step", "In the simulation", "Well let's go back and do something we talked about when we", "talked about debugging", "Remember when we talked about debugging  we said it's always a good", "idea to run a test case when you know what the answer is and see if you get", "the expected answer", "So let's do that here", "I'm going to replace this line by numSteps   and", "Because I have a pretty good intuition about how far the drunk should go in", "zero steps  that is to say  nowhere", "And we saw before that when the drunk takes one steps  he should be moving", "exactly one step from the origin", "Let's give this a try and see what happens", "OK", "It did give us what we expected", "So probably we can feel pretty good about the result", "Let's run", "let's go back to our original version now", "And I'm going to", "well  let's just run it and see what we get again", "All right", "So I want you to notice here  is the first time we ran it", "say with     steps", "Did I say", "Maybe that was what I had in the PowerPoint  but not what I have here", "When we take     steps  the maximum was", "Here  the maximum was", "Should that make us nervous", "Not at all", "Remember  it is a random walk  and we do expect to have randomness", "A trick worth knowing  however  is that sometimes we want to take the", "randomness out of a random walk or any random calculation", "In particular  if we were to get the wrong answer  and we want to debug it", "it's nice to get reproducible results", "We can do that by using something called Random seed", "So let's come over here and type Random seed of well", "any number will do", "But I'm going to use", "Let's go back for a moment to the PowerPoint now  where I'm going to try", "and show you what's going on", "We're looking here at what happens with Random seed", "We had talked about Random choice generating a", "sequence of random choices", "In fact  what it generates is a sequence of pseudo random choices", "For our purposes  we don't need to worry too much about the difference", "between pseudo random and random", "It will give us the same kind of results a true random number generator", "would give us", "But here's the way it works", "When we first started  it generates a sequence of random numbers", "Then the first time we need one  it returns the first number", "And it returns the second", "Then it returns the third  et cetera", "These sequences are generated using something called the Seed", "Depending upon the seed  we get a pseudo random sequence  a sequence of", "unpredictable numbers", "Typically the seed is chosen using the system clock", "For example  the number of milliseconds since", "Since we don't know when the program will be run  that will give us a", "random result", "However  if I write random seed     or   or   or anything else I care to", "write  it says use this seed", "And then I can use that seed over and over again  and then each test I will", "get the same random sequence", "And we'll get the same things", "So let's try it over here with drunkTest again", "I've run it once", "Now I'm going to run it", "I've got a different result from the last one", "But now we should get the same result because we're using the same seed", "And sure enough  if you compare these two sets of results  you'll see that", "they are indeed identical", "A good trick to keep in mind when you're debugging your programs"], "_FbKIp-6YzY": ["Chris Terman  In this lecture  we're going to revisit optimization", "problems  particularly those that involved having to do an exhaustive", "search to find the optimal solution", "Before  we were forced to adopt a simple heuristic  like the greedy", "algorithm  in order to come up with run times that are reasonable", "Now  we're going to try using a technique called dynamic programming", "that will let us achieve optimal results  but with much", "more reasonable run times", "Let's get started", "Some optimization problems exhibit properties which  if they were true", "allow us to come up with a much more computationally efficient way to solve", "the problem", "The first property is called optimal substructure", "So suppose we have some optimization problem expressed as the function f", "where we pass in an argument that has some structure", "For example  the argument may be a list of items  and the shaded area", "might represent the first half of the list  and the unshaded area the second", "half of the list", "In some problems  we might discover that  to come up with the optimal", "solution for the original problem  we'll discover ourselves computing the", "same optimization problem  but on a smaller argument as part of the", "original arguments that have been whittled down somehow", "So in this case  we're computing the optimization function on the first", "half  and then the second half", "So we decompose the problem  the original problem  into two", "sub problems", "Now  if it's the case that I'll be able to take the answer to these two", "sub problems and combine them some way  I may be able to come up with the", "answer for the original problem", "And if that's true  if our computation exhibits this behavior  we say that it", "has optimal substructure", "Another property is that in doing this sort of decomposition of the", "optimization problem into sub problems  we may discover that the", "same sub problem keeps reoccurring", "And when that happens  so for example  we may discover that we keep computing", "this particular function many times", "And when that happens  when we say that the sub problems are overlapping", "In other words  if we find ourselves computing the answer for the same", "sub problem again and again and again", "Although if not an optimization problem  this definition for Fibonacci", "and its execution display the properties that we talked about on the", "previous slide", "We can see that  to compute fib n    we end up computing fib n      and", "fib n    of   and this is the sort of substructure we were talking about", "And then  of course  the computation involves adding", "the two results together", "So we", "processing the answers from fib n    and fib n    to come up with the", "answer for fib n", "If we actually consider the execution of this  say  on Fibonacci of five", "let's sort of show the call tree  all the sub problems that have to be", "solved  and see what we see", "So  fib    we have to compute fib    and fib    And fib    we'll compute", "fib    and fib    And for fib    we'll compute fib    and fib", "fib      when the argument is    you can see we don't make any more calls", "so that's a leaf of the call tree", "But fib    involves a call of fib    and fib    Same up here  call to a", "fib      and a call to fib", "And then fib    involves a call of fib    and fib    And finally  this", "fib    involves a call to fib    and fib", "So that's the entire call tree that we will execute when we initially start", "off by calling fib", "We can see there's a lot of common sub problems here", "For example  we compute f    here  and here  and here", "And in fact  there's higher levels of sub problems", "For example  fib    shows up twice", "So as we look at the call tree  we see that there is a lot of overlap in the", "various sub problems", "And we'll be able to take advantage of that as we think of a more", "computationally efficient way to compute fib", "So how many calls does it take to compute Fibonacci n", "Let's let t n  equal the number of calls that we need", "So we can sort of say  well  T n    and now we can look at the structure", "of the problem", "And we can see that to compute Fibonacci n    we have to compute", "Fibonacci n      which will take T n    calls  plus Fibonacci n", "which takes T n    calls", "Well  looking at the form of this equation  we can see that this", "quantity basically approximately doubles with each increment to n  and", "that suggests that the answer", "we expect the answer to grow exponentially", "Now  it's not quite doubling  so the exponential won't involve the constant", "but let's assume that it involves some constant alpha  so it", "goes alpha n", "So let's see if we can figure out what alpha is", "So this equation here  if we assume that the form of t n  of n is alpha n", "that suggests that alpha n   alpha  n      alpha  n    We'd like to", "solve this for alpha  so let's divide both sides by alpha  n    so I'm just", "dividing both sides by the same constant  which is fine", "OK  so now I'm going to simplify this into", "that's alpha     and alpha  n    over alpha  n    is alpha  and then that", "reduces to", "And I can go ahead and solve that  so I'm going to have to solve this for", "alpha  and when I do so using the quadratic formula  I discover that", "alpha       sqrt        and that's a very magic number", "It occurs in many interesting places   particularly in nature  it's called", "the Golden Ratio", "A good thing to remember as sort of part of your education is what the", "golden ratio is   it's   plus the square root of", "And so what that suggests is that the number of calls that we have to make", "in order to compute Fibonacci n  is order of this Golden Ratio  which is", "about     n", "In the code accompanying this lecture  we provided a definition of Fibonacci", "which we'll use to do some performance evaluations", "One little detail we have to take care of before we start  though  is that", "Python really thinks that functions that keep calling themselves too many", "times   too many levels of recursion", "are probably in error", "In order for our experiments to succeed  we're going to have to", "convince Python to let us do a large number of recursive calls  and we can", "specify that using the set recursion limit function that is", "inside the sys module", "So we set it very high so that we can run our experiments without complaints", "from the Python system", "OK  so let's go give this a try", "We're going to save this out  and then do some functions", "So for instance  we can ask for what fib    is", "", "And we can ask maybe what fib    is", "OK  that's a bigger number", "You can see that the Fibonacci sequence actually gets large quickly", "How about fib", "Did you see there was a little bit more of a pause there", "Remember that the number of function calls is growing exponentially with", "the size of the argument  so we had to make many  many more function calls in", "order to compute fib    with the definition of fib that we have", "How about fib", "Well  it's going to be somewhat larger  and you can see that I was", "taking a considerable length of time to compute  and as we're going  the", "run time is sort of growing exponentially", "How about fib", "Well  it's running away  and in fact  it will run away for", "quite a long time", "We'd have to sit on our hands  go out for a cup of coffee  maybe even lunch", "and come back to get the answer here", "If I interrupt this execution  you can see that we were many  many levels", "deep in the recursive calls to the Fibonacci"], "Y0lczs-_w-I": ["Eric Grimson  In this third lecture we are going to start building on our", "ability to write simple programs", "In particular  we're going to introduce the concept of iteration  or", "how to repeat a method multiple times in order to reuse the computation to", "execute something an arbitrary number of times", "Once we have iteration  we can start doing some interesting classes of", "algorithms", "Starting with guess and check methods  the guess and answer  check it  and", "then use the results to improve the guess", "This will lead naturally to the idea of loop constructs  or mechanisms in", "our language that let us generalize the idea of repeating a computation", "until a particular condition is reached", "This will let us generalize our guess and check methods to a broader group", "of algorithms called successive approximation  and especially to a", "very common and very powerful method called bisection search", "At the end of this lecture you will be able to write simple algorithms that", "solve numerical problems by improving approximate estimates of the answer to", "get successively better guesses"], "GometKBrL7E": ["CHRIS TERMAN  By now  I hope you're getting the idea that we can tackle", "the exponential cost of exhaustive search by structuring the problem so", "as to generate recurring subproblems", "Then we can use memoization to look up the answer instead of recomputing it", "Our next example comes from the field of genomics research  where one of the", "interesting computational problems is to figure out the alignment of two", "genetic sequences", "In this example  we're trying to find the minimum cost alignment between two", "sequences  so here are two example four element sequences", "If we consider an alignment where we basically start by lining up their", "first characters  and going from there  we can see that  in this", "particular case  there are three mismatches", "In this column  this column  and this column the individual symbols don't", "match  and so I would say the cost of this alignment is three times the cost", "of a mismatch", "So that will be a parameter that we can set  a cost of a mismatch", "Let's consider a different sort of alignment", "Suppose we start off by aligning the two first characters but assume that", "the second character  in the first sequence  lines up with a gap in the", "second sequence  and then we can continue the matching process like so", "And then there's a final character in the second sequence  which we would", "assume would line up with a gap in the first sequence", "So here what we're considering is what happens if we start introducing gaps", "into the process where some characters disappeared", "This particular alignment  where we've made some assumption of the gaps in", "each of the two sequences  would have a total cost of two times", "the cost of a gap", "What we'd like to do is to consider all possible combinations of matching", "the symbol at any particular column or introducing a gap in one sequence or", "the other  and once we've run through all possible combinations of", "mismatches and gaps  we would like to choose the alignment", "with the minimum cost", "Let's see how we can break the alignment process into subproblems", "Originally  we're given two sequences", "Let's say this one starts with A and some number of symbols afterwards  and", "sequence two starts with a B and some number of symbols afterwards", "There's actually three different alternatives we want to be", "able to test out", "In the first alternative  we assume that the two sequences match at their", "starting symbol  and so the subproblem that we need to solve is basically to", "align the rest of the sequences", "We want the optimal alignment for the rest of the sequences", "So all but the first character in the first sequence and all but the first", "character in the second sequence", "So we want to align those two  and then we'll simply account for the cost", "of the alignment of the first symbol", "So the cost is  well  if the first character in S  isn't equal to the", "first character in S   then we have to increment the cost of the subproblem", "here  increment the cost by the cost of a mismatch", "However  if they were the same  if it turned out that was A and that was A", "then we'd use the optimal alignment for the rest of the sequence and there", "would be no additional cost", "The second alternative is that the first character in A actually of the", "first sequence  actually aligns with a gap in the second sequence", "So this is sort of the problem we're looking at here", "And so that means that the subproblem now  this is after we consider the", "first character was the subproblem  the subproblem is that we need to", "align the rest of this characters in the first sequence", "So that's when we take off the first character because it's aligning with a", "gap  with all the characters of the second sequence", "And then when we get back the optimal alignment there  the first string will", "have an A on it  and the second string  we'll put a gap", "a dash to indicate a gap at the front", "And the additional cost is going to be now the cost of a gap  so gcost", "And finally  as a third alternative  we have the second", "situation only reversed", "In this case  we assume that the first character of the second sequence", "aligns with a gap in the first sequence", "So that's the situation we have  and now the subproblem is to align the", "first sequence with the remaining characters in the second", "sequence like so", "And the cost  once we get back that optimal alignment  we can put these", "two characters at the front  and we'll have the optimal alignment including", "the first characters and the increment and the cost will be again  the cost", "of another gap", "So if we pursue this recursively  where we slowly consume the first", "character of the sequence and then consider the three alternatives  we'll", "eventually exhaust all possible combination of matches and gaps in the", "two sequences", "Here's the implementation of the recursive alignment", "procedure we just discussed", "We start by dealing with termination of the recursion", "So  for example  if the first sequences run out  we assume that it's", "padded with gaps that match any remaining characters", "in the second sequence", "And similarly  for the second sequence  if it runs out", "Then we go off and consider the same three alternatives", "we discussed earlier", "The first symbols of the two sequences aligning or the first symbol of one", "sequence aligning with a gap in the other", "In each case  we go off and do a recursive call to compute the best", "alignment of the remaining symbols  and then  add any cost penalties that", "are incurred by the situation that we're dealing with", "We've also included code that constructs the align sequences so we", "can see what the optimal alignment has turned out to be", "Finally  at the end  of course  we choose to return the alternative that", "has the cheapest cost among the three", "We have a couple test cases down here at the bottom", "One is a very simple alignment where we're aligning the sequence CAT with", "the sequence AT  and then a longer challenge  which   and we'll see how", "that turns out", "And  as usual  we have our little test case", "So let's start that up and see how it works", "So first  let's test the alignment", "of the simple sequence", "So s a and s b  and as expected  we discover that the minimum cost", "alignment involves a gap at the beginning of the second sequence", "What about the longer of the two problems", "Now  as you might expect given that this is a lecture on dynamic", "programming  we'll discover that  in this particular case  we don't get an", "answer right away  and  in fact  we'd have to wait for a very long time", "because exploring all the possible alternatives of where to put the gaps", "is actually quite time consuming as the sequence gets longer and longer", "and longer", "The cost grows exponentially", "So I'm going to terminate this  and now  we're going to see if there's any", "overlapping subproblems", "If there are overlapping subproblems  then I would assume that if we go off", "and memoize the alignment procedure  now we would hope that trying to align", "the longer sequences  so s a with s b  will actually result in an answer", "quickly if there are overlapping subproblems that the memoization is", "taking care or for us", "And  in fact  you see we get the answer almost instantaneously", "So that means there was a large number of overlapping subproblems  and you", "can see that it suggests that the optimal alignment comes with the", "insertion of two gaps leaving just one mismatch", "So this C and that A  so one mismatch and two gaps was the optimal guess for", "the alignment of those two sequences", "Well  there you have it", "We've looked at three examples where dynamic programming could reduce the", "exponential costs of our exhaustive search so that we can get the optimal", "solution in reasonable time", "We needed two properties to be able to do this", "One was optimal substructure  where we had to be able to reduce the original", "problem into a sequence of smaller but identical subproblems  and then we", "could combine the answers from the subproblems into the answer for the", "overall problem", "And secondly  we wanted to have overlapping subproblems so we could", "use memoization to look up the answers instead of having to recompute them", "Dynamic programming is not something we can apply to every optimization", "problem  but it's always worth giving it a try to see if you can cast a", "problem in a way that exhibits these two properties", "If so  you're in luck and you should be able to get a computationally", "efficient answer"], "3a2rB3LhRjo": ["CHRIS TERMAN  Our next topic is a really neat feature of Python", "We're going to use it to create iterators that allow easy access to", "internal data structures of a class", "But generators are far more general", "They can be used to implement co routines", "And in fact  if we have to build a factory that produces a sequence of", "values  sometimes it's much easier to generate each value on demand  rather", "than try to generate them all up front", "And that's what generators let you do", "I hope you have fun with the finger exercise at the end of", "the next video segment", "I thought it was pretty neat to build a little factory that generated an", "infinite sequence of prime numbers", "Let's look at one of the features of Python which may help with some of the", "inefficiencies caused by data hiding in our class objects", "Any procedure or method with a yield statement is called a generator", "So it looks just like a procedure  but it's a procedure whose body contains", "one or more yield statements", "Python says  aha  that procedure", "or method  if this was inside a class definition", "is a generator", "When I call such a procedure  instead of getting back a value  I get back a", "generator object", "And then I can use that generator object as follows", "I can call its next method", "And the next method basically executes the procedure  and", "let's see what happens", "So when I actually call the next method of the genTest generator", "object   this one that got returned when I called genTest", "the first call to next will start execution of the procedure in the", "first line of the body of the genTest generator", "And the first thing I see is a yield", "So at that point  execution will be halted  and the value that was in the", "body of the statement is returned", "That's the value of that call to the next method", "The next time I call the next method  execution resumes at this point and we", "keep executing more statements in the body until we run across either", "another yield  in which case we do the same thing", "suspend execution  so forth and so on", "or we run off the end of the procedure", "And when that happens  the generator raises a particular Python exception", "called StopIteration", "That seems a little complicated  but let's watch it in action", "So here we go", "We have our little generator definition over here", "in our editor window", "Let's go off and make one", "So we're going to go off and call that genTest generator", "And you can see what we get back is the generator object", "Now we can go off and start calling the next method on", "the generator object", "The first time I call it  execution begins  and the first statement I run", "across is a yield statement", "So at this point  execution will be suspended after the yield statement", "and the value that gets returned is", "We go off and continue to call next", "We get back the value", "And our third call to next will run off the end of the procedure", "And you can see indeed we do get a StopIteration exception", "That might seem a little cumbersome  but fortunately  for  knows all about", "generators", "So I'm going to go off and create a newly initialized generator", "And it's going to be the thing I'm going to iterate over", "So the for loop knows that to do successive iterations over a", "generator  it keeps calling next until it gets a StopIteration exception  at", "which point the for loop finishes", "So in this case  I'm just going to print out all the values that get", "returned by the generator that was returned from my call to genTest", "And you can see the for loop works great", "This is sort of fun", "Let's imagine a slightly more complicated generator", "Here's a generator that will produce successively  for each call to next", "all the numbers in the Fibonacci sequence", "So if we're going to go off and do that   so here I'm going to say my", "Fibonacci generator is like so", "And indeed  fib is another generator", "So I can say fib next", "Well  I got the first value back", "So let's see how the Fibonacci generator is working", "So I have a little bit of state inside the generator  some local variables to", "remember where I am in the sequence", "To generate Fibonacci", "you can see the formula for Fibonacci here", "I need to know the last two elements of the sequence", "So I initialize the last two elements  such that the first call returns the", "first number in the Fibonacci sequence  which is", "And then each successive iteration  where I keep executing until I get", "down to here", "I then yield the next value in the sequence", "I update my internal memory to remember the last two values  and then", "I suspend execution at that point", "When I return  I'm going to update my little memory about what the last two", "values are  and iterate through the loop", "So each time through the loop  I'm generating the next element of the", "Fibonacci sequence and then stopping execution", "And when I resume execution  I finish off the loop  by updating where I am", "in the sequence  and then going on and generating the next element", "So if I go off and call fib next    so far so good", "", "whoops  can't type", "fib next    great", "So we expect now the next element should be   plus    which is", "So far so good", "In fact  let's start with a fresh Fibonacci sequence now", "I'm going to go off and ask for all the numbers that get generated by my", "Fibonacci sequence generator", "And I'm going to print them out", "Interestingly  you can see this will basically run forever", "Because of the while loop  it never returns", "And you can see the Fibonacci numbers are slowly getting bigger and bigger", "and bigger as we go on", "Cute", "I've stopped it with an execution of control C on the keyboard", "So you can see generators are a useful way of going through a sequence of", "values without actually generating all the values in advance", "How does that help with the problem we started off with", "In other words  we'd like to make some of our data hiding a", "little bit more efficient", "So before  when we asked for a list of all the students  we actually made a", "copy of that list", "If all we're going to do is support iterating through that list  asking", "for each element of the list in turn  we can replace this rather inefficient", "list copying operation instead with a for loop that yields the", "students one by one", "So now all students  instead of returning a list  returns a generator", "which we can also use inside of a for statement  as we just saw", "And each time the for loop asks for the next student in the list  what I", "get instead", "where we are in the list is now being remembered by the generator  and it", "just yields the students one by one by one", "And eventually  after I get to the last student in the list and this for", "loop completes  the generator then will tell the for", "loop to stop iterating", "So this is a much cleaner way of allowing people to run operations on", "the list of students in the class without actually going through the", "expense of returning them the list itself"], "RQdyRhHDlRo": ["Well  those are your tools for edX", "Bear in mind that we are still in the early stages of", "development", "So we might be tweaking parts of the site as the term", "progresses", "Those changes will all be small and will not distract", "from the learning that is the ultimate purpose of edX", "Good luck with your classes this term", "We look forward to your development"], "9i-VL98AuEY": ["PROFESSOR  In the last lecture we started talking about graphs  and we", "saw the basic idea of a graph", "We could represent objects as nodes  and connections and interactions", "between those objects as edges", "And then what we often wanted to do was to find a solution", "an optimization", "over that graph", "And that was straightforward to understand when we were thinking about", "graphs that represented physical networks", "a transportation network  an electrical network  some other network", "that moves things around", "Where in case of the transportation network  the nodes could be cities and", "the edges would be flights between those cities", "We saw as an example  we could find solutions like the cheapest flight or", "set of flights from one place to another  or the one that took the", "least number of legs or segments in the flight", "But we can also use graphs to explore other kinds of systems", "In particular  systems where we're really interested in the changes in", "the state of a physical system", "What does that mean", "I might have a physical system like a plant   a power plant  some other kind", "of plant  a manufacturing plant", "And I want to have the states  or the nodes of the graph rather  represent", "the states of the system", "current configuration", "And the edges in this case  would represent actions", "things that cause a change in the state", "open up a valve  close a valve  change the heat  something like that", "And here  my graph search wants to find a sequence of actions that", "converts the system to a desired state", "Now  let's look at an example", "And here's what seems like a simple example  but actually a fun one", "This is a little puzzle you may have had when you were a child", "called the   puzzle", "It has a set of   numbered tiles in a grid that has   spots", "So there's one blank spot right here", "And the idea is  I want to go from some initial state  such as the one", "shown here", "By sliding the tiles one at a time into the blank spot  I want to try and", "figure out how do I convert the puzzle into some desired goal state", "such as getting them all lined up in the proper order", "So here process is slide any tile", "And I want to find the sequence of slides that actually gets me to the", "solution I want   the goal state", "Here's an example", "There's my initial starting solution and here's the things I can do", "I can start by doing a slide that moves   down into that spot  getting", "it down where I want it to be", "And then I could do another slide that moves   over", "And that I'm going to do because I want to actually shift   up", "Now I'm in pretty good shape because you can see that this is going to let", "me move   over and   down", "Now the bottom three tiles are now in the right place", "And oh  I can also see now that if I bring   down  all I have left to do is", "shift   over and then   over", "And I'm done", "Nice and easy  right", "And you can see here  I'd like to find that sequence of steps", "You can also see it may not be trivial to find", "So how could I turn this into a graph problem", "Well  a simple way would be to just think about representing it the way we", "did with previous problems", "I could take each state of the puzzle   each particular", "arrangement of tiles", "and I could represent that as a node in a graph", "So every specific layout of tiles would be a different node in my graph", "Each edge of the graph would specify which tile I would slide to get to a", "new state of the puzzle", "So from one node there might be   or   possible edges that tell me different", "ways I could slide a tile to get to a new state of the puzzle", "And I could just then explore that space", "Here's the problem  how big is the space", "Well  I've got   spots in my grid", "So in fact  there are   factorial  or               all the way down to", "Different ways to arrange numbered tiles in that grid", "And that says I've got almost     nodes in my graph", "Eh", "That's big", "Worse  each node has either       or   edges because there's going to be", "or   tiles that I could slide into the open spot", "And that says basically  that the graph has almost a million edges and", "plus thousand nodes", "I don't want to build a graph that big", "That'd take forever", "It's going to be huge", "Is there another way in which I could actually turn this into a graph", "problem and solve it", "And that's what we're going to talk about"], "pG9JQOSadtk": ["ERIC GRIMSON  OK", "We've seen recursion", "We've seen this idea of breaking problems down into a simpler version", "of problems", "But at this stage  you may be looking at it and going  oh  come on", "The examples you're showing  they're easy to solve in an iterative fashion", "What's the big deal here", "So I want to show you an example of a problem that is beautifully captured", "by thinking recursively  and really hard to do if you're going to try to", "think iteratively to give you the power of that recursive thinking", "And the problem is an historical one  or a classic one called", "the Towers of Hanoi", "And here's the legend behind it", "The legend is that there's a temple in Hanoi", "In that temple  there are three very tall spikes", "And initially  one of those spikes starts off with a stack of", "different sized discs put on it  holed in the middle so you can lay them out", "And they are initially in increasing order of size", "Smallest one of the top  all the way down to the largest one on the bottom", "For various reasons  the priests in that temple are trying to move that", "stack by moving the discs one at a time  and they have a property", "They move one disc per second", "But the idea is that they can only move one disk at a time  and they can", "never cover up a smaller disc with a larger disc", "So they want to think about  how can we make that happen", "And we'd like to write some code to print out the set of", "instructions for them", "Let's look at a demo to see how this works", "I want to think about Towers of Hanoi", "I want to think about how to solve it", "And I'd to think initially about  just could I solve it iteratively", "So let's start with some simple examples", "I've got a very simple version of Towers of Hanoi here", "And if I start with just a stack of size one  then moving it to some place", "is really easy", "I just move it  right", "And if I now think about how to generalize this", "Now  to move a stack of size two  I've got to be careful as I do the movement", "that I don't put a bigger over a smaller one", "That looked OK", "If I want to move a stack of size three  well  again  I've got to be", "really careful as I do this  making sure I'm always moving just smaller", "ones on top of smaller ones and so forth", "And I'm sure you see the idea", "And let's see what happens if we do a stack of size four", "Can we actually make this go", "Again  I'm trying to move different versions of these things around", "And I've gotten it to the point where  oh good  now I can actually", "get that one over", "And so now  I want to do those pieces  move this one to that place  I've", "still got to be really careful and if you're watching closely  you'll", "realize  I did it correctly", "OK", "So how do you write code to do this for", "Wow  looks hard", "But let's think about it recursively", "If I think about it recursively  I want to move a stack of", "size n to some target", "Here's the simple solution", "I take a stack of size n minus    move it to the spare spike  move the bottom", "one  and move then this stack over there", "And that's easy", "That's straightforward", "That's exactly what we want", "Let's think about it again", "Recursively  we're saying we'll take a smaller size problem  solve it  solve", "the base case  and then resolve that smaller size problem and we're set", "OK", "Having seen a set of examples of different sized stacks  we can now", "come back to asking this question", "How would you write a program to print out the right set of moves", "And as you saw  trying to think about that iteratively is hard  but thinking", "about it recursively is really easy", "Because what did we say to do", "We said  to do this move  the simple thing to do is to move a smaller sized", "stack  move that entire thing on to the spare place  move the bottom disc", "the basic one  to the place you want to go  and then move that smaller size", "stack back to the place you wanted to go to", "So it's just  solve the smaller problem  solve the basic problem", "solve the smaller problem", "It's a little different than before", "We've got two recursions here", "but the idea is exactly the same", "We could write some code to do that  and that's pretty straightforward", "I've got a little function that basically says  I'm going to print out", "a move going from a stack labeled as the from stack to the to stack  and", "that's just going to say  here's the instruction", "And then the recursive call to Towers is pretty easy", "If I'm in the base case  n is equal to    I'm going to simply print out the", "move  move the stack from the from place to the to place", "Otherwise  move a smaller stacked on to the spare spot  from the place I", "started to", "Then  move what's left  stack of size one  on to the target location", "And now having put that smaller stack on spare  move it to the target", "location  and I'm set", "Let's look at an example", "So  here is that code  and I can simply say  let's move", "Well  let's start off with a simple one", "And I'm just going to give it some names", "I'm going to say this is f  t  and s  for from  to  and spare", "And it says on the base case  just move onto the place you want to", "If I want to do something a little bigger  I can do that", "And that looks like what we did before", "It says  take the smaller disc off of the first stack  put", "it on a spare location", "I've now got one disc left on the bottom one  move it on to the to", "location  and then move from spare back to to to make it go", "And I can do  as you might expect  much larger size problems", "To give it a stack of size five", "Well there it is", "It's a lot of moves  but it gets it done", "What's important about this is to see how thinking recursively made this", "really easy", "To move a stack of size n  move a stack of size n minus", "onto the spare location", "Move the bottom disc where I'm trying to go  move that smaller stack over to", "where I'm trying to think about", "Really easy to think about  and this is really nice"], "kYJj0I4YMHQ": ["Great  we've now seen an example of a search", "a depth first search", "And we saw that  in fact  it stopped when it found a solution  when it", "found a path from the start node to the end node   to the goal node", "But that doesn't mean we find the shortest path", "And we want to  in some cases  find the shortest path", "So if we want to find the shortest path  that suggests we need to have", "some way of keeping track of things", "And what we're going to do is basically use the same structure  but", "just keep track of the best path we've found so far", "And when we find a new path  we'll keep going only if that path is still", "shorter than the best thing we've seen so far", "So notice it doesn't say we just keep going until we find", "all possible paths", "We're going to keep exploring paths  but as soon as we get a path  even if", "it's only partway to the goal  that is not better than the best thing we've", "seen so far  we can stop", "Let's take a look at what that might mean", "Here's the basic idea", "We're just going to keep track of the best thing we've seen so far", "So we go through the first part as before", "Depth first search still is the same", "We start off at node zero", "We're going to replace that with the two possibilities  going from   to its", "two children    and", "I'll take the first of those off of that data structure   the stack", "It replaced", "We're not going to go down the path from   to   to    because that's got a", "loop in it", "So we're going to replace it with", "And we keep going", "We still haven't found a solution  so we're going to keep exploring", "We keep exploring", "We keep exploring", "And eventually  we in fact find that solution  as we did before", "We've got a path that's", "And since in this case  I'm just counting the number of steps or legs", "in the path  it's a path of length", "So I now have a solution of length", "We stopped before  but now we're going to keep going", "We want to make sure there isn't a better path somewhere else in the", "space I haven't yet explored", "So go back to that data structure", "I got that stack  and I want to say  having done this  let me look at the", "next possibility  which is", "OK  so from    in fact  the only solutions I have either create loops", "or don't lead to another child", "So in fact  there isn't a better solution there  and I'm going to cut", "off that branch", "But I'm not yet done", "Remember  I've still got  on my stack  this path  going down this path over", "here  from   to", "I need to keep going", "And so now  given that's my next option  the extensions from", "or to   and", "So I'm going to replace the path to   with those two paths    and", "I pick up the first of these  and from    in fact  I can go to either node", "node    or node", "So I'm going to replace that with those three choices", "I take the first of those", "In fact  from    again there are no extensions that don't create loops  so", "I can remove that", "And I can go on to the next one in my stack  which is", "Yeah", "That's nice", "Because now it says I've reached the goal node", "", "that is shorter than", "It's only three steps  not four steps  so that is  in", "fact  a better solution", "That is now my shortest path", "And with that in mind  I can keep going", "I still have some other things to look at  including these two opportunities", "I can look at", "There aren't in fact any extensions beyond there that don't either create", "loops or lead to longer paths  so I replace that", "I go on to    and in fact  similarly  the only solution I have", "there goes back to    which creates a loop", "So I'm done  and that means that this is in fact the best path", "The change here was  I keep track of the best solution so far", "And doing that allows me to keep exploring the entire space  by making", "sure that I do in fact find the shortest path", "There it is", "How do I change my algorithm", "Well  there aren't a lot of changes", "It's almost the same", "I do have to add in another argument here", "I'm going to call it shortest", "That  initially  will be none  because I haven't seen any path  but will let", "me keep track of the best thing I've seen so far", "This structure is exactly as before", "I'm just extending the current path with the next node", "I'm printing out some material  and I'm checking to see if I'm done", "If I'm not done  then again as before  I'm going to pick up the children of", "the current node", "So again  if we've got a start node up here  and I'm trying to get down to a", "goal node down there  and I've gotten down to some node N here", "Actually  let me not call it N  Let me call it some other node", "Let's call it M  And M has a set of extension nodes that are children", "So for each node  here  that's a child of where I'm currently at", "I'm going to say  first of all  make sure that it's not in the path", "I'm not creating a cycle", "And then what am I going to do", "I'm going to say  look  if I haven't yet found a solution  or if it's the", "case that the path that takes me to here  that is still shorter than the", "shortest thing", "If it's not  then I don't need to bother exploring it", "If either of those are true  then I'm going to search for a continuation", "Is there a path from here that gets me to the goal", "If there is  I'm going to keep it to save it away", "If there isn't  I simply backtrack to the stack and do the next thing", "And I'll keep doing that cycling  so basically I'm saying  when I get here", "let's make sure that if I haven't found a solution  I keep going", "If I have found a solution  let's make sure that that path is still", "potentially better than the thing I've found so far", "If it isn't  there's no sense in continuing to explore  because I'm not", "going to get a better solution", "And the only change here is that I keep that around as shortest", "That stores away my new value  so that when I do the search  I'll be able to", "keep track of that  because it gets passed in up here as part of that", "shortest path", "And actually  I realized I have a bug right there", "I want to pass in another argument right there  which should be shortest", "And then when I'm done  when I've gone through all of this loop  I'll return", "the shortest path", "Great", "That gives me the solution I want"], "-3BEW8PBdhk": ["PROFESSOR  We've got the idea of a clique", "We've got the idea of a maximal clique", "Let's look how we can write some straightforward code to find them", "First thing I need to do  I said  was to find all the different", "subgraphs of a graph", "And I can generalize that by simply saying  given a set of any kind of", "element I'd like to find something called the power set", "And the power set is just the set of all possible subsets of that", "collection", "So if my collection is the list of   elements", "", "then the power set would be a set with nothing in it  the examples that have", "element in it  the examples that have   elements in it  and the example", "that has   elements in it", "It's all the different possible ways of generating subsets of a set", "Actually  there's an easy way to find it if you think about this", "recursively", "And how could I do it", "Remember  recursively says to find a solution to a problem  I'd like to", "find a solution to a simpler version of the problem", "So to find the power set of a set of say  n elements  let's just find the", "power of n minus   element  all the different ways of having different", "collections of n     things", "Once I have that power set   which is a big set of things", "then to solve the bigger problem I take each one of those examples", "because they're certainly an example of a subset of the full set  and for", "each one of that smaller solution I add the first element on to it", "Because it gives me all the ways to find subsets that", "include that first element", "So I find the power set of everything but the first element", "I then copy each element of that new power set with the", "first element added", "And then I put the two things together to generate the overall power set", "So here's a nice simple little solution for it", "Given a set of elements  what do I do", "I say  well  if that set  that collection of elements  is empty  then", "I return the power set of the empty set", "And this is a little funky here", "This is not a mistake", "This says I'm going to return a list that has one element  the empty list", "Oh  yeah", "That's the set of all things of length", "But it is explicitly an empty list", "Then what do I do", "Well  I take all of the elements except the first one and I get the", "power set of that", "That's going to give me a big collection", "If I got n elements  then I'm finding that the power set of n     elements", "And that turns out to be  by the way     n    different solutions", "That gives me a new list  a collection of all these lists", "So it's a list of lists", "I take the first element out right here", "And I make a list of just that element into it", "And then what do I want to do", "I want to create a new list of all the solutions that have that", "first element in it", "For each  therefore  the solution in the smaller set  I add to this thing", "right there on to that element and I put it at the end of this list", "So I'm simply making a copy of all of the solutions from the smaller problem", "and adding to it the element that was the first element in the overall list", "And then I add them together or combine them together", "All the solutions without the first element", "All the solutions with the first element", "And I just return them", "All right", "Let's have a look at that", "And I've actually created a little example over here", "But let me run it again", "I've created something called   oops  I that wrong", "Let's just set up testSet to be the list          and", "And now what I'd like to find is I'd like to find   and there's my code", "over here", "I'd like to find the power set of it which I just wrote here", "So I can compute the power set out of that test set", "Ah", "And there it is", "And if you look at the screen  I'm going to use my mouse here", "There's the set with no elements in it", "And there's", "And then way down here  there's the fourth solution with", "one element in it", "And if you look at other all the solutions with   elements  all the", "solutions with    and of course the only one solution with all   elements", "into it  if you count it you'll realize that this is      or", "solutions here", "Which makes sense", "And you can also see the order in which I'm doing it sort of reflects", "the order in which I was exploring things here", "I don't have to have them in a particular order", "This just simply gives me the power set", "Which is what I wanted", "How do I turn this into finding a clique in a graph", "Well  it's really pretty straightforward", "I'm going to take the set of nodes of the graph and find the power set of", "those set of nodes", "What does that say", "It gives me all the different collections of nodes in the graph of", "different sizes", "Collection of size    the empty graph", "Collection of size    all the different individual nodes", "Of size    et cetera", "And with each one of those  I also have information about the edges", "So I generate all possible subgraphs", "It's a little inefficient  I grant you", "And then I'm just going to test each one to see if it's complete", "And that simply says  are all the edges there", "Or is every pair of nodes in that graph connected", "And I'll just keep track of the largest clique", "That turns out to be pretty straightforward", "Here's how I compute the power graph", "I'm given a graph", "And that's going to be a representation with nodes", "and edges in it", "I'll get out the nodes of that graph", "And I'd like to convert them into a list", "So I'm going to do a simple little thing", "I'm going to create a little label here called nodesList", "And then I'm just going to run through a loop here where I take each element", "in the nodes and I add it into the list", "It happens to be because my nodes here are represented as a set", "I want them in a list so I can do some work on them", "It's a minor little thing", "I then compute the power set on that", "And that gives me back here  as pSet  a list of lists", "And each sublist  in that big list  is a collection of nodes from the graph", "So there's the power graph", "It gives me back all those different subgraphs of the original graph", "What else do I need", "Well  I just need to make sure that if I have a particular collection of", "those nodes  I need to make sure it's actually complete", "That it has all the possible edges in it", "And that's really easy", "I'm going to go through a double loop here", "I'm going to loop over every element in that subgraph", "I'm going to loop for every other element in the subgraph", "And I say every other one because right there I'm going to check to make", "sure that it's not the same one", "So for every pair of nodes in this graph  I'm simply going to say  gee", "check to make sure that the first node is not one of the children of the", "second node", "Or said betterly  if the first node is not one of the children the second", "node  it says there isn't an edge between n and m", "And that means this can't be a complete graph", "I don't need to worry about chasing further down the path", "I just need to say  for every pair of nodes  are they connected", "And if they are  I return True", "That's all I need", "And with that now  I can write a straightforward  somewhat inefficient", "but very useful tool to find the max clique or the", "maximum clique of a graph", "Given a graph", "I compute the power graph", "I'm going to call it candidates", "That's all the collections of different numbers of", "nodes in the graph", "All the subgraphs of the graph", "I'm going to keep track of which one I want to keep", "So there's keepEm", "And what does it say I'm going to do", "Well  the first thing I'm going to do  very brute force fashion  is I'm just", "going to go through all of those subgraphs and figure out which ones", "are connected", "So for each subgraph  I check to see  is it connected", "And if it is  just add it in to keepEm", "I could do this more efficiently", "But right now that's a simple way", "And when I'm done with this stage  I've got in keepEm a set of all the", "different cliques  all the different completely connected", "subgraphs of the graph", "What else do I need to do", "Just find the longest one", "And I'm not even going to go through this because this ought to look like", "the kind of solution you've seen before", "I'm just going to loop through them  keeping track of the longest one I've", "seen so far", "Both its length and the actual thing", "And I'm going to return the best solution when I'm done", "And with that  I compute a maximum clique", "And just to give you an example of it  if I had a simple graph like the one", "shown here  in fact  the max clique would be that set there because it has", "all the connections between them", "And if I actually were to run it  which I can do over here", "I go over to my code", "I can build that little test graph", "You can see it right there", "It's called trialGraph", "I'm going to make it", "So if I print out trialGraph here it is actually a graph", "And if I run max clique on it", "I'm just going to call that myClique", "I've actually done it once  but I'm going to do it again", "Compute max clique on that trial graph", "Boy", "It comes back really quickly", "And myClique", "ah  very nice   is just a set of   nodes in that graph", "And it turns out it's exactly the   nodes that I just computed up here", "So let's step back from all of this", "And for the last two lectures  we've been talking about graphs", "Very powerful tools", "Very handy tool for representing a wide range of problems", "It's a great data structure for capturing", "relationships between objects", "In some cases  those are actual physical objects", "So the nodes in the graph are places  locations  airports", "Well  nodes in a pipeline", "And in some cases   in those kinds of cases the edges are actually physical", "connections between them", "Flights between airports  for example", "In other cases  as we saw at the beginning of this lecture  the states", "or the nodes could be the physical state of a system", "And the edges are things I do  actions I take to transition from", "one state to another", "Some cases I'm going to represent the graph explicitly by creating all of", "the different nodes and edges", "In other cases I'm going to do it implicitly by encoding transition", "rules that tell me how I can get from one node to all other nodes", "And then I just solve some optimization problems over it", "And they can often be captured as graph search problems using either", "breadth first search or depth first search", "And what we also saw is that the implementation of those two mechanisms", "are very straightforward", "They differ only in the data structure I use to keep track of the different", "possibilities that I have", "Whether I use a queue or whether I use a stack", "That is  whether I take the last thing I generated as a possible path and", "look at it first  which gives me depth first search  or whether I take the", "new kinds of things and put them at the end of the set of things I want to", "deal with  which gives me breadth first search", "But either way  they give me great ways to find optimal", "paths through a graph"], "BQMz9FUnJj0": ["ERIC GRIMSON  OK", "We want to try and solve this as a graph problem  and here's how we're", "going to do it", "We're still going to have a node in the graph represent each state of the", "system  but we're going to do it by the following mechanism", "We're going to have the nodes specify a particular layout of the tiles in", "what sequence are those number tiles in that grid", "But rather than generate all of the nodes  we're only going to generate", "them as we need them to explore paths", "So we might start off just with a goal node and a start node", "The edges in this case  are going to become implicit", "We're not going to represent them as specific objects", "Rather  we're going to generate them as we need them to", "create each new node", "So if we're at a particular point in the puzzle  we've got a particular", "layout  we're going to say  what edge  what action would take me to a new", "layout of the puzzle", "That's a legal thing", "And I'm going to simply compute those edges and therefore  those new nodes", "as I need them as I go along", "Let's put this or make this a little more concrete", "So here's an example", "I'm going to represent a node in the following way", "Here's a grid  a particular layout of tiles", "And I'm going to convert the sequence of tiles into a string of labels", "So that's the  th spot  the  st  the  nd  the  rd  the  th  the  th", "You get the idea", "Then I'm going to simply string together the numbers  in this case", "", "I'm going to use a   for the blank spot", "So the label  the name  for this node would be that sequence of numbers", "It tells me specifically the state of the puzzle or the particular instance", "I'm looking at", "I'm going to also keep track of that blank spot there because it's going to", "tell me something about where I can move things", "So in this case  it's in spot number   because I'm starting with   up here", "and simply counting in that order", "OK", "We'll do this in a second  but you can see how I could capture a particular", "layout of the puzzle in this way", "It's got a label  which tells me where the numbered tiles are", "It's got information about where the blank spot is", "And in a second  I'm going to talk about how to compute the edges", "But that's what I need", "OK", "What's an edge", "Well an edge in this case is some way of encoding the legal way of shifting", "tiles in this space", "So for example  in this particular instance  I can take the thing that's", "in the  rd slot here  remember it's at", "The tile in the  rd spot  I know I can shift down to the  th spot because", "that's spot number    because that's one legal way of doing it", "And the only other legal way of doing this here  is I could shift a tile in", "the  th spot also over into the  th spot", "Similarly  for all the other positions where the blank tile is or the missing", "tile  if you like  is I can encode what are the legal places", "I could shift to", "And all I need to do is keep track of those", "So I could keep track of these legal shifts just in a dictionary", "I would index by the location in the grid", "So that is the key into the dictionary would be  for example  spot number", "and I would say for spot number    I can tell you what are the legal places", "that I can shift from  or where can I move the blank spot to  if you like", "And I just return  in fact  the new legal locations", "So that seems pretty straightforward  and in fact  here's an", "implementation of it", "And I know there's a lot of code here  but let's just step through it", "It's not as bad as it seems", "I'm going to create a class called puzzle", "I think we should call it InstanceofPuzzle because it's telling", "the state of the puzzle", "And when I set it up  I give it in an initial layout of the tiles", "I'm going to give that a name", "I'm going to call it the label", "And I said I want to keep track of where the blank tile is", "That's number   in that string", "So I'm simply going to search through and find the spot where that   occurs", "and I'm going to put that away", "Store that as spot", "So I've got label  which gives me the actual identity of the tile", "And I've got the spot  the place where the blank exists", "What else do I need to do", "I need to be able to generate edges", "Normally  I would have edges here  but I need to be able to", "generate the edges", "So I'm going to have a function called transition that takes a", "location called to", "That's the place to which I'm going to do a shift", "And here's what I'm going to do", "I'm going to get from the object  the label  and I'm going to get the", "location of the blank", "That's the place where the blank exists", "And the thing that I'm going to shift the blank to  if you like  or the", "thing I'm going to take a tile from is in to", "So I get the number associated with that spot in the string  and that's", "going to be the label I'm going to put into blank", "That's going to be the number that goes into the spot", "where the blank was", "That's the number of the tile I'm going to shift down", "And then I create a new label", "And what's the new label", "So it's just going to be initially a blank string  and I simply run through", "the sequence from   to", "If the index is the index of the thing I'm shifting the blank to", "then I put a   there", "Because the   says I'm going to have a blank in that spot", "If the index is where the blank was  that blank location  the thing that", "was captured right up here  I put the new label there", "That's the number of the tile that I'm now shifting", "All right", "And otherwise  I just keep all the other tiles in the same place", "So this little function basically just generates the label associated with", "the new state of the tile by simply keeping track of where's the blank", "What am I shifting into the blank  and putting those names or those numbers", "if you like  in the right place in this new label", "And then I just create a new instance of the puzzle and return it", "All there is to it", "Now  how would we search this", "Let's have a look at that", "Oh", "Yeah", "Before I do that  I need to be able to keep track of how am I going to", "actually shift things", "And I said I would do that with a dictionary", "So I'm going to create a little dictionary of shifts", "And basically  for each index that captures where the blank is  I'm going", "to specify from what other location in the grid can I shift", "something into it", "So if I'm talking about things that can be indexed by    then I can shift", "from spot    and I can shift from spot", "Let's pick another one", "If this is             let's take number   here", "Oh yeah", "If I'm talking about a blank in    I can shift from spot    from spot", "from spot    and from spot   into that new blank", "And this is going to just let me keep track of what tile am I moving into", "the blank spot and what spot does that blank now lie in", "I've just got a little dictionary that keeps track of that", "That's all I need", "Now  I can actually write a little version of a breadth first search to", "find solutions to things like this puzzle", "I'm going to call it BFSWithGenerator because I'm going to generate the", "nodes using these implicit edges as I need them", "So I'm going to have a start point", "I'm going to have an end point  which one of these is going to be one of", "these nodes", "It's got a label on it  an indication of where the blank spot is  and I'm", "going to just keep track of the paths", "And I'm going to write this a little bit differently than the last time we", "saw it because I want to stress a really nice point here", "So my initial path is just the start point", "That's the only state I've got", "And I'm going to put that into this data structure", "I'm going to call it q", "We've used queues before", "And I'm going to do it by putting it at the end of the queue  so appending", "it  appending initPath onto the queue", "q initially starts off just as an empty list", "Now  as long as there's something in the queue  the queue is not empty", "I'm going to get the first thing from the beginning of the queue", "And again  I'll remind you  what I'm doing with the queue is  I'm putting", "things in at the end of the queue and taking them off of the", "front of the queue", "So this says  using the operation pop add index", "So let's take the first thing off the queue", "That's now my new temporary path", "Let me get the last node out of it by simply indexing into it", "That gives me  remember  a path is a sequence of states of the puzzle", "So it's giving me the last point in this sequence", "And here I say  gee  if I'm where I'm headed towards  I'm done", "In this case  I do it by just looking at the label on that note and the", "label on the place I'm trying to get to", "If those are exactly the same  I'm done", "I return the path right there", "If I'm not done  then I want to explore this space", "And I want to do it in a breadth first matter", "So what am I going to do", "Well  I would normally say  get me the edges", "And in this case  I do it by figuring out what are the transitions", "So what do I do", "I go into the last node  and I go into the place that has the blank", "What location in that grid contains the blank", "I look up in the dictionary  and that gives me a set of new places where the", "blank could be after I do a tile shift", "And for each one of those  I simply compute using that transition", "function  the new state of the system", "So it says  if I got a grid  I'm going to shift something into the blank", "spot  and this gives me now a new node in my graph", "Almost done", "I don't want cycle so again  I'm going to check  and I'll use this in a", "second  to basically make sure that that node is not", "somewhere in the path", "If it is  I've got a cycle", "I don't want to use it", "And so long as it isn't  I'm going to create a new path by putting this", "state  this new node  at the end of the previous path", "And now  I'm going to explicitly put it at the end of the queue", "So there's a call to append", "So that says  if I've got a sequence of things here  I'm pulling", "off the first one", "If it's not where I wanted to get", "I want to use the transition to create", "There's another set of things that I'm going to put at the end of the queue", "I'm going to pull the first one off  and I'm going put some more off at the", "end of the queue", "So I'm explicitly taking things off of the front of the queue and putting new", "things on the end of the queue", "I'm going to keep on doing that until I get to the solution I want", "Wow", "Nice and straightforward", "This transition is being computed automatically to give me the new", "states of the puzzle", "And here  the queue is very explicitly keeping track of how I'm actually", "doing the remembering  if you like  of all the states of the puzzle", "I only have one other thing to do", "I have to check to make sure something's not in the path", "And that's easy", "I'm just running through a little loop looking at everything in the path to", "make sure that the label on the node is not the same as the label on", "something in the path  because that would tell me that it is", "exactly the same node", "And I'm going to return False in that case  otherwise  I'm", "going to return True", "In a second  I'm going to run this to show you how well it works", "But before I do  let me point out that we can also search this in a", "depth first fashion", "And I want to highlight this because I'm going to rewrite depth first in a", "way that really points out that a very small change to the code creates a", "very different system", "Much of this code is the same", "Again  it's going to be depth first search with a generator", "I got a start point  an end point", "And remember  we said we use a stack to keep track of things here because", "we'll push things onto the stack and pop them off", "So the last thing we pushed in is the first thing we're going to take off", "Much of this is the same", "I've got an initial path  I'm inserting onto the stack at location", "that first initial path because I'm going to put it at", "the top of the stack", "Much like before  I'm going to check to see as long as I still have", "something there  I'm going to get the path  get the last thing in it  check", "to see if I'm actually done", "Otherwise  pull off all of the different ways in which I can do a", "shift  compute the new nodes  make sure I don't have cycles  and compute", "a new path", "And in fact  if you look at this code  there are only two things different", "from the breadth first search", "One is right there where I'm inserting things into the top of the queue or", "the beginning of the queue", "And down here  notice what I do", "I insert each new path at the beginning or the top of the queue", "In the breadth first case  I put it at the end of the queue", "And I should not have said queue there", "I should have said stack", "In the breadth first case  I put it at the end of queue", "In the depth first case  I put it at the top of the stack", "But with just these two changes  we have almost exactly the same code but", "very different behavior in terms of how we explore things", "OK", "Let's actually run it", "I'm going to go over here and load this up by getting it into my system", "And this  I have here just a set of code that's got that breadth first", "generator  and I'm going to simply run it", "I've created an example of a goal in a place I want to start from", "And what I'm going to do  is I'm going to just call  in fact  this function", "right here", "I'm going to create a path", "I'm going to say that the path is going to be  and I'm going to use", "breadth first generator", "And let me make sure I know what the arguments are", "I want to have it from where I'm starting with anywhere I'm going to", "and I'm going to call it with test  and goal", "And if I run it  it's going to get me something out  and I", "can just print it", "And you notice how quickly it did it", "So I've got a little function that will print it out for me  and I'm", "going to call it with printSolution  and I just want it with the path", "Oh cool", "There's the sequence of moves", "And it's a fact of things that I did in the first part", "There's the sequence of moves that actually gets me where I wanted to be", "Now  it turns out  you saw that it ran very quickly that it did this search", "in about   moves  which is really not bad", "I could do the same thing", "I could say  let's get path", "It's going to be DFSWithGenerator", "And I'll go from test  to goal", "And I'm going to start this off", "And you notice if you look at my screen here  it's", "not returning anything", "And in fact  if I wait long enough  eventually  it's going to complain", "that it runs out of memory because it hasn't been able to find a solution", "and it's chewed up all of the memory generating all of these pieces", "So here's a place where breadth first works much better than depth first at", "finding solutions", "And if you think about it  it's not surprising", "If I've got   some thousand nodes in this space  I want to starting at some", "goal node  look at what are all the places I could reach in one step  and", "then all the places that I can reach in two steps  and then all the places", "I can reach in three steps in that order  which is what", "breadth first would do", "Depth first is going to start and go off exploring somewhere way down", "several     nodes deep before it ever comes back off", "If I start off in the right direction  I'm great", "If I start off in the wrong direction  I'm hosed", "And so I really want to use  in this case  breadth first search"], "4cz7_-_VlmI": ["Eric Grimson  So we've been talking in a lot of general terms  of the design", "test suites  black box testing  glass box testing  how to think about bugs", "and how to think about trying to find bugs using unit testing and", "integration testing  but let's do an example", "Let's talk about and actually walk through a piece of code and look at", "how we can think about actually doing debugging", "The basic idea behind good debugging is to think about as if it was a", "search problem", "I've got some incorrect behavior in my code", "I'd like to find an explanation  because if I can explain why it's", "wrong  that will help me figure out what to do to fix it", "So just like a good scientist  how should you do this", "Well first  study the available data", "Look at both the correct test cases and the incorrect ones", "Looking at those will help us trying and figure out what might be an", "explanation", "How can I form an hypothesis that's consistent with the data", "That would say  it should work on these cases  but would explain why it", "might be failing on the cases where it fails", "Once I've got an hypothesis  I can then design and run a repeatable", "experiment with the potential particular to refute the hypothesis", "That is  when I build now that example  once I've got an hypothesis", "I can design an experiment if I do the following", "If the result is this  it will tell me something about where", "the bug might be", "If the result is that  it will tell me something else", "So that experiment should have the ability to either reinforce or refute", "the hypothesis of where the code is going wrong", "And of course  I want to keep records of this", "I want to go through all of the things I've done inside the experiment", "because that information is going to help me narrow the range of the", "hypotheses about what might be wrong inside of my code", "OK", "With that  then what does it mean to say treat debugging as if it's search", "What we want to do is take the space of possible errors and keep", "narrowing it down", "So we like to design things that help us expose intermediate stages of the", "computation", "In other words  if I said I think there is a bug in this piece of code", "I'd like to be able to narrow down where in the code that", "bug could be happening", "And a really nice way to do that is a very simple tool  a print statement", "I'm going to use an example of putting in print statements in intermediate", "spots in the code to help me see what is the state of the computation at", "that point", "And the idea is  I'm going to identify places in the code where I have an", "expectation of what the values of variables should be", "inside of the code", "And I'm going to use that information the difference between what I see and", "the print statement of what I expect there to help me narrow down the space", "of possible places where the bug actually lies", "And a good way to do this is to use that notion of bisection search or", "binary search that we've talked about before  to use information to reduce", "the range of places where the bug could be in a very natural way", "All right", "Let's look at an example", "This is a simple little example but we're going to use it", "This is a piece of code", "Now I'm going to try and check whether something's a palindrome", "So my function up here  isPal is going to call something that says I'm going", "to take a list as input and then what am I going to do", "I'm going to make a copy of the list", "I'm going to reverse that copy  and then right here if the reverse copy", "and the original one are the same  then it's a palindrome", "Because I took a list  I flipped it  and I'm basically saying  let me", "compare the flipped version with the real version to try to find if it's", "the same or not", "I'll build a little input function here I called it silly  because it's", "silly piece of code that says  I'll give it a number and then I'll have", "the user type in a set of characters to create that list", "And once I've got that  I'll simply pass that on to isPal to check to see", "is it actually a palindrome or not", "Simple piece of code", "It's buggy", "I know it's buggy", "That's deliberate  but let's look at what happens if we're", "actually to run this", "So let's actually run this code and if I go over to my environment here  I'm", "going to load up this code and I'm going to type in silly", "And I'll start off with", "So I'm going to give it a  b  c  b  a", "And it says  oh  that sequence is in fact a palindrome", "That's nice", "Let's give it a longer number  longer example", "e  a  l  i  n  n  i  l  a  e", "And that also is a palindrome", "Sounds good", "Sounds like I've got good code", "But let's try a simple example", "We'll give a and then b", "Oh  dear", "It says that the sequence a  b is a palindrome  and clearly it's not", "because a  b is not equal to b  a which would be thing going back in the", "other direction", "OK", "So I've got a bug", "I could use binary search now to try and isolate where that", "bug is in the code", "Now  one of the good things to do here  by the way  is even though I", "might have a bug with a really long sequence  I happen to do it with a", "simple one  I'm always better off starting with simple examples to try", "and identify where the code is", "So I'm going to try and debug this just using the input of a  b", "So I've got a bug here", "What am I going to do", "Well  I'm going to pick a spot about halfway through the code", "halfway into the code", "There's that binary idea", "Then I'm going to devise an experiment", "In particular  I'm going to pick that spot where it's easy to examine", "intermediate values  and I'm going to put in print statement", "So if I look inside of silly  there's the whole code for silly  then right", "here  it's about halfway through the code  I'm going to put in a print", "statement there", "Now  the print statement is going to say  I'm going to print out what is", "the value of result of this stage", "Remember  silly is building up a list of inputs that it's going to pass on", "so I'm going to actually ask at this stage what's the value of result", "OK", "So let me go back over to my code  and I've actually done that", "I've gotten another version of the code", "It's got that print statement right there", "So let me  and I'll look up this piece of it", "And I am again going to type in silly     and I'm going to", "give it a and b", "It prints out just the list b", "But if you think about this  I would have expected that the results should", "be the list of a of b", "I type it a and I typed in b", "So this is already telling me something", "I ran the code", "I just got b", "I should have had the value of the list of a and b  what does it tell me", "Because I'm using binary research  I know that there's at least one bug", "maybe more  but there's at least one bug prior to that spot", "in that print statement", "Because when I get to that point  I've got a value that's incorrect", "So that's nice", "It says  I now know that there's a bug there somewhere  so I ought to be able", "to add in another print statement", "And I'm going to do that", "Let me go back to my code", "If I could just look at the code here", "I want to stick another print statement that is going to be inside", "of the loop", "Let's see what happens if I do this one", "So I was printing after I got through it", "Let's move it up inside of the loop  and do the same thing", "So if I go to my code here", "Now I've got a version", "Notice it may not be obvious", "I just moved the print statement inside of the loop", "So here it's going to print things out", "That will tell me as I run through the loop what's happening", "Then let's evaluate that", "And if I type silly      and I type in a  it prints out a", "If I type in b  it prints out  hm", "OK", "So this is now showing me that I'm getting the inputs", "but I'm losing them", "Because the first time through the loop I did have the list of the", "element  a", "But the second time through the loop  somehow a had gone away  and I got the", "element  b", "And what's that telling me", "Well  in fact  it suggests that I'm not keeping all of the elements", "And if I go back to my code  I realize that I've got a standard bug", "Which is that if in fact I look at my code  and I'm going to move to that", "code now  if I look at my code  notice that what's happening here", "That right here  I'm doing the initialization or rather I should have", "said in the previous version that I was doing the initialization of the", "result inside the code", "I can see that over here on my screen", "Right here  I'm doing an initialization of result every time", "through the loop", "I need to pull the outside of the loop", "And so that's in fact what my coat does here", "I'm taking the result portion and I'm moving it outside the loop", "That makes a lot since", "I'm not going to keep reinitializing the list every time", "So I want to initialize it once and then collect all of the pieces", "So when I make that change  I'm going to make that change here", "I now move that outside of here", "Let's do another run of this", "And if I type silly     I get a  and it's got the list a  and I've got a", "and b  aha", "So this is now good", "It says at least I've fixed that portion but it still says that the", "list of a and b is a palindrome", "OK", "So we're getting somewhere", "It says we're getting the data structure now property set up  but we", "still have a bug somewhere", "That's a good reminder", "Just fixing one bug doesn't say there aren't more", "bugs in the code somewhere", "I've always gone in to make sure that I test everything", "So I'm at least now getting the right pieces in  but I've still got a bug", "And what do I know", "It says that the second bug must lie somewhere below that print statement", "I'm printing the value that's coming out after I have done the work", "It says it's got to be somewhere else  so where could it be", "Well  it's probably inside of isPal", "Because once I've set up the list properly  what am I doing", "I'm checking isPal on that list", "So let's again do the same thing", "Let's pick a point in the middle of the code of isPal and let's add a", "print statement there", "So if I do that  I'm going to go up and I'm going to remove my print", "statements from the other portions", "And I'm going to pick a point roughly halfway through isPal right here", "Now  what am I going to do", "Well  let me remind you  I said my idea of this test here is I want to", "look at what the values of variables and what might I expect", "them to look like", "So this print statement is going to print out both the value of temp and", "the value of x", "My expectation is at this point  x  is a list that I've passed in", "temp should be a reversed version of it  so they should", "have opposite order", "Let's try that", "So I'm going to go over to my next version here", "I've removed the earlier print statements", "I've got that version let's call this one", "And again  I call silly    and I give it a and I give it b", "Huh", "So what did I do", "Now remind you  I said I'm going to now print out the value of temp  which", "should be reversed version of the input list  and the value of the list", "And you can see that that's not the case", "They're not reversed from one another", "So that says I must have some problem here", "Obvious  I got problems", "It's not doing the right thing and what does it say  I would have", "expected that x would be a  b and temp would b  a", "But they're not  they're the same", "So what do I know", "I know by binary search that the error must be happening somewhere prior to", "this print statement", "By the time I get to this point  I've got a problem", "So let's add in another print statement", "And in particular  let's just add it in earlier in the code", "So here  I'm going to put in another print statement  this one right here", "immediately above the reverse", "Now  I should be able to see I've isolated  if you like  where", "the code might be", "Let's see what happens if I do that", "So I've got another version of the code over here", "I've got those two print statements", "Let me run this one", "I will type silly", "I will give it a and b", "Now  I've got two print statements out and notice they've", "given me the same thing", "And this tells me something very nice", "It says that somehow the reverse call is not doing the right thing", "It says  I've printed here", "I've printed there", "In both cases  temp and x are exactly the same  and yet temp should have", "been reversed by that call", "So that says that must be where the bug is", "And in fact  if you look at the code  you realize  yeah  I was", "little brain damage", "I forgot to actually invoke the method", "I simply accessed the method  but I need temp reverse   and call it", "That's an easy thing to fix", "So let's go make that change", "I can do that", "We're going to make that change right here", "Now  there's that change", "I've made that change there", "Let's actually call it", "So I'll go back to my machine and I run it", "I'm going to do a run of that", "And I do silly    and I give it a and b", "Huh", "Something funky happened", "On the first call where I print out both temp and x after I've passed them", "in  they both have the form of a and b", "After the reverse  temp is reversed  but oh  my goodness  so is x", "They're now both of them for b and a", "Hm", "What's going on here", "Well  we now have still narrowed it down that somehow the bug has to be in", "that line where I'm doing the reverse because  beforehand they were in the", "right form", "Afterwards  temp got reversed but  so did x", "And that's a hint", "That says I've got an aliasing bug", "We've seen those before with this", "That says when I reverse one  I've got another name referring to the same", "thing  and that's causing that to get reversed as well", "And we know how to fix that", "That's obvious", "I don't want to just have temp point to the value of x  I want it to point", "to a copy of x", "So I'll explicitly make a copy and then test it", "So if I make that change  I'm going to make the change right there and I", "actually test it", "Now when I run this  I can ask for silly     give it a", "and b and oh  nice", "Now  you see beforehand temp and a both have the same form", "After the reverse  that second print statement says that temp was reversed", "but b is staying the same", "And now  when I compare a reverse list or a copy of a reversed list and the", "list itself  I could see that it gives me the correct answer", "This is not a palindrome", "And I've said the right thing", "So this says I've got the right version of things", "I should now actually go back and check silly on my earlier things", "So let's do a simple example", "I should really remove the test", "But let's do silly with a  b  c  b  a", "And there you could see that  in fact  it prints out a reverse version of the", "version and gets the right answer", "And I can go back and do the rest of my testing to make sure that I'm  in", "fact  get the things that I want to get", "What you've see here though  is a nice example of using search to narrow down", "where in the code the bug might be", "And that search is using prints to identify variables and their values so", "that I can compare what I would expect with what I actually see to identify", "the places where there is a bug", "Let's now step back just for a second to talk about  so how would you think", "about debugging more generally", "These tools are going to be really handy", "But even then  it may still be hard to spot places where there are errors", "And so let me highlight for you some general pragmatic hints", "First one is just look for the usual suspects", "There are standard kinds of things for what makes an error", "Do I have a boundary condition case", "Am I passing in the wrong argument", "Am I reversing the order of arguments", "Have I forgot to call a method", "Actually invoke it rather than just accessing it", "So they put together a list of standard places and look for those", "just to check them", "If you're really stuck with finding where the bug is  don't ask why the", "code is not doing what you want  ask why the code is doing the thing it", "should be doing", "Focus on what the code is doing rather than trying to spot", "where is the error", "Changing the way you think about things may help out as you try and", "deal with this", "Remember that the bug is probably not where you think it is", "Or another way of saying it is  eliminate locations where the", "bug but might be", "And in fact  that's what we just did here", "That binary search was eliminating whole portions of the code where the", "bug could not be or rather identifying places in the code where", "the bug could be", "If you're really stuck  try to explain the problem", "Talk to a friend  and explain to them what you think the problem is", "That elucidation of the problem often helps you identify", "where the bug may lie", "Another big thing to do is not to believe the documentation", "That's sort of a terrible thing to say  but a very easy way to get", "sidetracked into debugging  is to look at the documentation or specification", "assume that it is correct  and therefore  assume that the code is", "doing something that it should be doing when  in fact  it's not", "So sometimes the documentation is wrong and you'll want to deal with it", "And of course  if you're really stuck  take a break  take a walk  and come", "back to it later", "Now  these are very simple guidelines for debugging  and we've shown you a", "very simple method for doing some debugging", "Debugging is an art", "And you'll get better and better as you do more and more examples of it", "But remember that idea of trying to identify where the bug might lie using", "glass box and black box testing to design a test suite first to show", "there is a bug and then using the code itself to identify where", "the bug might be", "These are going to be really handy tools for you"], "yBRf7ajFSTU": ["PROFESSOR  So let's use polyfit to find the line that best fits our data", "So what we've done here is created a new Python procedure called fitData", "And it's just like plotData except that we've added a call to polyfit in", "which we give it the forces and the observed extensions and ask it to find", "the equations of the line so that the predictions best fit the observations", "Then we go off and use those parameters to make a bunch of", "estimates for what the y value should be  the extension should be  based on", "the forces that we're applying", "And here  we're using the predictive power of our mathematical model  and", "we're going to plot that line on the graph", "And finally  since the slope of the line is   over k", "this is the slope  so that means that k is equal to   over the slope", "And we'll also put that on our plot", "So let's go off and run this procedure on the data values", "So I've already saved this out", "So we'll start the execution  and hopefully up we'll plot", "Here it is", "And here's the line", "We can sort of see it here", "And you can look at that and say  well  OK that's certainly the best fit", "line  I suppose", "It does the best job it can of sort of minimizing the sizes of the squares of", "the errors here", "But it doesn't look like the best fit", "It seems something here about it we don't like", "Maybe Hooke's law is wrong", "Maybe there's a different curve here that would actually fit the observed", "points better", "So just for grins  let's try to invent Terman's law", "So what Terman's law is  in fact  that there's a cubic relationship between", "the force that's supplied and extension  rather than a linear", "relationship", "So let me start off by commenting out the call to fitData", "And here I have a new procedure  fitData  which uses polyfit to fit a", "cubic equation to the observed data", "And let's plot those results", "So I'm going to make it so we run this guy", "And I'm going to save him out and then start execution", "And here's the resulting plot", "And in fact  this actually looks better", "Maybe Terman's law has something going for it here", "The curve looks much closer to all the points than the original linear fit", "so maybe Hooke got it wrong and modern springs are much more sophisticated", "They obey this sort of cubic relationship between the force that's", "applied and extension that's observed", "Well how do we figure this out", "I mean  here we fitted some data  and we're sort of saying  gosh  it", "certainly looks like that's a better fit", "Well  one of ways we can evaluate the power of a model is", "its predictive power", "So what I want to do  I'm going to start by   let's comment this guy back", "out again  and look at that fitData  which is just like fitData  except", "what I've done is that when I'm going to use the model for predictions  I'm", "going to ask it to predict the extensions created by", "applying heavier weights", "We didn't make these measurements  but we sort of expect the spring to keep", "stretching as we apply higher and higher weights to it", "So everything is just the same", "We are still doing a linear fit here and a cubic fit here", "Let's see what happens when we run this and plot the results", "So we're trying to use our model here to determine the predictive power of", "Terman's law which hypothesizes a cubic relationship between the", "extension and the force applied", "So we're going to save this out and then run it", "OK  here's the results", "Oops", "We did a pretty good job of matching our curve to the observed data  but", "when we went off and asked about some predictions   so here's what the", "prediction extension is as we add additional force to", "the end of the spring", "And even though we're pulling on the spring harder  all of a sudden the", "extension is getting smaller and smaller", "The spring is no longer stretching", "It's shrinking when we pull harder on it", "Well  gosh  that doesn't seem quite right", "So even though we've managed to find a way to fit the curve to the observed", "data  it turns out the predictive power of Terman's law is bunk", "It's simply predicting behavior in a spring that", "doesn't seem very sensible", "And we would certainly expect displacement of the spring to continue", "to get longer as we pulled on it", "So let's give up on Terman's law and actually think a little bit about what", "we saw in the data", "So when we looked at the data  what we saw is that it", "flattened out at the end", "And so what I was thinking of is", "well actually  let's put that plot back up while we're sitting here", "If we look at this sort of flattened data here  we can see the curve", "flattens out at a point", "So it looks like Hooke's law may  in fact  with some observational errors", "in our measurements that we made  it looks like Hooke's law might be OK", "It's just that these last data points show that the spring has stopped", "stretching", "And we might hypothesize instead of Terman's law with a cubic", "relationship  we might just say  look  Hooke's law applies to the point at", "the spring reaches its elastic limit", "in other words  when it stops behaving as a spring and now just behaves as", "sort of like a rigid rope or a cable of some sort", "In other words  it doesn't get any longer just because you hang more", "weight on it", "So maybe what we should do is try getting rid of these last points and", "seeing if Hooke's law does a better job of doing the projection", "So we're going to come back here and go ahead and comment this guy out and", "look at fitData   which is just like fitData  except that what we've done", "is to eliminate the last six values  the values that we feel that", "correspond to the spring having reached its elastic limit", "So let's go ahead and run this", "So let's comment that back in again  save that  and run it and see what the", "plot produces", "And voila", "Without that flattening out of the curve  we actually have a fairly good", "fit to the data", "In other words  there's still some amount of measurement error  but now", "the curve seems to fit better", "And in a couple minutes  we'll talk about what a measure of the goodness", "of the fit  but we're pretty happy or certainly happier with this fit than", "with either the cubic fit  which mispredicted  or the original fit", "which just didn't seem to fit the points at all", "So this raised the question  are we just allowed to eliminate points we", "don't like", "I mean  suppose I eliminated all but two points", "I'm going to keep this point and that point", "And then I would discover that I can make a perfect prediction", "You can always put a line through two points", "So why was it I felt comfortable eliminating those last six points and", "I'm not running around eliminating some other points here that seemed", "like embarrassments or making it harder for me to show that Hooke's law", "is the right equation", "And the answer is  well  I had a theoretical justification", "I hypothesized this notion that there was an elastic limit to the spring", "And as soon as I saw that the length wasn't growing as I added extra", "weights  I said  OK  maybe what I should do is to consider that a", "different regime", "Hooke's law wouldn't apply there", "But I am expecting Hooke's law to apply for all of these measurements", "So I'm not allowed to willy nilly just get rid of points I don't like", "I really do need a theoretical justification", "But with that justification in hand  I think we can make a fairly good", "prediction that the spring constant of the spring is somewhere around", "pretty close to"], "OEoXaMPEzfM": ["LILA FISHER  Hi  welcome to Edx", "I'm Lila Fisher  an Edx fellow helping to put", "together these courses", "As you know  our courses are entirely online", "So before we start learning about the subjects that", "brought you here  let's learn about the tools that you will", "use to navigate through the course material", "Let's start with what is on your screen right now", "You are watching a video of me talking", "You have several tools associated with these videos", "Some of them are standard video buttons  like the play", "Pause Button on the bottom left", "Like most video players  you can see how far you are into", "this particular video segment and how long the entire video", "segment is", "Something that you might not be used to", "is the speed option", "While you are going through the videos  you can speed up", "or slow down the video player with these buttons", "Go ahead and try that now", "Make me talk faster and slower", "If you ever get frustrated by the pace of speech  you can", "adjust it this way", "Another great feature is the transcript on the side", "This will follow along with everything that I am saying as", "I am saying it  so you can read along if you like", "You can also click on any of the words  and you will notice", "that the video jumps to that word", "The video slider at the bottom of the video will let you", "navigate through the video quickly", "If you ever find the transcript distracting  you", "can toggle the captioning button in order to make it go", "away or reappear", "Now that you know about the video player  I want to point", "out the sequence navigator", "Right now you're in a lecture sequence  which interweaves", "many videos and practice exercises", "You can see how far you are in a particular sequence by", "observing which tab you're on", "You can navigate directly to any video or exercise by", "clicking on the appropriate tab", "You can also progress to the next element by pressing the", "Arrow button  or by clicking on the next tab", "Try that now", "The tutorial will continue in the next video"], "nf-d1FFE-bE": ["PROFESSOR  In our first example  we're going to work on a specialization of", "the bin packing problem called the knapsack problem", "Here we're going to have a single bin  and our goal is to find a collection", "of objects that fit into the knapsack but that maximize the", "value when it's full", "We'll also meet the greedy algorithm  an efficient little computation that", "can be used to come up with acceptable solutions for many", "optimization problems", "It looks like it's going to be a good night for our burglar", "He's found a mansion and nobody's at home", "He arrives and with him he's brought a knapsack  and the maximum weight the", "knapsack can hold is   kilograms", "When he gets inside  the burglar discovered he's facing a challenge", "There are many items to choose between  each with their", "own value and weight", "The burglar remembers that his knapsack can only hold   kilograms", "So expressed as an optimization problem  the burglar wants to maximize", "the sum of the values of the objects that he's taking", "OK", "But  he also realizes that the sum of the weights of all the values that", "he's taking has to be less than", "This type of optimization problem is called the     knapsack problem", "because either you can take nothing of an object", "or all of an object", "So you can either take a whole clock", "that would be  in a sense  represented by a", "or not take any part of the painting   that would be represented by a", "And you have that choice for each of the objects", "So it's really up to the burglar to find some combination of items to take", "and items to leave behind that meet his weight constraint but maximize the", "total value of the goods in this knapsack", "This problem gets harder as the number of items grows", "That's because  as there's more and more items  there's more different", "combinations to consider when trying to maximize value within the weight", "constraint", "Our burglar's going to solve this problem by using a greedy algorithm", "Here's how that works", "At each step  he's going to choose the best of the remaining items subject to", "the constraint that it will fit in the remaining weight", "allowance of his knapsack", "Best   how does he determine best", "Well  he's going to use some metric  and he can use that to evaluate the", "goodness of each of the choices", "And he'll choose the one that scores highest on the metric", "One possible metric is to choose the remaining item that has the greatest", "value  or if there's more than one with the same greatest value  just", "arbitrarily choose", "The reasoning here is that by maximizing the value at each step  he", "hopes to maximize the total value of his knapsack", "He might decide to try to use minimum weight objects", "Here the theory is that if he fills up on the lighter objects first  perhaps", "a greater number of objects will actually result in a", "greater total value", "Or he might sort of try to choose objects that have the best value to", "weight ratio", "Whichever metric he uses  the burglar's basically adopting the", "strategy of choosing a locally optimal item in the hopes that a series of", "locally optimal choices will lead to the global optimum of coming up with", "the greatest value of goods", "Then he simply repeats that first step until his backpack is full", "The burglar likes the greedy algorithm  because it's easy to", "implement and because of its straightforward nature  will actually", "perform quite well even when the number of objects is large", "So which of these metrics should the burglar choose", "As it turns out  none of these metrics actually produces the optimal result", "in all cases", "By that  I mean that if the burglar always uses one of the metrics to", "choose items  he may end up with a sack of items which has less total", "value than would have been possible", "Moreover  none of these metrics is always better than the other metrics", "So even if the burglar is willing to do with a less than optimal solution", "it's still the case that if he chose a different metric  he might end up with", "a more valuable bag of items than in certain situations", "So in other words  a certain combination of items in which max", "value does best  and there's other combinations in which", "min weight does best", "Sadly  the burglar comes to the realization that the greedy algorithm", "is heuristic for the     knapsack problem", "In other words  the choices that are made aren't guaranteed to produce an", "optimal result", "There are situations where the greedy algorithm does", "produce an optimal result", "Consider a situation where the materials that the burglar is thinking", "about choosing between are  in fact  infinitely divisible", "He can take as much or little of each one that he wants", "That's why it's called the continuous knapsack problem", "So for example  suppose there were three barrels of liquids  one", "containing water  one containing oil  and one containing wine", "It turns out that if the burglar pursues a greedy algorithm with a", "metric of choosing the liquid that has the greatest value per weight  then", "he'll find an optimal solution", "And so what he'll do is choose the most valuable liquid  and either fill", "up his backpack with that  or if it runs out early  he'll move to the next", "valuable liquid", "And if he pursues that strategy  he'll end up with the most valuable contents", "in his backpack"], "MJ4baVLD4uU": ["COLLIN M  STULTZ  So my name is Collin Stultz", "I'm a faculty member at MIT in the Department of Electrical Engineering", "and Computer Science  and also in the division of Health Sciences and", "Technology", "I am also a clinical cardiologist who still sees patients", "And I have an interest in combining computational methods with medicine to", "make statements about patients  statements that will help to improve", "the lives and quality of people who are sick", "And today  I'm going to talk about some methods that we've been working", "on to combine sophisticated computational algorithms to make", "statements about patients with cardiovascular disease", "Cardiovascular disease is a big problem", "In fact  everybody has atherosclerosis", "It doesn't matter how young or how old you are", "Atherosclerosis is actually a disease of the juvenile", "And the problem is that  although everyone has it  some people will die", "from it and some people won't", "So a huge challenge in clinical cardiology is to identify those", "patients who have atherosclerotic heart disease who are", "going to die from it", "And this slide demonstrates that atherosclerosis is a huge problem", "About every   seconds in the United States  somebody dies of heart attack", "And about half a million people die each year", "So it's about a quarter of all deaths in the US", "And these are statistics from just a few years ago", "And although we know that everybody has atherosclerosis", "we know a lot about the disease", "we're horrible in trying to identify those who will die", "So if you look at the whole pie of people who die from atherosclerotic", "heart disease  we only can identify a small fraction of those who will", "So our goal  at least one of the goals of my research group  is to develop", "predictive models that help our ability to identify patients with high", "risk of death", "So when you think about atherosclerosis  what really happens", "when somebody has a heart attack", "Well  here in this picture is the classic photo of somebody having chest", "pain due to heart disease", "clutching his chest", "It usually feels like a pressure that comes down on your chest", "It's typically described as an elephant sitting on your chest", "And this type of event is correlated with something that has been very well", "described in the literature", "A lot of studies have been done to say what causes this type of pain that", "leads to adverse events", "So if you were able to open this man's chest to decipher the actual things", "that are going on  you'll find that here's the heart", "And this is a blood vessel which supplies blood to a", "region of the heart", "And in a heart attack  this blood vessel becomes blocked", "You have this thing which builds up within the lumen of the vessel called", "an atherosclerotic plaque", "So this heart muscle normally was being profused by blood  but this", "blockage happens", "And it grows all of a sudden", "And this blood vessel can no longer supply blood to", "that area of the heart", "And consequently  that heart muscle dies", "And if you were to take a blow up of this picture  this is an actual", "specimen taken from somebody who died of a massive heart attack", "Here is the atherosclerotic plaque", "And what happens is it this plaque ruptures", "And the blood  which sits in the lumen  comes into contact with all of", "this bad stuff that's in the atherosclerotic", "plaque  and a clot forms", "And this process of breaking open the plaque involves lots of", "inflammatory cells", "So these are cells which are involved in an immune response", "And these cells secrete substances which break open the plaque", "There's a protective covering of collagen on top of this", "atherosclerotic plaque that becomes ruptured because these cells secrete", "enzymes that degrade the collagen", "And that's what allows the blood to come into contact with all of these", "bad materials with an atherosclerotic plaque  which leads to the formation", "of this clot", "So here's where computation could come into play", "All of this was determined by biological methods  experiments that", "are typically done in a laboratory with test tubes and gels and so forth", "But the events that happen at this level  the enzyme that actually breaks", "down collagen  these involve very  very small things that are typically", "very hard to study experimentally", "But what you can do with a computer is you can model these proteins", "So we know what the structure of collagen looks like", "We know the structure of the enzymes that degrade collagen", "And we can put this molecule in a computer", "We can do sophisticated calculations to get estimates of how this molecule", "moves and how it gets degraded", "And we can get insights into the motions of this protein that lead to", "its degradation  which leads to rupture of this plaque  which leads to", "formation of the clot  which leads to a heart attack", "And so our group has been involved in doing a lot of sophisticated", "computations along this line", "But that's really not what I'm going to talk about today", "I'm going to talk about something that's a lot bigger", "This is just an example to show you one avenue in which sophisticated", "computational tools can be used to gain insights into the disease process", "known as atherosclerosis and atherosclerotic plaque rupture", "So now  what I'm going to talk about   if you go back to this mature", "gentleman who's suffering from chest pain  this person  let's say  goes", "into an emergency room or goes to his doctor", "And the physician gets a lot of information about this patient", "They can get electrocardiographic information", "So that's what this is", "And if you're familiar with shows like ER or Hospital  people come into the", "emergency room", "There are leads that are put on the patient's chest", "And what's recorded is an electrocardiogram", "So these are the same tracings that you may be familiar with from watching", "popular television shows", "You can get tracings that record blood pressure  how the blood pressure", "changes over time  and different tracings that record pressures within", "various parts of the vascular tree", "So now  this electrocardiogram", "maybe a lot of you have had these done before or know somebody who's had them", "done before", "It's very easy to obtain", "And the question that we're posing is   Can we use data like these that are", "easy to obtain  that are obtained on a lot of people  to try to identify", "whether this person is going to die or not", "He may be having a heart attack  but he can survive his heart attack and", "live the rest of his life in a productive manner", "Or he could have a heart attack and die", "And we want to identify those patients who have high risk of death after a", "heart attack", "So as I've said  lots of information can be recorded for my gentleman when", "he's well and when he's sick", "And this stuff is cheap  easy to obtain  and we want to see how we can", "use this to improve our ability to identify patients who die", "So again  we're interested in using easily obtained data that are low", "cost to improve our ability to identify patients of high risk of what", "we call adverse cardiovascular events  of which the worst is death", "Now  one thing to note about the surface electrocardiogram", "it encodes a lot of information", "And this is a normal ECG strip  ECG being electrocardiogram", "This  what I'm circling here  is one beat", "It constitutes one beat of the heart", "And what you notice is that there are three peaks associated with the", "electrocardiogram", "There's what we call the P wave  a QRS complex  and a T wave", "And it repeats in a quasi periodic fashion  pretty regular", "Now  a healthy electrocardiogram tells you a lot about the patient", "It tells you that the patient's myocardium  the heart muscle  is for", "the most part normal", "The electrocardiogram records electrochemical impulses as they", "traverse through the heart", "And you need a normal myocardium  normal heart muscle  to have a normal", "electrocardiogram", "The heart  however  is not by itself", "It's not an island by itself", "It interacts with other things", "And there's the nervous system  which sends nerves to the heart  which helps", "to innervate the heart", "So the heart responds to nervous stimulation", "The classic example is the flight or fight response", "If you're running away from something that you're scared of  or if you", "become nervous at times  your heart starts to be faster", "That's because your nervous system is telling your heart to do so", "So a normal electrocardiogram tells you about the heart rate  tells you", "about the interaction of the nervous system with the heart  and it tells", "you about the myocardium", "We call it the endogenous factors", "the myocardium", "because that's intrinsic to the heart itself  and exogenous factors", "interactions with the nervous system", "And the nervous system is a combination of two types of systems", "that's not too important for this discussion  but are called the", "sympathetic and the parasympathetic system", "So again  when a cardiologist gets an electrocardiogram  he or she looks at", "it in a gross fashion and  to assess the health of the myocardium  the", "endogenous factors", "And you can look at the heart rate as well from the electrocardiogram", "variations in the heart rate to determine the health of exogenous", "factors  and how that interacts with the heart and how those exogenous", "factors affect the heart", "Now  there are a number of automated approaches to try to analyze an", "electrocardiogram to determine who's at risk of bad events and who's not", "But a lot of those automated methods only focus on looking at changes in", "the heart rate  only really look at the exogenous factors", "So our hypothesis is that we can use computers to evaluate the", "electrocardiogram to look at both endogenous and exogenous factors to", "get an overall picture of the health of the patient  and thereby improve", "risk stratification for cardiovascular death  CVD for short", "Now  a cardiologist", "even the most well trained cardiologist", "looks at an electrocardiogram  but it's very hard for he or she to", "determine very subtle differences between beats  very subtle", "abnormalities", "We're very good at detecting big things", "so if there are large changes in the QRS complex  large changes in T wave", "or the parts of the beat", "But very small change that might be there  it's very easy to miss", "with the naked eye", "But that's the sort of thing that computers do exceptionally well", "Computers can look at beats and can quantify the differences in them  even", "though the differences can be quite minuscule and hard to detect by the", "naked eye  even by a specialist", "So we want to develop metrics to quantify subtle variability in the", "morphology of signals  and how beats change over time", "And the hypothesis is that beats that change a lot over time indicate an", "unstable system and are associated with patients who are at high risk of", "cardiovascular death", "So in this work  which parenthetically is pioneered by myself  John Guttag", "who's a colleague of mine  in the Computer Science  Electrical", "Engineering and Computer Science Department", "and Professor Zeeshan Syed at the University of Michigan", "So if you take a normal electrocardiogram", "and remember  the goal now is to detect subtle variations in the", "electrocardiogram over time", "we pre process it to remove bad beats  beats that are really abnormal  that", "maybe are caused by noise or other sorts of other things that really can", "cloud our ability to make rigorous statements about the patient", "Then  for every pair of beats within the ECG  we can align them and compute", "what we call the morphology differences between", "consecutive heart beats", "And from that  we get what's called a Morphology Difference Time Series", "So for every pair of beats  we compute the differences  and", "we get a time series", "And then we summarize the variability in this time series to get what we", "call the morphologic variability measure", "Now  the key aspect of this whole approach is this", "It's a rigorous method to compute differences in the morphology between", "consecutive beats", "So how do you do that", "Well  if you have   this is one beat", "Remember  from one of the previous slides  a beat is composed of several", "different peaks", "There's a P wave  a QRS complex  and a T wave", "So let's say these are two beats that occur in the patient", "The beats can vary by very subtle means as a ECG strip is being", "recorded  as the data are being obtained", "If you want to take just two beats and line them up with one another  you can", "take a look at this beat  look at all of the samples associated with this", "signal  look at all the samples associated with this signal  line them", "up  and just subtract them to get a difference between those beats", "But there's a problem with that", "If the beats vary by a lot in terms of their length  then you may end up", "pairing up this portion of the T wave at the region of the beat that doesn't", "correspond to the same physiologic event", "The T wave corresponds to something very specific  as does the QRS and as", "does the P wave", "So really  when you align beats and when you compare them  you want to", "make sure that you're comparing the same physiologic things", "So there is an algorithm that we use called dynamic time warping to align", "these beats  to ensure that they correspond to the", "same physiologic event", "Similar algorithms are used in the area of computational biology to align", "sequences  sequences of amino acids  sequences of", "nucleic acids  DNA  protein", "And really  essentially  you just want to make sure that you're comparing", "apples with apples  T waves with a T wave  QRS with a QRS  and a P wave", "with a P wave", "And then  once this pairing is done using this dynamic time warping", "algorithm  we can subtract the differences and get", "a meaningful result", "So quickly  to summarize", "we have our electrocardiographic strip", "We take two beats  we line them up  we perform dynamic time warping akin to a", "sequence alignment   what is done in computational biology", "and we get a number", "We look at the next pair", "We do the same sort of comparison", "We line them up and we get another number", "Similarly  we do this for the next sequence of beats", "We get another number", "And we get this Morphologic Difference Time Series", "So this is time on the x axis and this is the value on the y axis that", "correspond to these differences", "So lots of variation here in this signal means that there's lots of", "changes in the heartbeat over time", "Even though these changes might be subtle  they'll be captured  because", "computers are very good at computing these differences", "and doing the alignment", "And so then from that  we can use this time series to compute measures of the", "variability of the underlying signal", "So again  Morphologic Distance Time Series captures both differences in", "the heart rate  because different heart rates means the length of the", "beats are different", "And that will give you a nonzero difference when you align the beats", "and when you compute the distance measure between them", "And so both in the heart rate  as well as the morphology  even if the heart", "rate is constant and the lengths of the beats are the same  if there are", "morphology differences", "So if the T wave looks slightly different one beat to another  the QRS", "complex looks slightly different one beat to another", "it'll be captured in this Morphologic Distance Time Series as well", "So it encapsulates both the exogenous and endogenous factors", "that affect the heart", "It's something that we stated that we wanted to address at the", "outset of this talk", "Now  myocardial ischemia", "by ischemia  I'm referring to what I talked about in one of the very", "earlier slides", "when you have a vessel that supplies the heart  there's a blockage that", "develops in that vessel  and then the heart is denied blood", "That's what ischemia means   just denying blood to the myocardium  to", "the heart muscle  leads to abnormal repolarization  abnormal electrical", "conduction", "And it can cause subtle changes in the electrocardiogram", "So these are the endogenous and the exogenous factors", "This is what a typical Morphologic Distance Time Series looks like", "So this is time and this is the dynamic time warping morphology", "difference", "Looks like a mess  right", "It's very hard for any person to look at this and be able to say with any", "certainty whether this patient is at high risk or not", "Now  with the computer  what we do is we take a look at this and we can", "quantify this in a very straightforward manner", "We can do this both in the time domain  or we can look at the power", "spectrum  do a Fourier transform  and look at in the frequency domain to", "develop various metrics", "So how do we develop this measure", "So we have a list of patients from a database", "We have a database of patients who all had heart attacks", "And some of them died  some of them did not", "And they all had Holter monitors  which are devices that can record your", "electrocardiogram for a long period of time", "And we used this database to be able to develop our methods", "So when you look at the Morphologic Distance Time Series and then you look", "at it in the frequency domain  is there a particular frequency band that", "carries prognostic information", "So what I mean by that is you have your time series signal  you transform", "that to the frequency domain  and you have a list of frequencies and you", "have the power spectrum", "So is there a particular range of frequencies that are more meaningful", "than others", "So we sub the power in a particular frequency band to determine the", "patient's risk", "And we have to determine what band is appropriate", "So we use this DISPERSE  data set of these patients", "some patients who died and some who did not die", "But all of them have had a heart attack", "And we use that to derive parameters for this model", "We created a heat map where we looked at the prognostic information on all", "possible frequency bands", "So here", "this is the upper band limit", "This the lower band limit", "And the colors here is an assessment of the predictive value within that", "frequency band", "This is a plot of", "for those you who are familiar with it", "the area under the curve from the receiver operating", "curve for this predictor", "And we found a particular diagnostic frequency that was", "actually very useful", "And once we developed this on DISPERSE  we took another set of", "thousands of patients", "the MERLIN TIMI   trial", "Again  this was a trial that compared a drug called Ranolazine to placebo", "But for the purposes of this  we were really interested in just the patients", "who didn't get a drug", "All of these patients  again  had heart attacks", "All of the them wore Holter monitors to record the", "electrocardiographic signals", "Some died", "Some didn't", "And we wanted to see if this metric that was developed on some other data", "set could be used to predict who would die in this data set", "And sure enough  if you compute the Morphologic Distance Time Series  you", "sum the power with a particular frequency band  and you get a number", "for each patient", "Those patients that have high numbers have lots of variability to the", "underlying signal", "And those are the patients that we call high risk", "Those patients that have a low value for this measure  we", "say are at low risk", "And if you look here  this is called the Kaplan Meier Curve", "And this is the percent of people who died over time over the", "span of about a year", "The red is a death rate for patients who the algorithms", "says are at high risk", "And this is the death rate for patients that we say had low risk", "So what you see is that  sure enough  if the algorithm says that you have", "lots of variability in electrocardiographic signal  you're at", "a threefold increased risk of death", "And this is a P value which shows that these differences", "the statement here that's important is that this is statistically", "significant", "So this is really not by chance", "There's something really here", "And even if you look at different subgroups of patients   so if you look", "at patients who are mature   those are greater than    those that", "are less than", "in all these groups  if the algorithm says that you have lots of variability", "to the underlying electrocardiographic signal  you are at an increased risk", "of death  even a fourfold risk of death if you don't have high blood", "pressure  threefold risk of death if you do  and so forth", "So it works in all patient populations that we've looked at thus far", "And if you look at this and you compare this to other sorts of", "metrics  other sorts of things that exist in the literature for predicting", "who's at high risk of death and who isn't", "measures called heart rate variability  deceleration capacity", "and so forth  as well as other metrics that are used in clinical practice", "of the electrocardiograph measures  the morphologic variability does quite", "well in terms of the hazard ratios", "So it says that you're about a twofold increased risk even after you control", "for all of these other metrics", "So it provides added value relative to these other metrics", "And you look at the ones   and we've just pointed out a few here that are", "used in clinical practice to show that it is on par and it provides added", "information to these other known things that are used to quantify", "patients' risk", "So in conclusion  I think the one upshot to get from here is that", "electrocardiographic information is easy to obtain and it", "has prognostic value", "It just requires sophisticated tools to do so", "So one method", "to talk about this in a broader framework", "we want to get information about a patient  evaluate the patient using", "current and past information  and choose an intervention", "In clinical cardiology  as in many areas of medicine  this is typically", "the paradigm that's followed", "And you perform an intervention that's going to affect the patient", "Now  evaluation of the patient is perhaps the weakest link", "And by evaluation  I mean looking at the patient and trying to determine", "whether that patient is in trouble or not  getting sense of how sick that", "patient is", "And techniques from electrical engineering  computer science", "medicine  and physics and such can help in this endeavor", "So one other thing", "there exists a lot of information in physiologic signals that's", "unappreciated  physiologic signals that are cheap and easy to obtain  and", "can be gathered in a lot of different settings", "So we believe that by gathering all of this information  you can make better", "inferences about patients so that you can identify those patients who are at", "high risk of having adverse events and treat them accordingly", "Thank you"], "O74Bw-NcCkY": ["ERIC GRIMSON  Let's visualize what merge sort does", "The basic idea is we're going to keep splitting the list down into smaller", "and smaller pieces until we get to basically  a list of one element each", "And then we're going to start recursively merging things together", "taking two sorted lists and simply looking at the first element of each", "list to decide which is the next one to go into the merged list that's", "going to be sorted", "So if we start off with a list of elements like what's shown here  in", "the first stage we're going to split it into two parts", "And actually  we would do this recursively first with the front part", "and then the back part", "But I'm going to show it in parallel", "And we'll keep splitting it until we get down to lists of just two elements", "each  such as for example shown here where I've got two one element lists", "At this stage  I can start merging by looking at each element  and putting", "the smallest element first  followed by the next element", "I then look at the next list  and again  these are two lists of one", "element each", "So I can once more look at each element to decide how to put the", "smallest element up first  and then the next element", "Now we can see where the real impact comes in  because given now two sorted", "lists  again the merge says looking at these two lists  check the first", "element of each to decide which is smallest  and put it at the front of", "the list  followed by the next smallest element  followed by the next", "smallest element followed by the next smallest element", "Now I have a sorted list", "Let me move that over  and I can now go and do the same", "thing with these lists", "I'm going to skip some steps  but basically that will", "reduce it to this stage", "And then the final stage  I could then merge this one by first comparing", "these two elements  moving the smallest one to the front  and so on"], "l4C_D90rBcY": ["ERIC GRIMSON  So now we've got the beginnings", "of some simple programs", "We can write straight line programs  store them away in a", "file and run them in the Python interpreter", "whenever we want them", "But basically they're still pretty simple things", "A straight line because I'm just following a sequence of", "instructions in order", "So I'm still  essentially  doing things like a", "calculator", "When we talked about the machine we said one of the", "other things we wanted to be able to do was to make", "decisions  to do a test", "And on the basis of that test jump to some other part in the", "sequence of instructions", "Do one thing if the test is true", "Do a different thing if the test is false", "So we need branching programs  things that make decisions or", "branch based on that test", "And the simplest branching statement in Python is a", "conditional", "A conditional is the obvious statement because it basically", "says if we have some set of code when we get to the", "conditional we start by executing a test  which is a", "bool  a Boolean", "And based on that Boolean  that expression that either", "evaluates to True or False  if the value of that test is True", "then there's a block of code called the True block that we", "execute based on that", "If the value of the Boolean is False  then we may decide to", "do a different set of things", "So there's a second block of code called the False block", "the block of code we're going to do if the test is False", "Now that second block is actually optional", "We don't have to have it", "We always need to have the True one", "What do we do if the case is True", "But if we decide the thing is  False  we", "don't need to do anything", "We can simply skip that second portion of it", "Either way  after we've gotten through that conditional set", "of expressions  we can pick back up with the next sequence", "of instructions in the code just as we would", "sequentially before", "So this is a way of us now making decisions and based on", "the decision doing one thing in one case and something", "different in a different case", "How do we get Python to recognize that", "Well let's look at a simple example", "And here's some code  which I also have over here in a", "Python file", "I've got an instruction right here", "This first one that says  this one right there  that says I'm", "going to  as I did before  ask for some input", "And I want to create an integer", "And then I want to do a set of instructions", "And those set of instructions are going to first do a", "Boolean test", "So there's that Boolean", "And this is the remainder", "It says if the remainder of x divided by   is   that says if", "I divide that x by   there is no remainder", "So it says it's even", "In that case I'm going to print something out", "And notice the indentation here", "That's important", "That indentation tells me that this is a sequence of", "instructions to do based on what happens", "if the test is true", "And that could be arbitrarily many instructions", "I have similarly next to that if", "And that if is a special form there that says do the", "evaluation of this expression", "And it ends in a colon", "Below it I've got another keyword  else", "followed by a colon", "And this tells me where to find a block of code to", "execute if the test is false", "And again  notice the indentation here", "So what this says is I'm going to execute that instruction", "I'm then going to execute this test", "And if that test is True  then I will execute that set of", "instructions", "On the other hand  if that test is False I will look for", "or rather Python will look for the else and execute that set", "of instructions", "In either case  notice that there's no indentation here", "So this is now the next instruction after this entire", "conditional right there", "So let's go over to Python and see what happens here", "So there is my file", "I'm going to load that in", "It's now executing the first instruction", "So it's waiting and says  give me some input", "I need to give it an integer", "So I don't know  let's give it the value", "Ah  and it prints out a blank line which came from that", "first print statement and then the word even", "or the screen even", "And then notice it prints out the done with conditional", "Let's go back over here and load that up again", "So again it's waiting for an input", "I give it a", "Now  in this case  since the test is False it jumps to the", "False block of code  after the else", "Prints out a blank line", "Prints out screen odd", "And then in either case  as it said  that last expression is", "always the next expression done", "It prints out the done with conditional", "So you now see how I can make choices", "And I can branch", "I can do different things based on a", "particular value of a test", "And we see the format here", "In this case there's an if", "Some Boolean test followed by a colon followed by a sequence", "of instructions that are indented", "By the way  Python  or the IDLE system will do that", "automatically for us", "And then followed by an else", "OK let's make some observations here", "We've already done that  but just to remind you  that", "expression x remainder   is that equal to   evaluates to", "True when  in fact  x divided by   has no remainder", "As we said before  we're using the double quote for", "comparison", "I'm sorry  we're using the double equal sign for", "comparison", "Because a single equal sign is reserved for assigning a name", "to a value", "We've already talked about the", "indentation which is important", "It denotes a block of instructions", "And that indentation gives us a nice visual structure that", "helps reflect the semantic structure of the program", "We can look at the code and easily identify the different", "blocks of code associated with the True and the False block", "Now some variations we can do here", "We can have nested conditionals", "So if we look at this  we've got an if", "We've got a block of code", "But that block of code is itself an if  which has", "another indented version for the True version and a", "separate else there", "So let's now go over to Python and look at that", "Here's second file", "And I'm going to give an arbitrary value to x up here", "Just I'm going to set it to", "And then I want to see what happens if I evaluate this", "Well I can look at the code structure to find", "out a sense of that", "That first if I'm going to evaluate that expression and", "get a Boolean value back", "If it's True I'm going to go in and oh  I'm going to", "evaluate that next if", "And depending on whether that's True I'm either going", "to pick up that piece of code or pick up that piece of code", "And you could see the structure here", "If the remainder of x divided by   is   and the remainder of", "x divided by   is   then it's divisible by   and", "I'm going to print that up", "Otherwise if it's divisible by   but it's not divisible by", "then I'm going to basically print out something", "appropriate", "However  if that first test  this test up here is not True", "then I'm going to jump down to a different special form here", "called elif", "Which is else if", "And that says if this is not True  then let me", "do another if test", "Otherwise check to see if this is True", "So there's another Boolean expression", "And if that is True then I'll execute this piece of code", "But if it's not True then I'm going to go  hm  where am I", "going to go", "Well notice that I have no else clause here", "And that's OK", "Because if that's not True I'm simply going to skip to this", "point in the code and pick up the rest of it", "Now I could have put an else there and had that else do", "something  but that's a choice I have", "All right  let's go back over to Python and", "let's load this in", "Let's see what happens", "A ha", "It says divisible by   and", "Which said back here in my code  if I use my little", "cursor here", "It said that test was True and that test was True therefore I", "printed that up", "Let's look at a different version of this", "Let's change x to be", "And let's now load that in", "I need to save that away which I will do", "Ah  it didn't print out anything", "Why was that", "Well it's not divisible by", "So it goes to the elif clause  but it's not divisible by   so", "it simply skips down to the next point", "And one of the ways I could have fixed that was to come", "back over here and say otherwise print not", "divisible by   or", "Let's save that away", "Ah  and now that's where it picks up the else clause", "So you can now trace through the different ways through", "this code but using nested conditionals to control", "different branches", "So that I don't just have a binary branch", "I can have multiple branches through the code", "Another way to do this is to use compound expressions for", "our Booleans", "I don't need to do just a single Boolean test  but I can", "have two tests and put them together using the things I", "talked about earlier", "So I could say  for example  if x is less than y and y is", "less than z then do something", "Otherwise  do something different", "So I can start putting together", "more complicated things", "And we're going to be able to start using those to also", "control how we move our way through", "these branching programs", "OK  so where are we with all of this", "Well now that we've got conditions we have the ability", "to do different things based on that choice", "And branching programs allow us to do that", "Notice  however  it's still the case that at most each", "statement gets executed once", "When I think about each statement in my code  I don't", "do them multiple times", "I may skip some of them depending on the task", "So each statement still gets executed at most once", "And as a consequence  the maximum time to run a program", "like this depends only on the length of the program", "We see that these programs  whether the straight line", "programs or simple branching programs run in what we call", "constant time  the amount of time it takes depends just on", "the length of the program", "These are still very simple programs  although we can now", "make some decisions on them", "And in the next lecture we're going to pick up on how we", "actually add one more piece to start getting more interesting", "elements to our programs", "But nonetheless  you now have the ability to start writing", "simple programs to do computations for you"], "BXfWJbn8gKQ": ["PROFESSOR  Here's some Python code that will let us test the greedy", "algorithm on the burglar's problem", "We define an item class  which will let us quickly hold all the", "information for an individual item  the name its value  its weight  along", "with a routine that will let us print out the contents of a knapsack in a", "pretty fashion", "We have a simple little helper function that creates a list of all", "the items in the house  the clock  the painting  the radio  the vase  the", "book  and the computer  along with their associated weights and values", "The greedy algorithm itself is pretty straightforward", "It starts with an empty knapsack and an empty total weight", "It then sorts the items in the order of the metric that we want to supply", "So we'll actually pass in a function  which will return the item's metric  a", "particular item's metric  and we'll use that as the key", "function here in the sort", "So every time the sorted routine wants to figure out the sort order of an", "item  it will call the corresponding key function", "We're passing in the item is an argument", "And that's the value that we'll use to sort of the items", "into the correct order", "And finally we ask for our sort in reverse order so we get the biggest", "metric first", "So it works pretty simply", "Once we have the sorted list of items  we go through the list one by one", "We check the items  get the item's weight", "We add the item's weight to the total weight that's", "currently in the knapsack", "And if there's still room in the knapsack  if that sum is less than the", "maximum weight than that knapsack can hold  we append the item to the", "knapsack and increase our accounting of total weight", "And when we're all done we return the contents of the knapsack", "as a list of items", "Here are our three metric function is that we wanted to try  the burglar", "thought of", "He was going to try a metric which was the item's value  a metric  which in a", "sense  was the item's lightness", "What we wanted to do was come up with a metric that would sort the lightest", "item first", "And if we do that  if we do the inverse of the weight", "that's what we'll get", "And finally a metric that uses the ratio of the item's value to the", "item's weight", "Finally  we have our usual test functions", "We have testGreedy  whose job it is simply to run the greedy algorithm", "once using the specified metric and to print out the total number of items", "and their values in the knapsack that gets built using", "that particular metric", "And then finally  testGreedys allows us to test all three of the metrics", "So let's save that out and then give it to run and see what we get", "And here we go", "There's the items we want to choose from right at the top", "So if we look here  we see that if we use the value metric  the total value", "of the items in the bag is    and sort of what we expect because the", "most valuable item is the computer  which is the only thing in the", "knapsack  when we use the value metric because it has a weight of   which", "fills up the entire knapsack", "If we use as a metric the weight and we try to do the min weight first  we", "get a total value of objects of", "And you can see here the items are being chosen in order", "of increasing weight", "And finally if we use the ratio of the item's value to the item's weight  we", "end up with"], "yeJJdf1sf7Y": ["Eric Grimson  We're now going to take the ideas we just saw and look at the", "different instances of different complexity classes", "So what are those ideas", "Given an algorithm  we want to count what are the number of basic steps", "it's going to need", "We want to count those as a function of the size of the problem", "And we're only going to worry about the case when the size of that problem", "tends to get large", "What is the asymptotic behavior as that happens", "We're going to see  in this segment  a set of examples of different", "complexity classes", "We're going to see constant time algorithms  referred to as O", "We're going to see logarithmic", "We're going to see linear", "We're going to see log linear  or n times log n", "We're going to see polynomial  and we're going to see exponential", "algorithms", "Let me say a word about those last two because they are actually different", "and sometimes people get confused by them", "The polynomial time algorithm is something whose number of steps", "asymptotically is n  where n is the size of the problem  to some constant", "So a quadratic algorithm is n    a cubic algorithm is n", "An exponential algorithm is one where the number of basic steps", "asymptotically is described by some constant to n", "the size of the problem", "So that could be   n", "And keep in mind that n   grows in a very different manner than   n", "as we change n", "And in fact  this sequence is really listed in roughly the order of", "increasing complexity", "Each one of these classes describes a slightly more", "complex kind of algorithm", "And as a consequence  we tend to want to be as high up in", "this chain as we can", "If I have two algorithms that solve the same problem  one of them is", "quadratic  the other one is linear  I want the linear one because it's", "almost certainly going to be more efficient", "If I've got an algorithm that is log linear  n log n  and another one", "that is just logarithmic  I want the log one because it's", "always going to be better", "Finally  we tend to be a little sloppy in this subject in terms of how we use", "these terms", "Really what we're talking about here are upper bounds on the complexity of", "the algorithm  on the number of steps", "In many cases  it's an actual tight bound  it's both an", "upper and lower bound", "But if we're not certain about an algorithm  we may end up saying  for", "example  that it's exponential because the best analysis we can do says that", "the running time may involve an exponential number of steps", "It may be possible to show that it's less than that  but if we can't", "actually do it  we're going to use the upper bound to capture the class", "With that  let's start looking at some examples", "So the first class is constant complexity", "That says the complexity is independent of the size of the input", "This is great  and unfortunately  there aren't very many interesting", "algorithms in this class", "It says  literally  that the number of steps doesn't depend on the size of", "the algorithm", "Now while pieces of code may satisfy that  it's not common for an entire", "algorithm to have that property", "If you've got one  though  still great", "And note  by the way  that even in this case  you can have loops or", "recursive calls  it's just that the number of iterations  through the", "loop  or the number of recursive calls  is independent of", "the size of the input", "All right", "Let's move on  though  to more interesting ones", "Logarithmic algorithms", "Here  the complexity of the algorithm  the number of steps  grows as the log", "of the size of one of its inputs", "And you've actually seen a great example of this  bisection search", "Remember when we were looking for square roots", "We said start between   and x  take the midpoint", "If that's close enough  we're done", "If not  depending on the size  either we're going to look only in the bottom", "range or in the top range", "Again  we take the input  the midpoint", "And either we look at the bottom range or the top range", "At each step we're cutting down the set of possibilities of which we need", "to look by a factor of two", "And that cutting down a problem in half  constantly  is a great", "indication of  in fact  a logarithmic algorithm", "So bisection search is a great example", "You can do the same idea  by the way  on a list", "If I have a list of elements that are in order  and I want to decide if an", "element's in that list  use the same idea", "Look at the midpoint", "If I happen to get lucky  I'm done", "If not  based on the size  either I'll just look at the bottom half of the", "list or the top half of the list", "So that kind of property is indicative of a logarithmic search  the", "logarithmic algorithm", "Now  let me show you an example of a piece of code doing this  just to show", "you how we would reason about it to decide whether something's", "logarithmic", "This is a little piece of code to convert an integer into a string", "Don't worry about the fact that Python will do this for you automatically", "Let's just see how the algorithm shows logarithmic complexity", "I'm going to set up an internal variable called digits", "It's just the string of all the digits", "And then given i  if it's    I'm done", "If not  what am I going to do", "I'm going to set up a little variable result that's", "initially an empty string", "And then I'm going to take that integer  i  and the first thing I'm", "going to do is I'm going to take the remainder  which basically pulls off", "the bottom digit", "I'm going to index in two digits to find the corresponding string", "representation", "And then I'm just going to add that to the front of result  putting it in the", "right spot on the thing that I'm accumulating", "And having done that  I'm going to divide i by    which throws away the", "bottom digit  shifts everything to the left  or to the right rather", "Then I keep doing that", "Now if I were to count steps here  what really matters is that loop", "And in fact  let's look at that", "I only have to look at the loop because there are no", "function calls here", "And within the loop  how many steps do I have", "Well  I've got the remainder  that's", "I've got the add  that's", "I've got the look up  that's", "I've got the assignment  that's", "I've got the division  which is    and the assignment  which is", "So there are   steps within the loop", "But it doesn't depend on the size of i", "It's always the same thing    steps within the loop", "So really what matters is how many times do I go through the loop", "And for that  I have to think about  so what is changing", "And what's changing is the iteration variable  or the loop variable i", "And at each stage through the loop  it gets divided by", "So how many times can I divide i by   before I get down to a", "single digit case", "And the answer is a logarithmic time  so this is O log n", "Now let's be careful here", "You might say  well  wait a minute", "Why doesn't this depend on the size of the integer that I pass in there", "And it depends  not on the size  but on the number of digits", "Another way of saying it is   if I have some number of steps to solve a", "problem with one version of i  and I take   times i  I'm only going to go", "through the loop one more time", "It's the number of digits  not the size of the problem", "And that's why it's logarithmic in the size of i because that log gives me", "the number of digits", "How about linear algorithms", "Well  searching a list where I just walk through it in order is a great", "example of a linear time algorithm", "In the worst case  I've got to look at every element of the list", "So it's linear in the size of the problem", "Here's another example of a linear algorithm  and I want to use this to", "look at how we measure it", "Suppose I've got a string that's assumed to be", "composed of decimal digits", "I want to add up the characters of the string to get a number out", "A trivial little thing to do  but let's look at what the", "code might look like", "I'm going to start off with some initial  internal variable called val", "And for each character in the string  I'm going to convert it into an", "integer and add it into what I've got in val in order to return", "that overall value", "I don't care about the computation  what I care about is the complexity", "and the complexity is pretty straightforward", "I have to go through each element in the string once", "So this is linear in the length of the string", "Within the loop  it's a constant number of things to do", "So all I care about is how many times do I go through the loop  and that is", "linear in the size of the problem", "So far we've seen examples where we're just looking at things that have", "loops  and we're worrying about how many times does it", "go through the loop", "We can also have a complexity that depends on the number of recursive", "calls  and our good friend factorial is a great example", "There's the code for factorial  you've seen it before", "If I think about the complexity of this", "I could say  well  within the actual code itself  there's only a constant", "number of things to do", "I'm doing a test", "If the test is true  I'm just returning something", "Otherwise  I'm doing a multiplication and a recursive call  but in the body", "of the procedure itself  it's a constant number of things", "So what matters here is  how many times do I call factorial", "And we can see that on each recursive call  we're reducing n by", "So I've got to do fact n   then fact n     then fact n", "And you can see that I'm going to call factorial n times", "Within each call  complexity's constant so  therefore  this is linear", "in the size of the problem because there's a linear number", "of recursive calls", "Algorithms with this kind of template are typically linear  and that's a", "handy thing to know", "What about log linear", "Well  a lot of practical algorithms fall into this category", "They're n times the logarithm of n", "In fact  an example we're going to see later on is one of the most", "commonly used log linear algorithms  which is an algorithm called merge", "sort  which is a way of sorting a list to get it into increasing or", "decreasing order", "I just want to highlight that we have algorithms of this sort", "We're going to come back to merge sort later on to see how we can do", "reasoning to find these kinds of examples", "So let's move on to polynomial", "Polynomial complexity says I've got an algorithm that grows", "as n to some power", "And most common polynomial algorithms are  in fact  quadratic", "They grow as n squared or some parameter  some", "size parameter  squared", "And these commonly occur when we have nested loops or when we have", "particular kinds of recursive function calls", "So let's look at an example  and this is probably a good example of a very", "common kind of quadratic complexity", "This is a little algorithm that's going to decide whether  given two", "lists  one of them is a subset of the other", "And that says   is every element of L  in L", "The code to do this we can describe pretty quickly", "We're going to loop over every element in L", "We're going to set up  each time through the loop  to say a variable", "match is equal to false", "And what am I going to do", "I'm going to loop over every element in L   or almost every element in L", "looking to see if I find one that's equal to e", "If I find something that's equal  I set the flag to True and I break", "And what that break does is it throws us out of this loop  this interior", "loop  which means I can then skip down to  basically  this step here", "And if  in fact  matched is False  I return False", "But if it's True  then I simply skip back around", "OK", "And that then says I'm going to basically run through this loop until", "either I go all the way through  in which case matched is False because I", "didn't find an instance of it  or I do find an instance  and I break out of", "it and I set a value that returns", "All right", "I'm going to do that over all versions of this outer loop  e", "So let's look at an example to see how we'd measure the complexity here", "The outer loop is executed the length of L  times  so however long L  is", "I'm going to do that outer loop that many times", "Each iteration is going to execute the inner loop up to the", "length of L  times", "I have to go all the way through L   the length of L", "If I find something earlier  I break out of it", "So  in the worst case  this has a complexity that's the product of", "length of L  times length of L", "Now  that depends on L  and L", "What Is the actual worst case", "Well  the worst case is when they're both of the same size", "L  can't be bigger than L  or it wouldn't be a subset", "When they're of the same size  but none of the elements of L  are in L", "then I'm going to run through this loop the full number of times", "I'm going to run through it L  times", "In that case  the complexity is quadratic", "It's the length of L  squared", "It's quadratic in that size", "Let's look at another example", "Here's another example involving two lists  and I want to find the", "intersection of those two lists", "And here I want to show how  having multiple loops  we're going to focus", "in on the one with the worst complexity", "The idea here is I want to take two lists  L  and L", "I'm going to set up an initial temporary list  and then I'm going to", "loop over everything in L", "And for every element of L   I'm going to look to see", "is it equal to the thing I'm looking for in L", "And if it is  I'm going to add it into tmp", "Now because L  might have multiple instances of something  I", "want to keep going", "So even if I find an instance of e  in L   I'm going to go all the way", "through L  and gather each of those instances together", "I'm going to do that over all possible versions of e", "And when I'm done  I need to now strip away the duplicates", "So I'm going to set up another temporary variable  res", "And then I'm going to loop over that list I just built  tmp  and basically", "say   if e is not in res  then I'm going to add it in", "But if I've already got a version of it there  I'm simply going to ignore", "it and keep going", "So that  ultimately  it'll return a list of unique elements that are those", "that appear in both lists", "Again  what's the complexity here", "Well to see this  we can note that this first nested loop up here is very", "similar to what we saw before", "It's going to take the product of the length of L  and the length of L", "number of steps", "And  in fact  it's going to do exactly that because I go through L  in full", "each time around", "What about this loop", "There's a second loop there  I have to think about that", "Well  that second loop takes  at most  the length of L  number of steps", "because I'm simply going through that list once", "So I've now got two terms", "I've got a quadratic term  and I've got a linear term", "And  of course  we know that the quadratic term really dominates here", "It's the big one", "It's the one that really matters", "So I can ignore the second term  and basically say that this is of order", "length of L  times length of L", "So it's quadratic", "The point of this is I need to look at the loops", "If I have different loops  or multiple loops  within a piece of code  I need", "to find the one that has the higher complexity", "And that will tend to be the nested one  as it was right there", "OK", "What about exponential algorithms", "What characterizes an exponential algorithm", "And an exponential algorithm  by the way  is usually a", "very expensive algorithm", "Well  it's typically a case when we've got recursive functions where there's", "more than one recursive call for each step of the problem", "We saw an example earlier", "Towers of Hanoi has two recursive calls", "I moved a smaller stack once  this moved the bottom case and then moves", "the smallest stack again", "So I had two recursive calls per each size of the problem", "And that is characteristic of an exponential problem", "But unfortunately  many important problems are inherently exponential", "And that's really unfortunate because the costs can be very high", "And one of the things we want to see is that's going to lead us to consider", "finding approximate solutions in more efficient time  rather than trying to", "do something that deals with finding the exact solution", "Nonetheless  let's do one last example here", "Let's look at an example of something that is exponential in complexity  and", "look at how we would actually measure it", "So this is an example where I've got a list of the elements  for example  it", "might be a list of numbers", "And I want to generate another list of all of the subsets of that list", "So if the list is one and two  I'd like a new list as output that has the", "empty list  the list of one  the list of two  an the list of one and two", "So all of the different possible subsets or combinations of elements", "out of that list", "Again  I'm not as worried about it  but I want to see how the complexity", "goes there", "So here's what the code does", "I'm going to set up a place to store my answer", "If there's nothing in the list  if the list is of length    then I want to", "return a list that is just a list of the empty list", "So there's this funky looking thing right here with two square brackets", "So it is a list whose only element is the empty list because that's the only", "possible subset of a list of length", "Otherwise  how am I going to solve this", "Well  I'm going to use that recursive idea", "I'm going to first say  let's take everything in the list but the last", "element  and get all the possible subsets of that", "I'm going to call that smaller  right here", "I'm going to get a list of just the last element right", "there  which is extra", "And here's what I want to do", "I want to take all of the things in smaller  and add that last element to", "them because those are all subsets of the longer list", "And then I want to take all of the instances  all of the subsets without", "the last element  and all of the subsets with the last element  and add", "them together", "And I'm done", "So there's a little loop where I take everything in the smaller one  and I", "add that last element on to it", "And I create those into new", "And then  finally  I create a flattened version  which is all of the", "versions without the last element  all of the versions with the last element", "and I'm done", "You can go code this up and try to see that it does the right thing", "What I'm really interested in is the complexity", "So to measure that  I'm going to assume that append is actually", "constant time", "In fact  it is  given the implementation inside of Python  but", "since it's not a basic element  I need to make that assumption", "And now what do I want to look at", "What's the time", "Well  the amount of time it's going to take here is basically going to be the", "amount of time it takes to solve this problem  the smaller size problem", "plus the amount of time that's needed to make a copy of all the elements of", "the smaller problem right there", "OK", "So how can I get at that", "Well  it's important to think about the size of that smaller problem", "And  in particular  we know that  for a set of size k  there are   k cases", "There are   k different possible subsets inside of there", "So if I want to solve a problem of size n  I'm going to need to solve a", "problem of size n      and there are   n possible solutions there", "And then  in the problem of size n      there are going to be    n    and", "so on  all the way down to", "Now we can actually solve this  but a little bit of math actually tells me", "that that sum", "n     is   n", "And so the math tells us that this is a problem of size   n", "This is important because it looks like there's just one recursive call", "at each step  and there is", "But it's on a problem whose size is growing exponentially", "And that  therefore  when I come down here  and I want to walk through that", "list  basically adding all of them in  that loop there has a size that's", "O   n   for whatever the length of the list L is", "And as a consequence  this is an exponential sized algorithm", "OK", "So what does that give us", "It says we've now seen a sequence of different instances of classes of", "algorithms", "We've seen characteristics or templates of each one of them", "And we've seen  that as we go down this list  they get worse and worse", "As we go through the rest of the course  we're going to see examples of", "this complexity", "But those templates already give you a way of getting a sense of what is the", "complexity of a particular solution"], "lCDWElPHVa4": ["ERIC GRIMSON  Now  we've seen recursive functions", "We've seen this idea of inductions  a way of showing that", "these functions work", "And we've seen this notion of recursion as breaking a problem down", "into a simpler version of the problem plus some other work", "We're going to use that tool a lot", "It's a powerful tool for taking complex problems and capturing them in", "a way that is easy to think about", "So let's look at some examples", "In the classic example to start with is to compute factorial", "Factorial in math is written as n followed by an exclamation point  said", "verbally as n bang", "And factorial is basically the product of the integers from   times   times", "all the way up to n", "How would we think about solving this recursively", "Well that's pretty straightforward  right", "I need a base case", "A simple case is if n is equal to", "multiplied by itself  or just   is", "That's simple", "To get the recursive case  let's use that same thinking", "To get the recursive case  what do I have", "I want a simpler version of the same problem", "In effect  right there that is n minus   factorial", "So recursively I would say if I can get n minus   factorial  then to get n", "factorial I'd simply take that value and multiply it by n", "And that gives me that reduction exactly like I saw before", "Fantastic", "There's a recursive definition factorial", "Let's capture it in some code", "And  in fact  to do it let's do both an iterative version", "and a recursive version", "So the iterative version of factorial has the form we'd expect", "I need some state variables", "One of them is going to be just the parameter n that I'm passing in", "And the other one I'm going to call result", "I need to keep track of the computation as I go along", "I'm going to set a result initially to   because I'm going to do successive", "multiplications", "And then the iterative version basically says if you start off with n", "that's bigger than my base case  or the stopping point  rather  what do I", "want to do", "I'm going to take my current value result  which is    multiply it by n", "and store it away", "And then I'm going to reduce n by", "There are those update equations that are updating the state variables", "I go around again  n is now one smaller", "And again  I take the current value result  which at this point was n", "I multiply it by the new value of n  which is n minus", "And I update it", "I reduce n by", "And I keep doing this", "And you can see that I want to start by taking n  n times n minus    n", "times n minus    and I'll keep doing that until I get down to a place where", "n is zero  in which case I stop and I return the result", "Great", "What about the factorial version recursively", "Well  factR is nice and crisp", "Here it is", "It just says  if n is equal to    if you're in the base case  just return", "that value", "Here I said return n  I could have said return    because I know it's", "going to be the same thing", "Otherwise  get the solution to a slightly smaller problem by just", "recursively calling factR  multiply it by n  and just return that result", "Beautiful code", "Nice and clean and crisp", "And you can see that it gives you a very clear sense", "of exactly the stages", "my base case  my recursive case", "My recursive case is a recursive call plus one other operation  which is to", "do multiplication", "Let's see if it does the right thing", "So in IDLE  I've got a version of both pieces of code  then let's try first", "theater diversion of factorial", "And just to be careful  let's make sure it does the right thing on the", "base case  or n is equal to", "If it does then let's give it the bigger one", "I happen to know that   times   times   ought to be", "So there we go", "And if I give something a little bit bigger  wow  it actually computes", "factorial of", "Pretty quickly", "What about recursive version", "Well let's test the same ones", "On   it does the right thing", "On   it does the right thing", "On   it does the right thing", "And you may notice this funny little form on the screen there where it's", "got an L at the end", "This is just telling us that Python's got such a big number  it's", "representing it in what's called a large format", "Don't worry about it", "It just says  I got a really big number", "I gave it back to you", "So we didn't look at stepping through it", "You can go do that", "But you can see that the recursive version stops  computes the right", "answer  and the code itself is nice and crisp", "OK  let's look at another example"], "PkWUiKtz_DA": ["RUSS TEDRAKE  Hi there", "I'm Russ Tedrake", "I'm a professor of Electrical Engineering and Computer", "Science here at MIT", "I want to talk today about how you program robots", "maybe cool robots  like robotic birds  right", "Let me show you why I care  right", "So I like building software", "I've always liked building software", "But now I like to build software that comes alive", "What do I mean by coming alive  right", "I've been building these robotic birds with my research group", "the last few years", "This is our two  meter wingspan autonomous ornithopter", "It flies around MIT campus", "It's got a Linux box in it's belly and huge lithium polymer", "battery in its nose", "And it had a beak  but we broke that off in one of our crashes", "But now we've got this bird flying around  being driven by relatively", "sophisticated programs running in its belly", "That's one example  right", "We've been working on a bunch of robotic birds", "This is a project where we tried to make an airplane that could land on a", "perch like a bird", "And in fact  although that's a very hard problem  because we have to stall", "our wings  we've now got airplanes that can fly through post stall", "maneuvers and land on a perch just like a bird", "Our newest project   we're trying to build a robotic ostrich that can", "actually run bipedally at   miles an hour  right", "So this is a simulation of a robotic ostrich that we've been building in", "collaboration with Jerry Pratt in Florida", "And the reason I think we can do this is because we've got this fantastic", "mechanical design in the leg that runs almost without any software  and then", "our software just has to do a little bit of work to make it run really like", "an ostrich", "And we're on to building humanoids next", "So let me talk about what it would take to build software using what", "you've learned in this course to build something as complicated as a robotic", "bird or robotic ostrich", "So what do you have to do to program a robotic ostrich", "Well  first of all  you really do have to understand physics", "It's not a computer science only enterprise", "You have to understand the way physics interacts with your software", "You definitely need incredible mechanical design to build advanced", "robots like this", "But really  at the heart of it  I think the reason you haven't seen a", "lot of robots that move with the grace and efficiency of animals is because", "we haven't figured out the software yet", "It's really a software problem", "So what's involved with taking something", "what's different about programming a robotic ostrich than programming", "something you've done just on the computer", "Well  robots are fantastic in that they have to interact with the world", "and they have the ability to affect the world  right", "So the problem is  when you're writing software that interacts with the real", "world  everything gets harder  right", "So first of all  you really need to make decisions all the time", "Your computer programs using noisy sensor data that's pulling off real", "sensors measuring real things in the world  right", "So suddenly you have to deal with a lot of the statistics  like you've", "learned  of the sensor data  right", "You have to do all your computations with very hard  real time", "constraints  right", "So if I take too long to think about where I've got to put my foot next in", "my software loop  then the robot falls down", "I've got serious hard  real time constraints", "And I've got my software running in a feedback loop  which means there's a", "very delicate interaction between the decisions I make and", "the physical robot", "And these things  running back and forth  can quickly get out of control", "or do exactly what you want them to do  right", "So unlike simple programs that run just on your computer  no program on a", "robot ever runs the same way twice", "Every single time you run the robot  it's in a different situation  a", "different set of conditions  and the program runs completely differently", "So you have to really figure out how to build robust software", "So let's formulate a problem for building software for robotic ostrich", "So for our robotic ostrich model here  we formulate the problem of trying to", "find the fastest periodic", "perfectly periodic repetitive gait  which is a solution to the", "differential equations of the robot", "But it's got some constraints on it", "We don't want just any periodic solution", "We need one that's stable  meaning it won't fall down if I start it in a", "slightly different initial condition", "It's still going to run like this gait that we programmed", "And it has to be robust  not just to changes in initial conditions  but if", "there's some screw that's falling loose in the foot  or if the terrain", "is not quite as flat as we modelled originally  then we really need it to", "be robust like this", "So this is actually an optimization problem  just like you've been", "learning in class", "It's a constrained optimization where stability and robustness are given as", "constraints  and the objective is the speed", "I want to go as fast as possible given what my motors and", "my physics can allow", "Unfortunately  it's a very hard optimization problem", "So we have to use more tools that you've learned from class in order to", "find even any solution of a periodic", "solution of these kind of problems", "So we often start with search algorithms", "And in fact  we even use what we talked about in class  using the idea", "of randomness  even to solve non random problems", "Let me give you a toy example", "Imagine I have a silly robot  a wheeled robot  that's", "stuck in this room", "These are the walls of the room", "And we're trying to drive it to this goal location outside of the room", "And my robot has to somehow figure out the geometry of the room  that has to", "go through this little narrow corridor in order to get over to the goal", "Now  that seems potentially hard", "But in fact  you can solve it very nicely with random algorithms  which", "build these fractal looking trees to quickly explore the space", "And eventually  with probability one  even for very  very hard geometric", "problems  they will find a solution that will eventually get me to the", "goal and find a path to the target", "You can see it's not a very good path", "It's jumpy and everything  so we're going to use optimization of second to", "clean it up", "But what's surprising is  even though it can work for these very simple", "robots  it can also work for much more complicated robots  where the", "constraints are not just walls in the environment  but", "dynamics of the world", "So here's the same algorithm now  running on a robotic dog  with very", "strict limitations in the motors that it can provide  and difficult", "geometric constraints trying to overcome this rough terrain", "And the same sort of search algorithms can find solutions where", "this dog can now bound", "Maybe not as well as your dog at home  but it can bound over this rough", "terrain just using these randomized search algorithms", "But like I said  they're not perfectly optimized solutions", "So after that  we put optimization back in", "And we say  we're not going to find just any solution", "We'd like to find the best solution", "best in some metric like speed", "efficiency  right", "And then we get these nice  smooth gaits of our robotic ostrich running", "across on flat terrain", "And we could make the robotic ostrich run on intermittent terrain  over", "steps  things like that  too   using the same tools", "OK  so you can apply this sort of thinking to a lot of different cool", "robots  right", "So we've actually got another project where we're taking", "we have a collaborator that's got pigeons that fly", "through obstacle courses", "We get them to put cameras on the pigeon's head and motion capture", "markers on the back  and we're learning about the strategies that", "birds take when they're navigating very cluttered environments", "We take that information and now formulate new optimization problems", "And we've built our plane  which is supposed to try to do just as well as", "the bird does flying through forest at very high speed  using cameras on", "board the plane to do the navigation", "This is a seriously hard problem", "It turns out using the same prescriptions of optimization and", "search  we can design these pretty fun aircrafts that'll shoot through our", "synthetic forests here  with our PVC polls being the trees  at very high", "speeds   this is slowed down eight times as you can see   sixteen times", "doing extremely accurate maneuvers to do a knife edge through this", "particular scenario", "Here's another set of trees they can fly through", "And if you program it right  with stability and robustness in mind  then", "it's extremely repeatable", "So in summary  I wanted to tell you today that robotics research in", "academia  in industry  and practice uses a lot of the sophisticated", "algorithms you learned about in the course", "Some of the ideas of search  of optimization  of statistical thinking", "and making decisions based on noisy measurement data", "and in particular  there's a surprisingly strong influence of this", "idea of using randomized algorithms in order to solve non random problems", "even of a deterministic robot in a known world", "Still  oftentimes our best way to solve this is with randomized", "algorithms", "These are all contributing in a big way to robotics research today", "And in fact  there's lots of algorithms that are yet to be invented", "that are going to make the next wave of robots move just as gracefully as", "an ostrich or a bird or a humanoid", "So I hope you come and join us in the quest for building better robots  and", "use your software skills to help", "Thanks"], "AQgw8njOMec": ["ERIC GRIMSON  All right", "We've been looking at guess and check algorithms", "We just took a little bit of a detour to look at", "the floating point", "And the reason we did it is that we want to come back to", "this idea of suppose we'd like to use guess and check to", "find  as we said  square roots or cube roots", "In the case where we're dealing with integers  we", "could get away with this because we could simply", "generate all the possible guesses   there's only a", "finite number of them", "and check them to see which one was the right answer or", "whether there was no answer  if we basically went through", "all of them", "When we start talking about trying to find answers", "though  that are floating points where the number whose", "cube root we're trying to find is not a perfect cube  we", "can't do the same thing", "There's an infinite number of possible things that", "we could guess for", "So we need to be more clever about it", "And that's where we're going to use this idea of", "approximation", "We could certainly still generate  exhaustively  a", "number of different guesses  all", "differing by a small amount", "So we could start at   and then say  for example  do", "et cetera for whatever small amount we might", "want to use and use the same idea", "But if we do that  in fact  we can't guarantee that we're", "going to get the exact answer", "We'll just have to make sure that we're close enough", "We can use that idea", "We can still use exhaustive enumeration", "The differences now are we're going to take small steps", "where we define how small the step size we're going to take", "to generate all the guesses in some order", "And when we check  the check now has to take into account", "the fact that floating points are not exact", "And we just have to see if we're close enough", "Well  let's look at that", "Here's a piece of code to do it", "It looks a little daunting  but it's not too bad", "I'm going to do this for a particular value  trying to", "find  in this case  the root of", "And I'm going to set a little value up here called epsilon", "which is going to be my way of saying  how close", "do I want to get", "I have to pick a step size  which is going to say I'm", "going to start at", "And then I'm going to keep going by increments or jumps", "of some step size", "I'm going to arbitrarily pick the step size", "to be epsilon squared", "We'll come back to that in a second", "I'm going to do one other thing here", "I'm going to keep track of how many times do I", "actually make a guess", "So I'm going to set up a global variable called number", "of guesses  which I'm going to increment as", "I go through there", "Then I'm going to start off with my answer equal to", "And then here's the idea", "I'm going to use another one of these iterative loops", "I'm just going to walk through it", "And here's what it's going to do", "It's first going to check to see have I gone too far", "What does it do", "It says  if answer squared minus x  if the absolute value", "of that is bigger than epsilon  it says I've gone", "further than I can", "Because remember  the answer is going to keep increasing", "If it gets to the point where it's bigger than that  it's", "gone too far", "I'm also going to check at the same time to say   or rather", "it's too far apart", "I'm also going to check at the same time to say", "am I done or not", "So this one is basically telling me am I done", "So as long as the difference between answer squared and x", "is too big and I'm not done yet  I'm going to", "take another step", "So I'm going to increase answer by step", "Then I'm going to keep track of the number of", "guesses I have here", "And I'm going to keep doing that", "So here's my generate test", "And I keep doing that until  in fact  my check  which is", "right here  turns out not to be true", "And when that's not true  I jump out of it", "I'm going to print out how many times", "did I actually guess", "And then I'm going to check to see is the answer", "close enough or not", "All right  it's got that same basic form", "This is an exhaustive enumeration moving by step", "sizes  generating different guesses  and then checking", "them to see whether I've got something that's the answer I", "want or not", "Let's see what happens if we try it", "So over here  I've got that code", "I'm going to do it with x equal to", "And if  in fact  I now evaluate that  huh  it takes", "almost     guesses", "But it basically says that I get an answer of", "It's pretty close to the square root of", "Now you know the square root of   is", "This is OK that it didn't get the exact answer  because I", "just want it to be an approximation", "Now what are some things that we might", "think about with this", "Now one of them is how big a step size should I pick", "It could be any small number", "But one of the problems is  if I make it really small  it's", "going to take a long time to find the square root", "On the other hand  if I make it too large  I might skip", "over the answer without actually getting close enough", "Let's look at a couple of examples of that", "So I'm going to go in here", "And I'm arbitrarily going to change this from epsilon", "square to I'm going to take it as a step of", "I don't know", "And I evaluate that", "And I run it", "In this case  I get lucky  because I actually got to the", "right point and I got it in", "But if I go back over here and  I don't know  I make this", "a really big step size and I run it  it says  I don't find", "it after   guesses", "OK  so if the step size is too big  I might skip right by it", "So let's go back over here", "And we'll make this now go back to being epsilon squared", "It will actually just make life a little easier as we", "look for it", "OK  let's try a different number here", "So we saw I could find the solution", "for   pretty quickly", "Let's try something different", "Let's make x  oh  I don't know  something big", "And let's try running that", "Oh  it took a little while", "It took  what is that  about a little over a million guesses", "But it found a pretty good solution to it", "It's found that that's close to the square root of", "So what does this say", "Well  it says  if we go back over here  in general  it's", "going to take x over whatever the step size number of times", "through the code to find a solution", "And you can see that tradeoff", "If I want it to be fast  then I'd like to make the step size", "large  because that will make this smaller", "But if I do that  I might miss the answer", "So I'd like to find a more efficient way to actually", "solve this problem", "And we're going to do that in the next sequence"], "SKyhk7j3NJA": ["ERIC GRIMSON  Now we've got the idea of being able to", "generate guesses for things", "Building on this idea of iteration", "If we think about the code we just looked at in the previous segment", "while loops generally iterate over a sequence of choices", "And often  especially in exhaustive enumeration  that sequence of choices", "is a whole series of things in order", "In examples we've seen so far  they've all been ints  or integers", "If we're doing that kind of iteration  that kind of loop  over a sequence of", "choices  Python provides a very nice  specialized mechanism", "for handling this", "And it's called a for loop", "And the idea of a for loop is   well  first of all  let me talk about the", "syntax of it", "It has the following form", "There is the special identifier for", "And then some identifier", "this will just be a name of something  so I put it in these", "angle braces to indicate", "That could be  for example  for in", "And then it's the key word in", "And then some sequence  some collection of choices", "followed by a colon", "And then indented  a code block", "So as before  this is going to tell us the things that we want to do   that", "code block", "And that's the form of it", "Here's the basic idea behind a for loop", "That identifier is initially bound to the first value in the sequence", "The code block is then executed", "The identifier is then bound to the next value in the sequence", "And that code block is executed", "Now if we stop here  you may get worried", "You say  well  aren't I going to go through all possible", "choices in the sequence", "And the answer is yes", "I'll do that until I either run out of choices or until I hit a special", "keyword called break", "When I hit a break statement  it pops me out  or stops me from computing", "things inside of that for and takes me to the next piece of code", "So break will be a way to tell me  based on some test  when I actually", "want to jump out of the code", "All right", "We're going to look at an example of a for loop in a second", "But there's the basic idea", "I'm simply going to walk down the sequence of choices  doing something", "until I get to a test that causes me to hit a break or I run out of", "possible choices", "I've got one more piece", "How do I generate a sequence of integers  if that's what I want to do", "I could generate sequences in a lot of cases  but in many cases  as I've", "seen  I like to do everything from  say                 up to some point", "And for that  I've got a built in function called range", "And range  with one argument n   notice it's in between those", "parentheses there", "will give me the sequence of integers from   up to but not including n", "If I want to get a sequence starting at some other point  I can give range", "two arguments  m and n", "And it will give me the sequence of integers m  m      all the way up to", "but not including n", "With those two ideas  let's see what happens if we go back and clean up our", "cube root finder", "Here's the code", "It's similar to what I had before  but it's now a little crisper", "And that's a good thing", "Again  I'm going to have something that asks me for an integer that I'm", "going to deal with", "I'll input it and to make sure it's an integer by doing a cast or a type", "conversion on it", "And then notice the for loop right here", "There's my identifier  for answer  ans  in", "And there's range  so notice what range is going to do", "It's going to generate a sequence of integers           all the way up to", "the absolute value of x", "The for loop says for answer in that range  starting at    I'm going to", "execute the body", "Notice the form of the body", "The body has a test  and if the test is true  it's going to hit a break", "So there's our form", "There's the generate step", "And there's the test step  or if you like  the check step", "I'm going to  in turn  have answer take on the values             et", "cetera  up until x", "Once I get past x  I'm going to stop", "But inside of that loop  I'm simply going to say  let me check", "If answer cubed is equal to absolute value of x  the thing I'm", "looking for  I'm done", "And I'll hit break", "And when I hit break  it throws me out of the loop and takes me down to the", "next piece of code", "And in that case  I'll now check", "Now why do I have to do one last check", "Well  I don't know whether I hit a break or whether I actually ran out of", "values to try", "So I'll see which case I'm in", "If I'm in place where I'm out of values   in other words  if answer", "cubed is not equal to the absolute value of x  which meant that this test", "was not what caused us to get there  I'll return the fact it's not a", "perfect cube", "Otherwise  well  I'll just do what I did before", "Make sure I know which sign I want to use and then print", "out the right thing", "Let's check it out", "Over here in IDLE  there's my code", "It's got all of those pieces", "And if I now just run this  it's going to ask for an integer", "I'll just give it my good old", "There it is", "Let's try it again", "And let's give it", "And there it is", "Let's try it one more time", "And  I don't know  we'll give it something more interesting", "OK", "I probably knew that wasn't a perfect cube", "It's a pretty efficient code", "So what is this doing", "It's generating a sequence of options exhaustively by using range to do them", "one at a time as I need them", "And inside of each  it's doing a check to see have I found the", "value I want or not", "And with that generating check idea  I can write actually a piece of code", "that does a nice job of finding the things I want", "We're going to build on this idea as we move on"], "bqmKVKr4rGI": ["JOHN GUTTAG  Hello  and welcome back to  x and our examination of ways to", "misuse statistics", "What we have here is a pile of garbage", "I'm using it to represent what is perhaps the most important thing of", "all to remember about statistics", "garbage in leads to garbage out", "This observation is so common that it is an acronym that's widely used and", "that's GIGO", "Essentially  all this is saying is that if you start with garbage  no", "matter how good your statistics  you'll end up with garbage", "Let's look at an example", "The   US Census showed that insanity among free blacks was roughly", "ten times more common than among those who were enslaved", "The conclusion  at least to some  was obvious", "As US senator and former vice president and future Secretary of", "State John C  Calhoun put it   The data on insanity revealed in this", "census is unimpeachable", "From it our nation must conclude that the abolition of slavery would be to", "the African a curse", "Never mind that it was soon clear that the census was riddled with errors", "As Calhoun", "by the way  this is what Calhoun looks like", "And if you ask me  looking at this picture  he must've been the one who", "was insane", "Anyway  never mind that it was soon clear that the census was", "riddled with errors", "As Calhoun reportedly explained to John Quincy Adams   There were so many", "errors they balanced one another  and led to the same conclusion that they", "were all correct", "What's wrong with this reasoning", "Well  what's wrong with it is Calhoun is assuming that the errors are", "independent", "If we try and state this in a more rigorous way  what he seemed to be", "saying was that the measurement errors are unbiased  independent of each", "other  and very importantly  he's also saying that they're identically", "distributed on either side of the mean", "That is to say  he's assuming that we have a bell curve or something like", "that and  therefore  the mean is actually a good", "representation of the whole", "In fact  in this case  it was later shown that this was not true and that", "the errors were so heavily biased that no valid conclusion could be drawn", "Of course  Calhoun was in office over   years ago", "Today  I'm sure no politician would ever abuse statistics  through either", "willfulness or ignorance", "Another common statistical error goes by the Latin name cum hoc", "ergo propter hoc", "Statisticians  like attorneys and physicians  often use Latin for no", "obvious reason other than to confuse", "In plain English  this phrase means  With this  therefore because of", "this", "One of my favorite examples is based upon the statistical fact that college", "students  including MIT students who regularly attend class  have higher", "average grades than students who attend class only sporadically", "Those of us who teach these classes would like to believe that this is", "because the students learn something from our lectures", "But  alas  one cannot reach this conclusion from this data", "What one needs to keep in mind is that correlation does not imply causation", "The fact that good grades are correlated with class attendance", "doesn't imply that class attendance causes good grades", "It's at least equally likely that these students get better grades", "because they're more diligent", "And those students who are more likely to attend class are also more likely", "to study hard", "Let's look at another example", "This chart shows us the cases of flu in one of the US states  New York  in", "recent years", "If you look at it  you'll see that in the summer cases of flu are low", "About September they start rising  and they stay high through the winter and", "then taper off again as the summer approaches", "People have also observed that if you draw a curve of when schools in North", "America are open  it looks pretty similar", "People don't go to school in the summer", "They start going in September  and about May and June they start leaving", "This has lead many to conclude that going to school is an important", "causative factor in the spread of flu", "This might be true  but you can't conclude it based simply on the", "correlation  which could be just as easily used to justify the belief that", "flu outbreaks are what causes school to open in the first place", "Or alternatively  there might be some lurking variable  something other than", "opening school or the spread of flu  that causes both", "And in fact  as it happens  the flu virus does better in cool  dry air", "than in warm  wet air", "And both the flu season and school sessions are correlated with this", "change in weather", "Falling prey to the cum hoc ergo propter hoc fallacy", "can be quite dangerous", "At the start of    roughly six million American women were prescribed", "Hormone Replacement Therapy  often abbreviated HRT  in the belief that it", "would substantially lower their risk of cardiovascular disease", "This belief was supported by several  highly reputable  published studies", "that demonstrated a reduced incidence of cardiovascular disease", "among women using HRT", "Many of the women on this therapy  and  of course  their physicians  too", "were taken by surprise later in   when the Journal of the American", "Medical Association published an article that  in fact  Hormone", "Replacement Therapy led to increased cardiovascular disease", "How could this have happened", "Well  re analysis of some of the earlier studies showed that women", "undertaking HRT were more likely to be from groups with better  than  average", "diet and exercise regimes", "That's to say there was a lurking variable  diet and exercise", "And in fact  it seemed  in retrospect  that taking HRT and improved cardiac", "health were coincident effects of a common cause", "The flaw in these studies was  in part  based upon yet another", "statistical problem  and that's what's often called", "non representative sampling", "In this case  the women sampled did not represent women at large", "As we have said many times  all statistical techniques are based upon", "one assumption", "The assumption is that by sampling a subset of a population  we can infer", "things about the population as a whole", "If random sampling is used  one can make precise  mathematical statements", "about the expected relation of the sample to the entire population  as", "we've done earlier in the semester", "Unfortunately  many studies  particularly in the social sciences", "are based upon what has been called convenience sampling", "This involves choosing samples based on how easy they are to procure", "For example  why do so many psychological studies use population", "of undergraduates", "Because so many psychologists work on college campuses  and there's nothing", "easier to find on a college campus than an undergraduate", "A convenience sample might be representative  but there's no way of", "knowing whether or not it is", "Consider this example", "This is a picture taken of a World War II fighter plane", "During World War II  Allied planes typically flew from England over", "Europe and were shot at by the Axis powers using flak", "When an Allied plane would return from a mission over Europe  the plane would", "be inspected to see where the flak had impacted", "Now  what would you do with that information", "Well  some thought that the right thing to do was to look where the flak", "hit and reinforce those areas of the planes that seemed most likely to be", "hit by flak", "Stop for a minute and think about what's deeply wrong with this", "What's wrong is that they did not inspect the planes that didn't return", "from the mission  perhaps because they had been downed by flak  and perhaps", "because they were hit in the places where the flak", "would do the most damage", "This particular kind of error is called non response bias", "We sometimes rely on non response bias in course evaluations", "Which is  of course  why we'll do our course evaluation at the end of  x", "so we only get responses from those who thought the course was worth", "sticking with"], "B03dhB-YmMM": ["JOHN GUTTAG  Hello  it's me again", "In the last segment  we looked at hashing and hash tables by drawing a", "bunch of pictures", "Now it's time to look at some code", "The class intDict uses a simple hash function  the same we looked at", "before  modulus  to implement a dictionary with integers as keys", "I know that's boring because we could just use a list  but it's at least", "easy to understand", "The basic idea is the same when we looked at in the last segment", "You represent instances of class intDict by a list of buckets where", "each bucket is a list of key value tuples", "By making each bucket a list  you will recall  we handle collisions by", "storing all the values that hash to that bucket", "By the way  there are many other ways to handle collisions  some", "considerably better than using lists", "But this is probably the simplest mechanism", "And it works fine if the hash table is big enough  and the hash function", "provides a good enough approximation to a uniform distribution", "All right  to the code", "So we've got class intDict", "Init does exactly what we looked at in the last segment", "It takes the number of buckets as an argument  and then creates an empty", "dictionary  and then goes through and adds to each dictionary a bucket", "which is initialized to be the empty list", "Exactly what we saw in the picture in the last segment", "addEntry entry  takes the key and the value", "It starts by finding the correct bucket", "It does that by taking the key and then hashing using modulus", "And it gets the number to take it from self numBuckets", "If we go back  we'll see that we saved numBuckets as an attribute of the hash", "table being created", "Consequently  we can retrieve it here and use it", "It's then going to go look at the hash bucket  as we did in the last segment", "until it finds the dictionary key", "If it does  it updates it and then returns", "Notice that once it's returned  it's done", "It never gets to this statement if it returns", "On the other hand  if it finishes this loop without finding the key  then it", "just adds a new tuple dictKey  dictVal to the dictionary", "getValue is very similar to addEntry   a little bit simpler", "Once again  it has to start by finding the bucket  which it", "does the same way", "Once again  it has to search through the bucket  looking at each element", "to see if it can match the key", "If it finds a match  it returns the value associated with that key", "Otherwise  it didn't find the match  then it returns None", "I suppose it would have been perhaps better to raise an exception  but I'm", "sure you get the idea", "Let's now go look at the code window", "Way down at the bottom I've got one extra method we didn't look at", "That's the string method", "And it does nothing interesting  it just provides a way to print it", "Now let's see what happens if we use it", "It does nothing very interesting", "It creates a dictionary with   entries", "And then I'm going to  for i in range    that's going to be a number of", "inserts  I'm going to choose a random integer in the range up to", "so quite a large range of numbers", "That will be my key  and then I'll add that key with i  the i th", "insertion as the entry", "Then after we've built it  we want to look at what's in there", "In order to make it a little easier to see  I'm going to print it bucket by", "bucket so that we can see the buckets", "But of course  that violates the abstraction barrier", "I really shouldn't be doing that  in a good program", "But for pedagogical reasons  it's worth doing", "So let's run it and see what we get", "Well  we get   buckets which  conveniently  just happens to fit on", "our screen", "If we look at it  we'll see that some buckets  like the first one here  have", "just one element in them", "Other buckets have multiple elements because there's been a collision", "And a lot of the buckets are empty", "But again  observe  even though the keys can get very large  I don't have", "very many collisions as we're inserting   elements into   buckets", "Now let's return to the code for getValue", "What is it's algorithmic complexity", "Well  let's look at the simple case", "If there were no collisions  what would happen", "We'd go through this loop exactly once", "And so it would be order one", "Suppose there's a collision", "Well  as we saw last time  if there's a collision  it has to go down the", "entire length of the list in the bucket", "Let's think of the simple case where we got very unlucky  and everything", "hashed to the same bucket", "Well  if we inserted n elements and each hashed to the same bucket  then", "we would have to do order n trips through this loop to see whether or", "not we had an entry", "But remember  we decided that our hash function was uniform  or we would", "design it to be uniform  and therefore it's unlikely that everything would", "hash to the same bucket", "In fact  let's think about what the actual predicted time should be", "Let's assume that we have k buckets and n insertions", "And again  let's assume the hash is uniform", "What is the average length of a bucket", "It's simply the number of insertions divided by the number of buckets", "This wraps up our brief excursion into hashing", "There are a small number of things to take away", "One  and this is probably the most important thing to remember  hash", "tables are really useful  especially if you want to optimize the time", "required to look up keys other than integers", "If the key is an integer  a list works just fine", "Two  it's very important  as we've said perhaps too many times for your", "taste  for the hash function to provide a uniform distribution", "Otherwise  we get too many collisions", "And finally  a hash table is an example of a data structure that", "allows us to trade time for space", "By using more space  we can use less time"], "hI10vDNYz4M": ["SPEAKER    Now  as we've said  once we've got iterative algorithms  it", "gives us a lot more things we can do than just simple arithmetic", "We can repeat that sequence of steps some multiple number of times based on", "a decision", "And this leads to a whole new class of algorithms", "Bunch of things that are going to be really valuable to us", "One really useful example of an algorithm is what's often called a", "guess and check method  where we iterate through guessing different", "answers to a problem we're trying to solve  and then checking to see if", "we've got the right one", "We've actually seen an example of this earlier on", "Where was that", "Well  remember when we talked about our declarative", "definition of square root", "We said we had a definition of square root and if somebody gave us a good", "guess for a square root of a number we could use that definition to check it", "So if we got a good guess we could check to see if that guess word was", "equal to x  the thing we're trying to find", "All we need is a good way to generate guesses", "Well  OK  let's think about that", "Could we do it", "The answer is sure", "And  in fact  we're going to do it with a slightly different example", "We're going to do it by finding cube roots", "Just to do something a little different", "Same idea would work with square roots", "So one way that we could use this idea of generating guesses in order to", "find  say  the cube root of some number x", "Let's assume  just make life a little easier  that x is an integer", "So we're trying to find a cube root of a perfect cube", "We could try zero cubed", "Then one cubed  then two cubed  then three cubed  and keep going until we", "get to some place where k cubed is bigger than x", "Once that's the case  we know we've gone too far  and if we haven't found", "something we're done", "The nice thing here is that there's only a finite number of cases to try", "So we can generate different guesses and see how well we do in terms of", "finding an answer", "Let's take that idea  and the idea of iteration  and capture it by finding a", "piece of code  or writing a piece of code  to do what we like", "So here are some code that we're going to use", "We're going to have our code actually input something that generates", "or gives us something we're going to try and find the cube root of", "We're going to set up an initial variable called answer", "Going to be zero", "That's going to be our guess", "And what are we going to do", "We're going to walk through a loop where we look at answer cubed and see", "if it's less than x", "If it's not we're going to increase answer so there's my iterative loop", "right there", "And we're going to keep doing this until we find the first value where", "answer cubed is greater than or equal to x", "So we're going to generate guesses", "If answer cubed is less than x we know that we're not there", "So we'll keep doing it until we find the first one where answer cubed is", "bigger than or equal to x", "Once we're there we can then check", "And we check to see is answer cubed actually what we want", "Is answer cubed equal to x", "If it's not we'll say so", "And if it is well  then  we'll say  I found the thing that", "I was looking for", "So  using that iterative loop  and now what I'm doing is I'm just walking", "through generating guesses for the cubed root of something until I find", "an answer that is either close enough or beyond where I want it to be", "We can look at this in idle", "So here's a piece of code that does it", "It's exactly the code that I just set up there", "And let's run it", "I actually", "now  when it says give me an integer", "Let's take", "And it gives me the right answer", "We know what it did", "It started out with zero", "Zero cubed was less than   so I went to one", "Which is less than cubed", "Cubed is less than", "Went to two", "Which cubed is eight", "Which is still less than", "Went to three", "Which cubed is", "So it's still less than where we want to be", "I'm sorry", "It's no longer less than where we want it to be  so we could check to see was", "it in the right place", "Let's try another couple of examples", "Again I'll go back and I'm going to reload this function", "It's going to say for a different one", "Let's try", "And  again  in this case  it keeps generating instances of answers", "starting at zero until it gets to the first one that is greater than", "Which is when the answer is equal to", "Since   cubed is    which is not equal to    in this case  it says  I", "don't have what I wanted", "All right", "So don't sweat the details of finding cube roots", "This is a simple little thing", "But notice that it does this generate and guess kind of idea", "Now if we look at that code we can actually observe a couple things", "One of which is it only works for positive integers", "But we could find cube roots of negative numbers  we just know that", "it's going to be a negative version of whatever the cube root of that", "absolute value would be", "So we could actually go back and fix this and we can do it pretty", "straightforwardly", "Let's go back into our code and  in particular now  just", "add a couple things", "One is we're going to look to see whether the thing we're checking for", "is less than the absolute value of x", "And similarly to check to see whether the thing cubed is equal to the", "absolute value of x", "That's nice", "And that's straightforward", "All we have to do is when we're done come down here and say once we've", "found the answer for  say  minus    we'll turn it into   and find the", "cube root of that", "Which is  obviously  going to be three", "And at the end we'll simply put the minus sign back in as we need it", "Let's try that out in idle", "That's pretty simple", "Here's my code", "It's exactly what I just showed there", "And if we run this", "OK  if we do   it still does the right thing", "But if we run it", "and we give it minus   it gives us back minus", "The reason for showing this is to see that once I've got the idea for an", "algorithm I can often generalize it by looking at other cases and then", "reusing the same body of code for the key computation  and adding in pieces", "around it together to get it to do the things I like", "OK  now  what are some of the properties of this idea", "Well  we've already seen one of them", "We said when we've got a loop we need to have a loop variable that's", "initialized outside the loop  the changes within the loop  and where the", "test for termination depends on that variable", "When we start thinking about these guess and check kinds of methods  one", "of the things that's handy is it's often useful to think about what's", "called a decrementing function", "What are the properties of these things", "Well  this is a function that maps a set of program", "variables into an integer", "When the loop is entered that value is non negative", "When the value is less than or equal to zero the loops going to terminate", "and inside of it the value decreases every time through the loop", "Often this decrementing function is going to measure how much work do we", "still have left to do", "And so  for example  here  the decrementing function we're using is", "the absolute value of x minus answer cubed", "That tells us how far away we are from the place where we", "would find a solution", "And on each stage that gets smaller and smaller", "Until eventually it gets either equal to zero or less than zero and I know", "that I'm done", "OK  so those are the kinds of things we'll come back to", "This idea of thinking about loop characteristics", "But since we've written this piece of code  and since we've said that it's", "important to initialize the loop variable outside the loop and to", "change it inside the loop  let's see what happens if we don't do that", "OK", "Suppose  for example  we don't initialize the variable inside", "So I'm going to do the following", "I'm going to go back to my code and I'm going to remove the answer equals", "zero  INAUDIBLE", "So if I go to my code  right over here  I'm simply going to", "comment that out", "All right", "So it says I'm not going to set up answer equal to zero", "And now I'm going to run that and then save it away", "I need to give a number", "Let's give it  I don't know  we'll give it", "Oh  goodness", "What happened", "Well  we hit an error", "And  in fact  what we see in the screen is the thing that", "gets printed out", "It's called a trace back that shows us where the problem was", "It said  in that file that I was looking at  in line four", "when I'm trying to evaluate in line four is while answer cubed is less", "than apse of x  it says  oh  the name answer is not defined", "That makes sense", "I didn't create an initial value for it so how can I be looking at answer", "to change things", "So if we don't initialize the variable outside we get an error", "Let's go back to our code", "Let's remove that answer and let's make another change", "Suppose we actually do initialize a variable but we don't change the", "variable inside", "So let's remove the answer is equal to answer plus", "So over here in my code I'm going comment that out", "And just to be able to see what's going on  I'm going to put in here a", "print statement that says  let me print out answer", "Make sure I have appropriate spacing here", "Let's run this", "Need to save it away", "Again  I'm going to give it the variable", "And let me make sure I give it something in the right window here", "So I'll give it", "Oh  goodness", "What's happening", "Well  this is now caught in an infinite loop", "So  in fact  let me stop by hitting Control C  which is the", "command to stop it", "If I go back to my code here and I know I accidentally typed in", "because I was in the wrong window", "If I go back to my code here you can see what's happened  which is inside", "that  INAUDIBLE  loop  in my ever changing answer  or ANS", "the answer is no", "So if that variable initial  or that test initially was true  it's going to", "stay true  and nothing is changing", "So with this in mind  I actually have a real problem", "I have to  basically  have some way of getting a change to the test", "Without it I'm caught in the loop forever", "So you see that those properties are going to important", "I need to initialize the loop variable  I need to be changing it", "inside  and  of course  I need to be testing some function of it in the", "actual test to make sure that I'm going to get through it", "So what do we have", "This is now a version of a guess and check method", "So guess and check methods can work on problems where there's a finite number", "of possibilities", "I'm going to guess different instances of the thing I'm looking for and check", "them until I see if I find them", "And what we just saw here is a particular version of it called", "exhaustive enumeration", "That is  we simply start at one end of the possible range of values and just", "try each one in turn", "We exhaustively walk through all of them until we find a solution to it", "And while it sounds like it could be really slow  and at times it can  you", "can also see for some problems it works just fine", "We just used it to find the cube root of an integer", "All right", "With that we can move on to building on top of this idea"], "flilzpxT3Pc": ["JOHN GUTTAG  Hello again", "This is John Guttag welcoming you back to another exciting segment in  X", "We ended the last segment looking at ways in which we can use the standard", "deviation of a normal distribution to construct confidence", "intervals and levels", "We observed that normal distributions are quite common", "If we were to plot the heights of all the students in    or for that", "matter  the people in this large stadium  we would almost surely", "produce something close to a normal distribution", "If one looks at the experimental errors in repeated trials of an", "experiment  they are typically normally distributed around zero", "I guess  around zero if the experiment's well conducted", "Otherwise  the mean is less obvious", "If I plot the average temperatures for almost any place in the world", "this happens to be in the United States", "it will be close to normally distributed as well", "It is important to remember  however  that not all distributions are normal", "Consider rolling a single die", "As we've talked about before  perhaps more than you enjoyed  each of the six", "outcomes is equally probable", "If one were to roll a single die a million times and create a histogram", "showing how often each number came up  each column will be", "almost the same height", "If one were to plot the probability of each possible lottery number being", "chosen  it too would be a flat line at one divided by the range of the", "lottery numbers", "As we've discussed before  such distributions are called uniform", "Uniform distributions occur frequently in games devised by humans but only", "rarely in nature  and are not usually useful for modeling complex systems", "They can be easily characterized by single parameter", "their range", "In contrast to uniform distributions  exponential", "distributions occur quite commonly", "They're often  for example  used to model inter arrival times", "the frequency with which autos enter a highway  or with", "web pages are requested", "They're important because they're the only continuous distribution that has", "the memoryless property", "What happens at one stage of the distribution is independent of what", "happens at other stages", "Consider  for example  the concentration of a drug  and let's", "assume it's a legal drug  in the human body", "We start with some finite number of molecules of the drug", "The body's natural instinct is to try and eliminate foreign substances", "So let's assume that at each time step each molecule has a probability  p  of", "being cleared", "That is to say  eliminated from the body", "The system is memoryless in the sense that at each time step the probability", "of a molecule being cleared is independent of what happened at", "previous times", "Let's start at time t equals    and ask whether a molecule that was in the", "body at time t equals   still is", "Well  of course it is  so the probability of that molecule still", "being there before any time has elapsed is", "How about time t equals", "Well  we know that the probability of the molecule being cleared is p  so", "the probability of it still being in the body has got to be   minus p", "At t equals    the probability of that individual molecule still being there", "will be   minus p squared", "And more generally  at time t equals k  it will be   minus p to the k", "Notice  by the way  that this term could be written as   minus p to the", "and this term could even be written as   minus p to the", "So indeed  we see this formula is correct at each time step", "Now let's suppose that at time t equals    there m   molecules in the", "body to start with", "In general  at time t  the number of molecules still in the body will be m", "sub   multiplied what", "By the probability that an individual molecule has survived", "And that is the probability we just looked at", "Let's look at some code that implements this to compute how many", "molecules are likely to be in the body at any point in time", "The function clear has three arguments", "n  the initial number of molecules  the probability of a molecule being", "clear at each step  and the number of steps", "We start by initialize numRemaining to n  so at time t equals", "there are n molecules", "Then for each step  we append to numRemaining the value of the formula", "we just looked at", "And then when we're done  we just plot it all", "We can now look at the code in the code window", "It looks like I've added labels for the x  and y axes", "that's a good thing", "Now let's run it for     initial molecules  clearance probability of", "and   steps", "Well  we get this rather elegant exponential graph", "This is an example of exponential decay", "In practice  exponential decay is often talked", "about in terms of half life", "Half life is the expected time required for the initial value to", "decay by", "For example  the half life of a single radioactive atom is a time at which", "the probability of that atom having decayed is", "What you think will happen if I go back to the code and make the y axis", "logarithmic", "Well  that beautiful exponential decay has been replaced by a straight line", "Are you surprised", "Well  you shouldn't be  because recall that the values in the y axis were", "changing at an exponential rate", "That's why it's exponential decay", "And when we make the y axis logarithmic  the labels on the y axis", "are now also changing at an exponential rate  hence", "the straight line", "This is one way to check  by the way  if distributions are exponential", "Notice  by the way  that this code is not a Monte Carlo simulation", "Even though I'm using a probability in this statement  there is no randomness", "in this code", "Suppose I want to write a Monte Carlo simulation to test the same thing", "Well  let's go look at that", "ClearSim takes the same three arguments as clear  and again  begins", "by initializing numRemaining in the same way  and iterating", "through each step", "For each step  it looks at each molecule  m  and either clears it or", "not  depending upon whether random random returns a value less", "than  or equal to the clear probability", "Then when it's done  it plots it", "The code down here first runs clear  and then clearSim  so we'll now see in", "a single plot the results of both ways of computing the exponential decay", "Notice that these two approaches give us almost identical curves", "That's a good thing", "I would have been worried if they hadn't", "I also would have been worried  by the way  if they'd been identical since", "for one  the simulation  there is some randomness", "So I wouldn't expect it to exactly track the initial values  the", "theoretical values given by the blue curve", "And in particular  as the numbers get smaller as we've gone through more", "steps  I might expect more divergence because the law of large numbers would", "no longer be applicable", "So to get a precise answer  it's better to calculate it from the", "probabilities", "On the other hand  the simulation does have some value", "Suppose  for example  I want to change it a little bit", "In fact  let's do something a little bit strange", "Let's assume that this drug is maybe not a drug  but say", "a virus or a bacteria", "Some kind of life form that can reproduce itself", "And so let's modify this simulation to account for the fact that every", "steps  each of the surviving molecules clones itself", "It can do that quite easily", "Let's put the code in here", "If we're not at the first step  and the step we're at is evenly divisible", "by    we'll change the number of molecules left to be doubled  numLeft", "plus equal numLeft", "And then we'll go off and see what we get there", "Well  here we see that the blue curve is  of course  unchanged  but the red", "curves  the simulation  is rather strange", "It drops down until it reaches   steps  then it jumps up  drops down", "But we see that it gets smaller and smaller  and we are getting ragged", "decay  but effectively  it is still dropping exponentially", "Kind of the fun thing you can do with simulations is try different kinds of", "experiments", "Exponential growth is the inverse of exponential decay", "It  too  is quite commonly seen in nature", "Compound interest is an example of exponential growth  as is the growth", "of algae in a pond or a swimming pool", "And the power of an atomic bomb is based upon the fact that the energy", "grows exponentially"], "f2655NqIYtA": ["So  we're ready to start thinking about testing", "We've written a piece of code  perhaps several things that", "interact with one another", "And we're ready to start checking to make sure it really", "does the right thing", "Our goal  ironically", "or strangely  if you like   is to show that bugs exist", "Now you may say  wait a minute", "Don't I really want to show that there are no bugs in my code", "And the answer is  if you could  that would be great", "But it's really hard to do", "It's often much easier to show that there is something than to show that", "there isn't something", "And so while  ideally  we'd like to show that our code is bug free  what", "we really want to do is try and run enough tests to either identify that", "there's a bug  or convince ourself that there's a good", "chance there isn't", "Why can't we just show there are no bugs", "Well  part of it is that it's often impossible to run all possible checks", "If I've got a numeric function  I might  in fact  actually have", "something that has billions of tests", "And I don't really want to spend the time to do all of those tests just to", "show that the code is completely bug free", "That's a slight misstatement", "If it's a really crucial piece of code  I might do that", "But in general  I just don't have the time to run an all possible test", "There are some formal methods  that is mathematically based methods  that can", "sometimes help actually prove that the code is bug free", "But they usually only work on simple kinds of code  and they're not going", "to be always available to us", "So  let's think about how do we do the testing", "Well  what we want to do is to find a collection of inputs that have a high", "likelihood of revealing bugs  but where the testing is actually going to", "be pretty efficient", "It's not going to take a lot of time", "And this is called a test suite", "The idea is that we're going to partition  or divide up the space of", "inputs into subsets that provide equivalent information about the", "correctness of the code", "What does it mean", "It says if I have a set of possible inputs  I'd like to", "break it up into pieces", "And say  any input from this piece  the performance is going to be pretty", "indicative of the performance of other inputs from that piece", "Any input from this piece", "same thing", "Performance is going to be indicative of the performance of the things", "inside of that piece", "And so what we're going to do is divide up the set of all possible", "inputs into a group of subsets with the property that each element of the", "set is in exactly one subset", "So  all possible inputs", "I want to partition them up", "Once I've done that division  I'm going to construct a test suite that", "contains one input from each element of the partition", "From each different piece I'll select one input  and then I'll run the test", "suite on that to see how well it does", "Let's look at an example", "Here's a little piece of code", "In fact  I haven't shown you the code  I've just shown you the specification", "Want to say  is x bigger than y", "And what is bigger does  is it assumes that x and y are integers", "And it's going to return true if x is less than y  otherwise false", "What's the input space", "On the input space here is all pairs of integers", "Now that's obviously a really big how might I partition this up", "Well  I could take advantage of things I know about integers", "And so  here's a possible partition", "I could say  look at one part of the space where both x and y are positive", "Look at another part of the space where x is negative and y is negative", "And then  one's positive  the other's negative", "And if you think about the plane of integers   or the set of integers  all", "possible pairs", "I'm dividing it up", "Now I have a couple of other special cases that I know were unique or", "interesting about integers", "So  in particular  I can also look at the case where x and y are both zero", "and then when x is zero but y is not  and y is zero but x is not", "So this is now dividing up the space", "And notice  I've got every possible case", "No  sorry", "Bad way of saying it", "I don't have an example from every possible case  but I have taken the", "space and divided it up so that all possible tests are covered by one of", "these particular cases", "OK", "Now  why", "Why this partition", "I could have lots of other choices", "I might have said  look at one where x is prime  and y is not", "Where y is prime and x is not", "Where they're both prime  where they're both not", "That's also a division of the space", "But it's not really relevant  right", "This is irrelevant to the problem", "Knowing whether something bigger or not is really not going to depend on", "whether it's prime", "The division I made was more based on the idea of what does", "the space look like", "The second thing I did is that spaces of inputs often have some natural", "boundaries", "Integers are either positive  they're negative  or they're zero", "Ah hah", "That's why I use that partition", "In fact  I'd broken it up into both positive  both negative  one positive", "one negative", "And then the cases where things were zero", "Actually  if you think about it from this perspective  if integers can be", "one of three kinds  shouldn't I have nine cases", "Three different cases for x  three different cases for y  and all the", "combinations of them", "And the answer is probably  yes", "And in fact  I could really split this case  where x is zero and y is not", "equal zero  into x is zero  y is positive  x is zero  y is negative", "And the same for the other case", "And that would in fact  give me the nine cases that would make more sense", "What you see here is an example of breaking up a partition  of built or", "broken up the input space into groups  sets  classes", "Now what I'm going to do is basically use that to think about how I'm going", "to build a test suite", "Before I do  though  let's say  gee  what if there is no natural partition", "to the input space", "What can I do", "Well  a couple of choices", "One is I could just do random testing  that is I could simply take a bunch of", "examples and keep trying them", "And use the result that the probability that the code is correct", "increases with the number of trials", "But really I should be able to  in those cases  use", "the code to do better", "So  in fact  we're going to split up our testing into two different kinds", "of testing", "One is going to use heuristics based on exploring paths through the", "specifications", "We call that black box testing", "The second one is going to use heuristics  based on exploring paths", "through the code itself", "We call that glass box testing", "And so  we're going to take now this idea of partitioning up the space  and", "couple it with these two ideas to look at how we actually build test suites"], "sViMNECYhZs": ["ERIC GRIMSON  In the last section  we introduced a", "couple concepts in terms of writing programs or scripts", "We had straight line programs  where we had just a linear", "sequence of instructions and we executed them", "at a time in order", "And we added the idea of branching  or conditionals", "where we could do a test  and depending on whether that test", "was true or false  we might skip to   piece of code or a", "different piece of code", "But in both cases  we're doing each instruction at most once", "Useful  but not great", "To get to the ability to write programs or scripts with", "arbitrary complexity  we need   more key concept  and that", "concept is the idea of being able to reuse a piece of code", "an arbitrary number of times", "We might have a set of things we want to do once or", "depending on some value  twice  or depending on some", "value    times or     times", "And rather than having to copy the code that many times  we'd", "like to be able to have the computer automatically reuse", "the code as many times as desired", "That notion of iteration is going to be incredibly", "valuable  and we're going to talk about some constructs to", "help us make that happen", "The basic idea  though  is straightforward", "Given that we have some code we're executing  when we get", "to an iteration loop  which is this chunk right here  we", "start with a test", "That will be Boolean that will return either True or False", "If it's True  we're going to go down and execute some set", "of instructions  the body of the loop  and then go back", "around and do the test again", "And we'll keep doing that", "As long as the test is True  we'll execute that same set of", "instructions in the body over  and over  and over  until", "finally  the test is False  in which case we skip around the", "loop body and pick up the computation elsewhere", "This notice allows me  based on this Boolean test  to be", "able to do the code some arbitrary number of times  and", "that's really great", "Let's look at an example", "Here's a simple example that shows that idea  and I want to", "talk about the syntax of the construct  but also about what", "the example's going to do", "This is a simple piece of code that squares a number", "I want to get x squared  but I'm going to do a by just", "successively adding x to itself x times  which is of", "course what x squared actually does", "I add x copies together", "Notice what we've got", "We're going to set up some value of x", "I'm going to do a binding there", "We're going to bind a variable ans for answer  which is where", "we're going to add up all the instances of x to get where we", "want to be", "And we're going to need to keep track of how many", "versions of x do we still have to add in", "So we're going to set up another variable called", "itersLeft  initially bound to x", "The looping construct  the iteration construct  we have", "is called a while loop", "And there's the key word while  and it has the", "following property", "It has a Boolean test   in this case  we're checking to", "see whether itersLeft is equal to   or not", "followed by a colon  and then it has a set of indented", "instructions  which of course  are the body of the loop", "The way the while loop works is it", "first tests that Boolean", "If that Boolean is True  itersLeft is not equal to   in", "this case  it will then execute each of the", "instructions in the body in sequence", "And when it gets to the end of that sequence of instructions", "it's going to go back up and retest the Boolean again", "So it will cycle through this code multiple times until that", "Boolean is finally False", "When it is False  it will skip down to the end of the loop", "which is shown by where the indentation stops  and pick up", "the new set of instructions and continue", "So there's the structure  let's see if this does the", "right thing", "Well  here's my code  and let's just walk through this", "We won't run it on idle  we'll just walk through it", "Initially  x is bound to    ans is bound to    and", "itersLeft is bound to", "The while loop says  test to see if this is equal to", "Since it is not equal to    the test is True  and", "therefore  I take the current value of ans  the current", "value of x  add them together  and rebind that to ans", "I then take itersLeft  subtract one from it  and", "rebind that to itersLeft", "So I've decremented itersLeft  and I've incremented ans", "I go back up  and again  I check", "Is that not equal to", "It is not equal to", "Therefore  I take ans and I take x  I add them together", "and I rebind those to be the new value of ans", "I change itersLeft by", "That's my new value there", "And again  I go back through the loop", "That is not equal to", "Well  the test is still True  so again  I take ans  I take", "x  add them together  create that to be my new binding for", "ans  which is", "I take itersLeft  subtract   from it  there's my new value", "of itersLeft", "And again  I go back to the top of the loop", "At this point    being not equal to   is False", "Terrible way of saying it  but that test is no longer True", "It's False", "In which case  I will skip to the end of this loop  and", "print out that x   x  or if you like", "is equal to", "Cool", "A little slow  but it does what I want", "Notice I have reused this code an arbitrary number times", "And in fact  if I were to change x to be something else", "I will reuse that piece of code a", "different number of times", "There's my iteration that I really want", "You can also see some properties of", "an iterative loop", "First of all  we need to set an iteration variable outside", "of the loop", "In this case  it's x and itersLeft", "Actually  the one I really care about here is itersLeft", "I also need to test that variable to", "determine when I'm done", "There's the use of itersLeft inside of the test", "Now  it could be a simple test  it could be a more", "compound test  but that's basically what I need to test", "And finally  I need to be changing that variable inside", "of the loop  right there", "If I didn't  then that test value would never change", "which means I would never stop the loop", "But there's a property I need", "When I set up an iterative loop  I need to say what's the", "variable I'm setting outside  how am I testing it  and am I", "making sure to change it somehow inside of the loop in", "order to ensure that I get the pieces that I want", "So what do we have now", "Well  that's a really valuable construct", "We already saw that branching structures  things like", "conditionals  will let us jump to different pieces of code", "based on a test", "Once we add in the idea of looping over the code  things", "like a while loop  that allows us to repeat pieces of code", "until the condition is satisfied", "So it's a generalization of a conditional", "On simple branching structures  we've already said", "that programs like that are constant time  that is  we", "execute each instruction at most  once", "With looping structures  notice", "that things are different", "Now  the program is going to take an amount of time that", "depends on values of variables as well as the amount of code", "or the number of instructions inside the loop  because it's", "going to depend how many times we walk through the loop  and", "that depends on the variable", "Nonetheless  these loops are going to be really valuable", "and we're going to turn to that next"], "lcDQ7GqlS-M": ["Let's apply our curve fitting technology to the results of another", "experiment", "What we're going to do is to fire an arrow at a target", "So as we notch the arrow on the bow spring  and we pull the arrow back", "getting ready to release it  the arms of the bow are bending  and this is", "another example of a very powerful spring at work", "And when we release the arrow  it will fly to the target", "And what we've done is we've taken a bunch of measurements", "So as the arrow flies up  and then falls back down and hits the target", "we're going to be measuring the height of the arrow at various times during", "its flight to the target and work to fit a curve to that", "So you can come up with a mathematical equation that describes the", "flight of the arrow", "We'll also be looking into ways of measuring how well our curve is", "actually fitting the data", "Up to now we've been sort of eyeballing it  which was a good start", "but we can actually develop some sensible mathematical measures that", "will tell us about the goodness of the fit", "Here's some Python code that lets us experiment with the data we got from", "firing the arrow with the bow", "As before  we have a procedure that helps us get the data out of the data", "file and put it into a bunch of lists", "In this case  what we have is a bunch of distances at which we made the", "different measurements  and then for each distance  we have the heights at", "that distance from four separate experiments", "To actually do the curve fitting  here we have tryFits  which is very much", "like the routines we've written before", "We're converting the distances which were in yards into feet  and then", "we're going to process the four measurements from each of the", "experiments into one average measurement for the", "height at that distance", "With that in place  what we can do is to go off and plot the actual", "observations  again  as blue circles", "That's what that little  bo  means there  is the argument to plot", "And we're going to use polyfit as we have before to do a linear fit to see", "if there is a linear relationship between the distance this arrow has", "flown and its height above the target", "We're all set to go", "Let's save this out  and then run it  and see what the plot looks like", "So here we have the data", "You can see it as the arrow flies from the bow over here to the target  and", "the target looks to be about at     inches from where it was released", "You can see it follows a trajectory where it goes up  and then it comes", "back down again", "And here's a linear fit of a line to that data  and it's probably fair to", "say that the hypothesis that the arrow travels in a straight line from the", "bow to the target is not a good hypothesis", "You can just see that this linear fit seems to really bear no relationship", "at all to the actual data points", "So let's go back to our code  and let's try a parabolic fit", "And so  what we're going to do is to look for a quadratic equation that", "relates the distance to the altitude of the arrow", "So let's get this code back into execution", "This is just an addition of fitting a second degree equation to the data", "and let's see how that goes", "So we're going to save this out  and run it again  and look at the plot", "And  yes", "Here we go", "So this curve here actually looks like it fits the data pretty well", "The jaggedness comes from the fact that we're just simply plotting the", "parabola only at the data points at which we actually had measurements", "It would be possible to plot the parabola using many more values", "Since it's a mathematical model  we could choose other distances that we", "didn't make measurements at  and then the parabola would", "look much more smooth", "So that looks like a pretty good fit", "And so  we're sort of happy with that", "Maybe what we should do  though  is to think a little bit about how do we", "measure the goodness of a fit", "Is there some mathematical analysis we can do that would reveal that the line", "is a lousy predictor of the observations  whereas the parabola is", "a much better predictor", "So how do we measure the goodness of a fit", "Which one of these curves actually fits the data better  the quadratic", "fit or the linear fit", "And we can tell by eye which one we seem to think is much better", "Let's see if we can develop a mathematical explanation of", "which one is better", "I guess the basic question is  does the model fit the data", "Are our predictions coming close", "Let's start by talking about a measure of the size of the errors that are", "being generated between the predictions and the observed points", "so we can talk about the variability of error", "So  we sort of start there", "We can say  well  variability of the errors", "How much are the errors varying", "So here  we can see that the errors are huge", "They're big and they're small  and so if we talked about a mean error  how", "much are we varying from the mean", "Are the errors pretty much all the same  or are they", "big  or are they small", "So we're talking about the variability of errors", "And a standard measure of variability is the variance", "And in fact  we've seen this", "This is  in fact  just exactly the least squares if we look at the error", "which is the difference between the observation and the prediction  and we", "take the sum of the square of those errors over the whole thing", "And then we do some sort of normalization here   so there's some", "sort of normalization constant  which I won't bother to put in", "that would give us a sense of how much the errors vary", "So if there was small errors all around  then in fact  the variance of", "the errors would be small", "And we can say  well  that's good enough", "We could just sort of take this number  and whatever its value is  a", "small value would mean the model fit well  and a large value would means", "that the model wasn't fitting", "But the trouble is that if we're making observations in terms of parse", "x  the errors may be smaller in parse x  but as an absolute value  the", "errors are sort of huge", "So really what we want to do is to compare the variability of the errors", "to the variability of the original data", "So we can use the same sort of measure of variability  the variance of the", "data  which is  again  some sort of normalization factor  and we're going", "to talk about the values of the observations relative to the mean", "observation", "So that would be the variance of the data", "And what we want to do is to compare those  make a ratio of those two", "quantities  to get a sense of how well the model is fitting the data", "So the fraction of the variability that's not explained by the model has", "to do with the ratio of the variability of the errors   which is", "the part that we're not explaining with the", "predictions that we're making", "over the variability of the observation", "So think of this as a normalization factor", "And so  this gives us the fraction of what we're observing that's not", "explained by the model", "So that means that the fraction of the variability that is explained by the", "model is basically   minus that ratio  so the variance of the errors over the", "variance of the data", "And this is a very useful measure", "This gives us a sense of how well the model is explaining the observations", "that we're making  and we hope that we're doing a good job that the", "variance in the errors is small compared to the variance in the data", "which means that we're explaining almost all the changes in the data", "that we see", "We're able to predict them", "So  this is given a name  r squared  and this is called the coefficient of", "determination", "So when the coefficient of determination is close to    that", "means that the model is doing a good job of explaining the data  and when", "the coefficient of determination is very small  close to    that means", "that there's not much of a match at all between the model and the data", "And we never expect r squared to be    because that would mean we had no", "error at all  and we expect most of our experimental observations to have", "some small amount of error", "Let's put this observation into some code", "Up here  we've written a procedure that will compute the r squared value", "given a set of measurements and a set of predicted values", "And so  here we can see that we're calculating the sum of the squares of", "the estimated errors  and then down here we first compute the mean of the", "observed values  and then we compute the difference between the mean and", "the measured values and the sum of that squared", "So we've left out the normalizing factor for the variances  since the", "two normalizing factors cancel on the ratio", "So finally  we form that ratio of the variance of the errors over the", "variance of the data  and then we subtract that from   to get the r", "squared value", "And then down here  what we've done is to modify tryFits into tryFits   and", "we've simply gone ahead and calculated the r squared value for each of the", "two fits  and put that on our plot", "So we're all ready to run that", "That's the code down here", "So let's save this out  and then run it  and see what we get", "So now  the plot is exactly the same as before  except that we've reported", "the r squared value for each of the two models", "You see the linear model  which we sort of suspected wasn't a good fit at", "all  actually is a very  very poor r squared", "The variability of the data is not explained well at all", "by the linear model", "However  the quadratic model actually has a very good r squared", "So that means that  in fact  the quadratic model is explaining most of", "the changes that we see in the observation  so the model predicts", "those changes", "And there's a small amount of variance in the observations that's not being", "explained  and that comes from the observational errors", "So the conclusion is that we can use the r squared value to give us a sense", "of whether our model is doing a good job of predicting what the data is", "actually doing", "If r squared is close to    the prediction is good  and if it's not", "close to    then the prediction is less good  and maybe we should", "continue our search for a better model"], "WntLU2CrfdE": ["Let's visualize what happens with a Fibonacci series  using the original", "idea from Leonardo", "We start off with the single female", "At the end of one month  she's pregnant", "Which means at the end of the next month  she's still there  but she's", "given birth or whelped another female", "At the end of the next month  that first female again has", "whelped one more time", "The first offspring is now pregnant", "And there are now three rabbits running around", "And at each stage you can see that after one month of growth  if you", "like  each new rabbit produces another one", "So at this next stage two of them whelp  at the next stage three of them", "whelp  at the next stage five of them whelp", "And you can see we're going to have a ton of rabbits in a hurry"], "gAj5vgOzJB0": ["PROFESSOR  So we talked about what you've done  where you've been  what", "you've learned", "Think about it   you've actually covered a great deal", "throughout this course", "Let's wrap up by talking about where you're headed", "First  let me start by pointing out that we know that many  if not all of", "you  worked incredibly hard  often juggling other time constraints in", "order to spend time on this course", "And we really appreciate it", "We've also worked hard to try and refine the course as we've gone along", "since it's our first time through it  to try to make sure that it really", "worked well", "But we greatly appreciate the effort that you put in", "I think the key thing I would like you think about is  what's your return on", "investment", "You're the only one that really knows it", "But I really would suggest that it's handy for you to go back and take a", "look at some of the first problem sets and realize how straightforward they", "are for you to solve now", "And yet  remember that maybe when you started  they looked a little scary", "Look at this sophistication of the problem sets throughout the term and", "realize just how quickly you've come up to speed in terms of being able to", "think computationally", "And in particular  think about what you'd be willing to tackle now", "And compare it to where you were several weeks or several months ago", "when you started this course", "You've put in the effort", "We really hope that your return on investment is high  but we think that", "it's likely that you can now solve a wide range of problems much more", "sophisticated than what it was when you started with this class", "And we'd like you to remember that in particular  you've now got a set of", "tools that can give you answers to problems", "Computational thinking is the new arrow in your quiver  if you like", "We've taught you a set of algorithms", "basic classes of algorithms", "But you can use them in any way you'd like", "So we really hope that you take these ideas and when you now sit down and", "are faced with the problem  one of the first things you say is  how can I", "turn this into something computational", "What kind of algorithm would best tackle this", "What are the abstractions that would really be important", "to think about this", "How can I suppress detail and focus on the key elements of it", "How could I write code that helps me give answers to things", "So that when you get a new problem  first question you ask is  could I", "capture this computationally  and if I can  how quickly could I write a piece", "of code that will give me a good approximation the answer that I want", "That's where you've come to", "That's where you're headed", "You now have those tools  and you're ready to run with them", "What else could you do with it", "Well we hope that you've also now got a basis for computational thinking", "that sets you up to explore other ideas  whether it's another course", "online  or whether it's reading  or in other ways", "But indeed  you are now set to think about other things", "And here are four suggestions of different areas you might head", "You're certainly now prepared to think more in detail about algorithms and", "data structures", "You knew a lot of basic things", "You got an amazing setup of tools already in place  but there's a whole", "wealth of more sophisticated and complicated algorithms that can tackle", "a wider range of problems available to you", "And you might think about exploring those ideas", "Again  whether it's reading a book  reading some articles  or trying", "another online course", "There's a whole other range of areas called AI   artificial intelligence", "smart machines", "And you now have the basis to start using the tools that you have in order", "to start thinking about those kinds of problems", "There's a lot of nice courses that introduce you to the notions of AI", "reasoning about things and under uncertainty in order to deduce new", "information", "Machine learning  being another very common problem or technique here  that", "I would suggest is now available to you", "You have the basis to start thinking about machine learning problems  an", "area that's becoming very widespread throughout the world and something", "that you'll learn more about", "Of course  you could build more on programming by taking an additional", "course in software engineering", "Or you might decide you really want to understand what is inside the machine", "We talked about that interpreter  that evaluator  but how do you", "really build one", "And you could dive inside the machine to think about how does a computer", "actually put the pieces together and focus on computer architecture", "Finally  what I'd really like to say to you  and all the staff would like", "to say to you is  good luck", "You started a journey on computation", "We hope that journey takes you many places", "And we hope that you find that the tools you've learned in this course", "are really of value to you  almost anywhere in any domain in", "which you're working", "And that when you are faced with a problem  you say  I know", "how to solve that", "I can turn that into a computational solution", "And I'll write code that gives me the answer I want", "So good luck"], "yGAPgGgodyo": ["In this fifth lecture we're going to first talk about the functions we've", "been writing  especially about how we can think of them as iterative", "computations that capture the heart of a computation as a set of state", "variables that update with each iteration through a loop", "We will then build on that to talk about the wonderful concept of", "recursion  where we reduce a computation to a simpler version of", "the same problem  and then use that idea to very crisply and cleanly", "capture computational processes", "We will show how this idea of recursion builds on", "the concept of induction", "And we will in particular use this to reason about why", "recursive algorithms work", "And  we'll use that idea to guide general principles in designing", "recursive algorithms", "To demonstrate this  we will show you a number of classic and fun recursive", "algorithms  especially algorithms we call divide and conquer methods"], "8ArBqJwU8M0": ["CHRIS TERMAN  Hi  welcome back to the second of our two lectures on object", "oriented programming", "We're really just getting you started here", "You'll have lots of opportunity to explore how object oriented", "programming works  and getting more experience with it yourself as you", "complete the programming assignments for the rest of the semester", "We're going to start with a review of some of the code we developed last", "time  and I'm going to pose a series of questions", "Before going on and listening to the answers  you might find it useful to", "stop and think about what you would answer if you had to", "By way of review  let's look at the code from last time", "This code introduces five new classes  five new user defined types  into the", "Python system", "We have a class of type Person  and then this are the methods and other", "attributes of the Person class  a subclass of Person  called MITPerson", "and here are its methods and attributes  a subclass of MITPerson", "called Student  and finally  two subclasses of Students", "called UG and Grad", "So when we use the name of a class  in this case  student  use it like a", "procedure call  in this case by passing an argument  the string  Tim", "Beaver   what Python does is  it creates a new object of type Student", "and then calls init method for that object with this argument", "So let's see if we can figure out what happens", "So we have an object of type Student  and we're looking for its init method", "So Student itself defines no new methods", "So we look at the super class of Student  which is MITPerson  and we", "see that it does  in fact  define an init method", "So Python will call this method", "The first argument for any method is the object that's being manipulated", "in this case  the newly created object of type Student", "And the second argument is the string  Tim Beaver", "So what the MITPerson init method does is  the first thing it does is it", "calls the init method of its superclass  Person", "And it passes along the object that we're trying to initialize", "And of course the argument  Tim Beaver", "The init method for Person adds three new instance variables   name", "birthday  and lastName", "And when it returns  the MITPerson's init method defines an additional", "instance variable called idNum", "And what it puts into idNum  it uses a class variable  in this case", "nextIdNum  which is one of the data attributes of MITPerson", "It takes its current value and makes that the ID number for the newly", "created object", "And then it goes off and increments the class variable so that the next", "object of type MITPerson that gets created will have a new", "and unique ID number", "The initialized object then gets returned as the value of the", "constructor", "And that becomes  then  the value of the mascot variable", "So if we ask what mascot is  it's an object of type student  and it has", "four instance variables", "name  birthday  lastName  and idNum", "So what does this do  mascot getLastName   procedure call", "So the dot  remind ourselves is the sort of attribute operator", "What we'd like to do is to get the get last name attribute of the mascot", "object and then call it as a procedure", "So we need to figure out how Python does that", "So Python first looks at the instance variables of the object to see if  in", "fact  there is an attribute called getLastName", "And instance variables are name  birthday  lastName  and idNum", "So no  they didn't provide a definition for getLastName", "So now we look at the class definitions", "Student doesn't provide a definition for getLastName", "Nor does MITPerson  but the base class in the hierarchy in fact does", "And here's the definition", "So Python will then call this method  passing in the object that we're", "manipulating  in this case  the value of the mascot variable  which is an", "object of type student", "And that object does in fact have a lastName instance variable", "And we just reach in  and grab it  and return that is the result of", "mascot getLastName", "Suppose we want to sort of a list of people", "What order will the list be sorted in", "Well  we have to understand a little bit about how Python does sorting", "The sort algorithm uses the less than operator to determine the relative", "ordering of two objects", "And then it has an algorithm to try to minimize the number of comparisons it", "makes in order to put the list in the correct order", "We can actually define what the less than operator does on an object by", "creating a definition of the less than special methods", "Now remember  special method start with a double underscore and end with", "underscore in their name", "So here's the definition of less than for a person object", "And so we have an object that appeared on the left hand side", "of a less than operator", "And now the other object  whatever it was on the right hand side of the less", "than operator  is passed in to this method call", "So self is the object on the left hand side and other is the object on the", "right hand side of the comparison", "And let's see what it does", "It basically checks to see if the last name of the two person", "objects is the same", "And if so  it uses the whole name to sort", "So it compares the whole name", "So it's doing a lexigraphic comparison  a string comparison  on", "the two name strings", "If the last names aren't the same  it basically just sorts", "them by last name", "So what this code boils down to is  if you have the same last name you're", "sorted by your first name or your whole name", "And otherwise you're sorted by just your last name  if the", "last names are different", "OK  so that's how person are sorted when they're sorted", "Suppose I have a list of students  and I'm trying to sort them", "Well  let's see what sort of less than operator we have defined for students", "Student doesn't define less than operator  but MITPerson does", "And we can see that the MITPerson definition of less than overrides the", "definition that occurred in person", "So if I try to sort an MITPerson  student  an UG  or a Grad  I will", "discover that this is the operator the Python will find", "when it does the sort", "And that operator  basically  the comparison it does is by ID number", "not by last name", "So students are sorted by ID number  but a list of people would be sorted", "by their names", "So why did we introduced the empty class Student", "It defines no new attributes", "It seems like couldn't undergraduate have just been", "a subclass of MITPerson", "What was the advantage of introducing this placeholder in the hierarchy", "And the advantage is that we get to use the name Student as sort of a", "collective noun for all the different types of students  all the different", "subclasses of the student class", "So it was very easy for us to determine whether a particular object", "is a Student or not because we can basically ask if it's an instance of", "type Student", "Otherwise  what we'd have to do is  sort of  ask if it's", "an UG  is it a Grad", "So the introduction of this type hierarchy often provides us convenient", "handles for dealing with collections of types", "Finally  let's ask what the substitution principle is", "And this is really an important part of object oriented programming", "Sort of the power of what makes object oriented programming work well", "So the substitution principle basically tells us that any subclass", "of type Person should pretty much also behave as a Person", "So we want to inherit a lot of behaviors of the Person object when we", "create subclasses", "So in particular  for example  we would expect Students to behavior as", "people in for any code that was written to deal with people", "So for example  if we had bought somewhere  from the Hallmark Cards  a", "program that would  every day  send out birthday cards to people whose", "birthday it was", "And it would take a big list of people  and look at their birthday", "and do the right thing", "we would want to make sure that would work just fine on a list of students", "So we don't want to redefine what birthday means in any of the", "subclasses because that would break the behavior of this program that", "manipulated people", "So I'll say it again", "so the substitution principle tells us that any subclass of the type Person", "should also be able to be used in any context that a Person", "could be used in"], "iw4BEqvvgiw": ["Eric Grimson  We started this lecture by arguing that finding efficient", "algorithms on our own can be hard and we want  if we can  reduce problems to", "things that somebody else has developed that are efficient", "And we've just seen a nice example of that  because what we've just seen is", "that if we combine the idea of binary search with the idea of a divide and", "conquer for doing merge sort  that that actually gives us a very", "efficient searching algorithm", "In this case in particular  if we want to search a list k times then the", "efficiency is n log n  in order to do the sorting  plus k log n  in order to", "do the search k times", "And that  remember  we're comparing against something that is k   n", "And so that says boy  we're likely to be doing much better", "And if n is of any reasonable size  then the n log n  times k log n  is", "likely to be much smaller than just k   n", "This still leaves the question of can we do better", "This is cool  but can we actually do better", "And the answer is yes  and here we're just going to briefly highlight it", "We're not going to talk a lot about this  but we want to point it out", "Because  in fact  Python comes with a data structure that supports very", "efficient searching  and that's the dictionary", "You may have wondered about this  because dictionaries are arbitrary", "collections of objects  and yet we can get things out very quickly from them", "And the reason we can is that dictionaries use", "something called hashing", "And a hash function is something that says that we can do a look up in an", "amount of time that's almost independent of the size of the", "dictionary", "almost", "But for most purposes  we can really think of it as saying we can do", "something that is really efficient  independent of the size of the", "dictionary", "So let's just briefly talk then about what's hashing", "The idea of hashing is the following", "Given a key  that key into an element of a dictionary  for example", "A hash function converts that key into an integer and it then uses this", "integer to index into a list", "That can  of course  be done in constant time", "All right  so it says basically when I've got a dictionary I'm using that", "if you like  sort of notion of indirection in a more complicated way", "The elements are stored in a list", "But to figure out where in the list to put them  I'm going to use this hash", "function to say given the key  here's the location to go to", "Now conversion's done with this thing we call the hash function", "And the idea of a hash function is it's going to map a large space of", "inputs to a much smaller space of outputs", "Because it's doing this  it could in principle be a many to one mapping", "What that means is it says ideally we'd like each input  each key  to go", "to a unique place in the output space into the list", "But it's possible that two different keys could go to the same", "location in the list", "When we do  we've got what we call a collision there", "And there we're going to have to store  in fact  a little smaller", "sub list with each of those elements there together with their key", "So that when I do the hashing  I will go to that location in the list  pull", "out that sub list  and do the search", "Now again  if I make the size of the hash table huge I can reduce the", "number of collisions  but of course  that chews up a lot of space", "If I'm not clever about the hash function  I could have everything go", "to one space in the hash table", "In which case I'll have the entire set of things there in the list and I've", "lost because I still have linear search", "So what it comes down to is   and this is sometimes hard to do   we'd like to", "have a really good hash function", "And a really good hash function has a uniform distribution   it minimizes", "the probability of a collision", "With that idea that I'm going to hash by computing some function on the key", "that's going to tell me where on the list to go to", "And I've got to make the list large enough that I can store most of the", "elements in there   but not too large", "One of the questions is  just sort of intuitively  how good is hashing", "Well  if there are no collisions  then this is O", "Now  that also assumes that the computation of the hash function can", "be done very efficiently  but let's assume that", "It basically says given an element  a key  I do the computation  I go", "straight to that point in the list  I pull it out", "And if there are no collisions  only that element's at that location in the", "list  I'm in great shape", "Flip it  of course  is if everything is hashed to the same", "bucket  then I'm stuck", "Because now I've got O n  because I've got to then search through that list", "linearly to find the element I'm looking for", "But in general  I could get something you could see could be very efficient", "I can trade off space", "How much memory do I use to make the hash table large", "And then if I've got a good function  I can get close to uniform", "distribution which reduces the complexity to something close to O", "If in fact my hash table's big enough that it's likely that only one element", "gets hashed in a location  I'm at O", "Even if it's not quite that  it's still pretty close because I'm not", "searching through a huge list there  I'm looking at one or two", "elements to find them", "And so in fact what this says is there are even more efficient", "ways of doing search", "It relies on finding really good hash functions", "Python does that for dictionaries", "And what we'll see as we move through the term is that there are other", "places in which we can use this idea of hashing to give us even better", "complexity", "But nonetheless  the point of this was to say if I can take key ideas  binary", "search  divide and conquer  I can use those ideas to create very efficient", "algorithms  and in this case we did it for searching", "And the second thing we've seen is that while the complexity of a single", "use of a procedure may be more than we'd like  we can sometimes", "amortize the cost", "Say  if we're going to search multiple times through something  the cost to", "do the sort is actually worthwhile because it gets made up by the", "improvement in efficiency of actually doing a search", "And we'll see those ideas as we move through the term"], "dEgc80Stfv8": ["Exceptions are an important feature of many programming languages that allow", "the program to signal when it can't proceed and get the correct answer", "There's something wrong with the data that it's manipulating", "It's detected an error condition", "In Python  you can not only raise exceptions  but you can handle them", "You can wrap a particular piece of code up in such a way that any", "exception that is generated transfers control to special code that you've", "written to deal with the exception", "That's a pretty handy feature  as you'll see", "Our Python programs have been dealing with exceptions for a while now", "Let's talk in detail about how that works", "So the basic question we have is  what should we do when our procedure has to", "stop execution because there's some sort of error condition", "We have three choices available to us", "One is we can fail silently", "We can substitute in the appropriate default values and continue execution", "And the advantage of that is that the program never fails", "I always get some answer back", "But basically that's a really bad idea", "The user gets an answer", "That's OK", "But they get also get no indication that the result that they got may be", "suspect because of some error condition and the substitution of", "default values", "So in general  that's not the way we should go", "A slightly more tasteful approach is to return a special error value", "For example  if I had a procedure that was expecting to produce a number  I", "could instead produce the Python object None to indicate that no number", "was available  that some error happened and here's my indication  a", "special return value", "It can sometimes be a challenge to figure out what special return value", "is distinguished from all the other possible return values", "But assuming you solve that problem  there's a bigger issue  because if I", "have a procedure that can return one of these special values  then whenever", "I call that procedure  I have to include code in my own body which has", "to check for the special value and then deal with whatever the", "consequences are", "And maybe what I have to do is say  well  I don't know what to do with it", "It must be an error that I'll give to my caller", "So I generate my own special value  whatever that is  and", "return that to my caller", "And so what happens is that all the procedure calls get surrounded by", "special  if  tests to check the results and deal with any error", "conditions reported in this way", "So it really complicates the program", "Instead of this very simple program of nested procedure calls  I end up with", "a lot of code that is checking for special case values", "So it gets the job done  but it's really a burden on the programmer", "Happily  Python provides us a tasteful alternative", "We can raise an exception", "So this is a condition that will basically propagate up through all the", "nested procedure calls", "And each procedure call will have a chance to deal with the exception", "If none of the nested procedure calls deals with the exception that was", "created  then in fact the Python interpreter will do the right thing", "and create this nice little error message to the user  giving a", "backtrace  showing exactly where we were in the execution of the program", "and print out this descriptive string", "So the way we actually create an Exception inside Python is we use the", "raise keyword followed by the creation of whatever type of Exception we're", "trying to raise", "In this case  just a generic Exception", "And all the Exceptions here take as their argument a descriptive string", "If we wish  we can provide handlers for Exceptions", "So for example  if I'm going to do an operation which might create an", "Exception and I'm willing to deal with that  what I can do is embed those", "statements inside of the body of a try statement  followed by some code that", "will deal with the exception", "So the way this works is that as I'm executing statements in the body of", "the try  if any one of them throws an Exception  Python will look in the", "list of exception handlers to see if one of them will", "actually deal with it", "In this case  I'm willing to deal with any possible exception", "And so any exception that happens in the body of this code will result in", "the execution of this Python statement", "So just to summarize  exceptions inside the body of the try will then", "cause Python to look through the exception handlers listed after the", "try statement  and whichever one matches first  it will then start", "executing statements from the body of the exception handler", "In this particular case  what can happen is that the open statement can", "discover the file doesn't exist and create an I O error exception", "What happens is that I want to catch that exception in my code  and instead", "of getting some sort of obscure I O error  I turn it into a generic", "exception with a more sensible error message saying", "can't open grades file", "If you'd like to see more about how try and except works  you can look in", "Section   of the Python tutorial", "So usually a handler is only meant to deal with a", "particular type of exception", "And sometimes we need to deal with cleanup actions before continuing", "So in this case  I've refined my example a little bit further to say", "look  I have an I O error here", "I want to deal with the fact that  if this open fails  I know the type of", "error I'm going to get", "I'm going to get an I O error", "And in that case  I'm going to print out a very specific error message and", "cease execution of my program", "And what I've done is I say  look  I can't open the grades file", "And I've also captured the actual exception object that was created by", "whatever the low level exception was  and I report that as well as my", "generic error message", "Separately  there may be some arithmetic calculations on the errors", "later on  and I can catch those and print out another informative error", "message  in this case saying  oh  there was a bug in the grade", "calculation", "So this differs  because it's a much more nuanced handling of errors", "I'm distinguishing I O errors that come from the open statement from", "arithmetic errors that come from the code that's processing the grades", "And I can have as many different except statements as I want  dealing", "with the different types of errors that I expect to get", "We've seen a lot of the common errors", "You get syntax errors", "That's when your Python can't parse a program", "A name error  when local or global name can't be found", "An attribute error  which is when we have an attribute", "reference that fails", "We've asked for an attribute of an object that doesn't exist", "We get a type error", "That's when the operand doesn't have a correct type", "So I'm asking to add a string and a number together", "And the plus operator doesn't know how to do that  so it's an", "illegal type of operand", "A value error  in which the operand types are OK  but", "the value is illegal", "For instance  division by zero", "I mean  zero's a perfectly good number  so it's in general a legal", "operand to divide", "It's just that it's particular value of zero in the denominator causes us", "to say  aha  we can't do this particular division", "And we just talked about I O error", "And if you want to see a list of all the different kinds of errors and what", "they mean  you can look in Section   of The Python Standard Library", "There's a couple other handy extensions to try", "We've talked about the except statements that can follow try", "We can also have an else clause after a try statement", "And this will be executed when the execution of the associated try body", "completes with no exceptions", "So this is what we would do if the try body completes successfully", "And finally  there's the finally clause", "So this is a clause that's always executed after the try statement and", "all the else statements and except clauses that apply", "And even when one of these clauses", "either the try or the else clause or the except clauses  which might be", "inside a loop of some sort  or inside a procedure call", "they may have executed a break or a continue or a return", "That's fine", "They're allowed to do that", "But before we actually finish the execution of this particular try", "statement and all of its clauses  the body of the finally will be run", "So we often put in cleanup code there that should be run", "for example  closing any open files that we created", "no matter what else happens  errors or not", "To see how this works  let's look at a little example", "I've created a divide routine which is going to attempt to divide the two", "operands and return the result", "So because that may fail", "particularly if y is", "what I'm going to do is embed the operation that I know might raise an", "exception inside a try statement", "And then  in the case of a division by zero detected by the low level Python", "divide routine  I'm going to print out   division by zero is", "the message I return", "Otherwise  if I successfully complete the divide operation  I'm going to", "print out what the answer is", "And finally  in either case  I'm going to hopefully execute", "this finally clause", "So let's see how this works", "So I'm going to go off and say divide of   and", "So in this case  because there were no errors  this thing completed", "successfully", "We actually put a legitimate value into the divide local variable", "And after the completion of the try statement  since there were no", "exceptions  we executed the else clause  which basically says  print", "out this answer and return", "So result is    is what it printed out", "And then after I finish the else clause  this will be executed here", "And we can see we actually executed the body of the finally clause  which", "printed out the executing finally clause statement", "Now let's do a divide that will cause an exception", "So in this case  execution of the body did not complete successfully", "It raised a zero division error  which I actually have a handler for", "So when the body of the try raised an error  Python looked down my clauses", "following the try and discovered that I declared an exception handler for", "the zero division error  which prints out division by zero", "So it does that", "It's now done with the try  and it's going to return  but before doing so", "it once again executes the finally statement", "So finally gets executed whether or not there was an exception", "Now let's try one final experiment", "Let's try some operations that we would assume will raise a type error", "And in fact  we do get a type error like so", "And since that error is not caught anywhere  it actually will percolate", "all the way up to the Python interpreter  and we get the standard", "error result where we get a little traceback of where we were  followed", "by the little descriptive string that was part of the creation of the type", "error object that we created  which was a description of", "what the problem was", "But notice  before we got the traceback  even though we had no", "exception handler  so we weren't going to do any except clauses", "and since it didn't compete successfully  we weren't going to do", "the else clause", "we still nonetheless executed the finally clause and", "printed out our message"], "Gt8RHv3oTSA": ["CHRIS TERMAN  Finally  let's talk about exceptions", "Exceptions are an important feature of many programming languages that allow", "the program to signal when it can't proceed and get the correct answer", "There's something wrong with the data that it's manipulating", "It's detected an error condition", "In Python  you can not only raise exceptions  but you can handle them", "You can wrap a particular piece of code up in such a way that any", "exception that is generated transfers control to special code that you've", "written to deal with the exception", "That's a pretty handy feature  as you'll see", "Our Python programs have been dealing with exceptions for a while now", "Let's talk in detail about how that works", "So the basic question we have is  what should we do when our procedure has to", "stop execution because there's some sort of error condition", "We have three choices available to us", "One is we can fail silently", "We can substitute in the appropriate default values and continue execution", "And the advantage of that is that the program never fails", "I always get some answer back", "But basically that's a really bad idea", "The user gets an answer", "That's OK", "But they get also get no indication that the result that they got may be", "suspect because of some error condition and the substitution of", "default values", "So in general  that's not the way we should go", "A slightly more tasteful approach is to return a special error value", "For example  if I had a procedure that was expecting to produce a number  I", "could instead produce the Python object None to indicate that no number", "was available  that some error happened and here's my indication  a", "special return value", "It can sometimes be a challenge to figure out what special return value", "is distinguished from all the other possible return values", "But assuming you solve that problem  there's a bigger issue  because if I", "have a procedure that can return one of these special values  then whenever", "I call that procedure  I have to include code in my own body which has", "to check for the special value and then deal with whatever the", "consequences are", "And maybe what I have to do is say  well  I don't know what to do with it", "It must be an error that I'll give to my caller", "So I generate my own special value  whatever that is  and", "return that to my caller", "And so what happens is that all the procedure calls get surrounded by", "special  if  tests to check the results and deal with any error", "conditions reported in this way", "So it really complicates the program", "Instead of this very simple program of nested procedure calls  I end up with", "a lot of code that is checking for special case values", "So it gets the job done  but it's really a burden on the programmer", "Happily  Python provides us a tasteful alternative", "We can raise an exception", "So this is a condition that will basically propagate up through all the", "nested procedure calls", "And each procedure call will have a chance to deal with the exception", "If none of the nested procedure calls deals with the exception that was", "created  then in fact the Python interpreter will do the right thing", "and create this nice little error message to the user  giving a", "backtrace  showing exactly where we were in the execution of the program", "and print out this descriptive string", "So the way we actually create an Exception inside Python is we use the", "raise keyword followed by the creation of whatever type of Exception we're", "trying to raise", "In this case  just a generic Exception", "And all the Exceptions here take as their argument a descriptive string", "If we wish  we can provide handlers for Exceptions", "So for example  if I'm going to do an operation which might create an", "Exception and I'm willing to deal with that  what I can do is embed those", "statements inside of the body of a try statement  followed by some code that", "will deal with the exception", "So the way this works is that as I'm executing statements in the body of", "the try  if any one of them throws an Exception  Python will look in the", "list of exception handlers to see if one of them will", "actually deal with it", "In this case  I'm willing to deal with any possible exception", "And so any exception that happens in the body of this code will result in", "the execution of this Python statement", "So just to summarize  exceptions inside the body of the try will then", "cause Python to look through the exception handlers listed after the", "try statement  and whichever one matches first  it will then start", "executing statements from the body of the exception handler", "In this particular case  what can happen is that the open statement can", "discover the file doesn't exist and create an I O error exception", "What happens is that I want to catch that exception in my code  and instead", "of getting some sort of obscure I O error  I turn it into a generic", "exception with a more sensible error message saying", "can't open grades file", "If you'd like to see more about how try and except works  you can look in", "Section   of the Python tutorial", "So usually a handler is only meant to deal with a", "particular type of exception", "And sometimes we need to deal with cleanup actions before continuing", "So in this case  I've refined my example a little bit further to say", "look  I have an I O error here", "I want to deal with the fact that  if this open fails  I know the type of", "error I'm going to get", "I'm going to get an I O error", "And in that case  I'm going to print out a very specific error message and", "cease execution of my program", "And what I've done is I say  look  I can't open the grades file", "And I've also captured the actual exception object that was created by", "whatever the low level exception was  and I report that as well as my", "generic error message", "Separately  there may be some arithmetic calculations on the errors", "later on  and I can catch those and print out another informative error", "message  in this case saying  oh  there was a bug in the grade", "calculation", "So this differs  because it's a much more nuanced handling of errors", "I'm distinguishing I O errors that come from the open statement from", "arithmetic errors that come from the code that's processing the grades", "And I can have as many different except statements as I want  dealing", "with the different types of errors that I expect to get", "We've seen a lot of the common errors", "You get syntax errors", "That's when your Python can't parse a program", "A name error  when local or global name can't be found", "An attribute error  which is when we have an attribute", "reference that fails", "We've asked for an attribute of an object that doesn't exist", "We get a type error", "That's when the operand doesn't have a correct type", "So I'm asking to add a string and a number together", "And the plus operator doesn't know how to do that  so it's an", "illegal type of operand", "A value error  in which the operand types are OK  but", "the value is illegal", "For instance  division by zero", "I mean  zero's a perfectly good number  so it's in general a legal", "operand to divide", "It's just that it's particular value of zero in the denominator causes us", "to say  aha  we can't do this particular division", "And we just talked about I O error", "And if you want to see a list of all the different kinds of errors and what", "they mean  you can look in Section   of The Python Standard Library", "There's a couple other handy extensions to try", "We've talked about the except statements that can follow try", "We can also have an else clause after a try statement", "And this will be executed when the execution of the associated try body", "completes with no exceptions", "So this is what we would do if the try body completes successfully", "And finally  there's the finally clause", "So this is a clause that's always executed after the try statement and", "all the else statements and except clauses that apply", "And even when one of these clauses", "either the try or the else clause or the except clauses  which might be", "inside a loop of some sort  or inside a procedure call", "they may have executed a break or a continue or a return", "That's fine", "They're allowed to do that", "But before we actually finish the execution of this particular try", "statement and all of its clauses  the body of the finally will be run", "So we often put in cleanup code there that should be run", "for example  closing any open files that we created", "no matter what else happens  errors or not", "To see how this works  let's look at a little example", "I've created a divide routine which is going to attempt to divide the two", "operands and return the result", "So because that may fail", "particularly if y is", "what I'm going to do is embed the operation that I know might raise an", "exception inside a try statement", "And then  in the case of a division by zero detected by the low level Python", "divide routine  I'm going to print out   division by zero is", "the message I return", "Otherwise  if I successfully complete the divide operation  I'm going to", "print out what the answer is", "And finally  in either case  I'm going to hopefully execute", "this finally clause", "So let's see how this works", "So I'm going to go off and say divide of   and", "So in this case  because there were no errors  this thing completed", "successfully", "We actually put a legitimate value into the divide local variable", "And after the completion of the try statement  since there were no", "exceptions  we executed the else clause  which basically says  print", "out this answer and return", "So result is    is what it printed out", "And then after I finish the else clause  this will be executed here", "And we can see we actually executed the body of the finally clause  which", "printed out the executing finally clause statement", "Now let's do a divide that will cause an exception", "So in this case  execution of the body did not complete successfully", "It raised a zero division error  which I actually have a handler for", "So when the body of the try raised an error  Python looked down my clauses", "following the try and discovered that I declared an exception handler for", "the zero division error  which prints out division by zero", "So it does that", "It's now done with the try  and it's going to return  but before doing so", "it once again executes the finally statement", "So finally gets executed whether or not there was an exception", "Now let's try one final experiment", "Let's try some operations that we would assume will raise a type error", "And in fact  we do get a type error like so", "And since that error is not caught anywhere  it actually will percolate", "all the way up to the Python interpreter  and we get the standard", "error result where we get a little traceback of where we were  followed", "by the little descriptive string that was part of the creation of the type", "error object that we created  which was a description of", "what the problem was", "But notice  before we got the traceback  even though we had no", "exception handler  so we weren't going to do any except clauses", "and since it didn't compete successfully  we weren't going to do", "the else clause", "we still nonetheless executed the finally clause and", "printed out our message"], "jq7Sujh5uDA": ["ERIC GRIMSON  So we've now seen some nice examples of", "using guess and check methods to find answers to things", "But we want to take a slight to detour", "We'd like to use guess and check but not just for", "integers value  not just finding", "cube roots of integers", "We might like to try and find them for other values", "But to do that  we have to think about using floating", "point numbers or float", "And to do that  we also then need to take a little bit of a", "detour to understand how floats are represented inside", "of the computer", "So bear with me for just a little bit", "We're going to talk about floating point representations", "and then bring that back to see how we can still use those", "ideas to find approximation algorithms to get solutions", "using guess and check methods", "So floats approximate real numbers  but how do they", "actually do this", "And let's think for a second though  what is a decimal", "number  the kind of number we normally deal with", "Well    is really                             which of", "course is just", "So it's", "That's because we're using base    handy because we got", "fingers and   toes is an easy way to do counting", "Computers  not having fingers or toes  do things a little", "differently", "They represent things in terms of binary numbers or powers of", "basically because in electronics it's easy to have", "a switch either be on or off  have a   or a", "So a binary number will be a sequence of  's and  's that", "has the same form", "So the binary number               is the same as", "which of course is", "So if we wanted to convert it to decimal  that's basically", "is equal to", "So decimals  base    binary numbers  base", "Internally  the computer represents", "numbers in binary form", "So one of the things we'd like to figure out is so how does", "it actually get to that kind of a stage", "So let's look at that", "What does it mean to think about converting a decimal", "that we type in into a binary form", "How does the computer convert it into a form it can use", "And then how are we going to think about that", "Well  let's take an example", "Suppose we give the computer some number", "We'll call it x", "And it turns out x is actually               in binary", "But we don't know that", "We want to figure that out", "Well  knowing that it has some form like that", "what could we do", "The first thing we can do is if we take the remainder of x", "with respect to", "What does that say", "Well  that's says if we're going to divide each of these", "elements by   since x is this sum  we can", "divide that by   evenly", "We can divide that by   evenly  that by   evenly  that", "by   evenly", "But this only cannot", "So when we do that  the remainder that's left is", "whatever that bit is", "And that gives us the last binary bit  which is a", "That's cool", "So taking the remainder back with respect to   gives us the", "lowest order bit", "If we then divide x by    what we really do is we just shift", "the bits left", "You see that if we divide x by   that's going to change that", "to a    that to a    that to a    that to a", "This goes away because remember we lose it", "And what we've done  oh  just get exactly that form", "We've shifted all the bits left by", "And we can now do the same thing", "If we take this new value and get the remainder of that with", "respect to    it's going to give me that  which", "gives me a second", "And then shifting left will reduce that to    that to", "then I'll keep going", "And that will allow me to successively peel off each of", "the bits in order", "So we can convert any decimal number into a binary form", "Here's a little piece of code to do it", "Let's just walk through it very quickly", "This part up here I'm just going to let you look at it", "but it's pretty straightforward", "It's basically saying if the number I'm trying to convert", "is negative I'm going to take the absolute value  but I'll", "keep track of that so I can put the negative sign back out", "in front when I'm done", "And then what does this piece in here do", "Well  it basically walks through what I just said", "It says I'm going to set result initially to be an", "empty string", "I'm going to gather up the bits", "And then if the number is    I just return", "Otherwise  oh  there is one of those little iterative loops", "It essentially says  let me strip off the bottom order", "bit  put it onto the result", "There's a concatenation of the string  puts it to the left of", "whatever I've already gotten", "Change number by dividing by    which shifts the bits left", "And keep going", "So this is getting me the next bit", "This is just shifting left", "And I do that  OK  until I get a number that's less than", "And when I do  I'm done", "result holds the thing I want", "And all I need to do is just put a negative sign out in", "front if in fact what I started with", "was something negative", "So this is just doing a conversion back", "Cool", "Let's take a check of this", "See what it does", "So here in IDLE  I've got an example of that", "I've set a number to be", "And let's look at what happens if I do that conversion", "I type it in", "Huh", "Nothing showed up", "That's right", "Because I didn't ask it to print anything out", "But I know that result now holds the value I want", "And it says as a string there is   in decimal converted", "into a binary form", "I could change to something else", "Make it", "And do the same thing", "Save it away", "And again  I need to see where the result is", "I can do that over here", "And go back down to where it was", "Here is the result", "And since I know   is a power of    that form looks", "roughly right", "So what are we doing", "Given a decimal number  we can convert it into binary form", "And that's literally what the machine will do inside", "Now let's think about what this says", "First of all  I want to be able to get good", "approximations to things", "So what about fractions", "Why don't we deal with a fraction", "Well  let's think about a number like", "In binary  it would be      which would be           or", "", "So it has the same form", "Now how could we figure out how to", "convert this into binary", "Well  suppose we could find a power of   big enough so that", "when we multiplied it by this fraction it turned it into a", "whole number", "If we can do that  then we could take the whole number", "convert it into binary using the method we just had  and", "then when we're done divide by the same power of", "It's just going to shift to the right", "So  for example      we kind of know this", "We multiply it by", "It gives me", "That's in decimal form", "I could convert   to binary form  which we know", "is just", "And now that I've got that  I could just divide by    which", "is equivalent to shifting the binary point  if you like", "three slots over to get", "Cool", "Let's do that", "Here's my code", "And it's really got almost exactly the same form", "It's a little bit more than we had before  but let's just", "look at it", "I've got something up here that's just going to input an", "x so I'm not having to type new values in", "And here's a little iterative loop that simply looks for the", "power of   that converts it into a whole number", "So it's just going to loop over p  looking for a value of", "p such that   p   x is a whole number", "Its remainder with respect   is equal to", "Cool little check", "I'll just do that", "Once I can do that  then I'll take x and I'll", "multiply it by   p", "I've converted it now into a whole number", "And there  I just did what I did before  simply run through", "that test to see how do I convert it back", "into a binary form", "And once I'm done  then the last piece is I need to make", "sure I put enough zeroes out front by looking at how many", "values are there between the size of p and the length of", "the result", "And then having done that  I just need to find the right", "place to put the decimal point", "And there's a funky little piece of code that is", "basically finding the spot in between p where", "we want to do it", "We'll let you look at the details of it", "But that's basically what this code does  finds the power of", "p to make it a whole number  does the conversion  and then", "converts it back", "OK", "So let's see what we got here", "Go over to my IDLE", "And I've got a piece of code that captures that", "All right", "There's the piece of code right there", "And let's run it and see what happens", "I'm going to run that piece of code", "It says give me a decimal number", "In this case between   and   because that's where I'm going", "to deal with it", "Well  let's try", "Ahh", "Runs through three steps to get the remainders  and it", "converts it into that binary form which", "we saw before", "Sounds cool", "Let's try it again", "We enter this   oh  I don't know  something simple", "Ohh  it's working away here", "And it's working away really hard trying to find something", "And it says  my goodness  the binary representation of the", "decimal     is   ohh  look at that", "", "Well  you get the idea", "It's really boring and repetitive", "Ha", "So what happened here", "That's a little different", "We didn't get some nice  crisp  clean form", "And in fact that's going to be an important factor when we", "think about binary numbers and decimal numbers", "and especially fractions", "So what's one of the implications", "If there is no integer p such that x     p is a whole", "number  then the internal representation is always going", "to be an approximation", "And in fact what happened here was that the Python system", "eventually stopped trying to expand it out any further and", "simply gave us a representation out to some", "arbitrary number of bits that are set by the internals of", "the Python system", "So if it's not something that can be turned into a whole", "number by a power of p  it's always going to be an", "approximation", "This has an important implication", "It says  when I want to test two floats to see if they're", "the same I shouldn't use something like this because it", "might not be true because the approximations", "may be slightly different", "I'm always better basically saying  is the absolute", "difference between them smaller than", "some arbitrary amount", "And we're going to use that a lot", "This is a standard place where people get into trouble by", "trying to test the quality of two floats and then being", "surprised when in fact the code doesn't", "do what they'd like", "One of the things you could ask is  so why does print of", "give us back     if in fact     is represented as", "this long  funky kind of thing", "And the answer is because the designers of Python decided to", "set it up this way  that it automatically rounds to some", "number of bits in order to give", "something that's much crisper", "But in fact     is not represented as     inside of", "the machine", "That's going to be important now as we think about taking", "this idea of iterative algorithms  especially", "guess and check algorithms  but dealing with floating", "point numbers", "And we're going to do that in the next segment"], "oJa01jCfTCU": ["ERIC GRIMSON  So now we've seen arithmetic expressions", "We've seen giving names to those", "We've seen how we can combine those together using names and", "places where we would use values", "We can start doing some simple computations", "But those are all dealing with scalar objects  numbers", "Let's talk briefly about other kinds of objects", "We'll come back to them later on  but we want to see what we", "can do here", "So non scalar objects are compound things  things whose", "proportions or components we can get at", "We'll see a lot of these throughout the course of this", "subject  but the simplest one to start with are what are", "called strings  or objects that have a", "type str for string", "And these are literally just sequences of characters that", "are all concatenated together", "So how do we write them", "Well literals of this type can be written either by putting", "them inside of a single quote or putting them inside of", "double quotes", "And so if I go to my Python shell  for example  we can see", "that we can put things within a single quote", "And that gives us that string back", "By the way  we can give names to those things", "So we can say  what's the value of foo  and  in fact  we", "can look at the type and we'll see that it gives us back", "something of type string or str", "And  by the way  we can also put quotes around numbers", "So this is a string", "And just to see that  let's ask for the type of that", "The type of that sequence of characters  numeral one", "numeral two  numeral three  inside of the", "quotes is a string", "And that is different than the type of the number itself", "which is in int", "So we can put together strings", "If we can put them together we'd like to be able to do", "things with them", "And I want to show you some examples of those", "So we can provide different operations on strings", "Now some of these maybe a little surprising", "So let's walk through them", "The first one is we can ask for taking the string a and", "multiplying it by the number three", "And that may sound strange", "But what it gives us is a string with three copies of", "a's stuck together", "Or  if you like  I could do it with a slightly more", "complicated string", "And it literally is just concatenating or copying those", "versions of those strings together", "We can put two strings together using addition to", "give us this concatenated string of a and b", "And we can  of course  also concatenate together strings", "if we want to make sure that they are", "converted into strings", "So we can take a number  convert it to a string and", "concatenate that together gives us the string a", "These are just different ways of dealing with strings and", "putting them together", "It seems a little odd that we're using operators that", "don't normally deal with numbers", "And this is an instance of what we call operator", "overloading", "In which what we are doing here  here  here  is we are", "using the same operator to do different things", "If we give them numbers it'll do one thing", "If we give them a number and a string in the case of", "multiplication it will do something different", "If we give them two strings it will do something different", "So we're letting the operator use the type of the object to", "decide what the right operation is to do", "The last one we show here is that given we say we now have", "a non scalar object we need to know how many portions are", "there inside of it", "And for that there's a built in Python function", "called len for length", "And if I want to ask for the length of a particular string", "it gives me back that answer", "So I now have compound objects that I can do things with", "Well obviously one of the things I'd like to do is not", "just put them together", "I'd like to get parts out of them", "So that leads to the interesting question of how do", "I get out elements of a compound object like a string", "And here I want to show two examples", "The first one is we can do what's called the indexing", "And let me show you an instance of this", "If I give the string 'abc'", "Notice the single quotes around it so that is a string", "And in square brackets are braces after it I give it an", "integer  like    it's going to give me out the element of the", "string corresponding to that index", "Now how does it do this", "Well it starts", "well  if you want to think of it this way of", "counting from", "So there's the string", "The zeroth element is that one", "And it will return that value", "Similarly if I say from the string 'abc' give me the", "second element it starts at", "there's the second element", "And it returns that string", "Now you have to be careful", "If I ask for the third element", "Remember  I start counting at", "There's", "The third element  oh  there isn't one", "And we get out an error", "And we can seen this over here", "If I  for example  just type it into Python", "I can say give me the string 'abc ' And I'll take  in this", "case  the first element", "And that will give me b", "Because I start at   and go to", "Now I can also though go backwards", "So if I have a string 'abc' and I give it in square", "brackets or braces a negative number  it basically starts at", "and then counts backwards to minus   and then to minus", "So that minus   index will return as the c", "So it basically starts at the back end and counts backward", "So we get out components of strings which is good", "Now sometimes we'll want to get out not just a single", "element  we'll want to get out a substring of a string", "And for that we have a technique called slicing", "So we have a string called s  then this expression here", "where we have two expressions  a start and an end that are", "both integers or their values are integers that denotes the", "substring that starts at the index pointed to by start and", "stops just before the index pointed to by end", "So just to see that", "If I again take my string 'abc' and I say give me", "everything starting at one and stopping before the third", "index it returns for me the string bc", "We're going to come back to doing things with strings", "later on  but we wanted to let you see that given compound or", "non scalar objects like strings  not only can we", "combine together but we can also get out pieces of them", "Either individual elements or subcomponents of them", "And we'll use that as we start doing more interesting", "things moving on"], "kB6-nallVQ4": ["If you want to have a persistent and organized", "reference  collaboratively collected and edited by the", "students of your course  you can use the edX wiki", "You can create a new article by linking to it from an", "existing article and then clicking on the link", "You can also create an article from the", "generic children listing", "However  your fellow students are more likely to see", "articles that are linked to from other articles  because", "that linking allows you readers to see how your", "information is relevant to what they are already", "interested in and reading about  making them more likely", "to be interested in the information that you are", "putting together", "The edX Wiki Editing Guide contains the most up to date", "details on how to add formatting for standard text", "math  schematics  tables  code  and any other new", "features that were added to the wiki"], "0b0bWcbQmFk": ["ALVIN  TA   This is Tim", "Tim runs a puppy storage facility", "He only just started  so he has only one puppy  and the space to store", "exactly one puppy in his facility", "Look", "He just received a new puppy", "Because he kind of likes keeping all his puppies in one location  if he", "wants to store more puppies  he must sell his current facility and buy a", "new space that's bigger", "Like that one  just down the street from his current location", "To move into the new space  he has to buy the new space and", "sell the old one", "Then that takes him one unit of time to do", "Then he has to move each of the puppies from his old space", "over to the new space", "And finally  move the new puppy into the new space  as well", "Each puppy movement takes one unit of his time", "But what if Tim gets even more puppies", "Since Tim is new  he doesn't know how many puppies he's going to need to", "store over the course of his business", "Luckily  Tim thinks of a new algorithm", "If there's space in the current facility  he just adds the puppy into", "the available space", "But if there isn't  he's going to buy a new space that's twice the size of", "the old  and then move all the puppies from his old facility", "into the new space", "And it's going to be twice as much space", "So it is definitely going to be enough space to add a new puppy", "So for example  when Tim gets a new", "I'm not sure if that's a puppy", "I guess", "let's just call it an honorary puppy", "Yeah", "When he sees that there's no space to store the new honorary puppy  he sells", "the old facility  and then he buys a new one that's twice the size of the", "old facility", "And then he's going to move each puppy from the old space into the new space", "And finally add the new puppy into the space as well", "Now he has extra space  so when he gets a new puppy  he doesn't have to", "do all of that over again", "He can just add a new puppy into the new space", "So great", "But we're computer scientists", "And let's think about how to analyze how long it takes to add a puppy into", "Tim's puppy storage facility", "Now there seems to be two situations here", "Now  in one case  let's say that there are three puppies and he", "has spaces for four", "And when he has a new puppy  and there's space for it  he can just add", "the puppy into the new spot", "Now that's just going to take one unit of time", "Notice that it didn't depend on n  n being the number of", "puppies in the facility", "And so that's constant time", "It doesn't depend on n", "So another way of saying it is that this time operation  this operation", "takes big O    time  or constant time", "Now when the facility is full and there's no space left and he gets a", "new puppy  what he has to do first is buy a new facility that's twice the", "storage of his old one  then move all the puppies into the new facility", "And finally move the last puppy into a free spot", "Now buying a facility  that takes one unit of time", "Moving all the old puppies into the new facility  that takes n units of", "time because he had n puppies", "And then it takes one additional unit of time because he had one new puppy", "So in total  this took one plus n plus one units of time  or in big O", "notation  that's the same thing as saying big O n  because the little", "ones there don't really matter", "So this is telling us that  in the worst case  when there's no spaces", "left  when he adds a puppy  it's going to take big O n  time", "to add a new puppy", "That sounds like a lot of work for Tim", "But when you think about it  that's kind of an unfair way of analyzing", "Tim's business plan", "Tim doesn't really have to buy a new facility and move all those puppies", "around every single time he gets a new puppy", "He only has to do it every time the facility is full", "So let's see if a different way of thinking can analyze Tim's business", "plan more fairly", "Amortize  very roughly  means to spread out a big cost", "over a period of time", "In amortized cost analysis for algorithms  it means that instead of", "just considering the worst possible case for an operation  like adding one", "puppy  we're going to consider an entire sequence of operations", "In Tim's plan  it only takes a lot of time whenever Tim's facility is full", "But after he puts in all that work and doubles the size of his facilities  he", "can add a whole lot of puppies very cheaply", "We should really take that into account when we're analyzing how much", "time this procedure takes", "Maybe we can spread out the expensive cost to the cheaper add cost that it", "allows later on", "So let's take a look at how many units of time Tim needs  starting from the", "very first puppy", "So let's start with a facility that's able to store one puppy", "There are currently no puppies in the facility", "So when you add the new puppy  all he has to do is move in the new puppy", "and he doesn't need to move any old puppies over  or buy new space", "So in total  that takes one unit of time", "When he adds the next puppy  there is currently one puppy in the facility", "and only one space", "So the facility is full  which means he has to buy a new facility with", "double the space  move over the current puppy  and", "move in the new one", "That takes three units of time", "When he adds the next puppy  there are currently two puppies  but only two", "spaces as well  which means that he does need to buy a new facility again", "And he needs to move the old two puppies into the new space", "That takes two units of time", "And move in the new puppy  which takes one unit of time", "That's four units of time there", "When he adds the next puppy  there are currently three puppies and four", "spaces  which means that he does not need to buy a new space", "He does not need to move the puppies around", "He only needs to move in the new puppy", "That takes one unit of time", "And we're going to do it again  add another puppy", "There are currently four puppies and four spaces", "The space is full  which means he needs to buy a new space", "He needs to move over the four puppies into the new space and", "move in the new one", "That takes a total of six spaces", "It's four plus one plus one", "And the next puppy", "There are currently five puppies and space for eight", "So he does not need to buy anything", "He doesn't need to move anything", "He just adds the new puppy into the space", "Same thing for the next few operations", "Six puppies in the facility", "And the space  it will hold eight", "There's space", "And if you buy  let's move in the new guy", "Same thing again", "Seven  eight  there's one space  so we don't need to buy", "Just add one", "And so on and so forth", "So let's see", "I'm going to draw some blocks wherever he starts to buy a new facility up", "until that facility is full", "And hopefully  we can see some trends here", "So we have one space available here  and so that's one segment", "Then when he had two items  he started here and ends here when it got full", "When he bought another one that's size eight  he started", "buying it in this area", "And he got full over here", "So let's see", "Let's count the total amount of time that he spent in each segment", "In the first segment  he took   unit of time", "The second segment  he took   units of time", "Third segment  he took   units of time", "The next segment  he took   units of time", "The number of adds in each segment", "The first one had   add  the second one had   add", "He had   adds here  and the third one  he had   adds", "OK", "Well  what's the average time for adding something in segments", "We take the total segment times  divided it by the number of adds in", "the segment", "So that's one", "That's   divided by", "That's", "That's   divided by", "That's", "That's   divided by", "That's", "Huh", "Well  that's interesting", "It certainly looks like  in each segment  the average time seems to be", "less than or equal to", "And actually the trend does follow for bigger and bigger segments", "And you can prove that this is the case", "You'll actually see some more technical proofs of this when you take", "a more advanced course in computer science", "But let's try and see if we can get an intuition for why it doesn't change as", "segment size increases", "The slow add operation only happens when everything's got full", "But it isn't that bad when we consider that it's slowness helps make a whole", "bunch of things faster later on", "For example  when we add the   over here  we can spread it out amongst the", "add operations within the segment", "Same thing with the", "We can spread it out amongst the   add operations in this segment", "And the   in these   add operations", "And the   in these   add operations", "So regardless of the size of the segments  or regardless of how ever", "many we need to add at any given time  whenever we create a new facility  we", "can spread it out amongst all the new puppies that we can add for that one", "facility in that segment", "All this tells us is that the time it takes to add a puppy  on average", "doesn't depend on the size of the facility at all", "All this tells us is that even though sometimes it can take a whole lot of", "time to add a puppy  in the worst case  in the long run  if you average", "over a sequence of add operations  it takes constant time", "Or big O     according to amortized cost analysis  to add a new puppy", "That's all for this time  and good luck with your puppy", "storage facility  Tim", "Tim  I did have a question for you", "What exactly are you going to do with all these puppies", "Oh  wow", "Yeah", "No  no no  Don't do that  Tim", "Many thanks to the photographers who made pictures of puppies and honorary", "puppies available through a Creative Commons license"], "49xW1lvvUtQ": ["JOHN GUTTAG  Hello again", "Last time  we introduced the notion of probability", "Now I want to look at an example of applied probability called hashing", "The word hash has different connotations to different people", "Those of us who like to eat might think of corned beef hash", "I'm told that others think of this plant  but I have no idea what it is", "But to a computer scientist  the first thing that comes to mind is  or at", "least should be  that hashing is a clever implementation technique", "It's how dictionaries are implemented in Python  and it leads to a very", "efficient search method in terms of time  though  as we shall see  it does", "come at a cost in space", "The basic idea behind a hash table is simple", "We convert the key to an integer and then use that integer to index into a", "list  which we know can be done in constant time", "In principle  values of any object can be easily converted to an integer", "After all  we know that the internal representation of each object is just", "a bunch of bits", "And any sequence of bits can be viewed as representing an integer", "So for example  we can look at the code string to int", "A very simple function  it takes a string as an argument  initializes the", "string called number to the empty string  then  for every character in", "s  it takes the ordinal value of that character", "In Python  as in most programming languages  characters are stored in", "bits at a time  often called a byte  and those bits can then be interpreted", "as a number", "And that's what ordinal does", "Then I'm going to turn that number back into a string so that I can then", "concatenate it to this number", "And I'll do that for each character in s", "Then  when I'm done  I'll turn that string back into an integer", "and then return it", "That's a complicated explanation for a small chunk of code", "But we can probably see what it does pretty easily if we run it", "So let's first just convert the string a to an integer", "It tells us it will convert it to the index    which happens to be the", "Unicode number that represents the string a", "Suppose we have a longer string  for example  'John is a cool dude'", "Probably should've said  let's make him a way cool dude", "Well that's a pretty long number we've got here", "My guess is  we do not want to create a list for which that number is a", "valid index unless we're going to be storing a heck of a lot of", "entries in that list", "And we're not", "I mean  that's absurd", "We would never want anything that big", "So we have to do something", "What we have to do is convert large numbers to smaller numbers", "So let's look at a hash function that does that", "So we've got the hash function hash string  very similar to the function", "we just looked at", "Except  in addition to taking a string as an input  it takes a table size", "I don't care what number you give me  but it better not be bigger than", "Then it proceeds as before to build up a number", "But then  instead of returning that number  it takes the number mod table", "size  therefore guaranteeing that it is no bigger that", "So now  let's run it on the same two strings we've looked at before  a and", "'John is a way cool dude'", "Now what we see is that a still has an index of   because we know that", "mod   is", "But John has been reduced to that large  unpronounceable", "number  to a mere", "So he too will fit into the table", "Now let's look at how we use this idea of a hash function to actually", "implement a data structure", "So I'm going to assume that we only have   entries because that's all I", "could fit on this page", "So the first thing we're going to do is  we're going to insert  let's say", "this is a mapping of first names to last names", "And so the key will be Eric  and the value will be his last name  which is", "Grimson  son of Grim  I guess", "All right  so the first thing we need to do is  we need to hash Eric", "So let's come back over here to the code window", "And if we hash Eric into a table of size    we get an index of", "So       will put Grimson here because when we next look up the key Eric", "we'll hash it again  we'll get to    we'll look it up and say  oh  the", "value is Grimson", "Well  let's look at Chris Terman", "We'll hash Chris  and while we're at it  we'll hash Sarina", "Well  Chris will get put at index   and Sarina will get put at index", "Well  this is all well and good  but there's a potential problem", "Let's add Jill to the table", "We have a problem", "When we hash Jill  it also hash to", "And so  well  what do we do", "We probably can't put her last name here because now  when we hash Jill", "how do we know whether it's a Terman or Smith  or Chris  whether it's a", "Terman or a Smith", "We need a slight modification to deal with this problem", "This problem  by the way  has a name", "It's called a collision", "Why do we have collisions", "We have collisions because a hash function is a many to one mapping", "The whole point was to take a very large space and map each element in", "that space into a much smaller space", "Inevitably  if we're doing that  sooner or later we're going to have to", "map more than one element from this big space to the same point in the", "smaller space", "And that is what produces a collision", "Fortunately  collisions are not that difficult to handle", "Let's go back  try a slightly different data structure", "I've made my table a lot skinnier here because instead of putting names in", "it  I'm going to start by initializing each element of the table", "to the empty list", "Now  when I first hash Eric  I'll still hash him to this place", "And this  by the way  is called a bucket  or a hash bucket", "I get to this bucket", "I notice there's nobody in it so far", "And so I replace this empty list by a list containing a tuple", "And the tuple is both the key  Eric  and the value  Grimson", "I'll then get Chris  and he'll do the same thing as we come to here", "And now I'll get a list with the singleton tuple in it", "I'll skip Sarina because you can imagine what happens with Sarina here", "But now let's look at Jill", "So Jill will  again  hash to the same bucket as Chris", "What I do is  I replace this list  or  actually  I append to this list", "another element", "And that element is the tuple Jill  Smith", "Now  what happens when I want to do a look up", "If I look up Eric  I'll hash him to this bucket", "I'll go there  and I'll check that yes  that key and", "that key are the same", "And I'll return Grimson", "What happens when I look up Jill", "I'll come to this bucket", "And I now go through this list one element at a time", "I compare Jill to the key Chris  say  nope that's not the tuple I want", "I then compare Jill to Jill and say  ah ha  that is a tuple I want  and I", "return Smith", "So now you see why we were a little wishy washy  and we always said near", "constant time", "Because  as you can see  if the table is small  and I insert many  many", "elements in it  then that hash buckets could get very long", "So for example  if I have a table with only   element  and I insert", "names  then that one bucket will be     names long  and I'm reduced to", "linear search", "What we have here is a classic example of what's called a", "time space trade off", "If I make the table large  then I will have few collisions and look up will", "be very fast", "I make the table small  relative to the number of elements I put in the", "table  there will be more collisions", "That finished my explanation of how hash tables work", "We'll give you some code that you can run to play with and", "see how they work", "And in the next segment  we'll spend just a few minutes at the start of it", "using some probability to try and understand what is the", "likelihood of a collision"], "l8Hw2V1tXmc": ["We're going to talk about partitioning up the space of inputs to create a", "good test suite  a set of examples we're going to use to try to decide", "whether or not our code is bug free", "First tool we have is what we call black box testing", "And black box refers to the fact that it's just a box covered in black so we", "can't see inside of it", "So here the test suite is designed without actually looking at the code", "Nice thing about this is it can be done by someone other than the", "implementer", "So we could have quality assurance group that is actually going to design", "the test suite here", "And one of the nice advantages there is that that often can help us avoid", "inherent biases", "As an implementer  when I design code  I may be assuming that I'm always", "going to run this on positive values  for example", "But if I don't build that into the specification and I don't build in", "checks for that  somebody else may come along and try it on a negative", "value and expose the fact that I have a bug inside of my code", "So that lack of bias  that lack of implicit bias is", "actually a great plus", "Another thing that's nice is that the testing is designed without knowledge", "of the implementation", "Since it's built just on looking at the specifications for the problem", "I don't know how it's actually encoded", "that means that that same test suite can be reused  even if I change the", "implementation", "And that's actually nice  that sort of separation of the details of the", "implementation from the use of the implementation", "That abstraction is an important part of how we build modules", "And testing should take advantage of that", "And  indeed  black box testing will", "All right  now let's look at what does it mean to do some black box testing", "So let's think about a specification", "Here's a piece of code", "And again  here I'm actually just showing you the spec", "I don't know the details of it", "It's a square root", "And it says sqrt takes in two values  x and epsilon", "And it assumes they're both floats  that x is greater than or equal to", "epsilon is greater than    and it's going to return a result with a", "particular condition on the end", "OK  what are the paths through the specification", "Well if I look at this spec  I can see that x", "there are two conditions  basically", "I can separate out when x is equal to   from where x is greater than", "And I could  in principle  just create two test cases  one", "for each one of those", "But I kind of know that's not enough", "So the spec itself is simply giving me a first pass of how I might", "try and test it", "But I might want to think about other places in which I want", "to refine that idea", "OK what does that mean", "Well  let's think about this", "It's often good not only when I'm thinking about paths through the", "specification to think about just the possible paths  but to think about the", "boundary cases", "As an aside  if I have an input that's a list  what are the boundary cases we", "might want to think about here", "Well the list could be empty", "The list could have one element", "Or the list could have many elements", "Difference between           probably not as crucial", "But the difference between       and many", "that's a nice set of boundary conditions to think about", "For numbers  we can do similar things", "It's not just is it   or positive", "It's also what happens if the number's very small", "What happens if the number's very large", "And what happens in the typical case", "And I'm going to put quotes around typical  because I'm going to have to", "think about different variations  what it means to be typical  based on the", "specifications of the problem", "So if we go back to my square root example  we can actually", "think about this then", "What might be good test cases to use here", "Well I've put a little table together here", "And these first four are what I would think of as typical cases", "OK", "Notice in all cases I'm using epsilon to be pretty small because I want to", "get answers that are close to the right answer", "That was part of that specification", "that the difference between the actual value and the value I guessed at", "should be very close to what I want", "And then notice what I've got", "I've got  from the spec  the case of   and then the case of positive things", "And I've picked out other things", "I've picked out a perfect square", "I've picked out a square whose root is irrational", "And I've picked out one where the input is less than   because I know", "for numbers  and especially for square roots  there's often a difference", "between fractions and numbers bigger than", "I've selected four good typical examples", "The second thing I've done is I've looked at some examples that are a", "little bit different", "And the first one  right here  is one where I'm still", "taking a simple example", "But I'm taking a very small epsilon", "That is likely to stretch my code", "What happens if I have something that is really  really small", "OK", "And then I'm looking at examples where I'm either taking really large or", "really small values  both for x and for epsilon", "And I'm trying those out", "So that's into that very small  very large  as opposed to the typical case", "Now in these last five extremes here  if I  in fact  find a bug  one of the", "things that will be interesting is that the bug might be inside the code", "Or it might be in the spec", "For example  don't try and find a root if epsilon is really tiny", "But it'll at least expose do I have a problem or not", "So there's a partition", "This right here is a nice partition of the input space", "And it has both typical examples and boundary case examples", "And that is a nice example  just based on black box testing of looking at", "what is the specification  what might I do"], "waIE0L9vfiI": ["ERIC GRIMSON  In the last section  we introduced a", "couple concepts in terms of writing programs or scripts", "We had straight line programs  where we had just a linear", "sequence of instructions and we executed them", "at a time in order", "And we added the idea of branching  or conditionals", "where we could do a test  and depending on whether that test", "was true or false  we might skip to   piece of code or a", "different piece of code", "But in both cases  we're doing each instruction at most once", "Useful  but not great", "To get to the ability to write programs or scripts with", "arbitrary complexity  we need   more key concept  and that", "concept is the idea of being able to reuse a piece of code", "an arbitrary number of times", "We might have a set of things we want to do once or", "depending on some value  twice  or depending on some", "value    times or     times", "And rather than having to copy the code that many times  we'd", "like to be able to have the computer automatically reuse", "the code as many times as desired", "That notion of iteration is going to be incredibly", "valuable  and we're going to talk about some constructs to", "help us make that happen", "The basic idea  though  is straightforward", "Given that we have some code we're executing  when we get", "to an iteration loop  which is this chunk right here  we", "start with a test", "That will be Boolean that will return either True or False", "If it's True  we're going to go down and execute some set", "of instructions  the body of the loop  and then go back", "around and do the test again", "And we'll keep doing that", "As long as the test is True  we'll execute that same set of", "instructions in the body over  and over  and over  until", "finally  the test is False  in which case we skip around the", "loop body and pick up the computation elsewhere", "This notice allows me  based on this Boolean test  to be", "able to do the code some arbitrary number of times  and", "that's really great", "Let's look at an example", "Here's a simple example that shows that idea  and I want to", "talk about the syntax of the construct  but also about what", "the example's going to do", "This is a simple piece of code that squares a number", "I want to get x squared  but I'm going to do a by just", "successively adding x to itself x times  which is of", "course what x squared actually does", "I add x copies together", "Notice what we've got", "We're going to set up some value of x", "I'm going to do a binding there", "We're going to bind a variable ans for answer  which is where", "we're going to add up all the instances of x to get where we", "want to be", "And we're going to need to keep track of how many", "versions of x do we still have to add in", "So we're going to set up another variable called", "itersLeft  initially bound to x", "The looping construct  the iteration construct  we have", "is called a while loop", "And there's the key word while  and it has the", "following property", "It has a Boolean test   in this case  we're checking to", "see whether itersLeft is equal to   or not", "followed by a colon  and then it has a set of indented", "instructions  which of course  are the body of the loop", "The way the while loop works is it", "first tests that Boolean", "If that Boolean is True  itersLeft is not equal to   in", "this case  it will then execute each of the", "instructions in the body in sequence", "And when it gets to the end of that sequence of instructions", "it's going to go back up and retest the Boolean again", "So it will cycle through this code multiple times until that", "Boolean is finally False", "When it is False  it will skip down to the end of the loop", "which is shown by where the indentation stops  and pick up", "the new set of instructions and continue", "So there's the structure  let's see if this does the", "right thing", "Well  here's my code  and let's just walk through this", "We won't run it on idle  we'll just walk through it", "Initially  x is bound to    ans is bound to    and", "itersLeft is bound to", "The while loop says  test to see if this is equal to", "Since it is not equal to    the test is True  and", "therefore  I take the current value of ans  the current", "value of x  add them together  and rebind that to ans", "I then take itersLeft  subtract one from it  and", "rebind that to itersLeft", "So I've decremented itersLeft  and I've incremented ans", "I go back up  and again  I check", "Is that not equal to", "It is not equal to", "Therefore  I take ans and I take x  I add them together", "and I rebind those to be the new value of ans", "I change itersLeft by", "That's my new value there", "And again  I go back through the loop", "That is not equal to", "Well  the test is still True  so again  I take ans  I take", "x  add them together  create that to be my new binding for", "ans  which is", "I take itersLeft  subtract   from it  there's my new value", "of itersLeft", "And again  I go back to the top of the loop", "At this point    being not equal to   is False", "Terrible way of saying it  but that test is no longer True", "It's False", "In which case  I will skip to the end of this loop  and", "print out that x   x  or if you like", "is equal to", "Cool", "A little slow  but it does what I want", "Notice I have reused this code an arbitrary number times", "And in fact  if I were to change x to be something else", "I will reuse that piece of code a", "different number of times", "There's my iteration that I really want", "You can also see some properties of", "an iterative loop", "First of all  we need to set an iteration variable outside", "of the loop", "In this case  it's x and itersLeft", "Actually  the one I really care about here is itersLeft", "I also need to test that variable to", "determine when I'm done", "There's the use of itersLeft inside of the test", "Now  it could be a simple test  it could be a more", "compound test  but that's basically what I need to test", "And finally  I need to be changing that variable inside", "of the loop  right there", "If I didn't  then that test value would never change", "which means I would never stop the loop", "But there's a property I need", "When I set up an iterative loop  I need to say what's the", "variable I'm setting outside  how am I testing it  and am I", "making sure to change it somehow inside of the loop in", "order to ensure that I get the pieces that I want", "So what do we have now", "Well  that's a really valuable construct", "We already saw that branching structures  things like", "conditionals  will let us jump to different pieces of code", "based on a test", "Once we add in the idea of looping over the code  things", "like a while loop  that allows us to repeat pieces of code", "until the condition is satisfied", "So it's a generalization of a conditional", "On simple branching structures  we've already said", "that programs like that are constant time  that is  we", "execute each instruction at most  once", "With looping structures  notice", "that things are different", "Now  the program is going to take an amount of time that", "depends on values of variables as well as the amount of code", "or the number of instructions inside the loop  because it's", "going to depend how many times we walk through the loop  and", "that depends on the variable", "Nonetheless  these loops are going to be really valuable", "and we're going to turn to that next"], "Vt6MxpUBz_k": ["ERIC GRIMSON  We've now added tuples  generalization of strengths  an", "ordered sequence of elements  where the elements can be any structure", "And we've already seen that a lot of the operations we wanted on strings", "we're going to have on tuples", "We're going to add another kind of structure called a list", "And it looks a lot like tuples", "And again  lists are ordered sequences of values", "Each one's identified by an index  so it's going to support all the same", "kinds of operations I saw before", "The difference here is we're going to use these square brackets rather than", "the parentheses to distinguish a list or to create a list  as", "opposed to a tuple", "So they are a little different in terms of how they're going to look", "And as a consequence  and one nice thing  is that singletons are now", "pretty straightforward", "It's just a square bracket  the entry  and another square bracket", "I don't have to put that annoying comma in that I had to do with tuples", "in order to distinguish between an arithmetic expression and a tuple with", "just one element", "Looks much the same", "So what's the big deal", "Well  there's one very big difference  and it's a really important one", "Which is that lists are mutable", "And what does that mean", "It means we can change them", "What does that mean", "Well  things like ints  floats  strings  and tuples are immutable", "And that means that we can't go in and change an element inside of them", "Now for ints and floats  that's obvious", "And tuples  we just introduced  so we sort of have to accept that on faith", "But if you think about strings  you can get elements of strings out   you", "can slice into strings", "but you can't go in and directly change one character in a string", "They're not mutable", "They're immutable", "They don't change", "On the other hand  lists can be modified after they're created", "And why would we want to do that", "Well  in part because there are going to be some problems where that's", "really valuable", "So what does that mean", "Some data objects  we really want to treat as if fixed", "It says we create new versions of them  we combine variables to them", "but we don't want to change them", "And this is usually valuable when those data objects are going to be", "frequently referenced  but where the pieces inside of them don't change", "Why would we want to support having ability to change them  because that", "could just lead to bugs", "On the other hand  there's going to be some instances where the data objects", "may want to support modifications to elements inside of them", "Why might that happen", "Imagine you've got a really large database of personnel information and", "you want to do things like change salaries", "You don't want to have to make an entirely new copy of the database just", "to add in a new salary", "You'd like to be able to go inside and change a piece of that", "So lists are going to support that kind of operation by enabling us to go", "in and mutate  or alter  elements of the pieces", "One issue to keep in mind is that  while mutable structures give us more", "flexibility  they also are more prone to programming errors", "If I've got two different pieces of code both pointing to the same list", "and I have one piece of code change or mutate a portion of the list  I want", "to make sure that that other piece of code is aware of that", "If not  I can get myself into some really interesting bugs", "So there's a cost  but there's a bonus", "Let's look at an example of what this means", "So let's create a couple of lists", "And in fact  over here in my IDLE shell  I'm going to do that", "Let me just create a couple of lists", "And I'm going to call Techs as a name for a couple of", "great technical schools", "And notice the angle braces to get them for me", "And I'm going to create Ivys", "I'm not going to do all of them  but I will again create a list", "of some great schools", "We'll do Harvard", "We'll do Yale", "And we'll do Brown", "And if I print them out  I can say  what is the value of Techs", "And it just gives me that list", "On my slide  I've given you a visualization of that", "So think of this as Techs and Ivys sitting up in that global environment", "After all  I just typed them into the shell for Python", "And what do they do", "Well  they point to a structure in memory somewhere that has that", "sequence of elements inside of it", "As I've said  I can treat this as if they were just an order of sequences", "So I could say something like  what is the first element of the Ivys", "Remember  we start indexing at    so that gives me back", "Yale  which is nice", "And I could slice if I wanted to", "I could say give me back the Ivys  everything up to the second one", "And that gives me the zeroth and first elements", "I can do things I'd expect to do on that", "Let's see what happens when we start putting things together", "So I've got two lists   a list of tech schools", "I've got a list of Ivys", "Let's now create what looks like two different lists of universities", "So the first one  I'm going to call Univs  for universities", "And it's going to be a list of the Techs and the Ivys", "And I'm going to create what looks like the same thing", "I'm going to call it Univs   and I'm simply going to", "re create that sequence", "Cal Tech was the first one", "And since I'm creating a list of these lists  I'm going to put a comma in", "there  and then I'm going to do Harvard  Yale  and Brown", "Are these the same thing", "Well  let's print them out", "If I look at Univs  yeah  nice", "It's a list of two elements  the first of which is a list of two elements", "Second of which is a list of three elements", "And if I look at Univs   it looks exactly the same", "They certainly print the same", "So it is easy to think that these might  in fact  be the same thing", "But they're not", "And let me show how I can test that", "Let's evaluate the following little command up here", "An append is a method associated with lists", "We'll come back to methods later on", "That dot notation basically says  if I type in Techs  it's a list", "The dot says get the method append associated with it", "Don't worry what a method is  but basically think of it as a function", "that is going to take an argument", "in this case  a single element  RPI", "and it is going to attach that element to the end of the list text", "So  what does it do", "It's an important thing here", "It doesn't create a new list", "It mutates the existing one", "It takes Techs as a list and changes it", "It mutates it to add a new element to the end  extending the list by one", "Now  as a consequence  if we print out Univs  notice we now have in that", "first element MIT  Cal Tech  and RPI", "We have changed what's inside of there", "We have mutated Techs  not Univs", "In fact  let's just check it", "Let's go look at Techs  and there's Techs", "But again  if I go back to Univs  there it is", "And now what happened to Univs", "Aha", "It didn't change", "And that's an important point", "Look at the form of Univs", "It has just the first two pieces to it", "And  in fact  if I go to the next slide  we've captured that", "If I print out Univs  I get out MIT  Cal Tech  RPI  followed by Harvard", "Yale  Brown", "But for Univs   I just get MIT  Cal Tech  and then Harvard  Yale  Brown", "Why", "Well  this is where the mutability comes in", "So let's think carefully about what we had", "Before I did that append  I'd had a binding for Techs  and I had", "a binding for Ivys", "We created those", "They said we're lists", "And then what did I do", "I said  let Univs equal", "and in fact  let me just write it out here", "I bound Univs to Techs and Ivys", "And what does that say", "It says make a list", "So there's Univs", "It's going to make a list", "And it says the value of the first element is going to be", "the value of Techs", "So aha", "It's just a pointer to that list", "And the value of the second argument  or the second element  is just the", "value of Ivys", "So aha  it's just pointing to there", "So Univs is a list whose elements are just pointers to other lists", "On the other hand  what did I do when I created Univs", "If you look back  you'll see that  in fact  I created it by", "actually typing out lists", "I said Univs", "just to say a little bit of it", "I said Univs  was going to be  and then I said quote MIT", "quote Cal Tech  comma", "And then I did a bunch of other things", "I'm not going to do all of it", "But this is telling Python  create a list with those strings inside of it", "So in fact  that's exactly what it did", "Univs  is going to create a list  but it creates it with a new version", "Right there", "Notice Techs is not pointing to this", "There's a new version right there", "Ivys is not pointing to this because I created them and inserted them inside", "of this larger list", "That's important  because now when I did that append on", "Techs  what did it do", "It went over here and changed that", "It added that into the end of it", "That means that Univs changes because it sees that", "But what about Univs", "This is a completely different list", "Nothing changed there", "Let's make some observations out of this", "The elements of Univs are not copies of the list to which Ivys and Techs", "are bound  but are the lists themselves", "I got the value of Techs  which pointed to the list", "And this effect is something we call aliasing", "Basically what does aliasing says", "It says we have two distinct paths to a data object", "One is through the variable Techs  in this case", "There's a second one through the first element of the list object to which", "Univs is bound", "And one of the effects of that is that I can mutate an object through either", "path  but the effect will be visible to both", "And I just saw that back here when I mutated Techs  but Univs changed", "That sharing of data is really important", "And that mutation  that ability to change things  is really important", "This is very convenient  but it also can be really dangerous", "It can be treacherous", "Because if I had something that was changing Techs and I didn't realize", "that Univs inherited the Techs structure  I've now changed something", "inside of Univs", "And if you think back to the code I just typed in there  you saw nothing", "that said make a change to Univs", "But changing a part of it had that effect", "So aliasing is a valuable tool  but it is going to occasionally lead to some", "problems  and we have to be careful about it", "Now what else can we do", "Well  we can certainly change elements directly", "So if I go back  for example  and I look at Techs", "Here's my list of tech schools  MIT  Cal Tech  RPI", "I might decide I want to change the list", "So I can literally say  change the second element of Techs", "And I do it just with an assignment statement", "I'm going to pick up WPI", "And now if I look at Techs  that element is changed", "I've mutated it", "By the way  if I go back and look at Univs  it has also changed", "I've now got WPI in the first portion of that element", "Just to remind you  it says I can mutate elements of this", "I cannot do the same things with tuples", "So if I do an example where I create a tuple", "we can look at temp", "But if I now say  and I could certainly get out  for example  the", "first element of temp", "But if I attempt to change that  as I just did above here by putting in", "something new  it's going to complain", "And it says you can't do it because these things are not things that can", "be mutated", "So now we've got lists", "Let's see what we can do with them", "As I just said  stressing it  I can't do that with tuples"], "tJMrTNDdsR8": ["SAM MADDEN  Hi  I'm Sam Madden", "I'm a professor at MIT in computer science", "I'm going to talk to you today about some work that I do on a research area", "called column oriented databases", "I'm a specialist in building systems for storing very", "large amounts of data", "So  before I tell you about column oriented databases  I need to", "explain a little bit about what a database is", "So  a database is simply a collection of records", "Much like in Python where you have an array  all a database does is", "represent something that's very much like an array", "Unlike an array in Python  however  a database is persistent", "It lives on disk  like a file", "And in addition to that  databases is often represent very  very large", "quantities of information", "Millions  billions  even trillions of these records", "So we're going to use a very boring example throughout this presentation", "to give you sort of an introduction to what a database system is", "This is an example of a record in a database system that stores some", "information about stock quotes", "So here we see a stock quote has a symbol  a price  a quantity  an", "exchange  and a date", "Databases take these records and they organize them typically into tables", "A table is simply a collection of these records stored together", "Databases then  for these tables  provide a language  a programming", "language like Python  for accessing these records", "Unlike Python  however  these languages that databases use are often", "called declarative", "They have a very sort of English looking kind of flavor", "For example  this query that you see here selects the price of a given", "stock that has a set of properties from the symbol GM and", "with a certain date", "This particular query that you see here is written in a language called", "SQL  or the structured query language  which is the most commonly used", "language for querying databases", "So  databases are important because nearly every business  website", "government  all these organizations store their persistent mission", "critical data inside of databases", "Databases provide a very powerful set of abstractions for keeping data safe", "and storing it persistently on disk  and ensuring that certain consistency", "properties are preserved over it", "They also provide a way to evaluate these queries that we see here very", "efficiently", "What I'm going to talk about today and what column oriented databases are", "about is providing a very efficient way to evaluate certain kinds of", "queries over data", "So  a database system is something that answers processes  these queries", "that are running on top of these databases", "So  the database system uses one of two basic ways to evaluate queries", "If you think about what you have to do to evaluate a query  you're going to", "have to find the records that satisfy these conditions", "For example  symbol equals GM  or date is equal to", "So  in order to find the record to satisfy this  there's two", "things we could do", "One thing we could do is to use something we call an index", "An index is like a lot like a dictionary data structure in Python", "except for that it is persistent and lives on disk", "And what the index is going to allow us to do is to efficiently look up", "records that satisfy a certain criteria", "For example  we might build an index on the stock symbol  and then we could", "use that index in order to efficiently find all the records that correspond", "to a particular symbol", "So in this case  we could look up on the index for the symbol GM", "And we would see that  if this is our database  the first and fourth record", "in the database contain that symbol", "So  the other way that we might evaluate a query   for example to find", "all the GM stock quotes   would be to just iterate over all the", "records one by one", "And we call such an approach a scan", "So you might think that a scan is an incredibly inefficient way to access", "data  that you should always prefer to use an index", "It turns out that that's not the case", "Sometimes indices actually are a bad idea", "First of all  it's expensive to create them and maintain them  and second of", "all  these indices can actually be less efficient sometimes than scanning", "all the data", "And the reason for this is because the records that an index returns have to", "then go be accessed in the underlying table", "So in this case  we were told we need to go look at records one and four", "because they correspond to GM  but then we would have to go look through", "the underlying table and look up those records  and that actually can be", "slow  partly because these tables are stored on disk", "And we'll come back to a little bit about why storing things on disk sort", "of changes the considerations about performance in just a minute", "All right  so now it turns out that actually we want to use these scans", "for certain classes of queries", "In particular  for queries that access lots and lots of records we're going", "to want to use a scan", "Sometimes in the database world  these are called analytical queries", "They often look like this", "So this is very similar to the query we saw before  except for rather than", "the equality predicate  we now have a greater  than predicate", "And now we have this average price", "So this computes the average price of all the GM stocks", "over some date range", "If GM is a popular stock  which it probably is  there's going to be lots", "and lots of such records  and we're going to have to evaluate", "And it turns out that a scan is going to be probably the best way to", "evaluate this query", "So  it turns out that this market  these analytical queries  represent a", "multi billion dollar business in the United States  because companies use", "these kind of queries in order to do analysis about what's going on inside", "of their business  to understand sales trends  to understand patterns of", "buying and selling", "All right", "What column oriented databases are about is making these kinds of scan", "operations go faster", "So in order understand what makes a query slow or fast  let's try and", "think a little bit about how long we would expect a scan to take when we're", "running one of these queries", "Intuitively of course  the performance of one of these things is going to be", "proportional to the amount of data that we access in", "processing the query", "OK", "So if we go back to our simple query and our example database  the most", "natural way to think about this data being stored is sort of row  by  row", "in the memory or on the disk of the computer system", "So in order to evaluate this query  what's going to happen is we're just", "going to  in a scan  just read each one of these records one by one", "OK", "There's something interesting to notice about this particular query", "though  which is that it actually only accessed three of the columns", "Three of these five columns that are in the table", "The price column  the symbol column  and the date column", "So  we only needed     of the data in order to evaluate this query", "So it turned out  however  that when the data's laid out in this way  row", "by row  there's a property of the disk that makes it so that we're going to", "have to read all of the data  all five columns  off disk even though we only", "need to access three of them", "So I'll just give you a quick little tutorial about how a disk works", "A disk a piece of physical hardware that has these", "spinning platters in it", "And these platters are spinning pretty fast  like several thousand RPM", "revolutions per minute", "And each one of these platters has data laid out on it in this set of", "concentric rings  they're sometimes called cylinders", "And the data that's currently being read off of a given cylinder is the", "data that happens to be underneath this triangular  looking structure", "that you see here in the diagram", "The triangular structure is called a head", "So what happens is the disk is spinning around  and when data passes", "underneath the head  it's read off of the disk", "So if you think of a database table that's laid out in one of these", "cylinders  the record that's about to be read  you can see here  is denoted", "with these little X's", "When that record passes under the head  it will be read off of the disk", "So you can imagine that if the five columns of a given record are laid out", "sequentially in that cylinder  if we just want to read three of them", "they're randomly allocated throughout that record", "the whole record is going to pass underneath the head  even though we", "only needed to read     of the data", "And it turns out that this time to access this record and for the data to", "pass underneath the head is what really dominates how long it takes to", "access the data from disk", "So in this case  it turns out that when the data's laid out sequentially", "like this  the total time to evaluate this query is essentially going to be", "the total amount of time that it just takes to read all of the records  the", "entire table  from disk", "So you can see here  if our table consists of         records each", "of which is   bytes long  then we're going to have   gigabytes of data", "If the disk can read   megabytes a second  which is about what a disk can", "read  then it's going to take     seconds to evaluate this query", "OK", "What the column oriented database does is a way to organize the data that's", "stored on disks differently so that we can evaluate queries", "much  much more quickly", "The column representation  instead of laying out data row  by  row  lays out", "data column  by  column", "So imagine each column of this table is now stored in a", "separate file on disk", "So now when we want to read these three columns  we only have to go", "access those three columns from disk and read them in", "And so rather than having to read all of the data  we only have to read", "of the data", "So in this particular example  we could evaluate this", "query in   seconds", "Now  this may seem like it's not that significant of an improvement  but it", "turns out that in reality  these tables are often", "hundreds of columns wide", "People  when they build their databases  cram all sorts of junk into", "their table", "So the tables get really big", "But on the other hand  the queries themselves tend not to get really big", "The queries usually only access three or five attributes of these hundred", "attribute wide tables", "And that means that this column oriented representation can be", "much  much faster than the row oriented representation", "So in addition  there's some other cool things about this column oriented", "representation", "So in particular  columns compress really  really well  and that allows", "us to further reduce the amount of data that we have to access when we're", "processing a query", "So just to give you a very simple example  suppose we have a table", "that's sorted by stock symbol", "Now let's think about compressing just that column that represents the stock", "symbol data", "There's a very straightforward way to compress this data", "called run length encoding", "So imagine I have a table that contains the symbols AAPL", "AAPL  AAPL  IBM  IBM", "These five attributes  stored in sorted order  can trivially be", "represented as AAPL times three  an AAPL and then a count  which is in", "this case three  followed by IBM an then a count  which is two", "So here it doesn't look like we've reduced the space very much  but if", "you think of a table of stock quotes  there's probably only a few hundred or", "thousand stock quotes in our database system", "And so even if our table contains billions of records  we can represent", "this column simply as a few thousand stock quotes and their counts  which", "is a dramatic reduction in space", "Notice  however  that we couldn't play this same trick for  say example", "stock price  because stock price is a floating point number and there's", "likely to be millions of different stock prices in a", "given database system", "So one of the things we could do in this column oriented approach is to", "compress each column using the best compression scheme for that column", "So at MIT  we built a new database system called C Store around this", "column oriented idea", "Turns out that  sort of surprisingly  almost every other database system in", "the commercial world built before us had used this row oriented", "representation for data", "So C Store was this fundamentally new way of building a database system", "We also added a bunch of other cool features to it  like the ability to", "parallelize processing and the placement of data across many nodes", "the ability to support efficient loading of new data  and some special", "optimizations to allow queries that are only reading data to run", "concurrently and very efficiently with queries that are updating data", "If you like  there's a paper that you can go read for those of you who want", "more information", "To give you a sense of real world how much this matters  I'm going to show", "you a performance benchmark from a commercial company that took the ideas", "from C Store and productized them", "This company's call Vertica", "This example is from a   day trace of call record data", "So this is information from a cell phone company", "It represents about a terabyte of data on disk", "Prior to using Vertica  this company had been using a", "conventional database system", "So  relative to what the previous database system was able to do  in", "Vertica  using these column oriented ideas on a workload running on top of", "this call data record data set  they were able to get about", "compression", "So    less space to store the data  and about a   times speed up in query", "processing", "So  it's dramatically faster", "Orders of magnitude faster than what you've got using a traditional", "database system", "So just to wrap up  for analytical queries of the sort that I've showed", "where you're accessing most of the records in a database  this", "column oriented representation is orders of magnitude faster", "And the key idea is that these column oriented databases allow you to", "access just the data that you need to answer the query  and they provide", "support for this very  very aggressive compression", "And I hope that I've also shown you a little bit about why database systems", "are interesting and different than conventional programming  because", "there's this whole set of new challenges that are presented when", "you're developing algorithms that operate on this data that resides", "persistently and on disk", "Thanks very much"], "Kndq_cHHWOI": ["ERIC GRIMSON  We've now introduced lists  ordered", "sequences of elements", "Elements can be almost anything  and they're mutable", "And we've seen examples of how we'd like to use them", "We can slice  we can clone  we can index  or we can have", "arbitrary structures inside of them", "We're going to take a slight detour just for a second to", "talk about functions", "But we're going to bring it back to lists then in an", "important way", "First  I want to talk about the idea of", "a first class object", "And we say a data structure  a data type  is a first class", "object if it has the following characteristics", "it has a type  it can be an element in a data structure", "like a list  it can appear in an expression  like an", "assignment statement  could be on the right hand side of the", "assignment statement  and it can be an", "argument to a function", "Now  it's pretty clear that ints  floats  strings all have", "those properties", "It's easy to believe that lists and tuples would also", "have those properties", "But so do functions", "Now  that's interesting  right", "Does a function have a type", "Well  that's easy to believe", "Could a function be in a data structure  like a list", "Huh", "Well  if you think about how we create lists  we're simply", "getting values of expressions and creating a structure where", "elements of the memory point to those pieces", "So if I gave as an element of a list the name of a function", "thinking back to our environment model  it's easy", "to see how that element of the list  that spot in the list", "could point of to that particular procedure object", "OK", "Can they appear in expressions  like the", "right hand side of an assignment", "Sure", "And we can say  x is going to equal the factorial of", "That makes sense", "And then can functions themselves be arguments to", "other functions", "Huh", "That's interesting", "And we're going to see that that can actually be the case", "And this idea of having a first class object for a", "function or having them be first class objects is", "particularly useful when we're going to use this in", "conjunction with lists", "And we often refer to this style of thinking or", "programming as higher order programming  where we are", "treating functions as if they're elements of data", "structures and applying functions to them", "Let's see if we can make a little bit more sense out of", "this by looking at an example", "I'm going to write a little procedure here called", "applyToEach", "Takes two arguments", "list  L  and the variable on our parameter whose name I'm", "going to call f", "And I'm going to assume that L is a list", "and that f is a function", "And what I want applyToEach to do is to walk through the", "list  mutating each element in turn by replacing it by what", "happens when we call the function f on that element", "So the code doesn't look too bad", "I've got a little loop  where i is walking from   up to the", "length of the list  or   less than the length of the list", "It's going to get all of the elements of the list", "And what am I doing", "I'm going to get the i th element of the list", "I'm going to call f on it", "And then I'm going to change that i th element of the list", "to be that value", "Let's think for second", "If we think back to our environment model  if I", "applied this where I passed in for f some function  square", "we said that we would bind a local frame  where the", "variable f would point to the value of that parameter", "which  in this case  would be square", "And then  when we executed the body of applyToEach  we would", "simply be using the value of f  looking it up", "So in essence  we would simply be substituting in for f", "I'm not going to do the example of", "the environment model", "But what we just described makes sense", "So let's see if that actually works then", "Let's take an example of this", "So I'm going to walk through this in sequence", "I'm going to do applyToEach", "And I'm going to start with a list L", "that's a set of numbers", "and", "And I'm first going to call applyToEach on that list L", "with the built in procedure abs called on it", "What happens if I do that", "Well  I know", "I'll think again about my environment model", "I'm going to create a frame", "applyToEach is some procedure", "I'm applying it", "So I'm going to create a frame in which L will be bound to", "this structure and f will be bound to what that points to", "which is a procedure object", "And then what am I going to do", "I'm just going to walk down the list L  at each point", "applying f  which is bound to abs  to each element of L and", "changing the value", "And if I do that  what I get is that when I print out L  it", "now has that form", "I've mutated L", "And yeah  the      because of the way we represent floating", "point numbers  doesn't quite come out the way", "you'd like it to", "But we've changed L  And what's important to see is", "I've run through a loop  where I'm just applying a particular", "value of f", "in this case  bound to abs", "to each element of the list", "Now  having changed L  let's do it again", "Let's applyToEach again the list L  now at this form of", "and", "And in this case  I'm going to use int", "And again  what it says is  up here  I'm in essence binding f", "to int in a local frame so that when I'm evaluating this", "body  f points to the internal procedure int", "And if I do that  I now get a new version of L  Actually", "that's a poor way of saying it", "L is still there", "I have mutated L so that it now has the", "values       and", "How about fact", "Let's assume we've got fact", "Factorial is available to us", "We can do the same thing", "And it now gives us the first  second  and third values of a", "factorial are a fact     fact     and fact", "And now that I've changed L again  let's", "do it one more time", "Let's do it with fib to get the first  second  and sixth", "Fibonacci number", "And out they come", "What I want you see here is that we can pass in a function", "as an argument", "We just did a different function each time", "In terms of how things work in that environment model  we're", "just locally binding in a frame the variable f  that", "parameter f  to some value  function", "And then  in the body here  we're simply looking up the", "value of f and using it", "Now  by the way  if f had just been a name for a specific", "procedure  we would have done the same thing", "If we'd said int instead of f  what would we have done", "We would've looked up the binding for int up in the", "global environment  which points to procedure object", "So here  we're just passing them in as we go along", "That's actually quite nice", "That says we can do a bunch of", "interesting things with functions", "But we could do it in a different way", "So for example  I said that functions could", "be elements of lists", "So let's think about one more", "Instead of applying a function to a list of numbers  let's", "apply a list of functions to a number", "So here's applyFuns", "It assumes that L is a list of functions", "It assumes x is a number", "And what's it going to do", "It's going to loop through each of the elements of the", "list and call that function on the number and", "then print it out", "And so if I actually run this   well", "let's do it over here", "Let's go check it out", "I've got a version of it over here", "And let me just load this up into my IDLE environment", "And let's call applyFuns", "And we're going to give it with abs  int  fact  and fib", "which I've defined in my file here", "And we'll give it the number", "Very cool", "That's really neat", "What did it do", "It ran through a loop  where it first started off with abs", "as the binding for f and then applied abs to", "printed it out", "And then  in the next loop  it got int and applied int to", "which is pretty boring  printed it out", "And then it took fact and applied fact to    printed it", "out  and then fib  and applied fib to   and printed it out", "What we can say is that those functions can also", "be members of lists", "And we can loop over those  using them in places where we", "would like them  as well", "Very nice", "Let's take this one more step", "We can generalize these higher order functions", "a little bit more", "And in fact  Python provides some general purpose higher", "order procedures for us", "One of the ones it provides for us is the procedure map", "And what does map do", "In its simplest form  it takes a unary function   that is  a", "function of one argument", "and a collection of suitable arguments", "So function numbers had better be numbers", "And basically  map literally maps this function in turn", "down each element of that list  giving us back the", "result of applying each of those elements to that list", "So it's a little bit like applyToEach  but it's", "basically capturing the same thing", "However  map is even more general", "We can give it an n ary function   that is  a function", "that takes n arguments", "and n collections of arguments", "And map will apply this function in turn to the", "respective elements of those arguments", "So in the case of min  where min takes two arguments  I can", "give two lists  L  and L   to map", "And it respectively applies min to that pair  then min to", "that pair  then min to that pair to create this list that", "it returns", "We're going to come back to this idea of using functions", "in this way  using higher order procedures", "throughout the term", "But you've now got a sense of once I have lists and once I", "treat functions as first class objects  the kinds of things I", "can start to do with it"], "euWTTA4YPaY": ["Eric Grimson  So we've talked about testing", "Now  let's assume we run a bunch of tests", "We built some really nice test suites based on both black box testing and", "glass box testing", "And we've isolated that  unfortunately  our code", "has one or more bugs", "It's not behaving as expected", "We're now ready to turn to the task of debugging  removing those", "bugs from the code", "A little quick aside  because there's often some fun stories about", "So where does the term debugging come from", "And it's often claimed that the first bug was found by a team at Harvard", "that was working on what was then called the Mark II Aiken Relay", "Calculator", "So it was a giant computer a long time ago built out of vacuum tubes", "And in that test  the team was actually running a set of tests on a", "particular module were getting funny results", "And because it kept failing  the staff actually went in and inspected the", "actual machinery  in this case  a bunch of big vacuum tubes and", "electronic relays", "And what they discovered was this", "In fact  they found a moth that flown in and got trapped between the", "connections of one of the tubes that was causing a short circuit", "And this was  as you could say here says first actual case", "of bug being found", "It's a wonderful story", "It's a cute story", "And the story  by the way  it's true that they did find that moth", "It's part of the files that they kept", "But in fact  the term is probably older than that", "And indeed  if you go back into the late  s  you can find in a", "textbook  at the time  a popular textbook on electronics or electricity", "says  as you can see here  the term bug is used to a limited extent to", "designate any fault or trouble in the connections or working", "of electrical apparatus", "So the term is probably older", "But the story about finding a literal bug in a piece of machinery is", "certainly delightful in thinking that that's the etymology of the term", "However  what we really want to turn to now is to talk about", "how do we do debugging", "We're going to do that in the next section", "But before we do  let's say a little bit about the kinds of bugs that we", "might expect and why they have different impacts", "When we expose a bug  a runtime bug  that is something that occurs during", "the running of the code as opposed to a static semantics or a syntax error", "one of the dimension along which the bugs can vary is the difference", "between an overt and covert bug", "Overt says there's an obvious manifestation", "Code crashes", "Code runs forever", "It's clear that there's a bug", "Covert is a little more subtle", "There's no obvious manifestation here", "The code returns a value", "But that value may  in some cases  be correct but hard to determine", "That's clearly more worrisome", "When it's really clear  it's nice", "When it's not so clear  not as good", "Second dimension along which we could think about bugs are the difference", "between a persistent and an intermittent error", "A persistent bug occurs every time the codes run", "Every time the code runs  it crashes", "Pretty obvious", "Intermittent only occurs sometimes", "That's a little more annoying", "Sometimes  it because it only occurs on particular inputs  but in fact", "there can be intermittent errors that occur only sometimes even when run on", "the same input", "And that's also a little bit frustrating", "The reason we're going to give you these different categories is the fact", "that there are different kinds of bugs has an impact here", "So in sort of increasing order of worrisomeness  an overt and persistent", "bug  obvious to detect and really easy to correct", "And indeed  good programmers will use what we call defensive programming to", "try and ensure that if an error is made  the bug will", "fall in this category", "Defensive programming says if I've got an expectation of what conditions are", "in an input  I might test for them before I actually run the code and", "throw an error", "That will make it really obvious if I've got the wrong kind of input", "coming in here", "So an overt and persistent bug  easy to catch  and easy to detect  and", "hopefully  easy to fix", "Overt and intermittent are more frustrating  because they could be", "harder to debug", "But if the conditions that prompt the bug can be reproduced  usually we can", "handle those", "And those are bugs that more annoying  but still things", "that we can deal with", "The covert bugs are the ones that are really scary  because a covert bug", "says are not going to be obvious to detect this", "And in particular  it may also be intermittent  even more worrisome", "But a covert bug says code returns a value", "So it's not that it breaks in some way that's going to be obvious", "And if the code returns a value but a value that's wrong  how long does it", "take before I find it", "I might run code for days  weeks  months before realizing that the", "values I'm getting in are wrong", "And if that's code inside a control system for an airplane or inside a", "banking system  these can be really dangerous errors and things that are", "going to worry me a lot", "Defensive programming  this idea up here will help catch a lot bugs ahead", "of time  but the subtle ones could be hard to deal with", "And we're going to have to try and come up with ways to", "help find those tools", "And in the next segment  we're going to begin talking about tools for", "actually doing debugging"], "XLjNHjfVdhs": ["CHRIS TERMAN  In the next example  we're going to develop a class that", "represents a grade book  a list of grades for every student in a class", "As you look at the class and the following code that uses the class to", "actually produce the grade report  look at the interaction between them", "and think about whether there's other things that should be added to the", "class in order to make using it more effective", "It's often the case that one doesn't get all the right methods in a class", "to begin with", "Only in using it will you discover what other", "functionality needs to be added", "So we're teaching a course  and an obvious application is a grade book", "We'll need to keep track of the grades for all the students in our course", "So let's set out and build one", "We've chosen to organize it as a new class of its own", "A class of Grades  which will turn out to be a grade book", "You can see here are the methods that we've defined", "Let's look through them", "So when we make a grade book  initially  our list", "of students is empty", "And our grades dictionary is also empty", "And we're going to represent grades by", "we'll put them in the dictionary as a list for each student", "And the students are referenced by their ID number", "So the grades is a dictionary which maps ID number to a list of grades", "that have been entered for that student", "And finally  we have a little internal helpful helper variable called", "isSorted  which will be true when the list of students is currently in the", "correct order", "And of course  with an empty list  it starts off that way", "We have support for adding a student to the grade book  we basically pass", "in a student object  and if the student is already in our list of", "students  then we sort of indicate by raising an error  in this case  a", "value error  that the student is already in the grade book and that", "this was an incorrect operation", "If the student is not in the grade book  we go ahead and append them to", "our list of students", "And at the same time  we initialize their entry in the grades dictionary", "So indexed by their ID number  we set up an empty list  because we have yet", "to enter any grades for the student", "And finally  because we've added a student to the end of the list  we", "don't know if they're in order", "So we remind ourselves that  at this point  after the addition  the student", "list is not correctly sorted", "We can go ahead and add a grade for a particular student", "We pass in the student and the grade we want to add", "And we're going to basically reference the grades dictionary  using the", "student's ID number as a key  and we'll append the grade that were doing", "to the end of the grades list for that student", "The difficulty comes when we pass in a student who's not actually part of the", "grade book  what should we do", "Should we add them to the grade book", "Should we just fail silently and not indicate anything", "Well  the correct behavior in this case is to catch the situation where", "we are providing an index into the dictionary that does not exist", "When that happens  the Python system raises a key error", "We'll capture that error  and  basically  reinterpret that error as a", "value error with the message   Student not in the grade book", "So the idea is that the grades dictionary is sort of an internal data", "structure  and it would be weird for somebody who is adding a grade  who", "knew nothing about the internal data structure  to get an error associated", "with dictionaries", "So what we want to do is to take errors that are sort of only because", "of a particular internal representation and then turn them into", "an error using the try and accept statement here that will indicate an", "error the user would understand", "Similarly  we can get a grade for a particular grades list for a", "particular student by passing in the student to the getGrades method", "Again  we're going to go try indexing into our grades dictionary and", "returning a copy of the list of grades that we see", "And if  for some reason  the student isn't in the dictionary  we raise the", "same value error as before", "So why don't we return a copy of that grades list", "Well  in general we don't want people corrupting the internal data", "structures of our grade book", "So when we give them back something  we tend to give them a copy  so they", "could reorganize the copy or do whatever they want without affecting", "our own internal representation", "Finally  here the bottom  we have a way to get a", "complete list of students", "And in this case  we want to return a sorted list", "So if the internal list isn't sorted  we sort it and then", "remember that we did so", "So we have a huge grade book", "Every time somebody asks for all the students in the grade book  we won't", "continually be sorting the list", "We'll only be sorting it if it needs sorting", "Finally again  we return a copy of that now sorted list so that people", "can manipulate that list in many ways", "None of which will change the actual student list that we have inside the", "grade book", "Now why don't we choose to organize this is a class instead of just some", "data structures and a bunch of procedures", "In object oriented programming  what we're trying to do is take advantage", "of encapsulation", "So that's sort of a big OOP concept that's one of the main strengths of", "object oriented programming  where what we do is  we collect together all", "the data for a particular application  and all the procedures for", "manipulating that data  and encapsulate them", "together in a single object", "That way  people can use the object without really understanding any of", "the details of the internal operation", "And the class definition itself sort of gives us a specification for", "interfacing with their collected data that's inside", "Let's see this in operation", "So here is a little procedure that we've written that", "produces a grade report", "It sort of works like you expect", "It goes off and gets all the students in the course", "And for each of those students  it's going to first figure out their", "average grade", "So it runs through their list of grades  so for the grades for that", "particular student  we're going to go through each grade  adding it to a", "total  and then keeping track of the number of grades that we run", "across in the list", "And then we can compute the average by dividing the total by the", "total number of grades", "And when we're done  we're generating a report  so we're going to keep a", "list of the report", "And we report the students average grade on that list", "And finally  when all is said and done  we take the individual lines for", "each student and join them together with new line spacing  and return that", "as our answer", "Notice that what happens if we run across a student that has no grades", "in other words  the grades list is empty for that student", "So numGrades is zero  and this would normally create a", "divide by zero error", "And again  in an attempt to provide a good interface  we're going to catch", "the error that might be generated by a divide by zero  and instead put into", "the report something more sensible  just that that student has no grades", "So to try it out here  we have a bunch of students that we defined", "And again remember  each time I define a student  they're getting IDs in", "consecutive order", "I then go off and create a grade book for a particular course and add a", "bunch of students", "And then for each during the course  I give them a particular grade of   for", "the first assignment  and then for a couple of the students  they get some", "additional grades", "And finally  at the end  just to see what'll happen  we add a student to", "the grade book and  of course  at this point that student has", "no grades at all", "So if we come over here and look  we can find out what six", "Well you can see  it's a grades object", "That make sense", "It was meant to be a grades book", "It's an instance of the grades object", "We can go off and ask for all the students in six", "So six  allStudents    Let's just print out their names", "And here they are", "And in fact  even though we entered them higgeldy piggeldy  you can see", "when we ask for a list of all the students  they come out", "sorted by ID number", "Remember that the students  because they're an MITPerson  when we sort", "them  they're sort of by ID number", "So all that's great", "You might ask yourself  why didn't we just reach inside and knowing that", "there was a list of students  why don't we just say  for s in", "six  students and just grab the internal data structure", "Well  that's part of the data hiding aspect of Python objects", "We're really trying to provide an interface to the grade book that has a", "limited number of operations", "So we changed the implementation of the grade book later  people can still", "use it  and they shouldn't have been relying on any particular internal", "representation", "So if I'm all done here  what I can do is go ahead and ask to print out a", "grade report", "And I'll pass in the grade book as the argument to my", "little report generator", "And there we go", "You can see that we've gotten these five lines  one for each student  and", "we've calculated their average grade appropriately", "This data hiding aspect has pluses and minuses", "One  it allows us to change the internal representation as we'd like", "But we can also be stuck with the problem that we generate some", "inefficiencies", "For example  when we wanted to return a list of all the students  we", "carefully made a copy of the internal list and returned it so that the user", "could go off and do what he wanted to with a list of students", "The difficulty with that is  if I have a     students in my big online", "course  what I'm worried about is  that I've now  every time somebody", "asks for a complete list of the students  I've generated a", "copy of that list", "And if the intent is to basically iterate through that list and do", "something  that's a pretty inefficient operation", "creating an extra     element list every time you want to look through", "the grade book", "So we need to think of a strategy for dealing with that inefficiency  but", "still keep the strengths of data hiding  where the idea is  we don't", "really want people to know exactly how the internal representations used in", "the grade book", "So let's think about that for a moment"], "dioRzS_GaQE": ["PROFESSOR  So we're beginning to build up the kinds of things we", "want to do in Python", "We can certainly type expressions directly into a Python interpreter", "for example using an interface such as an IDLE shell  a shell that I've been", "talking to as I've been showing these examples here", "But that's not going to be as convenient", "We don't want to be constantly having to type things in", "In general  we're going to want to include statements inside of a program", "file  a separate file that we store away inside the computer and then use", "To do that  we're going to talk about both how we deal with that  but if", "we're going to do that  then executing an expression from a script that's", "stored away in a file will not produce any output", "When I talk to the shell  it gives me an output", "But inside of a script  it's not going to do that", "We're going to need to give it an explicit command", "And for that  we need statements  not expressions", "And in particular  if we want to get an output  one of the things that we", "can do is we can actually use statements like print", "And then I can give it an argument", "Now  inside the shell  print does exactly what evaluating the", "expression would do", "But inside of a piece of code that I've stored away in a file  it will do", "something different", "And of course  by the way  print can be doing something like actually", "getting the value of an expression before printing it out", "So it gets the value of the expression and then returns it", "So we're going to need to have a way of actually specifying when we want to", "get output showing up on our shell  which I've just done", "Similarly  we're also going to potentially need a", "way of getting input", "We're going to write programs or scripts that we're going to store away", "and then execute later on", "We're going to need a way to actually incorporate input from a user", "And for that  we'll use a little Python function called raw input", "Let me show you a simple example of this", "If I go to my Python shell and I type in name     and then I'm going to use", "raw input  which is a Python special function  it takes", "as argument a prompt", "So I'm going to give it a prompt as a string", "Enter your name", "because it wants a string to prompt", "And when I execute this  what raw input is going to do when I call", "it  it is going to print that out as a prompt", "And it is then going to wait for the user to type something", "into the Python shell", "So if I type this  there's what it printed out", "It's now the prompt", "It says   Enter your name", "I'm going to give it something", "And what raw input does is it takes whatever's typed in as a string of", "characters and returns that as a string", "So if I give it Eric  my name  I've now bound name to have a value", "I can go look at it", "And name is now bound to the string Eric", "That's great  because it says I've now got a way of using things where I ask", "the user to provide input", "It just did it", "And that special function is provided a prompt and then taken input and", "stored it away", "Because raw input takes the input and treats it as a string  if in fact I", "wanted to give it a number  I would have to do some typecasting", "Having input it in and given it some variable name  I'd have to do an int", "or a float   on that name to convert it into the form I want to make sure I", "actually now have it as a number", "In this case  though  I gave it in as a string", "And so now that I've got it there  I can just use it", "I said I've just got the value name", "But I could do other things with this as well", "For example  I could say  let's print out   and I'm going to give it a", "sequence of things", "Are you", "and I use the value of name", "and I'll put all of those pieces together", "And I can say   Are you Eric", "That  of course  is also really nice because now I'm able to use things", "that I've typed in as input and just use them any place I", "would like to use them", "Once we've got that  now we can start using the variable names anywhere that", "you'd use an expression", "So we just saw an example of that where I said  for example  we bound", "the name name to a particular string", "And I can use it elsewhere", "Here are some other examples", "I can give the variable myString a particular value of 'Too much'", "I can give the variable weather 'snow'", "And then I can print up things by just concatenating together the pieces as", "we just saw", "So I begin to start having this opportunity to", "actually put things together", "Now  one of the reasons we'd like to be able to do this in a file rather", "than just generally is that we can then save it", "We can edit it", "We can reuse it", "We can do things with it that we wouldn't otherwise do if we're just", "typing directly into a shell", "With this  we can start now building up some very simple code", "I want to start with a very simple example", "Suppose we actually type the following set of instructions into a file", "And I've done that over here", "If I go to my Python window  I've built a little file called Lecture", "Slide Four", "And I've typed in a set of expressions", "So the first one is going to bind x to", "The second one is going to take x times x  get that", "multiplication  and rebind x", "And right here I've got what's called a comment", "That is  after that pound sign      I've got some", "description of what's there", "Now  this is a boring little description that says I'm scoring the", "value of x", "And then I have another set of instructions", "I'm going to ask it to print out the value of x", "I'm going to have y get some input  turn it into a Float  and I'm going to", "print out some value of that", "Having saved this away in a file  I can now ask that file to be loaded", "into a Python shell", "Separately  we're going to talk about details of how to do it", "But the simple way to do it here is that I simply use the command F", "Notice what happened over here", "The shell restarted", "The shell basically said  I'm just reading in a file", "And notice what appeared", "It did a print", "That print came from this print statement", "I'd already bound x to", "I'd multiply it by itself  rebound x to be", "And now I'm executing this statement", "And it's waiting for me to input something", "So if I go back over here and I input the value    it reads it in  turns it", "into a Float by doing that type conversion  and then it prints out", "remember from back over here", "y times y and gives me that answer", "So this is a simple little example of what we call a straight line program", "It's a straight line program because I execute each instruction in turn", "I simply walk through the sequence of instructions", "But you now saw a little interaction", "And you see how I can build code in a file  load it into the shell  and have", "it do some work", "There are some observations", "We've already made them", "But let's just talk about them", "You see comments appearing after the pound sign", "And while my simple comment here was pretty boring  in fact  in general  I", "want comments because they tell me things about what I was thinking about", "as I wrote the code", "They're going to help a user understand the decisions the", "programmer made", "And in fact  a really good piece of code should be well commented and", "therefore should be very readable by a user to understand where things are", "Second observation we made is this is a straight line program", "There's no variation in the order", "It simply walks through things in order", "And of course  more programs are going to require more sophisticated control", "of the flow through the code", "And we're going to get to that next"], "jq5M5Gmf0do": ["ERIC GRIMSON  Welcome to the    x  often referred to as", "the introduction to computer science and programming", "It's odd to have both of those terms in the title  but both", "of them are important", "This course is going to be not just about teaching you how to", "program a computer  how to tell the computer instructions", "that it can understand", "It's also going to be really important to create within you", "a capability to think computationally", "So our goal is to let you become skillful at not only", "getting the computer to do something  but to do that", "thing that you want it to  to get it to solve a problem", "By the end of this course  we hope that your first instinct", "when faced with any interesting challenge is to", "first think about how could I capture that challenge  that", "problem in an algorithmic or mechanical description of", "steps such that I could get the computer to do", "the work for me", "If you can do that  it's going to give you a great deal of", "advantage as you face any kind of problem", "And those are the skills that you're going to see throughout", "this course", "Now if our goal is to have you learn how to get a computer to", "do something for you  how to talk to the computer  how to", "think algorithmically", "of the questions we can ask is  so what's the computer", "going to do for us", "What's it actually good at", "That seems like probably an odd question", "After all  we know computers could do a ton of things", "But it's still important to go back to a very fundamental and", "basic point", "What does a computer do", "In fact it does   things and   things only", "It performs some calculations  and it remembers results so", "that it can reuse them", "Now you'd say  OK  so it performs calculations", "That seems fine", "But what kinds of calculations", "Well  it turns out that every computer comes with a simple", "set of primitive calculations  things that we call built in", "They're provided by the manufacturer as the basic", "elements that a computer could use", "We'll see some examples of that shortly", "If that's all we have  that's pretty limiting", "So a key thing  as we go through the material in this", "course  is to learn how we can create our own methods for", "computing something  how we can capture the computational", "way of thinking about something in a manner that", "could be used by the computer  and to do it in a way whereby", "the computer can abstract that", "By that we mean that the computer can figure out how to", "take what you tell it and turn it into something that it can", "now treat as if it were a primitive  something that was", "provided by the manufacturer  and reuse that throughout its", "computations", "So our computers are going to do calculations for us  using", "a set of built in primitives  plus things that we add", "Now you might ask  gee  is that enough", "If it turns out that a computer can just perform", "primitives calculations  it's not sufficient", "Well  as I'm sure you already realize  modern computers can", "perform most calculations incredibly quickly", "And so one question is if we can do them fast enough is", "that sufficient to do interesting things", "Let's look at both parts of that", "First of all  how quickly does a modern", "computer actually run", "Well  let me give you a simple little thought example", "If I were to take a little gooseneck lamp and put it", "right here  a foot above my desk  and I were to time", "things perfectly so that as I hit the switch on the lamp I", "hit a key on my computer and started them both up at", "exactly the same time  in the length of time it takes the", "light to go from the lamp to the desk your computer will", "execute two operations", "That's amazing", "It does two operations  two of those primitive operations in", "the amount of time it takes light to go basically a foot", "Unbelievable", "Here's another way of thinking about it", "Imagine I take a simple child's rubber ball and I", "suspend it about a meter off the ground and I drop it", "If I let it drop  by the time it hits the ground  assuming", "gravity behaves normally  your computer will have executed", "operations", "Unbelievable", "operations by the time that", "ball hits the ground", "Now  that suggests that in fact these computers are", "incredibly fast", "And even though they're computing very simple things", "they're doing incredibly quickly", "They are", "We say computers do simple operations", "We also said that they have some storage", "So how big is the storage inside of a computer", "Well  every element of storage is called a byte", "And if we were to assume that a byte weighed   ounce", "I know bytes don't really weigh ounces  but assume they", "weigh   ounce", "A typical computer has hundreds of", "gigabytes of storage", "And that says if each one of those bytes weighs   ounce a", "computer would be able to store the equivalent of", "tons of storage", "OK", "They don't really store it that way", "But you get the idea", "Incredible amount of storage  can remember a lot of things", "and incredibly quick in terms of doing the computation", "So  that sounds really good", "The question is if they're only primitive operations is", "that enough", "Are these simple calculations sufficient", "Well  they're going to do a lot as we see", "But we're also going to see that they're not quite enough", "to do everything we'd like", "Let me give you   examples", "I'm sure all of you have gone to the World Wide Web to look", "up a piece of information", "You've searched the web to try and find things that you'd", "like to know about", "The question is if a computer is just doing this the", "straightforward way how quickly would", "it search the web", "Well  it turns out there are about", "searchable pages on the web at the moment", "If we assume that it takes about     words  or there", "are about     words per page", "Some  of course  are much more than that  some of less  but", "about a thousand words per page", "And just for sake of argument  we're going to assume it takes", "about   operations per word to find the word on the page", "and to decide it's the right thing", "is actually high", "Let's make it a little less", "Let's just assume it's only   operations per word", "How long does it take to actually execute that search", "Well  we can do the math", "You can grind it through", "You have         pages", "You have that many operations", "You know how quickly we're doing these actual operations", "If you put it all together  what you find is it's going to", "take you about     days to find something on the web", "That's a slow browser", "That's not going to work very well", "And that basically is giving us a hint that even with", "really fast computers we have to be smarter", "Let me give you a second example", "Playing chess  something that's seen as a very", "difficult task", "It's impressive that about   or   years ago a computer", "program actually beat the world", "champion in a chess match", "And   of the questions is  well  OK  is it just because", "the computers are really fast", "Well  we can look at this two ways", "In a typical chess game  there are about", "moves at any one time", "And so the question you could ask is to say  OK  if I want", "to have my computer program look ahead   moves    moves by", "me    moves by my opponent  how many different options are", "there if there are about   moves each", "And the answer is about     billion different sets of the", "chess board that I'd have to look at", "If I can check each move out in about   operations per", "move  then that says it's going to take me about a half", "hour to actually look at each move", "That's pretty slow", "And this is pointing to a problem that", "we want to get at", "And the problem is that  yes  computers are really fast  but", "we need good algorithmic design as well", "To deal with interesting problems  we need algorithms", "that are clever  are intelligent  are smart about", "how they actually do the work", "And that's a lot of what we're going to talk about this", "during this term", "By the way  we also said space was a big issue", "And we got a lot of space in the computer", "If you go back to the chess example  you can ask the", "following question  How many different games", "are there in chess", "Experts will tell you there about     different chess", "games that are possible", "Is that too big for storing in your computer", "Well there are only     atoms in", "the observable universe", "So we can't just store away all the games", "and look them up", "And both of these are pointing to why we're going to use this", "course to actually learn about thinking algorithmically", "Now this suggests it's just a matter of putting together", "enough speed and enough smartness", "But one can be a little bit more distinct and say  are", "there actual limitations to what we", "can do with the computer", "And in fact despite its speed and its size and the", "cleverness of the algorithm  our computer still has some", "limitations", "Here are a couple of examples", "First of all  there are some problems that", "are just too complex", "We don't have enough speed  enough storage", "And they may get tackle as things improve", "But examples here would be things like predicting weather", "at a very local scale", "I'd love to know what's exactly going to happen", "outside my window for the next half hour or next", "hour or next   hours", "The size of the problem simply too big for a computer to be", "able to model well enough and solve in a", "reasonable amount of time", "It turns out some of these complex problems", "actually help us", "Modern cryptography  the way in which information is", "securely transmitted across the net  relies on having some", "problems that are simply too difficult to compute and", "therefore  too difficult to break the code", "So we actually get some benefits about the problems", "that are too complex", "But as we're also going to see later on the course  there are", "some problems that are just fundamentally impossible to", "compute no matter how big the computer is", "And some of those are really heavy", "Here is one example  being able to predict whether a", "piece of code will always stop with an answer for any input", "By that I don't mean just you run it and see if it stops", "being able to write a piece of code and then have some other", "piece of code inspect it to say  this will always work", "It will always stop  and it will always give us an answer", "This turns out to not be possible to solve", "And this is known as Turing's Halting Problem", "And we'll talk briefly about that later on in the term", "But it says that there are some problems that are simply", "too hard to solve period", "Nonetheless  in this course  we're going to start talking", "about how do we think algorithmically and get the", "computer to do interesting things for us"], "hXyXRmJA8RU": ["ERIC GRIMSON  OK", "So we've now seen how to create simple expressions", "We can take objects that are numbers", "like integers or floats", "We can combine them together with operators  so we say", "plus   or   plus   all in parentheses times", "That gives us a way of doing some simple computations  but", "it's pretty boring", "It basically says we got a calculator", "So we can type in expressions and get out values", "But we like to obviously do more", "complicated kinds of things", "One thing we need in order to make that happen is what we", "call a means of abstraction", "While we can certainly write arbitrary expressions  it", "would be valuable having written it down and gotten the", "value of an expression to be able to remember  to save it", "away by giving it a name  and then using the name to get the", "value back whenever we needed it", "Fortunately  we have that ability", "It's called assignment", "And in Python  the format of that is shown here", "We type in word or a sequence of characters followed by an", "equal sign followed by some expression whose value will", "then be associated with that word", "So if I go over to my Python shell  I can do things like", "I'm going to say  give the name pi", "And notice when it print it out  it doesn't mean anything", "It simply has done that assignment", "That is it basically", "as we're going to see later on   created a binding of the", "name pi to that value", "If I want to see the value of pi  I can simply ask the", "Python interpreter to give it to me  and it", "prints it back out", "So I could do another binding", "I can say  I've got a radius of", "Again  notice that it doesn't print anything out", "If I want to get the value of radius  I can ask for it", "But I can also now do things like create expressions", "So I'm going to assign the name area to", "And I can now write an expression as I would have", "before with now not just numbers but names whose values", "are also numbers", "So the area is pi r squared  where r is my radius", "And I can say  OK  what is the value of area", "And it did that computation", "So I have an assignment statement", "And notice here I'm using a single equal sign  which is", "why we use the double equal sign for comparison", "A word or a name  an equal sign  and expression says  get", "the value of that expression and bind to it or bind it to", "if you like the value of the name associated on the left", "hand side of that expression", "So let's look at that in a little more detail", "We say that we're binding a variable or a name to a value", "And what does that mean", "That statement pi equals     literally assigns the", "name pi to the value of the expression to the right hand", "side of the equal", "And you can think of this as literally creating a binding", "between a name and a value stored", "somewhere in the computer", "So over here are all the values that are stored away in", "the computer", "And I have somewhere within the computer a listing of all", "the names whose bindings I have done", "As we just saw  we can retrieve the value associated", "with the name by simply invoking the name  just asking", "for what is the value pi or pi", "Now I can change the bindings", "So having the bound a variable name  I can do another", "assignment statement", "So  for example  if I go back over to my Python shell  I", "could change the value of radius", "Remember  initially we had radius of", "Let's change it to something different", "Let's changes it to in fact", "I'm going to make this", "So how do I do that", "I say let's have radius be", "Now what's my value of radius", "There it is", "What that's done in my diagram over here is it's change the", "binding for radius", "Remember before it was", "It has now changed into something else", "But notice that area hasn't changed", "And in fact I can confirm that", "The area is still     point a whole bunch of stuff", "And that's because my evaluation of the binding for", "area having been done earlier has simply", "stored away that value", "As you can see right here  it doesn't have an", "expression of value", "And it is the particular value", "So rebinding radius does not change the binding", "associated with area", "An easy place to make a bug or have a mistake and something", "that you want to keep an eye out on as you move forward in", "terms of using these ideas"], "G0qUN3eTqlo": ["ERIC GRIMSON  Let's visualize what selection sort does", "The basic idea is that we're going to start with the first point in the", "list  look at all the remaining ones to find the smallest thing  and then", "swap those two points and continue on", "So we start by putting a marker at the first spot on the list", "We then start by taking a second marker at the next point in the list", "and we keep scanning down  checking to see where is the smallest thing that", "we've seen in the list  which happens to be here", "When we get to the end of the list  knowing that that's the smallest", "thing  we swap those two elements", "And then we move the marker up one  start our checking point at the next", "one  and again  scan down the list  finding the smallest thing we've seen", "so far  which eventually we find there", "Having found that  we swap those two elements  move on to the next point in", "the list  move our marker up one  and again scan for the smallest", "element in the list", "Which happens to be here  so when we get to the end  we swap those two", "And you get the idea", "We move the marker along  the thing that we're going to check along  and", "we keep scanning until we find the smallest element of the list  which is", "right there", "Once we've gotten to the end of the list  knowing this is the smallest", "one  we swap these two  and we can carry on", "I'm not going to do the rest  but you can see how we're selectively finding", "the next smallest element  and putting it at the front of the list", "You can also see how that notion of having the prefix sorted and the", "remainder not  but finding the smallest element and adding it to the", "prefix builds that invariant that lets us guarantee", "that this works correctly"], "Ejy6ILfh_hk": ["ERIC GRIMSON  So let's get going", "We want to start programming in Python", "So we're going to write programs", "In the program  or sometimes called a script  is going to", "be a sequence of definitions and commands", "The definitions are things that get evaluated and stored", "away  and commands are things that actually get executed by", "the Python interpreter in what's called a shell", "And that shell is just a program that allows users to", "type commands in that are directly executed by the", "operating system of the computer", "It's called a shell because it covers up the details of the", "operating system and just lets us interact with things", "We'll come back to definitions later on  but right now we", "want to start by just simple things", "So what are commands or statements", "Well they're things that instruct the", "interpreter to do something", "And we can  therefore  begin by talking about some simple", "Python commands", "OK  so let's get going", "To deal with giving commands to the computer we also to", "think about what are we going to manipulate", "And so the first thing we have to do is describe data objects", "inside of a computer", "These are the things that capture information and that", "can be then manipulated in some way by the computer to", "determine more information", "So at heart every program is going to", "manipulate a data object", "In each of these data objects has a type that defines the", "kinds of things that programs can do to it", "We'll see that data objects are typically either scalar", "that is they cannot be subdivided", "Or  obviously  if they're not scalar they're non scalar", "something that has an internal structure that", "can actually be accessed", "And as we start building up our collection of data objects", "we're going to talk about each one of these kinds of things", "But let's start with the simplest ones", "So scalar objects", "Basically inside of Python there are three different", "kinds of scalar objects", "There are integers or ints", "These are used to represent the kinds of whole numbers", "we're used to", "There are floats  or floating point numbers which are used", "to represent real numbers  things that have decimal", "points and partions to them", "We also have what we call Boolean  often referred to as", "having a type bool which are used to represent the truth", "values of true and false", "We're going to talk about how to use each of these things", "but for now we can simply look at some simple examples", "So let me go over to my Python evaluator", "I've got a Python shell running over here", "So I can type in something like", "And it gives me back that value", "I can type in a real number", "I can even type in  if I can type it  I can type in  oh and", "I did not type it properly", "So let's type it in that way", "I can type in a Boolean value", "We'll come back to why I got an error in a second", "As I said  I can also ask Python to tell me what is the", "type of an object", "So I type in  in a bad pun that special keyword type", "followed by an open parenthesis", "This is because this is a function", "We'll come back to that later on", "I can give it an expression", "And it tells me that this is an object of type int", "Or you could say", "And this tells me this is an object type float", "So I've got simple data objects", "OK let's go back here and carry on", "What can I do with data objects", "Well I want to create commands", "I want to do things with them", "So I can start building up expressions", "And expressions are composed of operators and", "objects  data objects", "They can be combined to denote doing something", "different to them", "And the syntax for most simple expressions is simply what's", "shown here", "We have an object  an operator  and another object", "Objects are those simple things we started with", "although we can see that they could be more compound", "expressions that reduce to objects", "And so what are the kinds of operators", "Well  simple things we can do", "Let's start with just numerical kinds", "of things  all right", "So I can add two data objects together if they're ints", "I can add", "I can subtract", "I can take products", "Now let's start with simple things", "If the objects are both ints  the result is going to be an", "int or an integer", "But if either one of them is a float the result is going to", "be a float", "Again  go over to my scheme  or my little scheme over here", "for dealing with Python", "And I could type in things like   plus   two ints", "and I get out", "If one of them is a float it gives me back a float", "And we'll talk about what it does in a second", "I can take the difference between two things", "That gives me the result I would expect", "And I can take the product of two things", "So   times   is", "Now  coming back over to my slides here I've done sums", "I've done differences", "I've done products", "Division is a little different", "Division if they're floating point numbers will do the", "thing we do expect", "But if they're both integers the result", "is simply an integer", "And it's the quotient without taking the remainder", "So let's look at that", "If I take     divided by     I get out   and     which is", "what I expect", "If I take     divided by   I also get   and", "But if I take   divided by   it gives me back the quotient", "part of the division  or if you like the whole number part", "of   and", "If I want to get the remainder I use the percent sign", "remainder   gives me back the component that's left", "behind after I've done that", "And then finally what I can do is I can", "take things to a power", "So I can take   to the second power", "And I get   times    which is of course", "squared  which gives", "So I now have a set of things that I can actually run in", "terms of creating expressions that are integers or floats", "combined with some operator", "All right  what might I do with that", "Well let's look at some simple examples here", "I've already done some examples  but I", "certainly add things", "I can multiply things", "But I can also do things like say take   plus   add them", "together and multiply by", "And the way Python is going to deal with this it it's going", "to take the expression inside the parentheses  the   plus", "this portion here and reduce that or get that value which", "is   before it does the multiplication", "Now what happens if I say   plus   times   without the", "parentheses", "Well we can run it", "That gives me", "And what's happening here is that  in fact  I'm first", "executing that example before I do the remainder", "And this is basically something that says I've got", "some order in terms of how I would deal with things", "So let's look at that in a little more detail", "The parentheses basically define sub computations", "I want to complete those to get values before I go on to", "evaluate a larger expression", "So in my first example I reduce the   plus   to", "because it's inside the parens and then do the", "multiplication", "On the other hand  if I don't have parentheses then the", "operators are executed in a particular order", "There's a precedence to them", "Which means go from left to right  but we start first with", "exponentiation", "Having done all of those then we'll do", "multiplication and division", "And having all of those we'll then do the addition and", "subtraction", "Which is why without the parentheses I do the   times", "first and having gotten   I then add   to it to get the", "next component that I want", "OK  so we can create simple expressions", "What else might we want to do", "Well we'd like to compare things", "We'd like to be able to do comparisons of different kinds", "of numbers", "For this I have again  a sequence of", "simple arithmetic things", "I have ways of saying something is greater than", "Something is greater than or equal to", "Less than", "Less than or equal to", "And those are my first four here", "So greater than  greater than or equal to  less than  less", "than or equal to", "Let's look at some examples", "I can ask  is   greater than", "Of course the answer is no", "Is   greater than", "The answer is no", "But   is greater than or equal to", "So I get out true", "I have the same thing doing the last line comparisons", "If I want to see if two things are equal I use this kind of", "strange looking thing here with the double equal sign", "And we'll see why", "So I can say is   equal to", "And the answer is true", "And to see if something is not equal to I use what's often", "called bang or the exclamation point followed", "by the equal sign", "So I can say is   not equal to", "That's false", "But   we know is not equal to", "And that's true", "So what do I have now", "I can do simple comparisons", "And I can do that on integers", "I can do that on floats", "So I'm now ready to start doing simple", "arithmetic kinds of things", "I also have though Boolean values  truth values", "So I have some simple operations on those", "I have  for example  an expression that says given two", "expressions who are Boolean I can take the and of those and", "that will be true if both a and b are also true", "I can take the or of two Boolean which is true if", "either of them is true", "And  of course  I can take the complement", "It a is true  then not a is false", "If a is false then not a is true", "We'll come back to those later on  but those are simple", "operations on Boolean", "What else might I have", "Well the last I need is that sometimes I want to convert an", "object of one type into an object of another type", "This is called type casting or type conversion", "And that is something that we can do in Python", "We can convert an integer into a floating point basically", "creating a   after the decimal point", "And to do that we use the special function float to", "which we can give an integer", "And it gives us back the floating point value", "Going the other direction we can also do we can take a", "floating point number and take the integer part which gives", "us back that quotient component  that part before", "the decimal point losing the remainder", "With that we're now set", "We can actually start moving on to put all these pieces", "together which we're going to do in the next part"], "xnhi9-ud_vI": ["Eric Grimson  We've been building a lot of code", "We've been starting to think about how to deal with Python", "And this is great", "And it would be fantastic if our code always worked perfectly", "first time we ran it", "Of course  it would always be nice if I won the lottery every time or my", "favorite sports team won every game", "Unfortunately  that doesn't happen", "As they say  life ain't perfect", "And so we need to have a way of guiding ourselves as we think about", "how to both test our code and then fix it", "So we're going to talk about testing methods  which are basically ways of", "trying code on examples to try and figure out if it's running correctly", "And then once we've  in fact  isolated that there may be a problem  we're", "going to talk about debugging methods  which are ways of fixing the program", "that you know does not work as you intended it to", "We're going to talk about both of those throughout this lecture", "Now  let's start by thinking more abstractly about sort of when should", "we  in fact  do these tasks", "When should you test  and when should you debug", "Part of the goal here is it would be really good if we could actually ahead", "of time  figure out how to design our code to make it easier to do this", "And indeed  all good programmers have that kind of practice", "They break the code up into components that can be tested and debugged", "independently", "They find natural breaking points between different parts of the", "computation  places where our computations contain  and a simple", "result is passed on", "And they write functions to capture each parse", "That's going to allow us to more easily test pieces", "Second thing good programmers will do is they'll write good documentation", "When you've got a problem set  it's often easy to think I'm just going to", "start working on this", "But in fact  before you jump into code  think about writing down what it", "is you're trying to do", "What are the expectations on my input", "What are the expectations on my outputs", "Even if the code doesn't strictly enforce constraints on the inputs by", "testing for them  this kind of documentation can be really valuable", "when you're trying to trace down why a piece of code is", "not behaving as expected", "And finally  good programmers will document assumptions", "I'm assuming certain conditions  both in terms of what's passed into the", "code and at certain stages throughout the code", "And detailing those assumptions is going to make it easier for us to", "actually isolate where there may be problems  for example  because an", "input does not satisfy an assumption", "All right", "Once we've designed our code  we can  in fact  start moving", "on to testing it", "And to do the testing  basically we need to do   things", "The  st one is we've got to make sure our code actually runs", "So we need to remove any syntax errors", "We need to remove any static semantic errors", "And fortunately  in most modern programming languages  including", "Python  these things will be handled automatically  indeed  as you probably", "already seen", "If you write a piece of code that has either a syntax error  you forget a", "semicolon  or you've got the wrong kind of parentheses  or a static", "semantic error  when you try and load that into the Python environment", "typically  the interpreter  the evaluator will complain", "It will say you got an error and not actually let you run", "That makes it easy to fix those kinds of errors", "Once you have those done  if you're ready to start doing testing  it's", "often really good to have ahead of time worked out a", "set of expected results", "What do I expect the output of the program to be on a particular input", "Because that's going to form a template for helping us figure out how", "to find where the bug actually lies", "OK", "With that  we're now ready to start moving on to thinking about testing"], "DtPyN40SjaA": ["JOHN GUTTAG  Hello", "My name is John Guttag", "The next few segments  we're going to talk about how to use Python and the", "PyLab library to produce plots that tell a story", "It's often the case that text is the best way to communicate information", "That's how we know when   started  who the instructors are  and maybe", "even  as I've seen in some of your responses  it's how we know that it's", "sometimes too hard for the students", "However  there's a lot of truth to the Chinese proverb  a picture's meaning", "can express     words", "Well  OK", "Maybe not that picture", "But how about this one", "The words on the left are about the plot on the right", "I know that the words are too small for you to read  but", "that's beside the point", "The plot quickly conveys the message that one group of cardiac patients", "this group  is at a much higher risk of dying during the next year than the", "other group  this luckier blue group", "Despite the power of pictures  most programs rely on textual output to", "communicate with their users", "Why", "Because in many programming languages  presenting visual data", "is simply too hard", "Fortunately  it's easy to do in Python", "The reason that it's easy is that a group of hard working programmers", "produced a set of amazingly useful Python libraries", "At the bottom of the stack is NumPy", "This adds vectors  matrices  and the usual kinds of mathematical functions", "that people doing numerical programming are interested in", "SciPy is built on top of NumPy  and it adds some classes that are useful to", "scientists", "In this course  we're going to focus on the facilities of MatPlotLib", "That adds an object oriented application programmer interface  or", "API  for plotting", "And finally  we'll talk mostly about PyLab  which combines the other", "libraries to provide a MATLAB like user interface", "I know that many of you are familiar with MATLAB  and probably many of you", "have even used it", "For those of you who aren't  MATLAB is a software package sold by a company", "named MathWorks", "To quote from the MathWorks website   MATLAB is a high level technical", "computing language and interactive environment for algorithm development", "data visualization  data analysis  and numeric computation", "Later in the course  we'll look at some of the more", "advanced features of PyLab", "but", "In this lecture we focus on some of its facilities for plotting data", "We'll not try to provide a user's guide or a complete tutorial here", "Instead  in this and the next segment  we'll merely provide a few example", "plots and explain the code that generated them", "Other examples appear in later lectures  and yet more", "examples in the textbook", "Also  and this is important  there are lots of freely", "available online tutorials", "I've listed three of them here", "If you don't find what you're looking for at one of these sites  just go to", "your favorite search engine and enter PyLab  followed by whatever topic you", "were interested in", "For example  PyLab plus plotting  or PyLab plus matrices", "By the way  this lovely picture at the bottom of the slide", "was drawn using PyLab", "Let's start with a simple example that uses pylab plot to", "produce  well  a plot", "So we see the code here", "Unsurprisingly  we start by importing PyLab", "It's not the first time we've used import in this class  but to remind", "you  import loads in a previously defined module", "We can then use dot notation to access classes  functions  and methods to", "find in that module", "Now  let's run the code  and then talk about why it does what it did", "Well  I'm sure you're all pleased to see that what the code did", "was produce a plot", "The bar at the top contains the name of the window  in this case  Figure", "The figure  created by the first line of code following the import", "here it is  pylab figure", "The middle section of the window contains the plot generated by the", "invocation of pylab plot", "The two parameters of pylab plot must be sequences of the same length", "The first gives the x coordinates of the points to be plotted  and the", "second  the y coordinates", "Together they provide a sequence of four x y coordinate pairs", "In this case                   and", "These are plotted in order", "As each point is plotted  a line is drawn connecting it to", "the previous point", "So over here we see that the first point plotted was", "It then plots       draws a line back to", "a line to", "And       and a line back to", "The final line of code  pylab show  causes a window to appear in the", "computer screen", "If that line were not present  the figure would still have been produced", "but it would not have been displayed", "This is not as silly as it at first sounds  since one might well choose to", "write a figure directly to a file  as we will do in the next segment  rather", "than display it on the screen", "The bar at the bottom of the window contains a number of push buttons", "The rightmost button is used to write the plot to a file", "If I click on it  we see a window pops up", "This will vary from system to system", "I get to type a name", "Let's call it firstplot  and then I type Save", "The plot has now been saved", "The next button on the left can be used to adjust various parameters", "related to the appearance of subplots", "My guess is you'll hardly ever use this", "The button you'll use a lot is the Zoom button  this one here", "That allows us to draw a rectangle to zoom in on a portion of the plot", "Doesn't make much sense when the plot is as simple as this one  but as we'll", "see later  often it's the case that it makes a lot of sense to look at a", "portion of a plot in more detail", "The next four buttons are used for panning and zooming", "And the button in the extreme left  this cute little house  is used to", "restore the figure to its original appearance after you've messed it up", "using the other buttons", "I understand that so far this seems pretty primitive", "In the next few segments  we'll see how to produce more useful plots"], "FylxGyUzB7g": ["JOHN GUTTAG  Hi", "I have what I hope is good news for at least most of you", "We're pretty much done with introducing new language features", "We'll drop a few things on you along the way", "But for the most part  the rest of the lectures will be devoted largely to", "how we go about building computational models that let us solve problems", "We'll start with simulation models", "For most of the history of science  theorists used mathematical techniques", "to construct truly analytic models that could be used to predict the", "behavior of a system from a set of parameters and initial conditions", "This led to the development of important mathematical tools ranging", "from calculus to probability theory  and to a reasonably accurate", "understanding of the macroscopic world but  as those of us who look at", "physics know  not really of what goes on  say  at the", "level of quantum mechanics", "As the  th century progressed  the limitations of this approach became", "increasingly clear  and people began to rely on simulation models more and", "more often", "Simulation attempts to build an experimental device called a model", "The intent of a model is to provide information about the possible", "behaviors of the actual system being modeled", "Typically", "in fact  almost always", "simulation models are descriptive  not prescriptive", "They tell us how a system works under given conditions  but not how to", "arrange the conditions to make the system work best", "Simulation models can be classified along three dimensions", "deterministic versus stochastic  static versus dynamic  and discrete", "versus continuous", "Deterministic simulations are completely defined by the model", "Rerunning a simulation will not change the outcome", "Deterministic simulations are typically used when the system being", "modeled is too complex to analyze analytically", "for example  the performance of a processor chip", "Stochastic simulations include randomness", "That means that different runs of the same simulation with the same initial", "conditions can generate different results", "Most of the simulations we're going to look at this semester are stochastic", "for reasons we will be getting to in a subsequent segment", "In a discrete model  the values of the pertinent variables are enumerable", "for example  the integers", "whereas in a continuous model  they're not enumerable", "for example  the real numbers", "Imagine  for example  analyzing the flow of traffic along a highway", "We might choose to model each individual car  in which case we would", "have a discreet model", "Alternatively  we might choose to treat traffic as a flow where changes", "in the flow can be described by differential equations", "This leads to a continuous model", "All of the simulations we'll be looking at in this course use discrete", "models only", "There are several reasons for the growing popularity of simulation", "models over the last decades", "Most prominently  probably  is people began to get very interested in", "systems that were not mathematically tractable", "For example  people became increasingly interested", "in the social sciences", "e g   economics", "And creating models of those systems using conventional mathematics just", "did not seem possible", "Furthermore  as the systems to be modeled grew increasingly complex", "people really had an urge to find a way to model them in a series of", "successive refinements where they would build a model  try it  discover", "they didn't like it  and then make it a little bit more", "accurate a step at a time", "You'll see us throughout the rest of this class doing exactly that", "We'll start with simple models  look at the results  and then figure out", "how to change the model to make the results more accurate", "Another useful attribute of simulation models is that it's relatively easy to", "extract intermediate results", "We can stop the simulation and look at what the world looks like part way", "through it", "That  in turn  makes it easier to improve the simulation", "And finally  there was a necessary condition  and that's the availability", "of fast computers and big memory", "Until the advent of the modern computer in the middle of the  th", "century  the utility of simulation was limited by the time required to", "perform calculations by hand or the mechanical complexity of", "application specific simulators", "One way to appreciate the pervasiveness of simulations today is", "to perform an internet search for various kinds of simulation", "Let's go over here to my browser and given it a try", "When I discuss this material in my live class at MIT  I always ask the", "class to tell me what they'd like to hear about", "It being MIT  inevitably somebody says  physics", "So if we look at that  we'll see  well  there are quite a few  well over", "million pages with simulations of physics", "Increasingly  MIT students are moving toward the life sciences  so biology", "always crops up", "Well  and we can see that appears  at least in this way  to be more popular", "than physics", "There are always some finance students in my class", "Not too surprisingly  finance in the world at large seems to be more", "popular even than biology", "And then  even though nobody suggests it  usually  I always do this because", "I love sports", "And we see that sports are even more popular than finance", "To recapitulate  simulation attempts to build an experimental", "device called a model", "And I want to emphasize that it really is an experimental device", "We run some experiments", "And as with a lab experiment  we then end up improving it", "The goal of the model is to provide useful information about the possible", "behaviors of the system being modeled", "It's very important to remember that simulation models are only an", "approximation of reality", "Some models provide better approximations than others", "But one can never be sure that the actual system being modeled will", "behave in the way predicted by the model", "Models provide predictions", "And as we all know  some predictions are accurate  and some", "predictions are not", "In fact  it has been said that all models are wrong", "That's the bad news", "But the good news is that but some are useful", "In the next segment  we'll start looking at  how do we go about", "building models that are indeed useful"], "pGd3WqZK4Cg": ["ERIC GRIMSON  All right", "We've been looking at guess and check algorithms", "We just took a little bit of a detour to look at", "the floating point", "And the reason we did it is that we want to come back to", "this idea of suppose we'd like to use guess and check to", "find  as we said  square roots or cube roots", "In the case where we're dealing with integers  we", "could get away with this because we could simply", "generate all the possible guesses   there's only a", "finite number of them", "and check them to see which one was the right answer or", "whether there was no answer  if we basically went through", "all of them", "When we start talking about trying to find answers", "though  that are floating points where the number whose", "cube root we're trying to find is not a perfect cube  we", "can't do the same thing", "There's an infinite number of possible things that", "we could guess for", "So we need to be more clever about it", "And that's where we're going to use this idea of", "approximation", "We could certainly still generate  exhaustively  a", "number of different guesses  all", "differing by a small amount", "So we could start at   and then say  for example  do", "et cetera for whatever small amount we might", "want to use and use the same idea", "But if we do that  in fact  we can't guarantee that we're", "going to get the exact answer", "We'll just have to make sure that we're close enough", "We can use that idea", "We can still use exhaustive enumeration", "The differences now are we're going to take small steps", "where we define how small the step size we're going to take", "to generate all the guesses in some order", "And when we check  the check now has to take into account", "the fact that floating points are not exact", "And we just have to see if we're close enough", "Well  let's look at that", "Here's a piece of code to do it", "It looks a little daunting  but it's not too bad", "I'm going to do this for a particular value  trying to", "find  in this case  the root of", "And I'm going to set a little value up here called epsilon", "which is going to be my way of saying  how close", "do I want to get", "I have to pick a step size  which is going to say I'm", "going to start at", "And then I'm going to keep going by increments or jumps", "of some step size", "I'm going to arbitrarily pick the step size", "to be epsilon squared", "We'll come back to that in a second", "I'm going to do one other thing here", "I'm going to keep track of how many times do I", "actually make a guess", "So I'm going to set up a global variable called number", "of guesses  which I'm going to increment as", "I go through there", "Then I'm going to start off with my answer equal to", "And then here's the idea", "I'm going to use another one of these iterative loops", "I'm just going to walk through it", "And here's what it's going to do", "It's first going to check to see have I gone too far", "What does it do", "It says  if answer squared minus x  if the absolute value", "of that is bigger than epsilon  it says I've gone", "further than I can", "Because remember  the answer is going to keep increasing", "If it gets to the point where it's bigger than that  it's", "gone too far", "I'm also going to check at the same time to say   or rather", "it's too far apart", "I'm also going to check at the same time to say", "am I done or not", "So this one is basically telling me am I done", "So as long as the difference between answer squared and x", "is too big and I'm not done yet  I'm going to", "take another step", "So I'm going to increase answer by step", "Then I'm going to keep track of the number of", "guesses I have here", "And I'm going to keep doing that", "So here's my generate test", "And I keep doing that until  in fact  my check  which is", "right here  turns out not to be true", "And when that's not true  I jump out of it", "I'm going to print out how many times", "did I actually guess", "And then I'm going to check to see is the answer", "close enough or not", "All right  it's got that same basic form", "This is an exhaustive enumeration moving by step", "sizes  generating different guesses  and then checking", "them to see whether I've got something that's the answer I", "want or not", "Let's see what happens if we try it", "So over here  I've got that code", "I'm going to do it with x equal to", "And if  in fact  I now evaluate that  huh  it takes", "almost     guesses", "But it basically says that I get an answer of", "It's pretty close to the square root of", "Now you know the square root of   is", "This is OK that it didn't get the exact answer  because I", "just want it to be an approximation", "Now what are some things that we might", "think about with this", "Now one of them is how big a step size should I pick", "It could be any small number", "But one of the problems is  if I make it really small  it's", "going to take a long time to find the square root", "On the other hand  if I make it too large  I might skip", "over the answer without actually getting close enough", "Let's look at a couple of examples of that", "So I'm going to go in here", "And I'm arbitrarily going to change this from epsilon", "square to I'm going to take it as a step of", "I don't know", "And I evaluate that", "And I run it", "In this case  I get lucky  because I actually got to the", "right point and I got it in", "But if I go back over here and  I don't know  I make this", "a really big step size and I run it  it says  I don't find", "it after   guesses", "OK  so if the step size is too big  I might skip right by it", "So let's go back over here", "And we'll make this now go back to being epsilon squared", "It will actually just make life a little easier as we", "look for it", "OK  let's try a different number here", "So we saw I could find the solution", "for   pretty quickly", "Let's try something different", "Let's make x  oh  I don't know  something big", "And let's try running that", "Oh  it took a little while", "It took  what is that  about a little over a million guesses", "But it found a pretty good solution to it", "It's found that that's close to the square root of", "So what does this say", "Well  it says  if we go back over here  in general  it's", "going to take x over whatever the step size number of times", "through the code to find a solution", "And you can see that tradeoff", "If I want it to be fast  then I'd like to make the step size", "large  because that will make this smaller", "But if I do that  I might miss the answer", "So I'd like to find a more efficient way to actually", "solve this problem", "And we're going to do that in the next sequence"], "Zu0qEdz4Tq8": ["SPEAKER    So we now have this notion of iterative", "algorithms", "Very powerful tool  thinking of things in terms of loops is", "a natural way of thinking of problems", "But there's another way of thinking about problems  and", "let's go back to that idea of doing multiplication by", "successive additions", "Here's a different way of thinking about this", "computation", "This basically says  a times b   well  that's the same as", "taking b copies of a and adding them together", "But I could also think of that as saying  that's the same as", "taking a and adding it to whatever I get by doing that", "accumulation of b minus   copies of a", "Now you're going  oh come on  this is pretty simple", "You're just playing games here", "But I'm not", "It's a really important point here", "I have just reduced this problem to a simple operation", "and a simpler version of the same problem", "And in fact  what is this piece here  that is exactly", "the same as a times b minus", "Ah ha", "That's a simpler version of the same problem", "I've now thought recursively", "Sounds like a highfalutin term", "It's really not", "It says  I have taken a problem  and I've essentially", "said  let me reduce this problem to a simpler or easier", "version of the same problem  plus some operations", "I know how to do", "And so I've reduced the idea of multiplying a times b into", "a simpler problem", "Add a to whatever I get by multiplying a times b minus", "OK", "That sounds nice  but what does it really mean", "Well as I said  this is an idea of a recursive algorithm", "And what we do when we think about something recursively", "is we do two things", "We first say  how can we reduce this problem to a", "simpler or smaller version of the same problem together with", "some operations I know how to do", "And that's what we call the recursive step", "We just saw that", "Of course we can't keep unwinding that", "Eventually we've got to stop  we've got to ground it out", "And that's the second piece", "And the second piece is  we're going to keep thinking about", "how do we reduce this until we reach a case that is simple", "enough we can just solve it directly", "We call that the base case", "We don't have to do it in this order  we can", "do it either way", "We can think about  what's the base case and what's the", "recursive step", "But these two pieces are important", "In my case of thinking about multiplication", "then  what do I have", "What's the base case", "I got a couple of choices  but an easy one would be to say", "if b is equal to    then a times   is just a", "So my base case is really straightforward", "If b is equal to    I'm done", "Otherwise  a recursive case is what I just said", "I'm going to reduce a Mul b into a plus a Mul b minus", "OK", "You're being a little skeptical  I'm", "sure  saying  so what", "So you've played some games here", "But I've just described a wonderful algorithm for a", "different way of thinking about this computation", "Because I could capture this in a recursive algorithm", "And let's do it", "Here's the code for a recursive version of", "multiplication", "And notice it just nicely matches what I just described", "This says given two values  a value for a and a value for b", "check to see if b is equal to", "That's my base case", "There it is  right there  base case", "And if it is  just return the value of a", "Simple computation", "Otherwise  I'm going to call the same function with a", "simpler argument", "We could do recursive Mul again on a and b minus    and", "when that computation is done  it's going to get me back a", "value  and I'm going to return that value added to a", "And there's my recursive step", "Nice  simple code", "Let's check it out  make sure it does the right thing", "I go over to idle  I've got a definition of that right here", "and I load it up", "And let's try the same thing", "So if I do recurMul", "if I can type  which I will", "Mul three and five", "OK  and if I do recurMul on   and    it's giving me back", "the same answer", "And notice it's also giving me an answer", "Which may be worrying you as you look at this", "definition of the code", "So in the next segment  let's look to see why does this do", "what it does", "But the key thing to see here is this idea that given a", "computation  I'm going to break it down into a simpler", "version of the same computation  plus some things", "I know how to do  and I'm going to keep unwinding that", "computation until I get to a base case", "something I can solve directly", "We'll do that in the next segment"], "g4uT2pXnwxc": ["ERIC GRIMSON  We've been talking about recipes", "mechanical process  how to methods for capturing ways of", "getting the computer to do something for us", "Now we can ask the question how do we actually get that", "recipe into a mechanical process", "inside of the computer", "What kind of things will we need to have the computer do", "that work for us  do that little Heron of Alexandria", "algorithm for computing square roots", "We actually got a couple of choices here", "First one is we could build a machine specifically to", "compute square roots", "It might sound odd", "We probably don't need something quite that", "particular", "But in fact early computers were exactly this", "They were instances of what were called", "fixed program computers", "And a fixed program computer was something that did a", "specific calculation and was designed to do exactly that", "In fact you've seen a fixed program computer", "A calculator is exactly that", "It does a set of arithmetic computation", "That's all it does", "It could be more complicated", "In fact some of the early computers were", "Atanasoff and Berry in   built a computer for solving", "systems of linear equations", "And even despite the fact that the technology wasn't quite as", "sophisticated as it is today  it did quite", "well at doing that", "During the war  Alan Turing  one of the most famous", "computer scientists  built what was called the bombe", "which was used to decode Enigma codes during World War", "II  again  a computer built specifically for that purpose", "but solving a very complex task", "The problem with a fixed program computer is that it", "does only that thing it was designed to do", "What we'd really like is a computer they can do anything", "we tell it to do", "And for that  we want a machine that can both store", "and manipulate sequences of instructions", "And those are called stored program computers", "And that's what almost every modern computer is", "It's a stored program computer", "So what does that say", "What does it mean", "Well  the idea behind a stored program computer is that we", "can take a sequence of instructions   we're going to", "talk in a second about how we create them   but a sequence", "of instructions  think of it as a program  that is going to", "capture the steps of our algorithm in order", "And we're going to be able to input that sequence of", "instructions inside the computer", "That sequence of instructions will be built from a", "predefined set of primitives", "Ah  that goes back to what we talked about earlier", "In most cases  those primitives will be very simple", "things  simple arithmetic  simple logic  simple tests on", "both numbers and characters  and the ability to move data", "around inside of the machine", "Very primitive operations", "We're going to see how to use those in a clever way  but", "that sequence of instructions is what we're going to read", "into the computer and store there", "Once we've done that  then inside the computer there will", "be a special program called an interpreter", "And that program basically walks through those sequences", "of instructions in order  executing each one in turn", "It's going to use the tests to change the flow of control", "through the sequence and to decide when to", "stop once we're done", "But it's going to simply execute a very simple set of", "instructions", "So the idea is we can read or load the", "instructions in the computer", "We might be able to change them around", "And then we can ask the computer to start at the", "beginning and walk through the sequence executing some", "computation", "Let's look at that in a bit more detail", "So here's a simple architecture for a computer", "It's got a memory", "It's got what's called an ALU or an arithmetic logic unit", "which is going to do those primitive operations for us", "And it's got a control unit that keeps track of where", "things are and asks the ALU to do work", "So when we read in some code  a program  it's basically", "going to create a set of instructions", "up here in the memory", "And inside the control unit  there's a special thing called", "a program counter that initially points to the first", "instruction in that sequence", "When we ask the program to run  when we ask the", "interpreter to execute the program  it starts by going to", "that instruction and executing it", "And that instruction will typically be something that", "takes some value out of memory  runs it into the ALU", "does some computation  and stores it back in memory", "Having done that  the program counter increases by    which", "means it goes to the next instruction", "And it executes that instruction which  again", "typically will be to take some values in memory  run them", "through ALU  do a simple computation  and", "store them back here", "And it simply keeps doing that  moving through the", "sequence of instructions   at a time  doing those very", "simple arithmetic and logic kinds of computations", "Every once in a while  it'll get to an", "instruction that is the test", "It's going to compare a number  to see if it's greater", "than     for example  or compare a character", "But it's going to do a simple test", "If that test turns out to be true  that test is going to", "actually change the program counter  causing the system to", "jump back to or jump forward to some other place in the", "code  changing where we are in the code", "And it's going to keep doing that", "And it will do that until  in fact  it reaches a point where", "it says  I'm done  at which point it will output the", "result here", "Those are the basic elements of a computer  a control unit", "here that has us follow through a sequence of", "instructions up here  causing data to flow through the ALU", "and back into memory  and occasionally using tests to", "jump around in the code", "And we're going to see very shortly how to start building", "up programs to do exactly that", "But that's what the computer does", "OK  that sounds neat", "So what are the primitives", "Essentially says if we can have a stored program computer", "we need to set a primitives", "We're going to need some way of controlling them  which", "we'll get to  but what are the primitives", "Well  it turns out that same guy  Alan Turing  showed that", "using just   primitives it's possible to compute anything", "that's computable", "That's amazing", "simple primitives are sufficient to compute anything", "that's computable", "And in fact we refer to that property as saying that any", "computer  any interpreter that has that property is what we", "call Turing complete  which by the way says anything you", "compute in   programming language you can compute in", "any other programming language", "Now having only   primitive sounds cool  but it also", "sounds like  man  if I've got to program everything by", "reducing it down to some really larger sequence of", "primitive operations  this is going to be a serious pain in", "some parts of the anatomy", "And it is", "So  fortunately  modern programming languages have a", "more convenient set of primitives", "And in the next lecture sequence  we're going to start", "talking about what those are in Python  the language we're", "going to use", "Not only do we have a more convenient set of primitives", "but a key thing a programming language will have is some way", "of being able to abstract methods  that is  take a", "description  that sequence of code that we've written  and", "use it to create a new primitive  thereby adding to", "the set of primitives that the system can use", "But nonetheless  as we've seen  just starting from", "primitives  we can build up an entire array of computation", "And anything computable in one language is going to be", "computable in any other programming language", "And that's amazing"], "EE910ZBFlCg": ["ERIC GRIMSON  We just showed you a recursive algorithm", "You may be a little worried about it", "You may be going  OK  but how does it know which values of", "the variables to use", "Because I'm not seeing any explicit", "changes to those values", "How does it make sure it really stops", "Why doesn't it just keep unwinding", "Didn't your high school geometry teacher never to use", "definitions where you defined a term in terms of itself", "Good news is not to worry", "And we've got a tool to help us understand that", "Let's go back and simply look at a simple call to recurMul", "recursive multiplication  using that set of environments", "to see how computation flows", "So here's my code  I've just got a copy of it here", "And in particular  if I evaluate this  or load this if", "you like  into a Python environment  a shell  we know", "what's going to happen", "Which is we're going to create a frame over here  in which", "that name  recurMul  is bound to a procedure object", "And it's got inside of it both the parameter list and the", "body  the set of things it's supposed to do", "OK  let's see what would happen if we", "actually called it", "So let's call it", "Calling it says  I am going to evaluate this", "expression down here", "And I'm going to first get the value of recurMul", "I know what that is", "It's given by that pointer there", "It's a procedure object", "And so I know that calling it says I'm going to create a new", "environment", "It's going to inherit  or have as a parent  the same", "environment that the procedure has  the environment that was", "in place when we defined the procedure", "So it was going to point to that frame", "And inside of there  first I'm going to get the values of", "these two expressions  and I'm going to then bind the", "parameters of the procedure to those values", "All right", "I'm saying it in a long winded way  but", "you've seen this before", "We've now created a new environment in which a is", "bound to   and b is bound to", "And relative to that environment we're going to", "evaluate the body of this procedure", "OK", "Let's start evaluating the body", "The body says is b equal to", "No it isn't", "It's", "So it's going to go to the else clause", "And the else clause says  I'm going to return a value", "Great", "I'm going to get a value back", "And it says the value is going to be the value of a", "Remember I'm doing it relative to this frame here so I know", "the value of a", "It's", "And I'm going to add to a the value of the recursive call", "another call to recurMul  with different arguments", "Now think of this very straightforwardly", "This is Python", "This is an interpreter", "That's an expression", "It says to get the value of that expression  what do I", "need to do", "You need to get the value of recurMul  oh", "that's it up here", "OK", "Now  I need to get the value of a", "And remember I'm doing it all with respect to this  and in", "fact I should have done that better", "To get the value of recurMul with respect to this", "environment  I'm going to go up and find it there since", "it's not bound down here", "I need to get the value of a", "There it is", "And I need to get the value of b minus", "Well that's easy", "There's b  and subtract   from it", "And since recurMul is a procedure  what", "am I going to do", "I'm going to create a new frame", "Cool", "That's exactly what I want", "Because now I've got a computation that's taking", "place with respect to this frame", "And how did I set that up", "Well I got the value of a", "I got the value of b minus   from here", "I've bound those in this procedure because that's what", "it tells me to do", "And I'm now saying  evaluate this procedure in this frame", "Remember  when I get the value of this I'm going to give it", "back to this frame to complete that addition", "But I've now reduced this to simpler computation", "Notice something else really nice", "You may have been saying  well  how do I keep track of", "my iteration variable", "It's not really iteration  it's recursion", "But notice I've reduced b", "And that's exactly what's going to happen", "I'm going to keep unwinding this computation until I", "ground that out", "OK", "We're now in pretty good shape", "Because what do we want to do", "It says I need to get the value of this procedure  this", "body  this body here  with respect to this environment", "What do I do", "Well  let's say is b in this environment equal to", "No it is not", "So I'm going to return the value of a from this", "environment  which is right there  to", "another procedure call", "I'm doing another procedure call on recurMul", "What do I do", "From here  I get the value of recurMul", "And I trace up that chain to say  there it", "is  it's that procedure", "I need to get the value of a in this environment", "That's easy", "And I need to get b minus   in this environment", "Well  that's easy  as well", "B here is    I subtract    and that leads naturally to yet", "another recursive call", "Now  you're going to be glad I only did this with   and", "and not   and", "But you get the idea", "I am now evaluating the body of this procedure with respect", "to this environment", "What do I do", "I say  OK  is b equal to", "Thank God  it is", "But if b is equal to    what do I do", "I return the value of a from this environment", "So that computation gives me back a", "That's really nice", "Because what does that say", "It says  gee  here's where I am", "I'm now returning the value of a because I was in that", "recursive call", "It says the value of this recursive call is", "I'm going to give it back to the place that was waiting for", "it  which was up here", "And what was I doing", "I was waiting to get the recursive value", "I want to add that to a", "So the   is returned", "It gets passed back up here", "It gets added to that a", "Those two pieces come to there", "And what was that doing", "That was saying  give me a return of those two values to", "the computation that was waiting here", "So  in fact  the   and the   get added", "together to give me", "And what was that doing", "It says  I'm now done because that procedure said return", "that value as the overall value", "And that's going to get passed back up as the final value", "Cool", "A little slow in our computation but really cool", "And  in particular  let's see what we can deduce from this", "Each recursive call of a function creates its own", "environment  with a local scoping of variables", "So evaluating the body of the function in that environment", "is going to be very clear as to which value of a and b it's", "using  or any other variable that it's using", "Secondly  the bindings for variables in", "each frame are distinct", "And you saw that", "I had a different frame for each one of them", "And those bindings are not changed when we're doing the", "recursive call", "They are set up as we make the call", "That is  I'm going to compute a new value of b  making it in", "this case b minus    in order to bind it in the frame", "But I'm not changing bindings in other frames when I'm", "within one frame", "I don't have access to them", "And finally we can see that the flow of control can", "naturally pass back to an earlier frame once the", "function call returns its value", "So  finally  you can also see that inherently this recursive", "call to a function  if done right  has the equivalent of", "reducing a state variable", "We saw how each instance  each frame  had a different value", "of b  that got smaller and smaller until we got down to", "the base case", "So we know that this is  in fact  going to ground out", "It's going to complete its computation", "That's great", "So hopefully this gives you a better sense of how  in fact", "the rules of evaluation allow a recursive thinking of a", "problem to create a very nice version of the code"], "jGQZlWWXBQQ": ["ERIC GRIMSON  Welcome to the    x  often referred to as", "the introduction to computer science and programming", "It's odd to have both of those terms in the title  but both", "of them are important", "This course is going to be not just about teaching you how to", "program a computer  how to tell the computer instructions", "that it can understand", "It's also going to be really important to create within you", "a capability to think computationally", "So our goal is to let you become skillful at not only", "getting the computer to do something  but to do that", "thing that you want it to  to get it to solve a problem", "By the end of this course  we hope that your first instinct", "when faced with any interesting challenge is to", "first think about how could I capture that challenge  that", "problem in an algorithmic or mechanical description of", "steps such that I could get the computer to do", "the work for me", "If you can do that  it's going to give you a great deal of", "advantage as you face any kind of problem", "And those are the skills that you're going to see throughout", "this course", "Now if our goal is to have you learn how to get a computer to", "do something for you  how to talk to the computer  how to", "think algorithmically", "of the questions we can ask is  so what's the computer", "going to do for us", "What's it actually good at", "That seems like probably an odd question", "After all  we know computers could do a ton of things", "But it's still important to go back to a very fundamental and", "basic point", "What does a computer do", "In fact it does   things and   things only", "It performs some calculations  and it remembers results so", "that it can reuse them", "Now you'd say  OK  so it performs calculations", "That seems fine", "But what kinds of calculations", "Well  it turns out that every computer comes with a simple", "set of primitive calculations  things that we call built in", "They're provided by the manufacturer as the basic", "elements that a computer could use", "We'll see some examples of that shortly", "If that's all we have  that's pretty limiting", "So a key thing  as we go through the material in this", "course  is to learn how we can create our own methods for", "computing something  how we can capture the computational", "way of thinking about something in a manner that", "could be used by the computer  and to do it in a way whereby", "the computer can abstract that", "By that we mean that the computer can figure out how to", "take what you tell it and turn it into something that it can", "now treat as if it were a primitive  something that was", "provided by the manufacturer  and reuse that throughout its", "computations", "So our computers are going to do calculations for us  using", "a set of built in primitives  plus things that we add", "Now you might ask  gee  is that enough", "If it turns out that a computer can just perform", "primitives calculations  it's not sufficient", "Well  as I'm sure you already realize  modern computers can", "perform most calculations incredibly quickly", "And so one question is if we can do them fast enough is", "that sufficient to do interesting things", "Let's look at both parts of that", "First of all  how quickly does a modern", "computer actually run", "Well  let me give you a simple little thought example", "If I were to take a little gooseneck lamp and put it", "right here  a foot above my desk  and I were to time", "things perfectly so that as I hit the switch on the lamp I", "hit a key on my computer and started them both up at", "exactly the same time  in the length of time it takes the", "light to go from the lamp to the desk your computer will", "execute two operations", "That's amazing", "It does two operations  two of those primitive operations in", "the amount of time it takes light to go basically a foot", "Unbelievable", "Here's another way of thinking about it", "Imagine I take a simple child's rubber ball and I", "suspend it about a meter off the ground and I drop it", "If I let it drop  by the time it hits the ground  assuming", "gravity behaves normally  your computer will have executed", "operations", "Unbelievable", "operations by the time that", "ball hits the ground", "Now  that suggests that in fact these computers are", "incredibly fast", "And even though they're computing very simple things", "they're doing incredibly quickly", "They are", "We say computers do simple operations", "We also said that they have some storage", "So how big is the storage inside of a computer", "Well  every element of storage is called a byte", "And if we were to assume that a byte weighed   ounce", "I know bytes don't really weigh ounces  but assume they", "weigh   ounce", "A typical computer has hundreds of", "gigabytes of storage", "And that says if each one of those bytes weighs   ounce a", "computer would be able to store the equivalent of", "tons of storage", "OK", "They don't really store it that way", "But you get the idea", "Incredible amount of storage  can remember a lot of things", "and incredibly quick in terms of doing the computation", "So  that sounds really good", "The question is if they're only primitive operations is", "that enough", "Are these simple calculations sufficient", "Well  they're going to do a lot as we see", "But we're also going to see that they're not quite enough", "to do everything we'd like", "Let me give you   examples", "I'm sure all of you have gone to the World Wide Web to look", "up a piece of information", "You've searched the web to try and find things that you'd", "like to know about", "The question is if a computer is just doing this the", "straightforward way how quickly would", "it search the web", "Well  it turns out there are about", "searchable pages on the web at the moment", "If we assume that it takes about     words  or there", "are about     words per page", "Some  of course  are much more than that  some of less  but", "about a thousand words per page", "And just for sake of argument  we're going to assume it takes", "about   operations per word to find the word on the page", "and to decide it's the right thing", "is actually high", "Let's make it a little less", "Let's just assume it's only   operations per word", "How long does it take to actually execute that search", "Well  we can do the math", "You can grind it through", "You have         pages", "You have that many operations", "You know how quickly we're doing these actual operations", "If you put it all together  what you find is it's going to", "take you about     days to find something on the web", "That's a slow browser", "That's not going to work very well", "And that basically is giving us a hint that even with", "really fast computers we have to be smarter", "Let me give you a second example", "Playing chess  something that's seen as a very", "difficult task", "It's impressive that about   or   years ago a computer", "program actually beat the world", "champion in a chess match", "And   of the questions is  well  OK  is it just because", "the computers are really fast", "Well  we can look at this two ways", "In a typical chess game  there are about", "moves at any one time", "And so the question you could ask is to say  OK  if I want", "to have my computer program look ahead   moves    moves by", "me    moves by my opponent  how many different options are", "there if there are about   moves each", "And the answer is about     billion different sets of the", "chess board that I'd have to look at", "If I can check each move out in about   operations per", "move  then that says it's going to take me about a half", "hour to actually look at each move", "That's pretty slow", "And this is pointing to a problem that", "we want to get at", "And the problem is that  yes  computers are really fast  but", "we need good algorithmic design as well", "To deal with interesting problems  we need algorithms", "that are clever  are intelligent  are smart about", "how they actually do the work", "And that's a lot of what we're going to talk about this", "during this term", "By the way  we also said space was a big issue", "And we got a lot of space in the computer", "If you go back to the chess example  you can ask the", "following question  How many different games", "are there in chess", "Experts will tell you there about     different chess", "games that are possible", "Is that too big for storing in your computer", "Well there are only     atoms in", "the observable universe", "So we can't just store away all the games", "and look them up", "And both of these are pointing to why we're going to use this", "course to actually learn about thinking algorithmically", "Now this suggests it's just a matter of putting together", "enough speed and enough smartness", "But one can be a little bit more distinct and say  are", "there actual limitations to what we", "can do with the computer", "And in fact despite its speed and its size and the", "cleverness of the algorithm  our computer still has some", "limitations", "Here are a couple of examples", "First of all  there are some problems that", "are just too complex", "We don't have enough speed  enough storage", "And they may get tackle as things improve", "But examples here would be things like predicting weather", "at a very local scale", "I'd love to know what's exactly going to happen", "outside my window for the next half hour or next", "hour or next   hours", "The size of the problem simply too big for a computer to be", "able to model well enough and solve in a", "reasonable amount of time", "It turns out some of these complex problems", "actually help us", "Modern cryptography  the way in which information is", "securely transmitted across the net  relies on having some", "problems that are simply too difficult to compute and", "therefore  too difficult to break the code", "So we actually get some benefits about the problems", "that are too complex", "But as we're also going to see later on the course  there are", "some problems that are just fundamentally impossible to", "compute no matter how big the computer is", "And some of those are really heavy", "Here is one example  being able to predict whether a", "piece of code will always stop with an answer for any input", "By that I don't mean just you run it and see if it stops", "being able to write a piece of code and then have some other", "piece of code inspect it to say  this will always work", "It will always stop  and it will always give us an answer", "This turns out to not be possible to solve", "And this is known as Turing's Halting Problem", "And we'll talk briefly about that later on in the term", "But it says that there are some problems that are simply", "too hard to solve period", "Nonetheless  in this course  we're going to start talking", "about how do we think algorithmically and get the", "computer to do interesting things for us"], "Q-rY8DIwYgg": ["The social standards on the discussion forum are going to", "vary from class to class", "But there are a few common trends", "First of all  before you start a new discussion  make sure", "that there is not already a thread talking about the issue", "that you wanted to address", "If you are trying to be polite in conventional conversation", "you wouldn't walk into a crowded room and expect", "everyone to repeat and summarize the conversations", "that had already taken place for your benefit", "Instead  you would listen to people talk  get an", "understanding of what has already been said  and then", "participate in context", "Similarly when you come into the discussion forum  you", "should search for what people are already saying and make", "sure that what you are saying fits in context", "Also  please bear in mind that the discussion forum contains", "people of many different educational backgrounds", "nationalities  races  genders  and sexual orientations", "We would love for you to get to know each other  but please", "keep your tone respectful", "We don't restrict access to the forum very often  but we", "do reserve that right for extreme cases of people who", "are causing the forums to become unuseful"], "NJ-Dw7uiitE": ["CHRIS TERMAN  Well  it seems like there should be lots of opportunities", "to improve the runtime of Fibonacci", "We seem to be computing the same subproblems again and again and again", "If I asked you to compute Fibonacci  would you compute fib", "three or four times", "No  you'd remember that you had computed it once before  and instead", "of recalculating  you'd use the previously computed answer", "Let's use that technique and see if we can capture it in code", "If a lot of our computation is devoted to answers to overlapping subproblems", "then we should be able to speed up the computation considerably by", "remembering previously computed answers", "So we have a function that's taking in a list of", "arguments  and we're asking", "have we computed it before", "And we can use a dictionary to help us build some code that will let us", "remember previously computed answers", "So for example  I'm going to start off with an empty dictionary  and I'm", "going to make that my cache for remembering", "previously computed answers", "So if I'm given a particular problem  a particular set of arguments  I can", "say  look  if the args are not in the cache  then what I need to do is to go", "off and compute the function and remember that answer in the cache", "I'm going to go off and compute my function  f  on the arguments that", "I've been given  and I'll remember that answer in the cache", "Now what I can do is basically say  let's go ahead and then return the", "cache to answer", "And so if I call a function with a problem that I've done before  the If", "statement is not True  and I simply return what I find in the cache", "If I call the function with a brand new set of arguments  then I basically", "update the cache to remember the answer with those arguments and then I", "can return the result", "Happily  Python makes it easy for us to implement this answer cache", "If we define a function definition and we use this interesting syntax  where", "we put a little star before the name of an argument  that will bind that", "particular argument to a tuple of the arguments to the calls", "So for example  if I had called f with the arguments       and    and this is", "my definition of f  inside the body of f  x would be equal to the", "tuple       and", "So it's a way of collecting up all the arguments and dealing", "with them as a list", "Similarly  there's a way of calling a function where we actually supply a", "list of arguments as a sequence  directly as a sequence rather than", "listing them out one at a time", "So for example  if x was equal to    and say  the string  hi   so that's in", "this case a tuple  then if I wrote f  x  and executed that  that would be", "the same as if I had called f with the argument   and  hi   And we can use", "these two language features to easily implement our cache of", "previously computed answers", "We're going to build a general purpose solution that will allow us to convert", "any function  for example  fib  into one that remembers its", "previously computed answers", "Memoize is a function that takes  as its argument  a function that we wish", "to memoize  and it returns a function", "So you can see  internal to memoize  there's a definition of what I'm going", "to call a wrapper function because  as you'll see in a moment  it wraps the", "original function definition f", "And it's that wrapper function is the function that I'm going to return", "Memoize is a function that takes a function as its argument and returns a", "function as its answer", "And here you can see what we've done is we've passed in fib as the", "argument  and we take whatever memoize returns and that becomes the new", "definition of the function fib", "There's one small technical complication", "Notice that the internal wrapper function here includes a reference to", "the function f", "The intent was that when memf runs  it will want to reference the function", "that was actually passed in as the same argument to memoize", "So this reference to the symbol f is resolved to be the value of the", "argument to memoize", "And that's fine when we're running internal to the memoize function", "because any reference to f would naturally refer to the argument", "However  if we're going to return this function as a result  Python has to do", "a little extra work for us", "And it does so by creating what's called a closure", "What it does is that when it bills the function object for memf  it includes", "inside of that a special dictionary that remembers the value of f at the", "time that this definition was created", "So at the time  we're inside of memoize  and we're going to create", "this definition of memf", "Python builds this closure and provides a little dictionary saying", "oh  by the way  just so you know  when you refer to f inside the body of", "memf  what we are expecting us to refer to   and now we'd include", "whatever function that was the argument to memoize  in this case", "fib  in our little example", "So this little combination of the function code and the dictionary", "telling us what the values are of all the variables that are not defined", "inside the body of memf  this is called a closure", "It's a very handy way for us to remember the environment in which we", "want memf to execute", "Now we can turn our attention to the actual operation of the wrapper", "function  memf", "We're using that special syntax that lets us capture the", "arguments as a tuple", "So the function that is actually being the new definition for fib is a", "version of the memf function with f bound to fib  so f is going to refer", "to fib in the function that memoize returns", "And that function goes off  and when you call it  the first thing it does", "is it gets the args as a tuple", "It then checks to see if that particular tuple is", "have we remembered that in the cache", "In other words  are we going to check the cache  the dictionary  to see if", "it has a key that corresponds to this particular tuple of arguments", "And if not  we're going to go off and call f and   in this case", "that will be fib", "using those arguments as the arguments to fib and remember the answer that", "comes back", "And in either case  we're going to end up returning the answer that's hiding", "inside of our cache of previously computed problems", "So after we've memoized fib  after we've executed the statement  the", "resulting fib first checks to see if the answer has been computed before", "And if not  it ends up having to call the original fib", "Otherwise  it will simply look into the cache and pull out the answer  and", "this should help greatly with the runtime", "Notice that we've chosen to save that cache as an attribute of the function", "object that gets created when we call memoize", "So by doing it that way  we'll be able to reach in after the function has", "been run for a while  after the memoize function is run  and pull out", "what's in the cache", "And that'll help us sort of see how the cache is working for us", "Let's watch this machinery in action", "Here's our definition of our memoize function", "It's been included as part of the lecture code", "So let's save this and try it out on Fibonacci", "So the first thing I'm going to do is to convert my original definition of", "Fibonacci into one that has the wrapper function included that will", "let us remember previously computed answers", "And we'll use those whenever possible", "So now if I go off and compute  say  fib      I get the", "same answer as before", "You can't really tell  but that was actually considerably faster", "Suppose we do fib", "You seem to be getting the answers almost instantaneously", "And  in fact  if we compute fib       that was the one that was running", "forever last time", "we notice that we get the answer almost right away", "Although  in the previous implementation  we would have had to", "done an astronomical number of calls to fib in order to compute fib", "In this case  we're only going to have to compute fib    and fib    and", "fib      so forth and so on  exactly once", "And after that  we'll be able to find the answer in our cache", "So gosh  that means I can probably ask for fibs of very large numbers  for", "instance  fib    which would have taken a century or two to compute in", "the unmemoized version of fib", "We get the answer right away", "And just for fun  let's do fib      which you can see would have taken", "several lifetimes of the universe to compute without the memoization"], "twvmnuMYTQk": ["ERIC GRIMSON  Now  we've seen recursive functions", "We've seen this idea of inductions  a way of showing that", "these functions work", "And we've seen this notion of recursion as breaking a problem down", "into a simpler version of the problem plus some other work", "We're going to use that tool a lot", "It's a powerful tool for taking complex problems and capturing them in", "a way that is easy to think about", "So let's look at some examples", "In the classic example to start with is to compute factorial", "Factorial in math is written as n followed by an exclamation point  said", "verbally as n bang", "And factorial is basically the product of the integers from   times   times", "all the way up to n", "How would we think about solving this recursively", "Well that's pretty straightforward  right", "I need a base case", "A simple case is if n is equal to", "multiplied by itself  or just   is", "That's simple", "To get the recursive case  let's use that same thinking", "To get the recursive case  what do I have", "I want a simpler version of the same problem", "In effect  right there that is n minus   factorial", "So recursively I would say if I can get n minus   factorial  then to get n", "factorial I'd simply take that value and multiply it by n", "And that gives me that reduction exactly like I saw before", "Fantastic", "There's a recursive definition factorial", "Let's capture it in some code", "And  in fact  to do it let's do both an iterative version", "and a recursive version", "So the iterative version of factorial has the form we'd expect", "I need some state variables", "One of them is going to be just the parameter n that I'm passing in", "And the other one I'm going to call result", "I need to keep track of the computation as I go along", "I'm going to set a result initially to   because I'm going to do successive", "multiplications", "And then the iterative version basically says if you start off with n", "that's bigger than my base case  or the stopping point  rather  what do I", "want to do", "I'm going to take my current value result  which is    multiply it by n", "and store it away", "And then I'm going to reduce n by", "There are those update equations that are updating the state variables", "I go around again  n is now one smaller", "And again  I take the current value result  which at this point was n", "I multiply it by the new value of n  which is n minus", "And I update it", "I reduce n by", "And I keep doing this", "And you can see that I want to start by taking n  n times n minus    n", "times n minus    and I'll keep doing that until I get down to a place where", "n is zero  in which case I stop and I return the result", "Great", "What about the factorial version recursively", "Well  factR is nice and crisp", "Here it is", "It just says  if n is equal to    if you're in the base case  just return", "that value", "Here I said return n  I could have said return    because I know it's", "going to be the same thing", "Otherwise  get the solution to a slightly smaller problem by just", "recursively calling factR  multiply it by n  and just return that result", "Beautiful code", "Nice and clean and crisp", "And you can see that it gives you a very clear sense", "of exactly the stages", "my base case  my recursive case", "My recursive case is a recursive call plus one other operation  which is to", "do multiplication", "Let's see if it does the right thing", "So in IDLE  I've got a version of both pieces of code  then let's try first", "theater diversion of factorial", "And just to be careful  let's make sure it does the right thing on the", "base case  or n is equal to", "If it does then let's give it the bigger one", "I happen to know that   times   times   ought to be", "So there we go", "And if I give something a little bit bigger  wow  it actually computes", "factorial of", "Pretty quickly", "What about recursive version", "Well let's test the same ones", "On   it does the right thing", "On   it does the right thing", "On   it does the right thing", "And you may notice this funny little form on the screen there where it's", "got an L at the end", "This is just telling us that Python's got such a big number  it's", "representing it in what's called a large format", "Don't worry about it", "It just says  I got a really big number", "I gave it back to you", "So we didn't look at stepping through it", "You can go do that", "But you can see that the recursive version stops  computes the right", "answer  and the code itself is nice and crisp", "OK  let's look at another example"], "WqKqfr_tX0Y": ["ERIC GRIMSON  So we've convinced ourselves that linear", "search really is linear", "It says using indirection  If I've got a list of elements  even if they're", "arbitrarily complex  because of indirection I can get to any element", "in constant time", "And therefore the search is linear because at worst  I've got to look at", "every element once", "Still kind of annoying if list is long", "So can I do better than O len L   or linear search for search", "Well  the answer is if I don't know anything about the values of the", "elements  no", "If they're arbitrary elements and I have no structure to the list  I'm", "going to have to look at every element at least once in the worst case  in", "order to determine that something's there", "So I'm stuck with this", "But in some cases I can do better", "And in particular  what if the list were ordered", "Suppose that the elements were sorted in ascending order", "Or a simple way to think about it is they're numbers  but they could be", "more complex things", "I've got some way of deciding how to order them in sequence", "In that case  I could improve things", "And here's a simple search algorithm", "It says given a list L and an element e  I'm going to walk through the list", "So for i going from   all the way up to the end of the list  and I'll check", "to see is the i th element equal to e", "If it is  I can stop and return True", "If it isn't I'll keep going", "But I can be clever", "In particular  if the i th element is greater than e  remember I said", "they're sorted in ascending order", "So if I get to a point in the list where that thing is bigger than the", "thing I'm looking for  I know it can't be in the rest of the list  because", "they're all bigger than that point", "So I can stop right there and return False", "If I get all the way through the list and I haven't found it  again I'll", "return False because it wasn't there", "Nice little trick", "What does it do to the complexity", "Well  it improves the average complexity  but it doesn't improve the", "worst case", "Because in the worst case  I still will go all the way through the loop", "until I get to this clause down here  and I return False", "But even though I haven't improved the complexity right here  I can use that", "idea in a slightly better way", "Notice what I did here is I used the idea that I knew the ordering of the", "list to be able to cut off some computation right there", "Once I got to a point where the element was bigger than the thing I'm", "looking for  I knew it wasn't in the last half of the list", "Let's use the same idea  but more effectively", "And in fact  we've already seen this idea when we did bisection search", "So we can use this idea of binary search much more effectively", "In particular  we would say the following", "Let's pick a point", "An index into the list that divides the list in half", "And let's ask right there  is that the thing I'm looking for", "If I am right  I'm done", "But if not  then I can ask the same question I just did before  which is", "is that element of the list either larger or smaller than e", "But depending on that answer  I can reduce the search", "So what this says is if I've got a big  long list here  I'm going to look", "at the middle element", "If it's the one I'm looking for  great  I'm done", "But let's assume that in fact  that middle element is bigger than the", "thing I'm looking for", "Then I can throw away this entire list  and focus on now just searching", "in this remaining list", "And I can do the same thing", "Let's look at the middle one of those and say  is that the", "thing I'm looking for", "If it's right  and if it is  great  I'm done", "If not  for example in this case  let's assume that that element is", "smaller than the thing I'm looking for", "Then I can throw away all of this portion of the list and refocus here", "We've seen this trick before", "We're going to narrow down the range of things we're looking for  cutting", "in half at each stage what we have to look at", "Then we're taking advantage of the ordering of the list here", "So this now is a new version of a divide and conquer algorithm", "I'm going to break up into smaller versions of the problem  a smaller", "list plus some simple operations  and the nice thing I know is that the", "answer to the smaller version is the answer to the original problem", "That is if I find the list or the element in a smaller list  that means", "I found it  and it was in the bigger list", "If I don't find it in the smaller list  it means it wasn't in the bigger", "list  and I'm done as well", "OK  let's build some code to do this", "Here is a very nice little algorithm for searching a list", "using binary search", "I've got an internal piece of code here that I'm going to use  and let's", "look at what that does", "It says basically  given a list  an element  and a low and a high point in", "that list  a low index and a high index  what am I going to do", "If high is equal to low  it says I've got a list of length", "So I just return the Boolean value of whether that element is the thing I'm", "looking for or not", "That's all I've got to do", "If  however  I don't have just   element in the list  I've got more", "than that  I'm going to find a midpoint", "And in particular  I'm going to calculate the midpoint by taking the", "value of the low end of the list  or low end of the range in the list  and", "the difference between high and low divided by", "So I'm taking the range that's left  cutting it in half  and adding it to", "the index of the starting point", "That gives me a new midpoint right there", "And then what do I do", "I check that point", "If it's what I'm looking for  I'm done", "Otherwise  I check to see is the value of the list bigger than the thing I'm", "looking for", "And if it is  I'm going to call recursively search again with the same", "low point  but a reduced high point", "And that was what I just diagrammed earlier", "It says if in fact the thing I'm looking for is less than the thing I", "just checked  I can throw away the entire right half of that list", "On the other hand  if it's less than  then I throw away the lower half of", "the list  and I compute a new low point", "And I just keep calling recursively until I either run out of things  or I", "find the thing I'm looking for", "To start this up  I'm going to check to make sure that in fact I have a non", "empty list", "If the list is empty  nothing's there  the element can't be in", "it  I return False", "Otherwise I'll call binary search", "Notice one little subtlety here", "I'm reducing midpoint by   there  and increasing midpoint by   there to make", "sure that I don't look at the same element every time", "It's a minor nuance  but it's going to improve things", "Here's my binary search", "It's cutting down the list in half at each stage by either taking the upper", "half or the lower half based on this test right here", "OK  I want to answer two questions", "The first one is does this actually work", "Does the recursion halt", "We've talked about this before when we talked about recursive functions  and", "I want to remind you a nice way to deal with this is to create what's", "called a decrementing function", "So what does that mean", "This is a function that maps the values of the formal parameters to a", "non negative integer", "In some sense  this is giving us the size of the problem", "And if I can find a decrementing function  something that says  given", "the values of the parameters  I will take those values and map it into an", "integer  that decrementing function has to have two other properties", "First is  when the value of that function is less than or equal to", "the recursion's going to terminate", "And the second one is  for each recursive call  the value of that", "function is strictly less than the value on entry to the", "instance of the function", "In other words  the decrementing function will have some value when I", "start the recursive call  and when I return from the", "recursive call  it's smaller", "Said very simply  this decrementing function should capture the size of", "the problem  and I want it to be the case that that function is smaller on", "the recursive call  and smaller on the next recursive call  and when it gets", "down to or below    the recursion terminates", "Again  a lot of words", "For this particular case  the function's very simple", "It's just high   low  right there", "high   low is telling us the range of the list still to be searched", "And let's check it out", "It's at least   the first time it's called", "OK  that's good", "So it's going to be something that's a non negative integer", "When it gets down to being exactly    when high is equal to low  oh  that", "said I have no recursive call  and I just return a value", "OK  so that's done", "And otherwise  what's happening", "Well  it's going to either halt or recursively call with the value halved", "each time because at each case  either high is decreased by half or low is", "increased by half  And so it's going to reduce the value in each time", "So by finding that decrementing function  I've just proved that my", "recursive procedure actually terminates", "Great", "So I've got something that does the search properly", "Again  another way of thinking about this is this is just the range left", "That's why I'm reducing it each time", "So I've got something that actually works", "What's the complexity", "Well  how many recursive calls are there", "Why do I ask that", "Well  we know that the work within each call is constant  which is doing", "an access to a list and comparing it  and we're doing some computations of", "some simple arithmetic values", "So  how many recursive calls do I have", "Well  that can be answered by saying how many times can I divide high   low", "in half before it reaches", "And why is that important", "high   low is the range of the problem left", "On each recursive call  I'm splitting it in half  and I'm splitting it in", "half  and I'm splitting it in half", "How many times can I keep splitting something in half until I get down to", "something that's basically of size", "And that  we already have seen before", "That's log", "Log base", "Basically  at each step  I'm dividing by", "So after log base   calls  I'm done", "So the complexity here is O log len L     and that's nice", "We know that's a very efficient algorithm", "So this is much better than linear is going as the log of linear"], "xP87Epe8_5Y": ["JOHN GUTTAG  Today we're going to be talking about plotting and about", "mortgages again", "I should say  as I look at my title slide it occurs to me that there's a", "certain ambiguity in the title", "I want to make it clear  this lecture is not about how the home loan", "industry plots to take advantage of potential homeowners", "In this segment  we will return to the mortgage example used a couple of", "lectures ago and create some plots designed to shed some light on", "ramifications of different kinds of mortgages", "Along the way  we'll learn a bit more about both plotting and classes", "As a reminder  let's look at the hierarchy of classes developed in the", "previous lecture", "At the bottom  even though I'll draw it at the top of the hierarchy  is", "class object", "The class upon which everything in Python is built", "We then looked at mortgage as a subclass of object", "This was an abstract class whose only purpose was to be", "included into other classes", "We then looked at a subclass of mortgage called fixed", "Another subclass of mortgage called two rate  captured the notion of a", "variable rate mortgage", "And a subclass of fixed as well  fixed with points", "One of the disappointing aspects of the lecture in which we introduced", "mortgages was that we use text to try to illustrate the behavior of the", "different types of mortgages", "But now we know better", "We know how to use plots  so we'll use those to do a better job of it", "We'll start by looking at a class called mortgage plots", "This class is an example of what's often called a mix in class", "Think of it as a class kind of like mixing Oreo cookies", "into your ice cream", "Up to now we've talked about classes as types and subclassing as a", "mechanism for defining subtypes", "So for example  you might say that fixed is a subtype of mortgage  and", "fixed with points a subclass of fixed", "This is indeed the primary use of classes in", "well organized Python programs", "Occasionally  however  it is convenient to use the class mechanism", "to bundle together a set of related functions that don't constitute a", "type  as we've done here", "I'll come back to the details of the class in a moment", "But first  let's look at how it's incorporated into our overall program", "Come over now and look at the code", "I've reproduced the code that you saw in the lecture on classes", "But I'm going to modify it now", "I'm going to use the multiple inheritance mechanism of Python to", "take mortgage and change it so that it not only incorporates object  but also", "incorporates the class we just looked at  mortgage plots", "Now if we think about what this means  we can go back to our previous class", "hierarchy  and we can think  OK  what we've done here is now mortgage not", "only uses objects  but it uses mortgage plots", "We call it multiple inheritance because mortgage now has two parents", "and inherits attributes from both object and mortgage plots", "We should be careful though  this is an inheritance graph  it's not a", "subtype graph  i e", "mortgage is a subtype of object but not a subtype of mortgage plots", "Multiple inheritance is sometimes useful but it can also be dangerous", "That's a terrible looking danger  let me write it again", "Danger", "Fortunately  there are some rules of thumb to help you stay out of trouble", "when using multiple inheritance", "Consider the case where class A has super classes B and C  It should feel", "comfortable to say that A is a subtype of at most one of B and C  The goal is", "to ensure that the two lines of code  class A B C  and class A C B  mean the", "same thing in the context of the program", "Roughly speaking  the guideline boils down to saying that if little a is an", "instance of A  the text A dot name  name is some method of class A  should", "resolve to the same attribute irrespective of the order in which the", "interpreter searches the name spaces associated with B and C  By", "convention  it is convenient to list the class that implements the", "supertype last as we've done over here for a class mortgage  as", "we look at the code", "Now let's go back and look at the code for mortgage plots", "When a figure contains multiple plots  it is useful to produce a key that", "identifies what each plot is intended to represent", "The methods in class mortgage plots use a form of pylab dot", "plot that does that", "So if we look at it over here what we'll see is that in addition to", "telling it what to plot  we're giving it a style", "Remember we looked at that last time", "That includes things like color and line type  or line style", "And a label  we have not looked at that before  which will be in the key", "We've made both the style and the label formal parameters to the", "function plot Payments", "We'll later see how those are used", "Each invocation of pylab dot plot uses the label keyword argument to", "associate a string with the plot produced by that invocation", "Recall by the way  that this and other keyword arguments must follow any", "format strings", "A key can then be added to a figure by executing the function pylab dot", "legend  open close  as we will see very soon", "All right  now let's look at two functions plotMortgages and", "compareMortgages that are used to actually generate interesting plots", "The function compareMortgages generates a list of different", "mortgages and simulates making a series of payments on each  as we saw", "in the earlier lecture", "It then calls plotMortgages to actually produce the plots", "So if we look at compareMortgages  it takes the principal amount  the years", "information about the rates  the variable rates  et cetera  and various", "kinds of things", "Nothing very different from what we saw in the previous lecture when we", "were testing our different kinds of mortgages", "The function plotMortgages is more interesting", "If we look at it  it takes as arguments morts", "kind of a bad name  but stands for", "it will be a list of mortgages", "and an amount", "Then as a constant styles here  which will be used to plot each mortgage in", "a different style", "So we have a blue line  a red dotted line  and a green dashed line", "We then start a figure called Payments", "Notice that Payments starts at", "And then we're also going to have Cost starting at one  which will also be", "used for figures", "So we start a figure called Payments", "We put a title on it  monthly payments of different  et cetera", "Label the x and y axes  as we're supposed to", "We then go to a new figure called Cost", "I could have written   and   by the way", "But I thought by calling them Payments and Cost  it would help me keep", "straight in my head what each figure was supposed to represent", "Then it gets a title and labels", "Going on to look at the rest of that function  we then look at each", "mortgage for i in range len of morts", "We create a figure called payments  a payments figure", "Plot the payments", "We then go to the cost figure  plot the total paid or the cost", "Notice that each time we do that  we pass in an style sub i", "And it's this i", "And what that's telling us is that for each mortgage in morts will get a", "different style", "The other thing you haven't seen before  we have the Legend command", "You can do it with just open close  in which case it will be put in the", "default location", "Just to show you don't have to  I said I want this figure", "in the upper center", "And I want this figure as well  now I'm saying I don't know what's best", "I'm going to let PyLab figure it out for me  put it wherever", "it thinks is best", "OK  now let's look at what happens when we call these functions", "I'm now going back to the code", "This invocation of compareMortgages should shed some light on various", "types of mortgages", "Let's see what happens when we run it", "Eww", "Let's put in pylab dot show  because otherwise we won't see anything", "Uh oh  something's gone wrong", "In fact  this was not something that I intended to go wrong", "Let's look at it and see if we can figure it out", "Ah  phooey  Object with a capital O  We know better than that", "Object should have a lower case", "So let's go back to where we were playing with it", "It should be in the class mortgage", "And let's just make that a lowercase o", "Should've known I was in trouble when it didn't turn that fuchsia color when", "I typed it the first time", "And now  hopefully  we'll run it and we'll get some plots", "I feel better", "OK  so let's look at them", "So the first plot we have here shows the monthly payment of different kinds", "of mortgages", "Notice that the key has appeared in the upper middle as I asked it to", "Maybe that wasn't so smart because you'll notice that it's obscuring part", "of this plot here", "Still  I should fix it", "And next time I run this I will", "Maybe I'll just let best  and let Python figure it out for me", "OK  what this plot makes clear is how the different mortgage", "payments vary over time", "We see that the fixed doesn't vary  the fixed with points doesn't vary", "But of course  the mortgage with two rates varies quite dramatically", "It doesn't tell us much about which is the better mortgage", "But perhaps this figure will", "Look at Python  it cleverly put the legend where it's out of the way", "So what this tells us is that over the long haul  the winner seems to be the", "fixed with points", "Down here  if I hold on to the mortgage for   months  I save a fair", "amount of money with this mortgage over the other two", "But suppose I don't think I want to hold it   months", "Suppose I think I'm going to sell my house in   months  or   months", "Well remember we have the Zoom button", "We can now go and look down here at the lower part of it and see it in", "much more detail", "And then we notice  well  depending upon how long I want to wait", "different mortgages have different values  and they cross over at", "different places", "Looking at where the curves cross suggests that if one plans on holding", "the mortgage for a very short period of time  the winner is going to be the", "variable rate", "Somewhere out here around say  maybe      months  these curves cross and", "now the fixed with points becomes the winner", "If one is not interested in a variable rate mortgage  then we can look at", "this crossing point here  which tells us when we pay off the points", "All in all  I'm not going to recommend a mortgage to you", "But if you happen to be in the market you might want to use the software to", "look at which mortgages will work best for you"], "yml22-pGOc4": ["FREDO DURAND  Hi", "My name is Fredo Durand", "I'm a professor at the Massachusetts Institute of Technology in Electrical", "Engineering and Computer Science  and my area of research is  D computer", "graphics  as well as a new field called computational photography where", "we develop new algorithms that allows us to extract more visual information", "from the world", "For example  we just developed a technique that allows us to reveal", "very small changes that are invisible to the naked eye", "Many scenes around us  like the ones portrayed in these videos  look", "static  but contain very tiny variations  small motion and small", "color changes", "We use computation to make them visible", "We take a standard video as input  and for each pixel  we analyze the color", "variation over time", "This is time  this is my color value  and if my input signal varies a tiny", "little bit like this  we amplify this variation  which gives us a much", "bigger variation for this pixel", "Then we look at the pixel back in the video  and we do this for every single", "pixel  which gives us the output video", "This example  it reveals the very small redness variation due to blood", "flowing through a face", "With each heartbeat  blood is pumped to the face  which makes it a tiny", "little bit redder", "This is usually invisible to the eyes  but our method can reveal it", "Further  we can analyze the frequencies of the signal using a tool", "such as the Fourier transform  which for each frequency in Hertz gives us", "the amount of energy in the signal", "So in this case  it would be something like this  and typically there would", "be a big spike somewhere which can give us the heart rate of the person", "in beats per minute", "We perform tests at a hospital  and the method proved as reliable as", "standard electronic heart monitors", "The method can also reveal small motion such as the", "pulsing of an artery", "Even when they appear static  our eyes are constantly moving a tiny little", "bit  as revealed in this high speed video process using our technique", "We can reveal tiny vibrations  such as those goes by the shutter of a camera", "while taking pictures  as shown here  again  using high speed", "videos and our technique", "Mechanical structures such as this crane sway in the wind  and we can", "make this a lot more visible using our computation", "You can try it yourself since we made our code available on the internet", "In a different project  we downloaded a large number of photos from the", "internet of the same scene", "These photos might have different viewpoints", "They probably have different illuminations as well", "We then register these images in  D automatically  which means that we", "compute normally the  D structure of the scene  but also the viewpoint of", "every single one of the images", "We then leverage the natural lighting variation  as well as the", "correspondence between the images to decompose them into their illumination", "component and the intrinsic color of each object  regardless of the", "accidental illumination", "We can then use the  D structure that we have computed in order to provide", "much better interpolation between images  as you can see here", "We can then use all the composition into lighting and color in order to", "change the illumination in the input images", "Now  we make them all have the same illumination", "This allows us to create  D transitions where all the images have", "the same illumination", "They're now synthetic images  because the lighting was different when they", "were actually captured", "We can also generate synthetic time lapse by varying the illumination of a", "given image by transferring the illumination from other images", "We now show results in a different scene  a little village in Italy", "See how the  D structure we have computed makes for very seamless", "transitions  and you notice the  D geometry of the scene", "We can also transfer the illumination to generate new images where all the", "viewpoints have the same illumination even though our input images have", "different illumination", "We can also generate a synthetic time lapse sequence", "Only one of these images is a real image", "All the other images have been synthetically generated by combining", "the illumination of one image with the reflectance of another image", "We also work on the capture of four dimensional light fields", "Wait  four dimensions", "That's a lot of dimensions", "What does it even mean to have four dimensions", "We want to capture real scenes in the world in all their", "three dimensional glory", "For this  we seek to record every single light ray that leaves the", "scene  and it turns out that light rays have four dimensions", "You need two dimensions to encode the intersection with a given plane in  D", "In addition to the intersection with the plane  you'll also need to encode", "the direction of the light ray as given by two angles", "Here you go", "You have two angles plus two dimensions on the plane", "This is a four dimensional data structure", "Now  how can we use a regular camera to record all these lights rays", "Well  I will let my grad student  Abe Davis  tell you about it", "ABE DAVIS  We present a new technique for capturing and rendering", "unstructured light fields with commodity hardware", "To capture a light field with our technique  the user simply waves a", "hand held camera around the subject they wish to capture", "As they do this  our system's user interface guides their motion of the", "camera towards undersampled parts of the light field  automatically", "recording new images whenever the camera is presented with a new", "perspective of the subject", "To display the captured light fields  we present a new algorithm for", "rendering from unstructured sets of images that scales to larger data sets", "than previous techniques and produces fewer artifacts", "This light field has   images and took just two minutes to capture", "In addition to being inexpensive and easy to use  our technique is", "extremely robust", "We consistently produce high quality light fields for a large variety of", "scenes that are traditionally considered difficult  including human", "subjects and very specular objects", "Here we show four outdoor light fields captured at different scales", "Here we show nine light fields all captured with a simple web camera", "attached by USB to a laptop computer", "This   image light field was the first light field captured by a user", "who had never tried our software before", "At the time of this video  we've captured literally hundreds of light", "fields using our technique", "Our system is cheap  easy to use  and it consistently", "produces compelling results", "We hope that with our work  a much larger community of users will be able", "to capture light fields in the wild", "FREDO DURAND  Let me say a few words about a class I teach at MIT", "It's not offered yet on edX  but you can have a look at my web page if", "you're interested", "The class is about computational photography  and students learn", "algorithms that are involved in creating  editing", "and enhancing images", "All the programming is done in Python  so that means that you're already", "well equipped to do most of this work", "In this class  we learn about high dynamic range imaging  which allows us", "to deal with difficult scenes like this one where the contrast is way too", "high and parts of it are underexposed while other parts over overexposed", "For this  we use multiple exposures", "For example  we use an overexposed image  a normally exposed image  and", "an underexposed image", "We then use an algorithm which we implement in Python", "And you can see that it's not so much Python code", "I'm sure you've implemented longer programs already", "This code first merges all the exposures  and then it computes a tone", "mapping which outputs this image here where everything is nicely visible", "We learn about panorama stitching where we automatically compute the", "correspondences between images and stitch them together in a seamless", "wide angled panorama", "I teach non photo realistic rendering where we start from a normal", "photograph as input  and then we simulate brush strokes using random", "number generators pretty much the same you've used for Monte Carlo", "simulation  and then we obtain the following painterly rendering", "We also implement morphing  which is a very useful technique if you need to", "transform a professor into a werewolf", "The class is      Computational Photography", "It deals with many other exciting topics  and I hope", "you'll check it out", "Thank you for watching today"], "-4Uvn-JUksI": ["SPEAKER    Now  as we've said  once we've got iterative algorithms  it", "gives us a lot more things we can do than just simple arithmetic", "We can repeat that sequence of steps some multiple number of times based on", "a decision", "And this leads to a whole new class of algorithms", "Bunch of things that are going to be really valuable to us", "One really useful example of an algorithm is what's often called a", "guess and check method  where we iterate through guessing different", "answers to a problem we're trying to solve  and then checking to see if", "we've got the right one", "We've actually seen an example of this earlier on", "Where was that", "Well  remember when we talked about our declarative", "definition of square root", "We said we had a definition of square root and if somebody gave us a good", "guess for a square root of a number we could use that definition to check it", "So if we got a good guess we could check to see if that guess word was", "equal to x  the thing we're trying to find", "All we need is a good way to generate guesses", "Well  OK  let's think about that", "Could we do it", "The answer is sure", "And  in fact  we're going to do it with a slightly different example", "We're going to do it by finding cube roots", "Just to do something a little different", "Same idea would work with square roots", "So one way that we could use this idea of generating guesses in order to", "find  say  the cube root of some number x", "Let's assume  just make life a little easier  that x is an integer", "So we're trying to find a cube root of a perfect cube", "We could try zero cubed", "Then one cubed  then two cubed  then three cubed  and keep going until we", "get to some place where k cubed is bigger than x", "Once that's the case  we know we've gone too far  and if we haven't found", "something we're done", "The nice thing here is that there's only a finite number of cases to try", "So we can generate different guesses and see how well we do in terms of", "finding an answer", "Let's take that idea  and the idea of iteration  and capture it by finding a", "piece of code  or writing a piece of code  to do what we like", "So here are some code that we're going to use", "We're going to have our code actually input something that generates", "or gives us something we're going to try and find the cube root of", "We're going to set up an initial variable called answer", "Going to be zero", "That's going to be our guess", "And what are we going to do", "We're going to walk through a loop where we look at answer cubed and see", "if it's less than x", "If it's not we're going to increase answer so there's my iterative loop", "right there", "And we're going to keep doing this until we find the first value where", "answer cubed is greater than or equal to x", "So we're going to generate guesses", "If answer cubed is less than x we know that we're not there", "So we'll keep doing it until we find the first one where answer cubed is", "bigger than or equal to x", "Once we're there we can then check", "And we check to see is answer cubed actually what we want", "Is answer cubed equal to x", "If it's not we'll say so", "And if it is well  then  we'll say  I found the thing that", "I was looking for", "So  using that iterative loop  and now what I'm doing is I'm just walking", "through generating guesses for the cubed root of something until I find", "an answer that is either close enough or beyond where I want it to be", "We can look at this in idle", "So here's a piece of code that does it", "It's exactly the code that I just set up there", "And let's run it", "I actually", "now  when it says give me an integer", "Let's take", "And it gives me the right answer", "We know what it did", "It started out with zero", "Zero cubed was less than   so I went to one", "Which is less than cubed", "Cubed is less than", "Went to two", "Which cubed is eight", "Which is still less than", "Went to three", "Which cubed is", "So it's still less than where we want to be", "I'm sorry", "It's no longer less than where we want it to be  so we could check to see was", "it in the right place", "Let's try another couple of examples", "Again I'll go back and I'm going to reload this function", "It's going to say for a different one", "Let's try", "And  again  in this case  it keeps generating instances of answers", "starting at zero until it gets to the first one that is greater than", "Which is when the answer is equal to", "Since   cubed is    which is not equal to    in this case  it says  I", "don't have what I wanted", "All right", "So don't sweat the details of finding cube roots", "This is a simple little thing", "But notice that it does this generate and guess kind of idea", "Now if we look at that code we can actually observe a couple things", "One of which is it only works for positive integers", "But we could find cube roots of negative numbers  we just know that", "it's going to be a negative version of whatever the cube root of that", "absolute value would be", "So we could actually go back and fix this and we can do it pretty", "straightforwardly", "Let's go back into our code and  in particular now  just", "add a couple things", "One is we're going to look to see whether the thing we're checking for", "is less than the absolute value of x", "And similarly to check to see whether the thing cubed is equal to the", "absolute value of x", "That's nice", "And that's straightforward", "All we have to do is when we're done come down here and say once we've", "found the answer for  say  minus    we'll turn it into   and find the", "cube root of that", "Which is  obviously  going to be three", "And at the end we'll simply put the minus sign back in as we need it", "Let's try that out in idle", "That's pretty simple", "Here's my code", "It's exactly what I just showed there", "And if we run this", "OK  if we do   it still does the right thing", "But if we run it", "and we give it minus   it gives us back minus", "The reason for showing this is to see that once I've got the idea for an", "algorithm I can often generalize it by looking at other cases and then", "reusing the same body of code for the key computation  and adding in pieces", "around it together to get it to do the things I like", "OK  now  what are some of the properties of this idea", "Well  we've already seen one of them", "We said when we've got a loop we need to have a loop variable that's", "initialized outside the loop  the changes within the loop  and where the", "test for termination depends on that variable", "When we start thinking about these guess and check kinds of methods  one", "of the things that's handy is it's often useful to think about what's", "called a decrementing function", "What are the properties of these things", "Well  this is a function that maps a set of program", "variables into an integer", "When the loop is entered that value is non negative", "When the value is less than or equal to zero the loops going to terminate", "and inside of it the value decreases every time through the loop", "Often this decrementing function is going to measure how much work do we", "still have left to do", "And so  for example  here  the decrementing function we're using is", "the absolute value of x minus answer cubed", "That tells us how far away we are from the place where we", "would find a solution", "And on each stage that gets smaller and smaller", "Until eventually it gets either equal to zero or less than zero and I know", "that I'm done", "OK  so those are the kinds of things we'll come back to", "This idea of thinking about loop characteristics", "But since we've written this piece of code  and since we've said that it's", "important to initialize the loop variable outside the loop and to", "change it inside the loop  let's see what happens if we don't do that", "OK", "Suppose  for example  we don't initialize the variable inside", "So I'm going to do the following", "I'm going to go back to my code and I'm going to remove the answer equals", "zero  INAUDIBLE", "So if I go to my code  right over here  I'm simply going to", "comment that out", "All right", "So it says I'm not going to set up answer equal to zero", "And now I'm going to run that and then save it away", "I need to give a number", "Let's give it  I don't know  we'll give it", "Oh  goodness", "What happened", "Well  we hit an error", "And  in fact  what we see in the screen is the thing that", "gets printed out", "It's called a trace back that shows us where the problem was", "It said  in that file that I was looking at  in line four", "when I'm trying to evaluate in line four is while answer cubed is less", "than apse of x  it says  oh  the name answer is not defined", "That makes sense", "I didn't create an initial value for it so how can I be looking at answer", "to change things", "So if we don't initialize the variable outside we get an error", "Let's go back to our code", "Let's remove that answer and let's make another change", "Suppose we actually do initialize a variable but we don't change the", "variable inside", "So let's remove the answer is equal to answer plus", "So over here in my code I'm going comment that out", "And just to be able to see what's going on  I'm going to put in here a", "print statement that says  let me print out answer", "Make sure I have appropriate spacing here", "Let's run this", "Need to save it away", "Again  I'm going to give it the variable", "And let me make sure I give it something in the right window here", "So I'll give it", "Oh  goodness", "What's happening", "Well  this is now caught in an infinite loop", "So  in fact  let me stop by hitting Control C  which is the", "command to stop it", "If I go back to my code here and I know I accidentally typed in", "because I was in the wrong window", "If I go back to my code here you can see what's happened  which is inside", "that  INAUDIBLE  loop  in my ever changing answer  or ANS", "the answer is no", "So if that variable initial  or that test initially was true  it's going to", "stay true  and nothing is changing", "So with this in mind  I actually have a real problem", "I have to  basically  have some way of getting a change to the test", "Without it I'm caught in the loop forever", "So you see that those properties are going to important", "I need to initialize the loop variable  I need to be changing it", "inside  and  of course  I need to be testing some function of it in the", "actual test to make sure that I'm going to get through it", "So what do we have", "This is now a version of a guess and check method", "So guess and check methods can work on problems where there's a finite number", "of possibilities", "I'm going to guess different instances of the thing I'm looking for and check", "them until I see if I find them", "And what we just saw here is a particular version of it called", "exhaustive enumeration", "That is  we simply start at one end of the possible range of values and just", "try each one in turn", "We exhaustively walk through all of them until we find a solution to it", "And while it sounds like it could be really slow  and at times it can  you", "can also see for some problems it works just fine", "We just used it to find the cube root of an integer", "All right", "With that we can move on to building on top of this idea"], "11z8XCDvC3Q": ["Eric Grimson  OK  so we want to think about computational", "problem solving", "We want to understand  what does it mean to think", "computationally", "That leads to the philosophical question  so", "what's computation", "And like a good philosophical question  that leads to", "another  deeper philosophical question", "To answer that question of what's computation  let's", "start by asking the question  what is knowledge", "And  as we're going to see  we can divide", "knowledge up into   parts", "There's declarative knowledge  which we can think of the", "statements of fact", "And there's imperative", "knowledge  or how to's methods", "Statements of facts give us true  but  as we'll see  they", "don't necessarily help us think about how to find new", "information", "Imperative knowledge  how to methods or recipes  give us", "ways of finding new information  and that's going", "to be really valuable to us", "Now  to look at this  let's look at an example", "So  what do we mean by declarative knowledge", "Well  here's a piece of declarative knowledge", "That first statement says  the square root of a number x is a", "number y such that y   y   x", "You know that's true from high school algebra", "It's a statement of truth", "It tells us something about how to decide whether a", "particular number is a square root or not  but can we use", "this to actually find a square root", "And the answer is no", "If we have a number x equal to   and we're trying to find", "the square root of that  and somebody gives us a guess y", "we can use this statement to test to see if", "which it does", "But it doesn't tell us how to find the guess", "So declarative knowledge  which is what much of", "knowledge is based on  isn't what we need", "We want a different kind of knowledge  and for that", "fortunately  we have imperative knowledge", "As we said  imperative knowledge is how to kinds of", "knowledge  or methods or recipes for finding something", "and here's a recipe for deducing square root", "It's actually attributed to Heron of Alexandria  although", "there's some debate as to whether he was the original", "creator of this algorithm  but it dates from the first", "century AD", "And you can see the description here", "Description says if I want to find the square root of some", "number x  I'm going to start with a guess", "I'll call it g", "I'm going to take g and multiply it by itself and look", "if that result is close enough to x", "If it is  I'm going to stop  and say that g is the answer", "Otherwise  I'm going to make a new guess by averaging g and", "x g   and using this new guess  which I will call g", "again  I'm going to repeat the process until we get something", "that's close enough", "Notice  this is a mechanical set of steps and it has some", "basic forms", "Right here there's a test", "It's going to let us know when we're done", "when we're close enough", "If that test isn't satisfied  then there's some simple", "calculations  like here  that tells us what to do", "And then  finally  there's a flow of control  or a loop", "that tells us how to keep executing the same sequence of", "operations until we get  in fact  to a", "place where we're done", "This is something that tells us how to find a square root", "This is imperative knowledge and this is what we want", "OK  let's try it out", "Here's a little description of that", "Let's see what happens if we were actually to do it", "So I'm going to do a simple little simulation", "I want to find the square root of", "And  yeah  I know the answer is    but let's think about", "what might happen here", "I'm going to start with a guess and I'm just going to", "initially guess", "Heron of Alexandria's algorithm says", "multiply   by itself", "That  of course  gives me", "Is   close enough to", "I don't think so  so let's get x g   which is about", "And now  let's take the average of x g and g", "So we add g and x g   take the average of", "that  and we get", "And then our little recipe says take", "that and do it again", "So this now becomes my new guess", "I multiply those together", "I happen to know that comes out to be about", "I've gotten closer to    but it ain't there yet  so that's", "not close enough", "Again  let's take x divided by this g which turns out to be", "about      and then I take g and x g and I average them", "and I get", "And my algorithm says  my recipe says  take", "this and do it again", "multiplied by itself is about      and I'm going to", "say  you know what  that's close enough  so my little", "recipe says there's the answer", "Not perfect  but close enough", "So  Heron had it right", "This looks like a pretty good algorithm", "This is a way of describing a method for doing something", "and that idea  that notion of a recipe  is something we're", "going to use a lot", "So we can think of algorithms as being recipes  sequences of", "mechanical steps for doing something", "We put that analogy to a little bit more use  we can", "see that recipes have much of the same form  real recipes", "Imagine I want to make some custard", "Here's my recipe", "I'm going to take all the ingredients of the custard", "that mixture  put it into a pot over some heat  and I'm", "going to stir it", "As I stir it  every once in a while  I'll dip a spoon into", "the custard  pull it out  and run my finger across the back", "of the spoon", "If the spoon is clear  then I'm done and I'm going to", "remove the custard from the heat and let it cool", "If not  I'm going to repeat", "And notice what we have here", "Again  we've got a test  right there", "And we've got a way of  in fact", "changing the flow of control", "So  normally  the flow runs this way  but based on that", "test  we have a way of going back up and", "continuing the path", "And this pattern is something we're going to repeat a lot", "So  you want to capture recipes and we need to figure", "out how to get the computer to do that for us  which is what", "we're going to talk about next"], "1jnF2wBDvHg": ["PROFESSOR  We've now built an abstraction for a graph", "set of nodes  set of edges  particular representation for capturing them", "especially that idea for every node  the edges basically tell us what are", "all the children of that node", "nodes that we can reach in one step", "And we built a simple little graph with nodes labeled zero through five", "Our real goal is to understand how do we find paths through the graph", "How do we find solutions", "Suppose in my simple little graph  I'd like to find the shortest path from", "node zero to node five", "First of all  I'd have to say what  shortest  means", "It could just mean the fewest number of steps  the fewest number of edges I", "have to walk through to get from zero to five", "If I've got weights on the edges though  I might want to", "actually use those", "They might be the minimizing the sum of the weights   the cost if you", "like   to get from zero to five", "The question is how do I find that graph  or rather how do I find that", "path through that graph", "Well there are a lot of techniques for this", "And a very common one is something known as depth first search", "We're going to talk about the words on this slide in a second", "But let me give you the intuition  the visualization for you", "I'm going to start off at some root node", "I could be node zero", "I want to get to a goal node", "node five down here somewhere", "From that root node  I know the children", "That is I know in one step what other nodes I can get to  what are the edges", "that lead from there", "So it might go from zero to one  zero to two  maybe to some others", "I think yours just goes from zero to one and zero to two", "So the idea is I'm going to start at the root node  and I'm going to look", "at what are the paths that lead out of there", "I've got two of them   going to one and two", "I'm going to take the first of those   the path that goes from zero to one", "And I'm going to say what are the children of one", "It might be zero and two", "And I'm going to say OK  let me take that first path and extend it by", "adding from this node all these steps that I can go in one place to get to a", "new set of paths", "So now I've got a set of paths", "I'm going to keep doing that", "Take the first one  take that end node  say what are the children I can", "reach in one step  and keep extending the set of possible paths", "Hopefully  eventually  I'm going to get to the goal node", "When I do  I'm done", "And I know exactly the path that got me there", "If I get to a node and there aren't any additional children  well I just", "throw that away and I backtrack to the previous place I was and look at the", "next set of options", "OK  we can capture that in words", "The idea is we're going to start at the root node", "This set up paths  initially  are basically just where I am  just", "starting at the root node", "I haven't taken any steps", "From that node  I then do the following", "I take the path that got me there", "In the case of root node is nothing", "And I extend that path by one step  going to each of the possible children", "of the current node", "So I take the current path", "Then I replace it in my set with this set of new paths  that each go one", "step further", "So I add these paths to the set of paths at the front of the set", "I then take that first path at front of the set and I do the same thing", "and recursively repeat that", "And I'm going to keep doing that until hopefully  I get to the goal node", "If I get to the node in a path which has no children  then I just go on to", "the next path", "And I'll keep doing that until I either reach the goal  or", "I run out of paths", "So there's a description", "We're going to build code in a second", "But let me give you a visualization of this", "I'm going to do that visualization using that simple graph I built in the", "last lecture segment", "I'm going to go from a root node of zero", "And I'm going to build a different kind of graph called a tree that's", "going to let me explore the paths through the graph", "So from node zero  I've got two possibilities", "I can either go to node one or to node two", "So I'm going to add two new paths to my set", "that path and this path", "And I'm going to take the first one  which goes from zero to one", "I'm not at my goal of five", "So I'm going to say what are the children of one", "Turns out it's got zero and two as children", "So I'm going to replace this path with two paths", "that one and that one", "I can go from zero to one to zero  or zero to one to two", "And now I've got three possible paths to explore", "I'll take the first of those", "It goes from zero to one to zero", "And I could say what are the children of zero", "It's one and two", "So I'm going to replace this path with two paths", "going zero one zero one or zero one zero two", "Now I could keep taking the first path", "I'm doing this depth first  the exploration of", "this space as solutions", "I could keep doing that", "But if I do  I'm in trouble", "Because what is this path saying", "It says go from node zero  to node one  to node zero  to node zero  to", "node one  to   oh my goodness I'm just caught in an infinite loop", "So I need to be just a little bit more careful about this", "In a particular  I can see that by looking at the following set of steps", "Let's walk through it", "I started off with node zero", "That's my initial path", "I said I can replace that path with a path that goes to each of the children", "of node zero", "That's one and two", "Now I can look at this path and say let me replace that with the path that", "goes from one to its children  which are either zero or two", "I now have three paths I can explore", "I'm going to replace this first path", "Because I'm doing the first one as my option always", "I say I'm not at the goal  so zero has two children", "Zero  one  two", "so I'm going to replace that with that set of paths", "But you can see that I'm now caught in this problem", "And I really want to get out of that problem", "How do I deal with it", "Well  I simply want to avoid visiting a node more than once in", "a particular path", "And I want to add that in a particular path", "If I'm walking down a path and I'm about to go to a node that I've", "already seen  that says I'm about to create a loop in my path", "And that doesn't make any sense", "I don't want to backtrack or retrace my steps in this particular path", "So as long as I avoid visiting a node more than once in a", "particular path  I'm set", "And I added that phrase because of course  different paths may go through", "the same node", "That's fine", "I just don't want to create a loop or a cycle in terms of what", "I'm going to do"], "kH_icrqrRzs": ["JOHN GUTTAG  Hello", "My name is John Guttag  and I will be delivering the next series", "of lectures in    X", "I have some good news", "We're pretty much done with introducing new aspects of Python", "You now know everything you need to know to write beautiful Python", "programs that do cool things", "That  of course  raises the question  what are we going to do for the rest", "of the course", "Mostly  we are going to look at how you can use your programming skills to", "write programs that shed some light on complex situations", "The first series of lecture segments are about the visual", "presentation of data", "We will introduce you to a Python library  PyLab  that provides features", "that make it relatively easy to analyze data and present", "the results as plots", "We will cover only a small subset of what PyLab has to offer", "Other features will be introduced later in the course"], "OHsF77_yufc": ["ERIC GRIMSON  OK  we've now taken our first pass at depth first search  and", "we've seen that we can't have loops", "As we've said  there's an easy way to fix this", "So let's go back to our description of depth first search", "Everything's the same  going to start at the root node", "If we're not at the goal  we're going to keep extending paths by adding each", "child the current node to a path creating all the new paths", "The only difference is right here", "So when we are looking at a path  we've gotten to some node  where going", "to take each of the children of that node and create new paths taking the", "current path and extending to that child  but we won't do that extension", "if the child is already in the path", "Because if it's in the path  that says we're creating a loop  and we want to", "avoid that", "The rest of it  exactly as before", "And with that small change  in fact  things work quite well", "So let's go back and walk through again our depth first search", "We start off at node zero", "From node zero  we've got two possible places to go  node one and node two", "So we'll take node zero off and replace that with the path that goes", "from zero to one  and the path that goes from zero to two", "The first one to look at is this path  zero to one", "One we know can either go to node zero or node two  but going to zero is not", "something we want to do because that creates a loop", "So  in fact  because it's already in the path  we don't go down there  and", "that means we avoid looking at everything else down here", "All right", "So we've replace the path zero one  in this case  with just one", "path  zero  one  two", "That's the next one to look at  so we're going to start by looking at", "this path  and to look at that we've got two possible children so we", "replace that with going from zero  one  two to three and to four", "Notice  how we've replaced this path with two paths right there", "And we keep going", "We pick up the next thing at the beginning of our set of options  which", "is the path zero  one  two  three  and what are we going to do there", "Well  I didn't draw it in initially  but from three  if we look back at our", "original graph  it can go to either four or five", "So I'm going to replace that path with these two paths", "And I'll remind you  in each case  we're taking a path and from the node", "at the end of the path  we're looking at what are the children we can go to", "We're creating new paths  extending the current path to each of those", "children  unless that child is already in the path", "We're getting closer now", "What do we need to do", "We need to look at the path zero  one  two  three  four  but  in fact  there", "are no extensions from four that don't already involve something in the path", "So  in fact  we can just pass that by  and that leads us to now having looked", "at this one  remaining things to look are this set", "The first one in that set is the path is zero  one  two  three  five  and", "when we look at that one  ah  isn't that great", "We've gotten to the goal", "We've gotten a path now from zero to five", "It goes zero  one  two  three  five  and since we've now found a path", "there it is  we're set", "At this point  we can stop", "We've returned the path", "What can we say about this", "Depth first search explores the first option in it's set of possibilities", "It replaces that first option  if it's not gotten us to our goal  by adding", "in an ordered set of new options in which we take that option  which is a", "path  and we extend it to each of its children", "That creates a new set and we put that set at the front", "of our set of options", "That replacing of those options at the front  uses a data", "structure we call a stack", "Come back to that in a second", "Again  it does not visit any child node already in the path to avoid the", "loops  and as we've constructed the algorithm so far it's going to stop as", "soon as it actually finds a path", "We'll come back to it in a second  but it finds a path  gives", "you back that solution", "Let's say just a little bit of a word about a stack", "A stack is a particular kind of very useful data structure  which is often", "referred to as having a last in  first out behavior", "The name stack comes from the old things in cafeterias where you would", "have a big set of dishes  and you would push a dish onto the top or pop", "it off the top", "And that last in  first out behavior is what characterizes a stack", "We push items onto the top of the stack  when we want to get the next", "item  we pop it off the top of the stack  and this maintains a list of", "items to be explored where the thing at the top of the stack is always the", "next item  and new things are actually placed on top of the stack", "Just to get a sense of this  let's go back to our search and just think", "about how this actually looked like in terms of the set of", "opportunities we have", "We have zero  the path starting at the root node is the first thing  we pop", "that off and we look at what are the possible extensions", "And so we replace zero with zero  one and zero  two  and that's literally", "we popped zero off the stack  we created two new pieces and we pushed", "them onto the stack", "The next item on the stack was zero  one", "So we pop zero  one off the stack  and we replace it with extensions of zero", "one  which are  in this case  just zero  one  two and notice  it gets", "pushed to the front of the stack", "Zero  two is still sitting at the end of the stack", "And we can keep going", "We pop zero  one  two off  and we push onto it the two new paths from zero", "one  two to zero  one  two  three  and to zero  one  two  four  again", "pushing those onto the stack", "And if we go another level  you see again  how we popped this one off the", "stack and push these onto the front of the stack", "So they're always the first things we're going to look at as we carry on", "Let's capture this then in an actual algorithm  and this is pretty", "straightforward to do", "We've gotten most of the pieces we want", "We're going to have some start node  we're going to have some goal node", "that we're trying to get to  and depth first search is going to take in a", "graph  a start node and an end node  and it's going to take in another", "argument  which may initially just be the empty list  which is the path", "that is  the sequence of nodes that I'm currently exploring", "What's the first thing I do", "Given a path that might be empty  I'm going to extend it to a new path that", "includes that node  the start node", "So if I'm starting with an empty list just as the path of start  from deep", "into the search  as we'll see in a second  I'm going to add  from my", "current path  a path that includes going through that path to the new", "node  the start node", "I print out some stuff", "I'm not going to worry about it", "It's just a way of letting me know where I am", "Now  what do I do", "I say  if my start node is the thing I'm looking for", "Remember  these are nodes so we're actually testing the equality of those", "instances of classes  those data objects themselves  if the start node", "is the end node  I'm done", "And I've just returned the path", "That path gives me the sequence of things I want to follow to get from", "the start to the goal or the end", "If I'm not done  then what does it say", "It says  I've got some start", "Let's go out on the other side  rather", "I've got some path that goes from the start node all the way", "down to some node", "The node is not yet the goal node  so it's got a set of children", "And what I'm going to do is  I'm going to take all the children", "of that start node", "Again  remember graph is a data structure and the children of is a", "method that I can apply to start that gets me out all of the children of", "that particular place", "And in this case  start is pointing at that point", "Given each node  I say the following", "First  make sure the node is not in the path", "So if I'm going to extend  for example  to this child node  I want to", "make sure it doesn't exist somewhere up here", "If it does  I'm not going to look at it", "If it doesn't  then what do I do", "I'm going to say  from this child node I'm going to look for a path that goes", "from that node to the end", "I'm basically saying  is there a path that gets there", "And notice  I'm going to pass in the path  which is the thing that got me", "to there as part of this", "That says  up here that is passed in as a path  and that says that right", "here  when I do the extension  I'm actually adding this new node  that", "child node  onto the path that carried me to there", "Last piece", "If  in fact  depth first search can find a path", "If there is one here  if it's not none  then I'm done  and I'm just", "going to return the path", "And that allows me to go from a start node to follow down to some node to", "look at each of the children in turn to see is there a path that leads to", "the goal node", "And you can go try this if you want to take the code and actually run it to", "see how it explores in a depth first fashion graph  such as the graph we", "started with"], "AG8_Qw5kS_0": ["CHRIS TERMAN  A good first step in becoming facile with object oriented", "programming is to look at some examples", "And that's the mission for the rest of this lecture and the next", "We've tried to make the examples concrete and use them to show how to", "structure an object oriented programming solution", "It's not the functionality of each example is all that important", "What we really want you to look at is how that functionality was structured", "So as you go through the examples  see what we've done and perhaps think a", "little bit about how you would have done it differently", "As an example of classes in action  let's define a new data type to", "represent a set of integers", "So initially when we create an instance of that set", "the set will be empty", "It has no elements in it", "And then as we add elements to the set  the set will", "slowly accumulate integers", "We'll have our constraint that we want to impose  which is that we wish that", "the particular integer will only appear at most once in a set", "So if I attempt to add an integer a second time to the set  nothing bad", "will happen", "It won't have a duplicate copy within the set", "That sort of constraint is called a representational invariant", "In other words  it is a property that's true of all instances of the", "set of integers that we're creating", "And that's enforced by the code in the methods", "And most representational invariants are there because they are an", "important part of the semantics of the object you're trying to create", "For an internal data representation  we'll simply use a list to remember", "all the elements of the set", "We're going to define three interface methods", "The first one is insert", "And it inserts an integer e to the set  if it's not already there", "If you try to insert it again  we're going to have the code implement the", "representational invariant above  and it will just return", "without doing anything", "We can test of a particular integer is a member of the set", "So this is a Boolean method that returns true if the integer is in the", "set and false otherwise", "And finally  we can ask to remove an element from the set", "And now we have a semantic choice in front of us", "Choice one is that if you try to remove an element that's not in the", "set  that would be OK", "I mean  you wanted a set without that particular integer in it", "There is a set without that integer in it", "Everybody's happy", "No harm  no foul  normal execution continues", "Choice two is that an attempt to remove something that the programmer", "thought was in the set probably represents an error", "And now is an opportunity to stop program execution and let the", "programmer debug the situation", "And that's the semantics we've chosen  choice two", "Let's look at the code", "Here I have an idle buffer that contains my class definition of inset", "which is what I'm calling my new type of object  which", "represents a set of integers", "And it's followed indented with all of the definitions of the attributes that", "I want to be part of the inset class", "So let's come over here and type function F  to read this code into our", "running Python shell", "And let's give it a test out", "So I can say s is equal to let's create an instance of my integer set", "There we go", "And in fact  if I ask for print representation of s  it is printing", "out a  INAUDIBLE  of the null set", "So let's go off", "You can see it's going to give me a list of all the possible methods that", "are available for the object s", "So if I want to go off it and insert an integer  I can say insert a three", "insert a four", "Maybe I'll try to insert three again", "OK", "And now if I go off and print a representation of s  I have the set", "that contains the integers three and four", "So let's look a little bit at the code and see what happened", "When I ran my constructor  I provided it no additional arguments  because", "there was no other internal data that I wanted to", "initialize from the outside", "If we go look at what the init method does  we can see that even though it", "takes no arguments when I called it   and in fact as I explained earlier", "Python will provide the object being initialized as a value of the first", "argument   in this case the value of the simple self", "So what the init code does is it goes off and creates a new instance", "variable  a new data attribute for the instances being", "initialized called vals", "And it sets it to the empty list", "And so that's going to be the representation of the", "integers in the set", "And initially it has no elements in it", "When I called insert  I did it with a single argument", "And remember  again  Python will take the object that I'm manipulating  in", "this case the set I just created  because I called it s insert", "So whatever the object is that's the value of s is what's going to be", "passed as self  the value of a self argument to the insert method", "And then I provided one additional argument three  which", "becomes the value e", "So it's going to assume that e is an integer and inserts e into self", "So what it does is that it checks to see if whether or not e is", "part of that list", "And if it's not an element of the list  it adds it", "Otherwise  it makes no change and continues on", "And then if I ask to print out the value of s  let's go look at the", "string method", "So member print will want a string representation of the object", "And this is the method that will create that", "So the first thing that the string method does is to sort the elements of", "the set into numerical order", "So when I print them out  they'll sort of appear from the smallest integer to", "the largest integer", "And then it constructs a string  which has an open brace at the front and the", "closed brace at the end", "And in the middle  well  let's figure out what this does", "So for each element e in self vals  I'm going to create a string version", "of that element e  so a string representation of the integer", "And this is all part of a list comprehension  which means it'll take", "all the individual cost of the string of each element and make them", "elements of a list", "And then I used the join operation  to join method of a string  so I'm going", "to say  please join all the elements of this list by separating with the", "string comma", "So that's what this does", "So what I would expect to see is an open brace  a comma separated list of", "integers  or the string representation of those integers  followed by a", "closed brace", "And that's actually what happened over here", "Let's go off and test some of the other operations", "So s member", "is three a member", "Yes  true", "How about five", "Let me pause for a moment here", "Notice that as I'm typing in a call to a method  if it can  idle will show me", "a tool tip  sort of explaining what the arguments are", "Where it gets explanation comes if I look over here in the code  I can see", "that what I have is that it takes the first line of the doc string", "So this is doc string is a string that follows the first line of any method", "definition", "So I can put a string in here", "And Python will print out the first line of that string  as you can see it", "showing here  as the tool tip", "So it's a handy way to provide a little help to the user of your new", "object about what types of arguments are expected", "OK  so I can say a s member", "Well    is not a member", "So I go off", "And suppose I go off and insert five or six", "That's good  so print", "So       and", "what happens if I go remove", "Ah  so I've taken three from the set", "What happens if I remove     again", "I get the error", "So let's go look how that works", "So if we look at how the remove method works  it's going to go off and use", "the remove method of lists", "So it's going to be called self vals  which is a list", "It's going to call the remove method of that", "It's trying to remove this particular element  this particular object  from", "the list  in this case the integer three", "It tries that  and what happens is we try to remove an element that's not", "there from the list", "Python creates an error", "And what we're going to do is enclose this particular statement and try an", "except clause  so that we're going to basically try to do this", "And if we get an error  we'll execute this code", "So if the removal was successful  there's no error", "We don't do the except statement", "But if there was an error in the execution of this code  we come here", "And we chose to basically create a special error of our own  which says", "that look  I'm going to create a value error and report to the user that the", "value integer it was trying to remove wasn't found", "If we had chosen instead to ignore the error   that was choice one when we're", "discussing the semantics", "here we could have just gone ahead and typed in the word  pass   meaning", "don't do anything", "Just swallow the error Python created as part of the list remove operation", "and continue with normal execution"], "ZP_Q0vU-wU8": ["ERIC GRIMSON  In the last lecture we talked about complexity", "We talked about different classes of complexity  and we talked about the", "idea that there could be different computations  different algorithms to", "accomplish the same task", "And we'd always like it to be the case that we have a really efficient one", "One question you can ask is how do you find  or how do you create  or how do", "you invent an efficient algorithm", "And the answer is it's hard", "Many great computer scientists go through their entire career with", "perhaps one classic example of a great algorithm that is used regularly", "Many don't come up with any", "And that's OK because often it's easier just to reduce a problem to a", "set of known solutions", "Somebody's come up with a great algorithm  how do I take a new problem", "and reduce it to something that can take advantage of that algorithm", "And so that's  in fact  often what we want to do  is we want to understand", "what's the inherent complexity of a problem", "And then think about how to break a problem down into sub problems  which", "we can then relate to other problems for which there already exist", "efficient algorithms", "If we can rely on a great algorithm from somebody else  we're", "going to use it", "So we're going to look at an example of that  and we're going to look at it", "in the category of dealing with search algorithms", "So what's a search algorithm", "It's a method for finding an item or a group of items with specific", "properties within a collection of items", "Might be a list  and I want to find things that belong in that list in", "particular properties", "It might be a set of other things that are not structured in the same way", "Basically  I've got a collection of items which I call the search space", "and I want to look at how do I very efficiently find out something inside", "of that search space", "We've already seen examples of this", "For example  finding square roots", "We saw this as a search problem", "We could do it with exhaustive enumeration  where we looked at every", "possible element from the search space", "We saw bisection search  where we cut down the problem in half each time", "We saw Newton Raphson", "These are all examples of search problems", "And what we'd like to do now is to talk about  so in general", "how do we do search", "And what's your inherent complexity associated with doing search", "Well let's begin  first of all  with just a simple way of doing search", "Just linear search", "Really simple method would say gee  given a collection or a list  I'm", "going to assume it's a list  but it could be something else", "But given a list and given some element  I want to know is that", "element in the list", "And what could I do", "Well  I could simply walk down the list one element at a time testing it", "So I do a little for loop that goes through the entire length of the list", "checking to see for each element in the list  is it the", "thing I'm looking for", "When I find it  I return True", "If I get to the end of the list  I return False", "OK  simple method", "And you already know what the complexity is here  or should be able", "to guess it", "If the element's not in the list  I'm going to have to go through the number", "of tests equal to the length of the list", "So the complexity is O len L", "I might stop a little earlier if I actually find it  but we're always", "interested in the worst case behavior", "And so at best  this is linear in the length of L at best", "Wait a minute", "Why do I say at best", "Well in fact  I'm making an assumption", "And the assumption is that each test in that loop can be", "done in constant time", "Wait a minute", "We already said we're going to make assumptions about operations inside of", "the machine being constant", "But notice here I'm making a specific assumption  which is remember  that", "task is to go to the i th element of the list  extract it  and then do the", "comparison", "Comparison is certainly constant in time", "But is it really the case that I could get to the i th element of a list in", "constant time", "Does Python retrieve elements of the list in constant time", "Well  let's look at that", "The answer  by the way  is yes  but let's look at why", "So let's look at a simple case", "Imagine my list is just a list of integers", "So each element is of the same size", "For example  it might be   units of memory or     bit bytes", "We won't worry about the details of how it starts  but what we might say", "OK  I'm going to take four pieces of memory  stitch them together  and", "that's the size of each one of my elements", "If that's the case  then the address in memory of the i th", "element is easy to find", "If this is my memory  and right here  that's where the list starts", "So start points to the that element in memory", "Then if I'm breaking up my memory into   units at a time  then the i th", "element  the location of it I can actually compute", "I want to know how to get to start  and then I want to take     i to get", "out to the location of the i th element", "So start gets me to here  and adding  i gets me up to that element", "I can basically compute exactly where to go to get to the beginning of the", "i th element", "And if I can do that  then I know in constant time what the location of the", "i th element is", "Therefore in constant time I can get it  and I can retrieve it and do the", "comparison", "In other words  it says if I want to get to the i th element of a list  a", "list of ints  I don't have to walk down the list one at a time counting", "I can actually compute exactly where to go to get to it", "Great", "Well  wait a minute", "That works when I know that the size of each element is a particular size", "I can allocate a specific amount of memory for each one", "But what if the list of objects are things that have arbitrary size", "Now what do I do", "And in this case  I use a wonderful tool called indirection", "Here inside of Python  I'm going to represent the list as two things", "A length telling me how many objects there are in the list  so I know where", "the end of the list is  and then a sequence of fixed", "size pointers to objects", "Or another way of saying it is inside of the list  each element of the list", "isn't going to be the element itself", "It's going to be a pointer to an object", "A pointer to a structure in memory", "And if I can do that  then in fact I can still get to any element in", "constant time", "Let's see why", "If the length field is just   units of memory  in other words I need   units", "of memory to tell me how long something is  and each pointer", "occupies   units of memory", "So similar to before  the address to anything in memory can be done in", "units of memory", "Then in fact I can get to the address  or rather I can compute the address of", "the i th element very easily", "I take start  which tells me the beginning point", "I add in   to get past the thing that tells me how long the list is", "And then as before  I times   to tell me the location of the", "pointer to the memory", "This address I can compute in constant time", "The value stored there is a pointer to another location in memory  and that", "can also be found in constant time", "So the whole search is linear", "It's called indirection because I determine where's the point in the", "list I want to go to in constant time", "Getting there  what I take out isn't the value itself  but it's a pointer", "to another location in memory", "Then I can go there in constant time and pull it out", "Takes   steps  but that's still constant time", "And so the search in this case is in fact linear", "I can get to any point in a list in constant time  and I have to go", "through the entire list once", "So the entire search is linear  which is what we knew", "And this idea of indirection is exactly what makes it happen", "It says that I can access something by first accessing something else that", "contains a reference to the thing being sought", "In this case  I'll represent a list as a list of pointers to objects  rather", "than the objects themselves", "OK  so I've got a simple linear search"], "O1Is56hu4EU": ["Eric Grimson  We've just shown that if we have a sorted list  we can search", "it much more efficiently than just linear searching  and that's great", "But wait a minute", "How do I get a sorted list", "What if my list is not sorted", "What's the cost of sorting", "Have I just kind of played a slick game on you here", "So the question we want to ask is gee  is it better to actually sort a list", "and then use the binary search to find things  or should I", "stick with linear search", "So let's assume that the complexity of sorting a list is just something we'll", "call order of sort L  We don't know what it is here in a second  but we'll", "come back to it", "So then what we're really asking is  if we sort and search  we want to know", "is the cost of both sorting and binary search  which is great  is that less", "than just doing straightforward linear search", "In other words  is it better to sort and search  or should we just stick", "with the linear search", "Well  if we don't know anything more  unfortunately the answer", "is it can't be better", "Because we can't possibly sort in less than linear time", "Why do we know that", "Well  we've got to look at least each element of the list in", "order to sort them", "That says we've got to look at at least the length of the list", "So sort has to be at least linear", "And if that's the case  then sounds like it isn't better to do sorting", "before we do the search", "But that seems disappointing", "And in fact  it is because we're not completely taking into account", "everything that we want to do", "Suppose we want to actually search a list more than once", "We want to search it say  let's just say k times for some value k", "Then the question we want to ask is is the cost of sorting plus k searches", "less than the cost of just k linear searches", "And you can already see it's going to depend on k and it's going to depend", "on sort  but one expects that if the sort can be done efficiently  then it", "is going to be better to sort first  and then search", "This is what we refer to as amortizing  or spreading out the cost", "We're spreading out the cost of sorting over multiple searches", "And doing something may well make this worthwhile", "So now the question is how efficiently can we sort", "Because if we can do it well  we really may be better off", "using binary search", "And that takes us back to where we started  which is to say then we can", "reduce a lot of search problems just to a known solution", "which is binary search", "OK  so let's look at sorting", "And we're going to look at two examples", "The first example is shown with a piece of code", "It's called selection sort", "And the idea behind it is pretty simple", "Given a list  we're going to find the smallest element in the list and swap", "it with the first element", "And then we're going to take the remainder of the list  find the", "smallest element of that  and swap it with the second element", "And just keep doing that until we've done the overall search", "So you can see that here", "I'm running a loop over the range of the list", "I start off saying that the location of the smallest thing is at i", "The minimum index is i  and the minimum value is the", "value of that point", "I'm going to start j at   more than i  and then I'm going to run a loop where", "I walk through the right hand side of the list  and I find basically the", "smallest element", "If the value at right here  at j is smaller than the smallest thing I've", "seen so far  which includes the thing I'm about to swap with initially  then", "I just change those things", "So this basically says find the smallest value in the right of i  or", "to the right of i  I should really say", "And when I've done that  I'll go ahead and run through that entire loop  then", "down here I just do a switch", "I'll have to be careful", "I'm going to temporarily hold onto the value at the ith location of the list", "using temp right there  So that I can take the thing at the minimum", "location  put it into i  and then take a temporary thing and put it there", "So this is a standard way of doing a switch", "I temporarily hold onto something  so I move into that location  and then", "the temporary thing and put it into that spot", "So you can see this is doing what's called selection search", "I find the smallest thing  I move it to the front  I find the next smallest", "thing  I move it to the next location  and I keep doing it", "OK  let's look at this", "First of all  let's analyze this selection sort", "And one of the things again  I'd like to know is to be able to determine", "does it really do the right thing", "And I can do that by identifying what we'll call a looping variant", "something we've seen before", "And the looping variant basically says here's a property that holds true at", "each stage through the loop", "And if I can do that  then I can reason about does it satisfy the base", "case  and does it satisfy that induction step of if it's true for a", "smaller version of the problem  is it true for the next", "version of the problem", "And if I do that  then I can show that I'm done", "The loop invariant here is pretty straightforward", "It says given a prefix of the list  the first half of the list  and a", "suffix of the list  everything after the ith location  then the looping", "variant is going to be that every time I go through this loop  I'm going to", "claim that the prefix is sorted  and that there's no element in the prefix", "that's larger than the smallest element in the suffix", "That everything in the prefix is smaller than everything in the suffix", "OK  that's my looping variant", "Let's see if that holds true", "Well  in the base case  the prefix is just empty", "So it's trivially sorted", "The suffix is the whole list  and it's trivially the case that everything in", "the prefix is smaller than the smallest thing in the suffix", "OK  now what about the induction step", "This basically says when I enter the recursive call  I'm assuming  or I", "know that the prefix is sorted", "So what does this say", "The induction step says we're going to find the smallest element of the", "suffix and move it to the end of the prefix", "If the prefix was sorted beforehand  putting something that's larger than", "everything in it at the end  says the prefix is still sorted  and since I", "moved the smallest element  it says that there's nothing in the suffix", "that is smaller than anything in the prefix", "So the invariant was true before the move  the prefix was sorted after the", "move  and I've guaranteed that in fact  I've done the right move in", "And when I exit  when I've gone all the way through all of", "this  what do I have", "The prefix is the entire list  suffix is empty  so I'm guaranteed that the", "list is sorted", "Nice little induction proof that shows that I'm actually", "doing the right thing", "Great", "Now  what's the complexity", "Well  what have I got", "I've got two loops", "This inner loop down here  we already know from earlier versions how to", "estimate them", "The complexity of that is on the order of the length of the list", "Yes  the list gets smaller each time through  but basically it's the order", "of the length of the list  OK", "So that's the inner loop", "What's the outer loop", "Well  I go through the outer loop", "Basically order of the length of the list times", "So I'm doing something of order length of L  and I'm doing that order length", "of L times", "So the overall complexity here is quadratic", "It's length of the list squared  because I've got to through the list", "at least once  and I've got to do that the length of the list times", "And unfortunately  we know this is expensive", "It's not what we would like", "But it gives us a simple kind of sorting algorithm", "Now the question is  all right  if I just use selection sort  would I", "really want to use this compared to linear search", "And the answer's probably not", "If it's quadratic to do the sort  and then I'm going to order log to do the", "search  the search is nice  but in general it's going to be way too", "expensive to do a quadratic thing as compared to a linear thing", "I need to know  can I do better"], "bGWgqvhUfPU": ["ERIC GRIMSON  So we just saw that a simple", "selection sort is too expensive", "It's quadratic  and that says it's probably going to outweigh the", "advantages of doing a logarithmic search using a binary search when", "we're done", "We're probably better off using linear", "But we'd really like to say  gee  isn't there a better", "way of doing this", "And we said earlier on in this lecture that we look to reduce problems to", "known solutions that we can leverage", "And in fact  there is a better way of doing this sort  and it takes", "advantage of another technique we saw", "So the better version of sort is called merge sort  and it uses a", "divide and conquer approach", "So what does divide and conquer say", "It says break it down into smaller versions of the same problem", "And here's the basic idea", "If the list is of length   or    I'm done", "It's already sorted", "But if it's bigger than    let's just split the list into   parts  and let's", "sort each one of those", "And of course  those may involve some additional splits  but if I can do", "that and if I can sort each of the sub lists  and I assume I can do that", "faster than sorting an overall list  then I'm going to merge the results", "And the merge takes advantage of the fact that the   lists are sorted", "To merge  I'm just going to look at the first element of each list  and", "take the smaller one and move it to the end of the result  and keep doing", "that until one of the lists is empty  in which case  I just copy the rest of", "the list onto the end of the result", "So another way of saying it is  given   sorted lists  I'm always picking off", "the smallest element and adding it into the new list that I'm creating", "And I can do that  we hope  quite efficiently", "OK", "With that in mind  let's just look at an idea of this and then we'll look at", "writing the code for it", "So the idea of merging is", "Again  as I said  I'm going to start off with  let's look at   lists", "Let's imagine that I've got   lists here that have been sorted  and I want", "to merge them together", "And we're going to worry separately about how I sort them  although that's", "obviously just going to be a recursive version of the same thing", "And here's where I am", "If I've got two lists here  I'm going to take the smallest or first element", "of each one and then do that comparison  and I'm going to take the", "smallest one of those and move it into the result", "And when I do that", "Now  again  I've taken that one off of that first list", "I've still got   sorted lists", "Again  I take the first element of each", "I'm going to do that comparison", "And I'm going to take the smallest one and move that into the result", "Now you can see I can continue that at each stage", "And by the way  in that case  I remove this one from that list", "So at each stage  I'm simply taking the first element of each  looking at", "the smallest one  adding it into the result", "Taking the first element of each  taking the smallest one  adding it in", "the result", "Taking the first element of each  taking the smallest one  and I keep", "walking through that stage until I get to the point where one of", "the lists is empty", "And at that point  I simply copy this entire list onto the end of that list", "So you notice now  because these lists are sorted  I'm not looking at", "everything in them", "I know that the smallest element's at the front", "So the merging step actually works quite nicely", "OK  if that's the case  let's now look at what's the", "complexity of this algorithm", "Doing the comparison  that's constant", "Doing the copying  that's constant", "So all I really have to ask is  how many comparisons do I do", "If the combination of the two lengths of the lists is O len L    I've got to", "do at most L comparisons  because I've simply got to look at each element", "until I merge them in", "In terms of the number of copies  well  that's O len L     len L     or", "the length of L overall  if you like", "So  in fact  merging is linear in the length of the list", "Cool", "It says I can merge things in an amount of time that's linear in the", "length of the list", "OK  with that in mind  let's put this together", "So here's now code to do the merge  and it's really pretty", "straightforward", "I'm going to set up our result up here", "I've got two indices  I and J  And while they're both less than the end", "of each of their respective lists  I'm just going to compare using some", "comparison operator", "Could be less than", "I'm going to compare the two of them  and I'm going to basically say  if the", "left one is less than the right one  I'm going to add it in and increase i", "Otherwise  the right one's the one I want", "I'm going to add it in and I'm going to increase j", "Oh  that's nice", "That's basically saying the equivalent of me removing things from the list", "I'm simply changing where I am in either the left list", "or the right list", "When I get to the point where I'm almost done  I'm going to check it", "And to see that  I'm going to say  as long as i is less than the length", "I'm sorry", "I'm saying this poorly", "Up here  I've got both of them still have something in them", "When that's no longer true  if there's still stuff left in the left one  I'll", "add them in", "Otherwise  I know if there's still stuff left in the right one  I'll add", "them in and I'm going to return the list", "So this is just a piece of code that captures that idea of merging", "It says  basically  let me do the merge by walking down each of the", "lists  doing the comparison to see which one's smaller  adding it into", "the result and changing that index", "And when I've gotten to the case where one of the lists is empty  I'll simply", "add in the remainder of whichever list still has things in them", "OK", "We can now put this together to create a merge sort algorithm  and that is", "going to be something that's going to do sorting by breaking down the lists", "into sub lists  sorting each one of those  and then merging the results", "together using the merge operation", "So what does it say", "It says  if I've got a list of length   or    just return a", "copy of that list", "Notice what I'm doing here   by the way  I should have said   is I'm using", "the operator function of less than to set up something that's going to do", "the comparison", "So I'm going to use a typical less than", "And this says I can pass in  if I want to  some other argument for compare", "The default's just to use the standard less than operation", "All right", "If the list is of length   or    I'm done", "Otherwise  what do I do", "Well  it's really cool", "I compute the midpoint", "I'm basically taking the length of the list divided by   and making sure I", "get an integer back", "And then I take the lower half of the list and I do merge sort on that", "I take the upper half of the list and I do merge sort on that", "And that says  oh yes  recursively  I'm going to keep doing", "merge sort on these", "I know by the fact that I keep breaking it down into a smaller", "version of the same problem that  when this is done  it's going to give me", "back a sorted list", "And having sorted the left and right versions  I simply merge the two  and", "that gives me back the solution I want", "Cool", "It says  I've recursively broken this down so that I do a merge sort on", "smaller versions of each of the   lists  and that will keep doing it", "until I get to things that I'm just merging lists of length   or", "When I'm done with all of that  I do the merge with the overall", "thing and I'm set", "OK  now  what's the complexity", "Well  we know that the complexity of merge is O len L", "We just argued that earlier", "It says if I got   lists  who the sum of their lengths is of length L  I've", "got to walk through each one of them at least once to do the merge  but no", "more than once so the merge is of O len L", "So merge is linear", "What's merge sort", "Well  it's going to be a combination of linear in the length of the list", "times the number of calls to merge", "We just saw that with merge sort", "We have to go through the list to do merge sort on the   sub lists twice", "So we're doing a merge sort on   sub lists", "How many times do we call merge", "Well  that's the same as the O len L     the number of calls to mergesort", "And what's that", "Well  we just saw that that was logarithmic because we're breaking it", "down in half at each stage", "So this is just a combination of the length of the list times the log of", "the length of the list  and that says that this is log linear  which is", "actually fantastic", "So  O n log n  where n is the len L   and that really does say fantastic", "I've gotten out a very efficient algorithm  an n log n algorithm", "You should note  it does come with a little bit of a cost  and the cost is", "in space  as it has to make a new copy of the list", "But other than that  it's really very cool", "And that's wonderful"], "LxI8Mko_MKs": ["In this seventh lecture  we're going to talk about testing and debugging", "While it would be great if we could always write correct code that ran the", "first time we tested it  things usually don't work out that well", "So we're going to talk about how to tests code to determine if it might", "have a bug", "Focusing on black box testing  where we exercise paths through the", "specification  and glass box testing where we exercise", "paths through the code", "We will also talk about techniques for debugging", "That is  isolating the location of bugs in our code", "In particular we will talk about treating debugging as a search", "process  and use the ideas of binary search to help isolate", "and detect bug sources"], "oNn-NRjBP2U": ["So let's finish up our example of using inheritance by adding two new", "classes in MIT Person", "Two types of students", "One will be an undergraduate student  who will have a clash year attribute", "and the other a graduate student", "So we'll think of students as a subclass of MIT Person", "So all students will have at MIT ID number", "And of course MIT Person is a subclass of Person  which means that all", "students will have a name and a birthday as well", "OK  so let's go look at the code", "So here's our first draft of the code", "I've defined two new classes here", "an undergraduate  who's instance of an MIT person and has his own instance", "attribute  which is a class year  and a graduate student who", "is also an MIT Person", "And then finally  I've written a little predicate which allows me to", "detect whether an object is a student or not", "And it does something fairly rudimentary", "It simply takes the object that I've passed in and it asks if it's an", "instance of an undergraduate or an instance of a graduate student", "So let's just check out how this works  so I can say student one is an", "undergraduate whose name is Stacey  whose class year is", "And let's have student two be a grad student whose name is Justin", "So far  so good  and I can actually ask isStudent s", "I can find out if Stacey is a student", "And let's find out if Justin is a student  so", "OK  so all that works as expected", "However  there's sort of a bug in what I've done", "That let me sort of illustrate that bug by going off and creating a new", "class of student  a transfer student  like so", "Now what I discover is that my isStudent predicate is broken", "Because what I've done is to expand the repertoire of students  and now I", "have to go change the behavior of isStudent to know that there's a third", "type of student  fourth type of student  fifth type of student", "This is sort of an indication that my class hierarchy  my type", "hierarchy  is broken", "Because what I'm doing is  I'm starting to want to describe behaviors", "that are true of a set of types", "And what I really need to do to make it easy is to", "define a new super class", "So I really should have started off by defining a class of Student  which was", "an MIT Person  OK  and then gone off and made undergraduate a subclass of", "Student  graduates  a subclass of Student  and transfer", "a subclass of Student", "And now I can finally change this code here to basically ask whether", "something is a Student or not  an object is a Student or not", "So now that I'm thinking more clearly  I realize  when I'm thinking through", "my type hierarchy  I want to make sure that if I have a bunch of behaviors", "that I want to be true of a whole set of my types that I'm wise to use the", "type hierarchy so that I can implement the behaviors associated with all", "students  not individually in each student but collectively", "in the super class", "Let's summarize what we've done", "We've created a whole hierarchy of classes that implement the semantics", "we want associated with the different classes of people", "So we have a person in general  who has a name and a birthday", "To that  we made a special type of person  a subclass of person  an MIT", "Person that has an ID number  and then we created a subclass of that  which", "is all the different types of students  and then subclasses of", "students  which are either undergraduates or graduate students", "And in this little diagram I've used an arrow to point from a subclass up", "to its super class", "One final point about creating class hierarchies", "We want to make sure that our subclass obey the substitution principle", "So for example  if I've written a bunch of code that deals with people", "for instance  suppose I had a piece of code that looked at a person's age and", "put them into a histogram  what I want to be sure of is that  if I have an", "MIT Person  or a student  or an undergraduate  or a grad student", "instances of any of the subclasses  that those instances can be used in", "every place that I could use a person instance", "I don't want to somehow  in creating subclasses  to break the fact that the", "subclass is actually also an instance of the superclass", "So for example  if I changed to get age method on students so that it", "returned the number of years they've been at the institution  rather than", "their chronological age  and then I tried to use a student in my person", "that made a histogram of chronological ages  that would break", "Because now get age means something different for a member of the", "subclass  of person", "in fact  the student subclass", "So in general  when thinking about overriding  we", "want to be very careful", "Overriding in order to add functionality  with new methods  is a", "great idea", "Overriding and changing old functionality might  in fact  violate", "our substitution principle  which is one of the key ways in which you can", "make object oriented programs that actually fail to deliver on the", "promise of object oriented programming"], "hX1aUXnDwgA": ["PROFESSOR  We've been looking at the idea of exhaustive search", "And we just saw  when we want to do this on things that don't have a", "finite number of choices  real value to floating point numbers  for", "example  we've got a problem", "We need to make the step size small in terms of how many", "different things we sample", "But as we keep making it smaller  it's going to make the search take longer", "and longer", "Because if we're going to do it  we're going to put a lot of effort into", "trying to find the right answer", "So we'd really like to have a way of having things still be very efficient", "yet  find the answer we want", "And it turns out  for a lot of problems  we can do that using a", "wonderful idea called bisection search", "So what do we know", "Let's go back to the idea of trying to find the square root", "We know that the square root of x lies somewhere between   and x", "We're assuming x is positive just to make life a little easier for us", "That's a mathematical fact", "Now  what we did was we said let's start with", "Then    plus a little bit", "Then    plus   times a little bit  and then   times   times a little bit", "trying all of those examples  until we got to something that was close enough", "to the answer we wanted", "That's exhaustive", "Rather than doing that  suppose instead we say  look  we know that the", "square root of x is somewhere between   and x", "So let's just pick a guess right here in the middle", "Let's call that g", "Let's just pick the midpoint between   and x and try it", "Now  if we're lucky  the answer is close enough and then we're done", "That's unlikely", "But even if that is not the case  we have a good situation", "Even if we're not close enough  we can now ask was that guess g", "too big or too small", "Well  if g   is bigger than x  then we know that it's too big", "We know that the square root has to lie somewhere between   and g", "And that says we can now instantly just focus on this portion", "Doing that  we can  again  take the midpoint of that", "Let's call it another version of g", "A new g", "And again  we can say  is that close enough", "If not  is it too big or too small", "For example  in this case let's assume that g   is less than x", "That says g is too small  and what does that say", "It says  we know that the actual value has to lie somewhere between my new g", "and the previous g that I guessed", "And again  we can pick the midpoint and guess again", "If this works  and it does  this is really cool", "Because it says  at each stage of this bisection search I'm cutting in half", "the size of the range of values I have to look at", "We're bisecting them  which is why it's called that", "At each stage we reduce the range of values that we have to search by half", "And that is going to be really powerful", "Rather than just at each stage throwing away a little bit  we're", "cutting down the problem  a big portion  each time through", "So can we capture that idea", "The answer is  sure  and it's not that hard to do", "Again  there's some code", "It looks a little bit daunting  but it's really not as bad as you think", "What does it say", "It says  I'm going to have some value of x I'm going to start with", "OK  I'm going to pick an epsilon which is going to tell me how close I am", "and I'm going to keep track of how many guesses I did as well", "I'm going to set up  initially  a low and high value  which are to start", "with   and the value of x", "That's my range where which I want to be trying to do the computation", "My answer is initially going to be the midpoint halfway between low and high", "And then  what do I do", "I run through one of these little loops where  again  I basically say", "am I close enough", "If this is true  then I'm too far apart", "I'm not close enough", "And in that case  well  I'll print out some information that tells me where I", "currently am", "I'll change the number of guesses and I'm about to make a new guess", "And if I'm not close enough  what does it say to do", "It says  if my current answer squared is less than x  I'm too small  and I'm", "going to change the lower end to be that guess", "I'm moving up the lower end", "On the other hand  if answered squared is bigger than x  then I'm too high", "and I'm going to reduce the high down to the answer", "And I'm just going to keep doing that", "If I keep doing that I'm going to keep chunking this thing in half  and", "having done either of those two pieces I then change my", "answer to gain the midpoint", "And I do this one more time", "So I'll just keep cycling through this  cutting in half each time  the", "size of the problem until I get to something that's close enough", "We hope", "OK  let's see what happens if we do it", "Here's some code in my IDLE system that has it", "It has exactly that", "Let's do this  basically  let's start with something simple which we said", "was going to be", "And let's see what happens if we evaluate that", "Oh  look what happens", "I start off  and let's look at that  I start off with a range", "between   and", "And the answers is the midpoint", "I then  cut down the high end", "I then  cut down the high end again", "I then  cut down the low end", "I then  cut down the low end", "And you can see at each stage it's reducing the range", "And after only   guesses I get a pretty good guess for what the square", "root of   is", "It's not exact", "I happen to know it's    but in only   guesses I got it", "Remember  last time we did     guesses to get to something that", "wasn't  in fact  much better", "In fact  it wasn't even as good as this guess", "So notice how it's cutting down the problem at each stage", "All right  let's go try this other version of this  right", "", "Let's see what happens if we find  using by section first  the square", "root of that", "We see it cranking along", "Wow  in   steps  it got to something that took a million steps the last", "time around", "In   steps it gets to a pretty good approximation", "Let's try something even bigger", "Let's see what happens if we do that one", "All right", "Again  you can see if you look at these numbers how quickly", "it's zeroing in", "In only   steps  it got to the square root of a pretty big number", "So in fact  this does it really well", "What can we observe out of this", "Well  here are some things that we see", "First of all  bisection search radically reduces", "the computation time", "And this is part of that original message that it's not just having a", "fast computer", "It's being smart about how we think about solving the problem", "And in this case  being smart about how we generate the guess is going to", "be really important", "So when does this idea of bisection search work", "Well  it should work well on problems where there's a", "sort of ordering property", "Meaning  that the value of the function being solved varies", "monotonically with the input value", "Another way of saying it is here the value I'm looking for is g", "Then  it grows as g grows", "And that says that there's this nice ordering of the solutions or the", "potential solutions  and so picking a midpoint gives me a good way of", "cutting the problem in half at each stage", "We're going to come back to this idea of bisection search", "throughout the term", "It's a really powerful tool  but you can already see how dramatically it", "reduces the computational cost"], "CqeyFtxCqqE": ["CHRIS TERMAN  Early programming languages didn't offer much support", "for structuring complex programs", "They gave local variables and global variables and not much else", "As programs became more complex  we needed to find a way to control which", "procedures could access which data", "Procedures that willy nilly made access to whatever data they could get", "their hands on lead to hard to find bugs", "So we needed a more organized way", "And we came up with the idea of bundling data and the associated", "procedures into an object with a well defined interface", "Early object oriented programming languages started appearing in the", "' s and ' s", "And by the ' s  most programmers had adopted the object oriented", "programming style because it was an efficient way to write and debug", "complex programming systems", "Over the next two lectures  we're going to explore Python support for", "object oriented programming", "Python supports many different kinds of data", "There's integers  and floating point numbers  and strings  and lists  and", "dictionaries", "And you've been using these data structures as you've been", "writing your programs", "From a Python point of view  each of these is an object", "What  you ask  is an object", "Well  objects have a type", "And a particular object is said to be an instance of a type", "So here's the type of all the objects above", "And one  two  three  four is an instance of type integer", "Why we introduce the notion of types is to that the behavior of an object", "is actually associated with the type", "In other words  how integers work when you add them together   use the plus", "operator on them", "that's actually different with integers than it is for floats  or", "strings  or lists", "And so  associated with each type is the information that's needed to say", "how do I do a plus operation  for example", "Associated with each object is an internal data representation", "Some objects  like integers and floats and strings  are primitive", "In other words  they hold some data and that's it", "They don't have much in the way of internal structure", "Other objects like lists and dictionaries are composite objects", "They actually are a collection of other objects in the system", "And they organize that collection in particularly convenient ways", "Finally  each object has a set of procedures for", "interacting with the object", "So for example  ints have a procedure for dealing with adding two ints", "together  and lists have a separate procedure for", "adding two lists together", "In the case of lists that means to concatenate them", "Let's look at this more closely", "So here's an example data object   the list  one  two  three  four", "So the Python type of that data object is list", "There's an internal data representation", "And we have some choices to make as an implementer of list", "For example  we could store the components of a list in a little", "sequential array of memory locations  each of which holds a pointer to an", "object and associate with that array  a particular length  l of the list", "In our particular example  the length would be four", "And so long as there's enough room in the array to store four elements", "we're all set to go", "Alternatively  we might choose to store a list as a linked list of", "individual cells", "So we'd have a cell holding one  and a cell holding two  and a cell holding", "three  and a cell holding four", "And the other half of each cell would be a pointer to the next cell  so a", "little daisy chain of these cells  one for each element of the list", "Why would you choose one implementation over the other", "Well  one of the considerations is what operations do", "you want to be efficient", "For instance  suppose you wanted to take the length of the list", "Well in the top representation  the length is explicit", "It's actually stored as an integer as part of the internal data", "And when a user asks for the length of a list  just look up that", "integer and return it", "Very quick  very efficient", "If you ask for the length of the link list  you'd actually have to go down", "that list  counting as you go  to count the number of cells that have", "been linked together", "So the linked operation is very inexpensive with the top", "representation", "And more expensive with the bottom representation", "But now suppose that an important operation is inserting something at", "the beginning of a list", "With the array  we'd actually have to spend the time to copy all the", "elements in the array up one index", "And then we'd have room to drop the new object at the", "beginning of the array", "That is potentially an expensive operation", "We actually have to move everything around inside the internal data", "representation", "With a link list  we simply have to create a new cell and make the pointer", "in that first cell now point to the rest of the list", "So inserting at the beginning of a list is actually very simple with the", "second representation", "There's a struggle implementers go through when they choose internal", "representations", "They have to think about what they want to be efficient and what things", "they want to be easy", "The internal representation is meant to be private in the sense that users", "of the object shouldn't rely on any particular details", "So for example  a user should use some sort of procedure that's associated", "with a list to get its link", "They shouldn't assume that can reach in and grab an internal integer and", "simply use that as the length", "And so correct behavior of the objects might be compromised if you actually", "make some assumptions about the internal data", "Lists have a lot of procedures associated with them", "There's procedures for indexing into a list  or creating sub lists for", "concatenating or replicating the list", "That's the plus and the star", "We can ask many things about the list", "We can find the minimum element", "We can search for a particular element", "We can ask for the length of the list", "We can remove elements from the list  so forth and so on", "So all the behaviors that are available to the programmer are really", "described by this list of procedures", "And the procedures know about the internal data representation", "But a user of lists should restrict themselves to the functionality", "provided by the operators and procedures", "Let's pop up a level and talk about object oriented", "programming in general", "Object oriented programming is sort of affectionately known as OOP", "Oop", "First off  in an object oriented programming view of the world", "everything is an object and has a type", "For example  the presentation that you're watching would be represented", "as an object", "And somewhere inside of its internal representation would be a list of", "slide objects  one for each slide in the presentation", "And each slide object would have internally  perhaps  a list of text", "boxes that represent each of the little groups of text on the slide  so", "forth and so on", "So what we've done is to break a fairly complicated idea of a", "presentation down into this hierarchy of objects  which sort of makes it a", "little simpler to  sort of  think about how to actually organize the", "program that produces presentations", "Objects are a data abstraction that encapsulate an internal representation", "in an interface for interacting with the object", "So remember that the interface defines behaviors", "For instance  length or display on screen  or something like that", "But the details are hidden inside the actual implementation that lies behind", "the interface", "The way you interact with the object is simply to ask the appropriate piece", "of the interface to perform the desired operation", "In Python  the interface is actually represented as a set of attributes", "And there's a data attributes and procedural attributes  which we give", "the special name to of methods", "Some languages have support for data hiding  which prevents access to", "private attributes", "So in implementing behavior  some of the attributes may be intended for", "public consumption and other attributes may actually only be for", "the internal use of the implementation", "In some languages  you can declare some attributes", "private and others public", "Python doesn't have that distinction", "So when you read a particular type of object  you will get a list of things", "that you're allowed to do", "attributes you're allowed to use", "And so  you're just expected to play by the rules  even if you know", "something more about other attributes that might be available", "Of course  one can create new instances of objects  either", "explicitly", "and we'll show you how to do that in a minute", "or often using literals", "So when I typed in the text  one  two  three  four  in my Python program  the", "Python interpreter knows how to take those characters and convert them into", "an integer object", "And we can destroy objects", "We can destroy them explicitly using the delete operation in Python  or we", "can just forget about them", "We can sort of lose our handle to them", "So if we say a equals some list  and then later  on we say a equals some", "other list  that first list disappeared", "In other words  it used to be the value of a and that's", "how it got to it", "But now that the value of a has changed  we can no longer", "get to that old list", "So Python system will actually reclaim destroyed or inaccessible objects", "It will go take that first list and return it back to its storage pool", "since no one can actually access it anymore", "And that process  quite appropriately  is called garbage collection", "What are the advantages of object oriented programming", "I suggest you actually Google for advantages of OOP", "You'll find a bunch of very interesting articles that describe why", "object oriented programming has taken the programming world by storm", "Here's some thoughts that I have", "It provides a way of doing divide and conquer development", "What I can do is to go off and implement and test the behavior of", "each of my classes of objects individually", "So I can think about when I  for instance  implementing presentation", "program  I can think about as the presentation as a", "collection of slides", "And I'll think of making an actual slide show as sort of going through", "and displaying each slide individually  one at a time", "And then  each slide  when it's asked to display itself  might go through", "and say to each text box  please display yourself at your location on", "the screen", "What I can do is work  sort of  from the bottom up of implementing the", "display of text boxes  and then a display of slides  and finally the", "display of the entire presentation", "And I can work on each of those behaviors separately  assuming that", "the other behaviors have been implemented correctly", "So this increases the modularity and really reduces the complexity", "The complexity of doing a slide show from the presentation point of view", "really is as simple as individually presenting each of the slides in turn", "So classes make it easy to reuse code", "And  in fact  many of the Python modules you've been using  really the", "way they deliver the functionality is they define new classes  and all the", "methods  and internal data that they have  and you basically  interface", "with those classes to access the functionality", "implemented by the module", "Each class has a separate name space", "So there's no collision on function names", "I don't have to have a separate procedure called integer", "plus and list plus", "I can basically look inside a class and say please", "use your plus procedure", "And that's completely a unique way of specifying which plus I need", "And finally  inheritance allowed sub classes", "which we'll meet in a minute", "to refine or extend a selected subset of a superclass' behavior", "What I'll be able to do is to say  look  I want to design a special MIT", "presentation  which is just like a normal presentation but has a little", "MIT symbol in the bottom left hand corner", "So I can change one aspect of  for instance  the display routine to build", "that extra piece of functionality in", "But I can inherit all the functionality that's inherent in the", "base presentation code to do slide shows  so forth and so on"], "oGvdcAgHYxA": ["JOHN GUTTAG  At the end of the previous segment  I promised that in", "this segment we would address the question of how much is enough", "Now  I know that's a deep philosophical question  and I hope", "you're not going to be disappointed when I tell you that's really not what", "I want to talk about", "Instead  I want to talk about a much simpler question", "How many samples do we need to look at in order to have a justified", "confidence that something that is true about the samples is also true about", "the population from which the samples were drawn", "This is always an important question when we look at any statistical", "measure because  as we've seen before  the samples might or might not be", "representative of the entire population", "The number of samples we need will depend upon the underlying variance in", "the distribution from which we are drawing the samples", "Now  of course  unfortunately  we don't get to see the underlying", "distribution", "We only get to see the samples", "So we have to turn this into a question about the samples", "So let's look at the variance that we can measure by looking at the samples", "Essentially  what we do is we run multiple trials", "getting different outcomes", "And then we look at the variance in the outcomes of those trials", "That's the reason that when we started looking at these simulations we always", "ran multiple trials  rather than say  in the case of coin flipping  just", "flip more coins", "Actually  we did just flip more coins  but that really wasn't the right thing", "to do when we did it", "All right", "Now  let's look at how we can formalize this notion of variance in", "the outcomes", "We do that using a notion you've all seen before", "Anyone who's taken an exam has been told  here is the average  here is the", "standard deviation", "And effectively  what the standard deviation is telling us is how many", "values are close to the mean", "If many values are close to the mean  then the standard deviation is small", "If the values are far from the mean  the standard deviation will be large", "Looking at this a bit more carefully  we can define the standard deviation", "typically written as sigma  of some set of results  written in this case", "as big X  as the square root of   over the cardinality of X   that's the", "number of samples we've drawn or the number of trials", "multiplied by the summation over all the little x's in the big X of  x", "mu      where mu is equal to the mean", "So if you think of it  this make sense", "We take the differences between the samples in the mean  square them", "And that means that we don't have to care whether the differences are", "negative or positive", "And then divide them by the number of trials  and then take the square root", "of the result", "For those of you who prefer code to formulas  here's a simple", "implementation of standard deviation", "We take the mean by summing X  divide it by the float of the length of X", "and then we simply iterate through X summing up the squares  the", "differences  and then dividing it by the length and taking the square root", "Exactly what the formula said", "We can use the notion of standard deviation to think about the", "relationship between the number of samples we've looked at and how much", "confidence we should have in the answer we've computed", "Let's now look at some code that does that", "And we'll look at it only very briefly because it's so similar to code we've", "looked at before", "Once again  I have something called flip flop", "Whoop", "I always say flip flop", "I should say  once again we have something called flipPlot", "As before  it will take a minimum and a maximum exponent", "But this time  since we want to look at the standard deviation over", "multiple trials  we also pass in a number of trials", "And just to emphasize the fact that we're doing multiple trials  I've", "factored a single trial out into a separate function of", "the number of flips", "Other than that  there's really nothing very interesting to", "look at in this code", "It looks almost exactly the same as the code we've looked at before", "So let's run it and see what we get", "Once again  we'll vary the exponents from   to", "And then we'll also do   trials", "OK  let's go over to the PowerPoint here now and look at the results", "First of all  we're plotting the mean of the number of heads over the tails", "the head tails ratio  for the   trials", "As before  we can see we have some variations with a small number of", "flips  and then it stabilizes right around", "Now we're going to see something that we didn't look at before  the standard", "deviations", "Notice here as we increase the number of flips  the standard deviations", "drops dramatically", "In fact  it's dropping linearly", "Notice that both the x and the y axis are logarithmic", "So the fact that this is almost a straight line suggests that in fact", "they're dropping linearly", "And by the time we get to   to the  th flips  the standard deviation of", "the   trials is about", "Since we know that the ratio is around    we see that standard deviation is", "considerably smaller than the mean", "That gives us every reason to believe that the result we have is a good one", "Now let's look at the main differences we've looked at before", "But again  we're looking at the mean of the   trials", "As expected  the absolute difference between the numbers of heads and tails", "grows with the number of flips", "However  since we're averaging the results over   trials  this is", "considerably smoother than the plot we looked at before when we", "only did one trial", "Now let's look at the standard deviation of the absolute difference", "Well  this might seem a little puzzling  because it looks like  as we", "increase the number of flips  the standard deviation of the absolute", "difference is increasing", "Well  it not only looks like it is  but it is", "Does this mean that as the number flips increases  we should have less", "rather than more confidence in the estimate of the expected value of the", "difference between heads and tails", "No  it doesn't", "What's going on is the standard deviation should always be viewed in", "the context of the mean", "After all  if the mean were a billion and the standard deviation    we", "would view the dispersion of the data as small", "On the other hand  if the mean were   and the standard deviation were", "we would view the dispersion as enormous", "So you'll recall that as we increase the number of flips  the number of", "absolute difference got much larger", "Again  it's a logarithmic axis here", "And so it's not at all surprising that the standard", "deviation should get larger", "The lesson here is that we really should not be using standard deviation", "to compare different tests where the means are very different", "There's another statistical measure we use for that  and we'll cover that", "measure in the next segment"], "YdT6gL3Cpss": ["PROFESSOR  One of our motivations for developing a mathematical model of the", "phenomenon we're studying is so we can make predictions", "Often they're experiments that are either very difficult", "to do or even dangerous", "Suppose you wanted to know what will happen if a nuclear reactor lost all", "of its coolant", "Well that's not an experiment we really want to run  so instead we want", "to develop models that will let us make predictions of what will happen", "so that we can do the appropriate engineering", "Suppose someone came to you  as an expert  now  in the trajectory of", "arrows  and said  how thick a shield would I need in order to protect", "myself from an archery attack", "Let's see if we can use the measurements that we took in the", "previous segment and help answer that question", "So how would we use the model in order to make a prediction of the thickness", "of the shield", "And it's nice to use the model because there are times when experiments are", "sort of impractical or inadvisable", "So standing up with a thin shield and having somebody shoot arrows at you", "might be a very bad idea because the shield might not do what it should", "And somebody says  aha  it needs to be thicker  but it might be too late for", "the participants in the experiment", "So what we want to do is to figure out how to use our model  now  that we", "have for the trajectory of an arrow  and see if we can deduce the", "information we need", "So we want to know the speed of the arrow as it reaches the target because", "a combination of the speed of the arrow and the mass should tell us a", "little bit about how thick the shield really needs to be", "Well  sadly  we didn't measure", "did we measure it", "So no  unfortunately we didn't measure the speed", "But can we deduce it from the model", "So what we want to do is  using the data that we got from curve fitting", "can we deduce the speed is the arrow as it reaches the target", "So I modified the code a little bit to print out the values for a  b  and c", "for the parabolic fit", "And these are the values that polyfit gave us back that describe the", "parabola that match the", "was able to predict the trajectory so well", "And so I've written that out as an equation here that gives us the height", "above the launch point as a function of the distance", "So this is the distance  x  and this is the height  y  here", "OK  so can we deduce the speed of the arrow", "So that's our task here", "So the first thing I'm going to do is to determine the highest point in the", "trajectory", "So I want to determine the peak value of y", "And what I notice is that the peak value of y sort of happens midway", "through the trajectory from the bow down to the target", "And so this guy is at   inches", "And so that means that the midpoint here  ypeak  so this is going to be", "ypeak here", "The midpoint occurs at distance equal to   inches  which is exactly", "halfway between the bow and the target", "So I can actually plug that in here", "So if I can go use my mathematical model now to compute ypeak  and", "plugging in x equals    and doing the arithmetic I'm going to end up", "with ypeak being   inches  which is     meters", "OK", "So my next step is to figure out the time it takes the arrow to fall from", "its peak all the way down to the target", "So as the arrow is falling here  as the arrow is falling from its peak", "down to the target  the thing I'll observe is that's completely", "that the acceleration in that direction is happening completely", "because of the force of gravity on the arrow", "And so time for arrow to fall from ypeak down to", "And so we know from sort of our Newtonian physics that distance equals", "one half at squared", "And using that  I can sort of solve for t", "And that's going to be the square root of twice the distance", "so twice ypeak", "And the acceleration due to gravity is g", "And so if I go off and do that computation I discovered it t equals", "seconds", "So that's the amount of time it takes the arrow to travel from here to here", "in terms of time", "So this time is equal to     seconds", "And the distance I'm traveling is from here to here  which is   inches from", "the midpoint to the target", "So  let's see", "So the speed now   so now we can just quickly do the speed", "OK", "And so that's   inches is the distance in     seconds", "And so if I do a little arithmetic that's     feet per second", "Well  I'm a little nervous about the", "I can compute with lots of precision", "I can do the arithmetic to lots and lots of decimal places  not clear how", "accurate that is given the errors in the measurements and stuff", "So maybe it would be safer to say it's somewhere around   feet per second", "And we'll leave it at that", "So what we've done here is to show with a bunch of", "once we have a curve fitted model  we can actually derive implications of", "that model and help us with some measure", "determine some measurements  predict some measurements that we didn't", "actually need to go take", "This brings us to the end of our brief glimpse about how to use computation", "to process and understand our data", "If data crunching is in your future  you might want to learn much more", "about statistics", "It's the study of how to correctly process data and learn what", "it has to tell us", "I encourage you to learn more about the statistical tools that are", "available in Pylab"], "CZ-pBiV9c1c": ["Welcome back to  x", "Today  I want to talk about pi", "Oh wait a minute", "not that Pi", "This pi", "For thousands of years  people have known that there is a constant  called", "pi since the  th century  such that the circumference of a circle is equal", "to pi times the diameter  and the area of a circle is equal to pi r squared", "What they didn't know was what value should pi actually have", "One of the earliest estimates of pi can be found in the Egyptian Rhine", "Papyrus  circa   BC", "It estimated pi to be   times   over   squared", "Which  if you evaluate it  works out to roughly", "Not quite right  but a pretty good estimate for the time frame", "More than     years later  the Old Testament implied a different value", "for pi  when giving the specifications of one of King Solomon's construction", "projects  as described here", "And he made a molten sea    cubits from the one brim to the other", "it was round all about  and its height was   cubits  and a line of   cubits", "did compass it round about", "Well  if you parse this and solve for pi  what you see it saying is that", "times   times pi is equal to", "Well  since we know that   times   is    we can solve for pi and say that", "pi equals", "Not quite as good as the Rhine Papyrus", "Somewhat later  Archimedes of Syracuse derived upper and lower bounds in the", "value of pi by using a high degree polygon to", "approximate a circular shape", "Using a polygon with   sides  he concluded that pi was somewhere", "between     and", "Giving upper and lower bounds was a rather sophisticated approach for the", "time  somewhere around maybe   BC", "Also  if we take pi as the average of this and this  we come up with the", "value of", "really  strikingly good for the time", "An error of about", "We now have a long gap", "We go from   BC to the  th century  when the French mathematicians Buffon", "and Laplace proposed using a stochastic simulation based on", "dropping needles to estimate the value of pi", "Think about inscribing a circle in a square  where the square has sides of", "length    which means that the radius of the circle is of length", "By the definition of pi  we know that the area is equal to pi r squared", "If r is    that tells us that the area is equal to pi", "So if we could find the area of this circle  we would know the value of pi", "Buffon suggested that he could estimate the area of the circle by", "dropping a large number of needles  which he argued would follow a random", "path as they fell", "And if he dropped them in the vicinity of the square  some would fall out", "here  and he could ignore those", "Some would fall in the square  but not in the circle  and some would fall in", "the circle itself", "Now  if we know that the locations of the needles are truly random  we can", "conclude the following", "that the ratio of the number of needles that land in the circle to the", "number of needles that land in the square should be exactly the same as", "the ratio of the area of the circle to the area of the square", "Now we can take this equation and solve for the area of the circle", "And say that the area of the circle is going to be equal to the area of the", "square times the needles in the circle  divided by the", "needles in the square", "Just simple algebra", "Now remember  we concluded that the area of the circle was exactly pi  so", "in fact we can now compute pi by looking at the area of the square", "times the needles in a circle  divided by the needles in the square", "If you try Buffon's experiment  you'll soon realize that the places where the", "needles land are not truly random", "Moreover  even if you could drop them randomly  it would take a very large", "number of needles to get an approximation of pi as good as even", "the Bible's", "Fortunately  computers can randomly drop simulated needles", "at a ferocious rate", "Let's look at a program that does exactly that", "We'll look at three functions", "First  we'll throw some needles  or drop some needles if you prefer  in", "the vicinity of a square", "The function throwNeedles simulates dropping the needles by first using", "random random to get a pair of positive Cartesian coordinates", "x and y values", "It then uses the Pythagorean theorem  here  to compute the hypotenuse of the", "right triangle with base x and y", "This is the distance from the tip of the needle from the origin", "Since we know that the radius of a circle is    we know that the needle", "lies within the circle if and only if the distance from the origin is no", "greater than", "We then use this fact to count the number of needles in the circle", "The function getEst uses throwNeedles to find an estimate of pi by dropping", "numNeedles needles and averaging the result over numTrials", "It also computes the standard deviation  prints what it's doing  and", "then returns both the current estimate and the standard deviation", "And you might wonder why we're bothering with the standard deviation", "And the answer is  we not only want an estimate of pi  we want to know how", "good the estimate really is", "And that's what the next function does for us", "The function estPi calls getEst with an ever growing number of needles", "until getEst returns an estimate back with a confidence interval that  with", "a confidence of     is within precision of the actual value", "It does this by calling throwNeedles with an ever larger number of needles", "until the standard deviation of the results of numTrials is no larger than", "precision divided by", "Under the valid assumption that the errors are normally distributed", "ie  that random random really is random", "this ensures that    of the values lie within precision of the mean", "Let's go run this and see what we get", "So it starts off pretty quickly  generating some estimates of pi", "But notice that I'm doubling the number of needles each time  which", "means it's going to double the amount of time required to get an", "estimate each time", "And so we can see that it's perceptibly slowing down", "Rather than make you sit here and watch it  I've run this in advance", "That's why I set random seed to    so I'd know what results I", "was going to get", "And transcribed it to a PowerPoint presentation", "As one would expect  the standard deviations", "this column declined monotonically as we increased the number of samples", "It would've been very discouraging if it hadn't", "In the beginning  the estimates of pi also improved steadily", "", "getting better as we go", "But it does not get monotonically better", "For example  if we look at these two estimates", "if we look at the estimate for     needles and     needles  we'll see", "that it actually got worse", "This value is further from the actual value of pi than is this", "However  if we look at the ranges defined by  say  one standard", "deviation around each of the means  both ranges contain the true value of", "pi  and the range associated with the larger sample is considerably smaller", "Notice that this standard deviation is smaller than this one", "So even though the estimate generated     samples happens to be further", "from the actual value of pi  we should have more confidence in its accuracy", "This is an extremely important notion", "It is not sufficient", "It is not sufficient to produce a good answer", "We have to have a valid reason to be confident that in fact  it really is a", "good answer", "And when we drop a large enough number of needles  the smaller standard", "deviation gives us reason to believe that we do have a good answer", "So we can go back here and see that the standard deviation is      and", "from that  we can conclude that this is a pretty good estimate of pi", "In fact  it is a pretty good estimate of pi", "I just lied to you", "Having the small standard deviation doesn't mean we have a good estimate", "about pi  and in general  it doesn't mean that our programs", "whatever we're computing is giving us a good estimate", "All this means is that if we were to draw more samples from the same", "distribution  we can be reasonably confident that we would", "get a similar value", "It says nothing about whether the value is actually close to pi", "Before we can believe the results of any simulation  we need to have", "confidence in three things", "One  that our conceptual model is correct", "in this case  that when I did the algebra to compute the value of pi", "from the area  I'd done the right thing", "That our implementation is correct", "I could always have a bug in my code", "It wouldn't be the first time", "And finally  that we have enough samples to", "actually believe the result", "That's the only one of these three that we learned by looking at the", "standard deviation", "Let's see what happens if we get any of this wrong", "I'll come back over to my code  and I'll come up here", "Instead of using    I'll put in", "Now we'll run it again  just a little bug in my code", "And you'll note I'm getting values that are nowhere as close to pi", "My standard deviations are dropping quite quickly", "And as I let this run  I'll get to some number of samples  probably about", "a half a million again", "And my program will claim it has computed a correct value of pi  but of", "course it hasn't", "Whenever possible  one should attempt to validate results against reality", "In this case  one should use some other means to compute an", "approximation to the area of a circle", "for example  physical measurement", "Or pi  some physical measurement", "And check at the computed value of pi is at least in the right ballpark"], "wq8v7M3Szr0": ["We've now seen a lot of things dealing with functions", "They're going to be a really powerful tool for us", "And let's deal with one last topic", "We'll come back to it in more detail later on  but it's", "useful to highlight now", "And that builds on the idea that if functions help capture", "modularity  they help capture computations that are useful", "in multiple places  this also suggests that it can be useful", "to group functions together that share a common theme", "To capture them in something that sort of builds them into", "an element that has a lot of coherence to it", "And one way we can do that is to put functions dealing with", "a common theme into a single Python file  a  py file", "And if we do that  then we can import those functions  that", "file  into computations using the Import command", "And let me show you an example of that", "Here's some code that I could write that deals with some", "simple geometry", "So I've got a value for pi", "I've got a way of computing the area of a circle", "circumference of a circle", "I could do the same thing with surfaces of spheres and", "volumes of spheres", "These computations that kind of mash", "together with one another", "And imagine I saved this away into a", "file that I call circle py", "And I've in fact got it loaded up ready to go", "What I'd like to do is to say  so how would I use this", "And the way I use it is that I simply  whether in a Python", "shell or in another file  say  let me import things in", "So in particular  I'm going to go over here", "and start up my Python", "And I am going to type in Import Circle", "And that has now brought in the functions that I've", "defined there", "So I can define pi to have a really simple value  which I", "know is not true", "And if I say what's the value of pi  it prints out that", "But if I say  so what is the value of pi that is stored in", "the circle file", "Aha", "And so this notation right here  this dot notation  helps", "me specify that", "The dot basically says from the context circle  import the", "variable pi", "Or similarly  from the context circle  import that variable", "area  which is a function  and use it", "So I can  for example  say  give me circle area of  I", "don't know  three", "And it brings in from the circle context the definition", "of area that I created when I actually stored it away inside", "of that file", "So we'll come back to the dot notation  but it in essence", "lets us create modules with commonality to them and import", "things from them in a way that lets us use them very nicely", "One way to do it is to simply say Import from circle", "And every time I want to use something from that file  I", "need to specify it using that kind of a definition", "There's another way I can do it  which is to say from", "circle  from that context  just import everything", "Let's see what happens if I do that", "So I'm going to go back over here and I'm going to say From", "circle  Import everything", "I'm going to define pi again to be something", "simple  like", "Actually  I'll make it even dumber", "Let's say it's", "And if I say  what's the value of pi", "Ah  now I've gotten it in terms of that version", "But if I say give me the area  it will get the area that was", "created from circle", "If I say I want the value of pi from circle", "I can specify it", "So this version of Import basically says bring into my", "environment all the things from circle", "If there is no binding in my environment  I will look it up", "from circle  but I don't have to specify it  which is why I", "could just say area", "But I can also make changes in this environment  overriding", "what I saw in circle  such as this one  where I defined pi", "to have the particular value that I said I wanted to have", "That tool basically gives us a way to bring modules captured", "together into our computation", "And we're going to come back to that later on in the term"], "FQI929r5TTs": ["PROFESSOR  So where have you been", "What have you done during this course", "Well  I'm just going to quickly highlight the key things  but I would", "suggest that what you've done is you've learned a language and you've", "covered six major topics", "And there are the topics", "But we started with a language", "So you learn a language for programming  in our case  Python", "But really what you learned was a language for expressing computation", "And that was a key element to that", "Happened to be in Python  could have been in any of several other", "languages  it was really the idea that you can describe", "computation using a language", "Having gotten that language  having developed that language  then we", "talked about six major things", "The process of writing and debugging a program  how to actually use the", "language to describe computation", "That was the first major topic", "We also talked about estimating computational complexity", "When one starts using that language to describe programs  what are the", "classes of the programs", "What is the complexity inherent in them", "And what are the relationships between problems and certain characteristics", "of problems and inherent complexity", "Once we had that idea of different levels  if you like  of complexity", "and once we had that ability to think about how to write programs in our", "language  we talked about one of the biggest things  which was the process", "of going from a problem statement to an actual computational formulation", "And that's where we use that idea of abstraction", "This was  in some sense  the heart of programming", "taking a description of a problem we want to solve and figuring out how to", "capture it in a computational  algorithmic way using", "our programming language", "Doing that led us to a set of basic recipes", "Those were our algorithms  those were the classes of solutions we had", "So we started building up a collection of recipes that would let us transform", "problems into computational solutions", "One of the key elements we saw when we used recipes was that sometimes", "problems are simply not easily described in a way that", "can be solved precisely", "And for that  we then looked at the idea of using simulations in order to", "get an insight into problems that don't easily succumb", "to closed form solutions", "And once we had that idea  then we started tackling", "some real world problems", "And there we saw how using our computational methods would let us", "think about both modeling and understanding data", "Modeling real world solutions  and then really thinking about what does", "the data mean when I get it back out", "So what I'd like to do now is just highlight for you the key elements of", "each of those six steps", "So first of all  though  let's start about the language", "Why Python", "Why did we actually do our programming in Python", "Well  there are a couple of reasons", "First of all  it's actually a pretty easy language to learn", "It has a very simple syntax", "As you saw  you could learn the rules of the language quite early", "Once you had that simple language  we also saw  though  that it could", "describe almost anything that you want to describe computationally", "So it was a powerful language  just easy to learn", "The second key element of Python that makes it helpful here is that it's an", "interpretive language", "Remember that way back from one of the first lectures", "Interpretive said that there's   inside of the machine", "a thing called an evaluator and interpreter which  when given a", "sequence of instructions or algorithm or recipe  would walk through them one", "at a time  following very particular rules about how to do the execution", "The advantage of that was that while it might be not quite as efficient as", "a compiled language  it did mean that if I ever hit a bug  an error  I would", "know exactly where I was  exactly what was going when that happened  and it", "made it much easier to actually do the debugging  which is really handy", "And then the third element  which you haven't really seen much of unless you", "program in other languages  is that Python makes it easy for you to not", "worry about certain details", "And in particular  you don't have to worry about managing memory", "The data you use is automatically stored in memory  the programs that", "you run automatically move that data around  and you're not responsible for", "allocating particular amounts of memory or sizes of memory or dealing", "with garbage collecting unused memory  a problem that other languages have", "So it's a handy language to deal with", "Second reason why Python was handy is it's a modern language", "As opposed to some languages that have been around for   or   or   years", "Python  being a more recent language  is designed to support certain styles", "of programming  primarily object oriented programming", "And that's really handy because that's a classic way of thinking about how to", "break up problems  and Python provides support for that in a very easy way", "And then finally  Python's actually increasingly popular", "It's a language that is used more and more", "It has a lot of places where it's used in terms of subjects", "here at MIT or elsewhere", "It's also used a lot in industry", "And as a consequence  there's a growing number of libraries of tools", "being created in Python", "In fact  if you go to the web and look it up  you'll find that depending on", "which list of popular programming languages you saw  you'll see Python", "anywhere from fourth to sixth to eighth on that list of popular", "programming languages", "So it is being used more and more", "OK", "Once we had Python  what did we learn", "Well  the first thing we talked about is how do you actually write  test", "and debug programs", "And here I just want to remind you of some of the key elements we saw", "Primary one of which was take it one step at a time", "Start by understanding the actual problem", "And in particular  I'm going to actually say go down to the bottom", "here  think about not just jumping into write code  but actually  once", "I've understood the problem  what's the structure", "What are the algorithms that might be useful here", "What are the parts I might break it into", "And how could I used pseudo code to actually first think about how do I", "put the pieces together", "All too often  novice programmers just jump in starting to write code  rather", "than thinking about the overall structure", "And so hopefully by now you've thought about how do I break it into parts", "How do I use pseudo code to describe what I'm doing", "And then once I've broken it into parts  that'll tell me  for example", "what are good abstractions  both in terms of the data and in", "terms of the code", "And that  in particular  then leads to an easier way to actually code", "Because having broken it up into parts  I can test each of those units", "and then the overall thing  before I worry about building the", "whole entire system", "And finally  would really stress that you want to first make sure you've got", "something that works", "So focus first on functionality", "Once you've got an overall system that works  then you can think about", "efficiency", "But take it one step at a time", "And as related to that is the idea of being systematic", "You saw that when you were debugging", "that when you think about debugging  think about running an experiment to", "understand where your bug is", "We talked about this idea  for example  of binary search as a nice", "way to isolate where your bug might be", "And in particular  I would hope that when you do create a code that has a", "bug   and it will happen", "that you ask yourself why did the program do what it did rather than why", "didn't it do what I wanted it to", "Solving this problem will more quickly lead you to debugging and creating", "correct code", "But those were the tools you used to actually write code", "Now with that  what were the big modules that we saw in the course", "Well  one of them was the idea of estimating complexity", "Here what we saw was that different algorithms fall into different classes", "of complexity", "We had that idea of Big O notation", "And what you've now seen is a sequence of algorithms  starting with constant", "algorithms  logarithmic  linear  polynomial  exponential", "And for each one of those  you've actually seen different patterns of", "computation that belong to those classes", "So this is really handy  because when you get a new problem you are going to", "now be able to look at it and say  oh  that looks like a", "problem in this class", "I know how to solve it because I've seen a common pattern there", "And that is allowing you  then  to map problems into templates", "You've already started to build up examples of that", "bisection search  depth first or breadth first search as examples of", "common patterns that map into different classes of algorithms", "Some of them  like bisection search  are nice and efficient", "Others  some graph search methods  are much more complex  but that also was", "because sometimes the problems are just inherently expensive to solve", "And when we get a problem that we realize is inherently expensive to", "solve  that leads naturally to the idea of one of the other big topics", "which was the notion of trying to find approximations", "But once we started realizing algorithms come in different classes", "and there are standard templates for them  it allowed us to start thinking", "about how to begin to map problems into particular solutions", "And that was  in fact  next big element", "How do we go from a problem statement to an actual computation", "Well  there were a set of elements here  and I want to just run through", "them quickly", "One of the key things we hope you've learned is this idea that when you're", "given a problem description  you want to break it up into a series of", "smaller problems", "That modularity is really handy", "And in particular  for each one of those problems you'd like to see does", "it map into something I already know how to solve  either because I wrote a", "solution or somebody else did", "For example  is this an instance of a knapsack problem", "Is this an instance of a random walk", "Is this something that would be well suited to Monte Carlo", "Once I've gotten the subproblems  a key element to think about is what am", "I actually expecting to get out of each one of them", "What's the output I would like to look at", "For example  what information do I want to plot", "What information do I want to print out", "How do I want to use all of these pieces to it", "That's useful because sometimes the problems can be solved closed form", "sometimes they can't", "So for example  I might ask  is this something that can be formulated as an", "optimization problem where I can get closer and closer to the solution by", "trying to find something that maximizes a particular description of", "the problem", "And if that's the case  then I also want to think about how do I", "approximate the solution", "Can I solve a simpler problem  either a simpler version of the same problem", "or a slightly simpler problem", "And having done that  how would I use that to build a next set of solutions", "that are a little bit more sophisticated", "So how do I find a series of solutions that approaches the solution I want", "And how do I decide when I'm close enough to it", "Now  once we got those pieces in place  there's another element we want", "to do  which is to think about for this idea of writing a computation", "that solves a problem  what are the actual algorithms I want to use", "And here what I want to remind you is that you've now already seen a set of", "different kinds of algorithms", "So think of this now as here's your tool kit", "You're building up a tool kit of methods", "You've seen instances in each of these different versions of algorithms", "You ought to be comfortable with when are they useful", "What kinds of problems are they well suited for", "And what kinds of outputs do they get", "For each one of those algorithms  you ought to understand the relationships", "or the abstractions on which they are built", "And of course  within each of these algorithms you've also seen very", "specific versions of things", "Binary search  merge sort  breadth first  and depth first search", "are examples of specific algorithms that come from different classes of", "algorithms", "And you know the kinds of problems for which they're well suited", "So you now already have a mapping between problem and algorithm", "One of the other things we saw is not only do you have specific algorithms", "but a big element that we've seen are optimization problems", "And the whole different range of classes of algorithms here that", "satisfy different versions of finding solutions to optimization problems", "which we saw were really valuable when modeling real world problems", "So why did we try and optimize things", "Well  part of it is that when we're tackling real world problems  it's", "often rarely the case that we can describe a real world problem with a", "complete mathematical formula", "There's inherent uncertainty in modeling the world  and so our models", "aren't always accurate", "They're certainly useful  but they're not always accurate", "So one of the things we saw was that we had to think about how do we come", "up with different abstractions of reality", "If our models aren't always accurate  the answers they give us may also vary", "occasionally", "So we wanted to think about things like  how do I run multiple trials", "How do I want to do simulations  whether it's random", "walks or Monte Carlo", "And when I get that information back  I have to think about how do I fit", "models to the data", "How do I do statistical models like linear regression to decide what is", "the best fit for it", "So I want to build things that model the world  but I also want to take", "advantage of the fact that I may have to approximate them", "And that led to the last big topic  which is making sense of the data", "If I run multiple trials  how do I interpret it", "So we talked about using statistics  both using and misusing them", "What are the right tests to run", "What are tests that we'll run that will actually be misleading in terms", "of how we think about it", "But how do we use statistics appropriately", "Second thing we saw is if we're going to get different sources of data out", "we want to think about how to plot them", "And here we really talked about thinking about being careful about how", "do I actually choose the parameters of my plot", "Because if I choose them well  it will really highlight", "information in my solution", "If I choose them poorly  it may lead me to incorrect", "conclusions about the data", "So I want to be able to think about how do I choose carefully", "And then  as we already saw  if I've got data that has some uncertainty", "into it  How do I fit the models to that data", "Those really were the six big elements we talked about", "So we taught you a language  we taught you how to map problems  computational", "descriptions  we taught you different classes of algorithms  and we taught", "you different ways to think about using those algorithms", "to model the world", "And all of that is now setting you up for the next stage  which is where do", "you want to go"], "sLycGWeSwPE": ["CHRIS TERMAN  Now let's turn to an example that shows how inheritance can", "be used to our advantage", "We'll start by building an application that organizes information about", "people  and we'll create a person class  an object that we can use to", "represent people", "In our very simple example  a person will have a name and a birthday  and", "we'll provide interface methods for getting the last name of a person", "We'll provide support for supporting lists of people by their last name", "And finally  we'll be able to get the age of a person", "based on their birthday", "Let's go look at the code", "So here we have our definition of the person class with all the different", "methods defined for it", "We're also making advantage of the datetime module  which provides a", "bunch of support for manipulating dates", "And we'll see how that gets used in a moment", "So let's start by creating somebody", "So how about me", "I'm a person  and my name is Chris Jay Terman", "So if I go off ask to print me  you can see that the print representation", "of a person is in fact just their name", "If we come down here and look at the string method for a person class  I", "can see that in fact  it just returns the string  which is", "the person's name", "When we created a person  you can see that it saved away my name", "It gave me a birthday of None  because it doesn't happen to know what my", "birthday is the moment", "And finally  it pre computed my last name", "So what it's done is to do a certain operation on the name string", "So what it does is to take the name string as it comes in  so in this", "case  Chris space Jay space Terman", "And it splits that string into substrings using the", "space as the separator", "So in this case  I would have   the split operation would have produced a", "list of three substrings that contain Chris  Jay  and Terman", "And then what I do is select the last element of that list as my last name", "So now I'm going to go off and get my last name", "And because of the way the semantics of this particular class is defined", "there's a method for getting a last name", "So me getLastName    and we can see that in fact  we return the string", "that was expected", "Notice that I could have done this a little differently", "Instead of pre computing last names  I could have computed the", "last name on the fly", "So that's sort of an implementation detail that should be in hidden inside", "of the person class", "And so we provided a method for getting a last name", "And you don't really know whether it's competing on the fly  or it was", "pre computed once when the person was initialized", "Let's give me a birthday", "So now you see the advantage of the tool tip  because it helps us remember", "the orders of the arguments", "So I'll say July", "So what setBirthday does  is to take the supplied month  day  and year", "It actually puts the arguments in the right order with a request of the", "datetime module to create a date object which represents this", "particular date", "And the reason I'm using the date type out of the datetime module is I get", "support for all sorts of operations on dates by doing so", "And so I saved that datetime object away as the value of the birthday", "instance variable", "And this is one of those representational invariants that we", "talked about earlier", "Birthdays should either be none  or they should be an instance of the date", "type from the datetime module", "OK  so now what I can do is I can go off and say  what's my age", "Oh my goodness      days", "Let's see how that works", "So the getAge method  well just to see if I've been given a birthday  if the", "system doesn't know what the birthday is for this particular instance of a", "person  it basically raises a value error  saying look  there's a bug in", "your program", "You're asking for the age of a person and we don't know what it is", "Assuming that I've been given a birthday  which I had been given  it", "runs off and takes the date object that represents my birthday and", "subtracts it from the date object that represents the current moment in time", "And you can see that what happens is that the date object knows how to", "subtract two dates  and then it returns another date object  which I", "can ask how many days that object represents", "In this case      days", "OK  let's define another person  Madonna", "Since it would be impolite  we won't give Madonna an age", "So now what happens if I ask for her last name", "Notice in this case  there are no spaces in the string", "representation of the name", "And indeed  we just get the single name back", "And that's what we expect here  because the split operation  if it", "doesn't find any of those separators  simply returns a list with a single", "substring in it  which was the original string", "And then I ask for the last element of that single element list  and I get", "the name back", "So there we are", "So now let's make a list of people", "Me and Madonna", "I can go off and ask to print out for all the people in the plist", "Print them out for me  please", "And you can see we get the people listed in order here  in the order", "that I entered them into the list  me and then Madonna", "Just for grins  let's go off and sort that person list like so", "And then if I ask for the list again  you can see that in fact the list now", "is sorted in order of their last name", "But wait  how does the sort routine   which is a generic routine that can be", "used for sorting lists", "how does it know how to sort people", "Let's go figure that out", "So how does the plist sort   do the right thing", "So Python has a particular sort algorithm for sorting sequences", "It's a highly optimized combination of a merge and an insertion sort  which", "means quite efficient and most real world list  and has a very good", "average case performance", "So you could say  OK  so it uses a really fancy sort algorithm", "How does it know how to sort people", "The only knowledge that the timsort algorithm needs about the objects that", "it's sorting  the objects that appear on the list  is it needs to be able to", "compare two of those objects and get back", "using a less than operation  and get back an answer of whether one object", "is less than another", "So that's the only operation that we have to define on the objects in a", "list in order for them to be able to be sorted by the sort routine", "Inside the timsort algorithm  if it asks if a particular object in the", "list is less than another object in the list  Python translates this", "expression in the source code  when there's an object involved   in this", "case  object one is the first argument", "it translates that into a particular call of a special method  a built in", "method for object one", "In this case  it's going to call the less than method", "Notice the double underscores at the beginning and end", "That means it's a special built in method", "So it's going to call the less than method of object one and pass it in", "the second object", "And so all the sort routine really needs is for this to be implemented on", "the objects in the list  and then the sort method will take it from there", "OK  so we only have to implement the less than special method", "So if you want to know what all the special methods are that you can", "implement and tap into all sorts of great behavior that Python has", "built in  look at section      the Python Language Reference manual", "So if we go back and look at the code  we can see that we have  in fact", "definined that special less than method for person objects", "What it does is that it checks to see  look  if the two last names are the", "same   so we pre computed the last name  so they're", "available for each person", "So we can just quickly check to see if they have the same last names", "And if so  we use the rest of the name to create the sort order", "We can see if one is less than the other simply by comparing", "the two name strings", "However  if the last names aren't the same  we  simply look for the correct", "order of the last names", "So off we go  that implements the necessary operations to support", "sorting of people when they appear in a list"], "NnWd5_X3n5s": ["ERIC GRIMSON  We just showed you a recursive algorithm", "You may be a little worried about it", "You may be going  OK  but how does it know which values of", "the variables to use", "Because I'm not seeing any explicit", "changes to those values", "How does it make sure it really stops", "Why doesn't it just keep unwinding", "Didn't your high school geometry teacher never to use", "definitions where you defined a term in terms of itself", "Good news is not to worry", "And we've got a tool to help us understand that", "Let's go back and simply look at a simple call to recurMul", "recursive multiplication  using that set of environments", "to see how computation flows", "So here's my code  I've just got a copy of it here", "And in particular  if I evaluate this  or load this if", "you like  into a Python environment  a shell  we know", "what's going to happen", "Which is we're going to create a frame over here  in which", "that name  recurMul  is bound to a procedure object", "And it's got inside of it both the parameter list and the", "body  the set of things it's supposed to do", "OK  let's see what would happen if we", "actually called it", "So let's call it", "Calling it says  I am going to evaluate this", "expression down here", "And I'm going to first get the value of recurMul", "I know what that is", "It's given by that pointer there", "It's a procedure object", "And so I know that calling it says I'm going to create a new", "environment", "It's going to inherit  or have as a parent  the same", "environment that the procedure has  the environment that was", "in place when we defined the procedure", "So it was going to point to that frame", "And inside of there  first I'm going to get the values of", "these two expressions  and I'm going to then bind the", "parameters of the procedure to those values", "All right", "I'm saying it in a long winded way  but", "you've seen this before", "We've now created a new environment in which a is", "bound to   and b is bound to", "And relative to that environment we're going to", "evaluate the body of this procedure", "OK", "Let's start evaluating the body", "The body says is b equal to", "No it isn't", "It's", "So it's going to go to the else clause", "And the else clause says  I'm going to return a value", "Great", "I'm going to get a value back", "And it says the value is going to be the value of a", "Remember I'm doing it relative to this frame here so I know", "the value of a", "It's", "And I'm going to add to a the value of the recursive call", "another call to recurMul  with different arguments", "Now think of this very straightforwardly", "This is Python", "This is an interpreter", "That's an expression", "It says to get the value of that expression  what do I", "need to do", "You need to get the value of recurMul  oh", "that's it up here", "OK", "Now  I need to get the value of a", "And remember I'm doing it all with respect to this  and in", "fact I should have done that better", "To get the value of recurMul with respect to this", "environment  I'm going to go up and find it there since", "it's not bound down here", "I need to get the value of a", "There it is", "And I need to get the value of b minus", "Well that's easy", "There's b  and subtract   from it", "And since recurMul is a procedure  what", "am I going to do", "I'm going to create a new frame", "Cool", "That's exactly what I want", "Because now I've got a computation that's taking", "place with respect to this frame", "And how did I set that up", "Well I got the value of a", "I got the value of b minus   from here", "I've bound those in this procedure because that's what", "it tells me to do", "And I'm now saying  evaluate this procedure in this frame", "Remember  when I get the value of this I'm going to give it", "back to this frame to complete that addition", "But I've now reduced this to simpler computation", "Notice something else really nice", "You may have been saying  well  how do I keep track of", "my iteration variable", "It's not really iteration  it's recursion", "But notice I've reduced b", "And that's exactly what's going to happen", "I'm going to keep unwinding this computation until I", "ground that out", "OK", "We're now in pretty good shape", "Because what do we want to do", "It says I need to get the value of this procedure  this", "body  this body here  with respect to this environment", "What do I do", "Well  let's say is b in this environment equal to", "No it is not", "So I'm going to return the value of a from this", "environment  which is right there  to", "another procedure call", "I'm doing another procedure call on recurMul", "What do I do", "From here  I get the value of recurMul", "And I trace up that chain to say  there it", "is  it's that procedure", "I need to get the value of a in this environment", "That's easy", "And I need to get b minus   in this environment", "Well  that's easy  as well", "B here is    I subtract    and that leads naturally to yet", "another recursive call", "Now  you're going to be glad I only did this with   and", "and not   and", "But you get the idea", "I am now evaluating the body of this procedure with respect", "to this environment", "What do I do", "I say  OK  is b equal to", "Thank God  it is", "But if b is equal to    what do I do", "I return the value of a from this environment", "So that computation gives me back a", "That's really nice", "Because what does that say", "It says  gee  here's where I am", "I'm now returning the value of a because I was in that", "recursive call", "It says the value of this recursive call is", "I'm going to give it back to the place that was waiting for", "it  which was up here", "And what was I doing", "I was waiting to get the recursive value", "I want to add that to a", "So the   is returned", "It gets passed back up here", "It gets added to that a", "Those two pieces come to there", "And what was that doing", "That was saying  give me a return of those two values to", "the computation that was waiting here", "So  in fact  the   and the   get added", "together to give me", "And what was that doing", "It says  I'm now done because that procedure said return", "that value as the overall value", "And that's going to get passed back up as the final value", "Cool", "A little slow in our computation but really cool", "And  in particular  let's see what we can deduce from this", "Each recursive call of a function creates its own", "environment  with a local scoping of variables", "So evaluating the body of the function in that environment", "is going to be very clear as to which value of a and b it's", "using  or any other variable that it's using", "Secondly  the bindings for variables in", "each frame are distinct", "And you saw that", "I had a different frame for each one of them", "And those bindings are not changed when we're doing the", "recursive call", "They are set up as we make the call", "That is  I'm going to compute a new value of b  making it in", "this case b minus    in order to bind it in the frame", "But I'm not changing bindings in other frames when I'm", "within one frame", "I don't have access to them", "And finally we can see that the flow of control can", "naturally pass back to an earlier frame once the", "function call returns its value", "So  finally  you can also see that inherently this recursive", "call to a function  if done right  has the equivalent of", "reducing a state variable", "We saw how each instance  each frame  had a different value", "of b  that got smaller and smaller until we got down to", "the base case", "So we know that this is  in fact  going to ground out", "It's going to complete its computation", "That's great", "So hopefully this gives you a better sense of how  in fact", "the rules of evaluation allow a recursive thinking of a", "problem to create a very nice version of the code"], "oMr9PpDodl8": ["CHRIS TERMAN  In our final example  we're going to write some code that", "does different types of mortgage calculations", "Our goal isn't so much to teach you about mortgages  but to show you how", "to structure the code  and in particular  to try to take advantage", "of earlier code that we write", "So for example  after we've written the code that supports the", "calculations for a fixed rate mortgage  the code that does the", "calculation for a fixed rate mortgage with upfront points is very similar", "and we want to build on the code that we wrote", "Classes are a convenient way to tackle many programming problems", "For example  let's do a mortgage calculation", "Suppose I want to borrow      from the bank and pay it", "back over   years", "The bank has given me three options", "A   year fixed rate mortgage of    per year  or they will let me pay some", "amount of upfront money  called points   in this case", "in which case  they'll give me a   year fixed rate mortgage of", "Or for four years  they'll let me pay a low interest rate  but then their", "rate will almost double for the remaining   years of the mortgage", "What I'd like to do is figure out  what's the best deal for me", "Let's write a program to tackle that idea", "Here's our program", "We went out to the web to find the formula we can use to compute the", "monthly payment for a mortgage of size loan at a monthly", "rate of r for n months", "So we embedded that in a little formula that we'll use below", "We created a base class that we're going to use for all the mortgages", "What the base class does is support the basic operation of a mortgage  and", "then the details of the exact interest rates and payments and things like", "that will describe it for each mortgage separately", "So the mortgage base class remembers the principal amount of the loan  and", "it computes the monthly percentage rate from the annual interest rate", "that was passed in", "It remembers the total number of months for the loan", "It keeps a list of all the payments that have been made", "And initially  nothing has been made", "The amount that's owed is computed each month", "So we start off owing the entire amount of the loan", "We precompute the monthly payment using the formula from above", "And we define a legend which we'll be using down here when the mortgage is", "asked to print itself off", "And we'll define that instance variable now in each of the particular", "subclasses that we'll define", "The mortgage supports the basic operation of making a monthly payment", "So what we do is we take the precomputed monthly payment and we add", "it to the end of the list of payments that we've made", "We then have to compute the amount of the payment  which is going towards", "reducing the principal amount of the loan", "So we take the principal amount that's currently outstanding and multiply it", "by the current monthly interest rate", "That tells us how much of our payment is owed in interest", "The remainder of that payment  then  is used to reduce", "the outstanding principal", "So at the end of each month  after we've made our payment  we can compute", "the new amount owed by taking the old amount owed and subtracting from it", "the reduction in principle from our payment", "Finally  we support the notion of figuring out what the mortgage has", "cost us through all the currently made monthly payments by summing up all the", "payments that we've made to date", "OK", "So here are the three types of mortgages we want to do", "One is a fixed mortgage  which is really exactly what the mortgage base", "class implements", "So we simply make a subclass of the mortgage base class and go off and", "initialize it with the parameters of the fixed rate loan  and provide a", "legend that describes the loan", "A fixed with points", "so that's where we did an upfront payment", "really is just like fixed", "So in fact we've made it a subclass of the fixed rate mortgage", "And the only distinction is that we have an initial payment up front that", "is some percentage of the loan", "In this case  we pass in the number of points", "in this case      which we used to calculate the initial payment", "And then after that  the mortgage works just as before  except hopefully", "the interest rate here will be lower", "And we have a different legend here which starts off with whatever value", "was defined for the legend by the fixed rate superclass", "And then we add to that an annotation indicating the", "number of upfront points", "And finally we have a two rate mortgage  where the mortgage changes", "rates from the teaser rate after a certain number of months", "It will actually then increase to a larger rate", "So what we do is remember all the different parameters", "We have two mortgage rates in the initial term of the cheaper rate", "We have a more complicated legend explaining the mortgage name", "And then finally we look at the makePayment thing", "And so what we've done is we override the makePayment method of the Mortgage", "base class  because we have a more complicated thing we need to do", "So initially  we're going to go off and set up the mortgage to be being", "paid off at the teaser rate  as if we had gotten a    loan", "So we'll have a low monthly payment because the teaser rate is lower than", "the final long term rate", "So once we've paid that number of monthly payments   the number of", "teaser months  in this case", "what we're going to do is to say  aha  now we're going to up the rate to this", "new higher percentage rate  and we'll recalculate the payment based on the", "amount of the outstanding principal that's still left", "And at that point  once we've made that adjustment  which we do at the", "th month  we go off and now just use the standard payment algorithm", "It's just that the payment algorithm works with different parameters from", "the  th month and beyond", "So now we're in a position to actually do some comparisons", "And again  we've gone off and embedded our little mortgage reporting thing", "inside a function  so that we can actually try many different", "experiments with the different options", "So what we do is we create some alternative mortgages", "We create a fixed rate mortgage  the fixed rate with points  and the", "two rate mortgage based on the parameters that get passed in", "And finally we run the experiment  where we're going to make   years", "worth of payments on a monthly basis", "And for each of the mortgages in our little list of sample mortgages   so", "the fixed rate  the fixed rate with points  and the two rate mortgage", "we're going to make a monthly payment", "In this case  a total of   years of payments on each of the mortgages", "And finally  when we're done  we're going to report back the results", "So the advantage  instead of filling a couple napkins full of calculations", "by putting it into a program  we'll get to run many experiments in a row", "All right", "So this is the experiment that we want to run", "We actually have the description of the problem we were facing", "So I'm going to come over here and paste that in  and then ask Python to", "print out the answers", "And we can see that if we have a fixed rate mortgage  we pay a", "total of about", "A fixed rate with the upfront points was about a little over", "And then the two rate mortgage  or the adjustable rate mortgage   you can see", "here the total is", "So the best deal by almost      is the fixed rate with points", "Well  we're not so much trying to teach you about mortgages", "Our real goal in going through this example was to sort of point out that", "we can do a lot of code reuse here in describing the operation of the", "different mortgages  by starting with a mortgage base class which describes", "the operation of a fixed rate mortgage  and then elaborating on that", "either with an upfront payment  and hopefully a lower interest rate  or a", "fixed rate mortgage where the rate changes some number of", "months into the thing", "And so we've basically encapsulated the distinctions of our different", "mortgages from a regular base fixed rate mortgage in each of", "our different classes"], "0bdP3Muy_kU": ["PROFESSOR  We've now explored depth first search", "It's a technique for finding solutions to graph optimization problems", "finding shortest paths through a graph or anything that we can", "represent as a graph", "And it's one way of  in fact  exploring the space", "There's an alternative also very common called breadth first search", "And the difference is very simple", "In depth first search  if you think of the tree of possibilities we're always", "exploring things as deeply as we can  taking any path and trying to extend", "it before we go back and look at other paths", "Instead of always going down the first branch of the tree  we could  instead", "explore all the children of a node first before moving on", "So  for example  we can look at all of the paths of length   and then all of", "the paths of length", "And that idea is very simple", "It says  given a node  we're going to look at each of its children and look", "at all of those paths", "So  going here then there then there then there", "If none of those work  then we'll go over here and look at all of the", "extensions", "So  we're going to explore this tree if you like breadth first rather than", "depth first", "In the simple case of having no weight where we're simply looking for the", "shortest path in terms of number of steps  we can stop as soon as we find", "a solution since it's guaranteed to be a shortest path", "Great", "How might this look", "Well  the overall description is much the same", "We start at the root node as before", "In this case  a set of possible paths is just that node", "If we're not already at the solution  we're going to take the current path", "and we're going to look at extending it by adding each child of that note", "to the path  unless the child is already in the path", "we'll avoid the loops", "The only difference is that we're going to add these new paths  but", "we're going to put them at the end of the set of options rather than at the", "beginning  very simple difference", "In fact  we're using a different data structure  a data", "structure called the queue", "But with that simple difference  the rest of this works exactly as before", "So  the difference is we take the next option  we look at all the plausible", "paths that extend it to its children  avoiding loops", "But rather than putting those onto the front of what was a stack  we're going", "to put them at the end of what we now call a queue", "So  quickly  about a queue then", "Again  it's a different kind of data structure", "It has what we call the first in  first out behavior", "The first thing we put in is the first thing we take out or another way of", "saying is we're always going to put things in at the end of the queue and", "take them off the front", "Which means that things get looked at in the order in which they were placed", "into that data structure", "We refer to things as being pushed to the end of the queue and popping off", "the front of the queue", "Very simple change", "Let's just sort of conceptionally look at the difference now in what happens", "with my search if I'm now doing breadth first search", "Here  I start off at node   from node    I know there are two possible", "extensions", "So  let's just look at the nodes we visit", "We're going to go first to node   and then to node", "Since neither of those has found the solution  we've now explored all the", "paths of length    we're going to go back to this node and look at", "extensions there avoiding loops so we cut that off but now", "looking at the path", "Since there are no more paths of length   off of node    we'll carry on", "and look at   and then", "And  again  having now explored all the paths of length    we'll go back", "to the beginning and look at extensions of length    letting us", "look at   and", "Then moving on to   and  nice  to    we've now found the solution", "And we know we can stop because any other solution is either at this", "level  meaning of the same length  or deeper down in the tree", "meaning it's longer", "So  we can stop", "Great", "Let's just look then at  going back to our search  how that data structure of", "the queue deals with it", "We start off with the queue just being of the element", "We pop it off and insert into it the two extensions which were   and", "They get put at the back of the queue  but in this case  the queue was empty", "And then we pop this off", "And we take its extension which is    and notice  we put it at the back", "of the queue", "That's different from what we had before", "We then examine this", "We pop that off", "It's got two extensions and  notice  those get put at", "the back of the queue", "So that this now moves up to the front of queue", "And we keep going", "And that extension  or that variation  rather  of putting things at the end", "of the data structure rather than at the beginning gives us a different", "exploration of the space", "What does the code look like", "A little bit different  but still fairly easy to follow", "Again  we're going to give it a graph  a start node  an end node", "And we're going to give it a data structure  we're just going to  out of", "a bad pun kind of sense  call it a queue", "Our first path just is the path from the node's start", "And we're going to put that onto the queue", "And since we're representing the queue in this case as a list  we're just", "going to append it  put it at the end", "Great", "Now what we do", "We say well  if there's still something in the queue to look at  I", "can keep going", "If there isn't  then I'm done  and I'm stuck  I'm going to return no answer", "If there is still something in the queue  I'm going to get the first", "thing off of the queue", "There's a pop operation  and it just takes it from element", "and moves it out", "And I'm going to call that   path", "That's the path at the beginning of the queue", "I'm going to get the last node in that path by just indexing into it to get", "the last element of the path", "I'm going to print out some information here", "which is no big deal", "And then what do I do", "I say look  if that node is the thing I'm looking for  I'm done", "Just return the path", "Wonderful", "If it's not  if I've still got something to go  so  I've got a node", "up here  and I'm down to this node  and it's still not to the goal node", "that I want  what do I do", "I'm going to take the node I'm currently at  this one", "I'm going to get all of its children  and for each one of those  I'm first", "going to make sure that it's in fact something I can keep exploring", "It's not already in the path", "And if it's not in the path  I'm going to create a new path that says go from", "there to each of the children in turn", "And  oh  just put those at the end of the queue", "Wonderful", "With that change that has added those new paths into the queue and having", "done that  I'm going to be able to cycle back around because notice that", "I'm not yet done", "And I'm going to pick up the next element of the queue and keep going", "Straightforward algorithm  you could run it yourself to try", "But it leads to a different exploration of the space", "And that's a really valuable thing"], "5DgYyaBb21k": ["DANA MOSHKOVITZ  Hi", "My name is Dana Moshkovitz", "I'm in the Electrical Engineering and Computer Science Department of MIT", "I'm going to talk to you about a very interesting brand of research in", "theoretical computer science", "This is about randomness and mazes and computation and GPS's and robots and", "all kinds of stuff", "So you may have noticed that I have a funny accent", "That's because I'm Israeli", "I once did this internet questionnaire  what American", "accent do you have", "They ask you questions like  Mary  merry  and marry", "do they sound the same or not", "And you answer those things", "In the end  they tell you you're from whatever this region", "And this is what I get when I do this questionnaire", "I'm from the Midland", "I'm from the mid USA  although not sure exactly where", "Pennsylvania  Ohio  or something like that", "What they are sure of is that I have a great voice for television and radio", "So this is what you get for taking career advice from internet", "questionnaires", "You may have also noticed this", "I'm in my ninth month of pregnancy", "It's a girl", "She's my first", "She's very excited about her first pre birth appearance", "She's been kicking hard", "Let's start", "And we're going to start with talking about mazes", "Mazes  somehow  are an important part of the computer science curriculum", "We feel that it's our responsibility to teach you how to get to the end of", "mazes  if you ever are put in a maze", "So this was also part of the    x curriculum", "And the reason is that you can think of the intersections in the maze as", "vertices of a graph", "And the corridors between intersections are edges in a graph", "And then all you have to do is to find your way from some start vertex to an", "end vertex", "And in    x  you studied the two basic algorithms for doing that", "breadth first search and depth first search", "BFS and DFS", "And you can think of both these algorithms as algorithms that help you", "solve mazes when you have bread crumbs", "So BFS is you have bread crumbs  and you mark where you started with one", "bread crumb", "Then you mark the places that are reachable within one step", "by two bread crumbs", "And then you mark those that are reachable in two steps but not in one", "step by three bread crumbs  and so on  and so on", "And you go and mark your entire maze until you reach the end vertex  and", "then you are done", "OK  so these will be good algorithms depending if you have bread crumbs", "Now  why do we care so much about navigating mazes", "Well  this is a pretty basic computational problem", "For example  for GPS's  you want to be able to reach from one", "place to the other", "Also  if you design a robot  you may want to plan motion for your robot", "And there are many other possible applications", "In theoretical computer science  mazes actually correspond to something that", "we call nondeterminism in space bounded computation", "So many reasons to study mazes", "What I want to do now is talk to you about a very simple algorithm for", "solving mazes", "This is the random walk algorithm", "So what's the random walk algorithm", "You are  say  a robot that is somewhere in the maze  and you have to", "decide what's your next step", "So what you do is you grab a die  and you toss it", "And you find out  according to the die  where you should go next", "So suppose that we did this  and the die chose uniformly at random one of", "the next possible steps and went there", "So now continue", "Just do it over and over and over each time", "Use the die  get the next step  and then  hopefully  reach", "the end of the maze", "So what do we think about this algorithm", "Well  it's very easy to implement  which is good", "OK", "It's also super efficient if you care about memory usage", "If you think about it with DFS and BFS  you had to mark the entire maze", "That's linear memory in the size of the maze", "Here  you barely need to remember anything", "You just need to remember where you are", "Now  the worrying aspect of this algorithm is the time efficiency", "So you do that over and over  but maybe you never reach the end", "Maybe you reach the end  but it will take you a billion operations", "So what's going on with that", "So I'll tell you what's going on with that", "But before that  let me talk to you about randomness in computation and", "what it's good for", "So there are two conditions that make randomness useful for algorithms", "So when this is useful  when you have many  many  many strategies", "And here  the many strategies are the many possible walks in the maze", "And most importantly  among all of those many strategies", "most of them are good", "Here  a good strategy is a strategy that goes through the end vertex", "And one can prove mathematically that if you consider all of the possible", "tours of length n cubed when n is the size of the maze  then most of those", "tours are going to include the end vertex", "And so we say that the time efficiency of this algorithm is n cubed", "Is it good", "Is it not good", "Well  if n is huge   if you're planning a GPS  and n is the number of", "road intersections in the US  you know  n cubed  not so great", "You may reach San Francisco when you want to get from here to", "Main Street  Cambridge", "Fine", "However  if you're in an amusement park  and n is the size of the maze in", "the amusement park  it's actually a pretty nice thought that even if you", "walk just randomly  within n cubed steps  you'll probably reach the end", "You're not going to be stuck there for life", "So this is a great algorithm", "So let me tell you what kind of questions a theoretician thinks about", "when they see this", "So this is your theoretician", "This is actually how we spend our days", "And the first thing that we think   Huh  when this was very useful for", "mazes  what about other problems", "Is it useful for other problems", "And the second question is   OK  so randomness may be useful  but do we", "actually need it   Or maybe we can avoid using it", "So the answer to the first question is yes  randomness is definitely useful", "for algorithms  it's a very good perspective on algorithms", "You saw several examples for that in    x when he talked", "about Monte Carlo methods", "The surprising answer here is the answer to the second question  whether", "randomness is really needed", "And here  the answer is a qualified no", "Randomness is not really needed", "And for example  for solving mazes  in    Omer Reingold came and showed", "that you can solve mazes with memory usage that is very similar to the", "memory usage of the random walk algorithm but do it with a", "deterministic algorithm", "So this was a breakthrough result", "But actually  much more is known than just this result about solving mazes", "So in '   those two guys  Russell Impagliazzo and Avi Wigderson  showed", "that under a widely believed assumption  randomness may help", "But it can only give you a polynomial speed up for algorithms", "So if you have input size n and running time t which a randomized", "algorithm  there must be a deterministic algorithm that runs in", "time polynomial in t and n and solve the same problem", "And this is not just about time efficiency", "It's also about memory usage  only in memory usage  you care about the", "logarithmic scale  and then you can avoid assumptions for memory usage", "There are many other theorems like that", "However  we still have our work cut out for us theoreticians  because", "there are lots and lots of unanswered questions about this", "So for example  what's the relation between the assumption and the", "conclusion in the theorem", "What's the minimal assumption that you can get here", "Or for which problems randomness helps and for which problems randomness", "doesn't help", "So all of these and more are the kind of questions that we ask ourselves", "and we're still looking for the answers", "Thank you"], "lTnTlmM33dA": ["ERIC GRIMSON  So we've been seeing recursive functions", "We started to see the power of them", "They're a really powerful way of thinking about breaking a problem down", "into simpler pieces", "And as we saw with things like Towers of Hanoi  what looks like a very", "complex problem sometimes has a beautiful solution by thinking", "recursively in terms of smaller versions of the same problem", "We're going to do one more example  because so far what we've really", "focused on is things dealing with numbers", "And while that's great  we can use recursion in other places", "So here's an example of doing recursion on non numerical values", "In particular  suppose we're given a string of characters and we'd like to", "know is it a palindrome", "And if you don't remember  a palindrome says  does it read the same", "left to right  and right to left", "Is it the same in either order", "Classic example  attributed supposedly to Napoleon  although that's highly", "unlikely  is something like   Able was I ere I saw Elba   And if you look at", "it on the slide  you'll see if I read it from left to right or from right to", "left  it's exactly the same", "Another wonderful example", "Are we not drawn onward  we few  drawn onward to new era   Another", "great example of a palindrome", "So we're going to try and build this", "We're going to do it  though  in a couple of stages", "First one is  we're going to strip out all of the spaces  the punctuation", "Because they won't really matter", "We just want to know are the characters the same", "And secondly  we don't care about capitalization", "So we're going to reduce all of the characters to lowercase", "And then we're going to tackle this problem in terms", "of a recursive function", "So how do we solve it", "We first convert the string to just characters", "We'll look to that in a second", "And solving it recursively is actually pretty easy", "If I have a string that's either of length zero or of length one  it's a", "palindrome", "So length one is just one character", "Otherwise  to solve this  what I'm going to do is take the string and ask", "the following question", "If the first and last character are the same  then", "they satisfy the condition", "And let me then simply look at the remaining string  throwing away the", "first and last character  and ask is that a palindrome", "Wonderful", "There's that recursive property again", "If I can break it down into that problem  I'm set", "So I could write code to do that", "Just to give you the example again  this says I'm going to take something", "like  Able was I were I saw Elba  and reduce it to just that string of", "characters without the spaces or any punctuation", "And then  to test whether that string is a palindrome  that's the same as", "asking are the first and last characters the same", "Is that test", "And if I take everything else in between  I can ask is that also a", "palindrome", "If the answer to both of those is true  then the bigger problem is also", "palindrome  and I'm done", "OK", "So here's the code to deal with it", "And there's a few new things I want to point out here", "I'm defining isPalindrome to be procedure", "Inside of there  I've got two definitions for other procedures", "And that's a little different", "These are now called internal procedures", "But this is perfectly fine", "These are quite straightforward ways of creating new procedures", "And in particular  they are going to belong only to this function", "If you think about our environment model  when I call isPalindrome  it's", "going to evaluate the body", "Which is going to cause these two definitions to be", "evaluated and created", "And the bindings for those names is going to be within the frame resulting", "from the call to isPalindrome", "So only isPalindrome has access to those", "This is a nice way to capture functions if they're really only going", "to belong to a single function", "The first one is just doing what I asked earlier", "That is to convert this string into just a set of characters", "There are a couple of things I want to point out here", "The first one is right here", "Here we're actually using a method of a string", "We're going to come back to that later in the term", "But it simply says  given that s is a string  the dot notation says get the", "method called lower associated with that", "That is a procedure or a method  so I'm going to call it by giving an open", "and close paren after it", "And in essence  what that does is it uses a particular internal procedure", "or method or function to convert s into all lowercase", "And I'm going to rebind that to s over here", "Then I'm just going to run through a loop", "I'm going to store a ans  or answer  a string of all of the characters", "And for each character in that converted s  I run through a loop", "where I first check to see is it one of the lowercase characters", "So c in that string literally basically says for each character in", "there  I return", "if it is in there  I return an answer", "If it's not in there  I don't add it in", "And this loop lets me walk through all the characters in s  keeping only", "those that are lowercase values", "And I just return the answer", "All right", "Some housekeeping", "Palindrome  or isPal  the actual checking  is exactly", "what I would expect", "It says  if I've got something of length less than or equal to one  it's", "a zero or one  the answer is true", "It is a palindrome", "And otherwise  notice what I do", "I use the properties of strings", "I get the first and last character  and I say  are those the same", "And if they are  I then also ask is everything else the same", "And notice this slicing right here", "This pulls out substring out of s  starting at the first not zeroth", "element and stopping just before the last one", "So getting everything but the first and last character", "And there's the recursive call", "And then finally  isPalindrome simply uses toChars to convert the string", "calls isPal on that  and returns the answer computed by that as the answer", "to the overall solution", "And if we want to actually check this  we can", "If I go over to my IDLE window and I load this in  I can now say", "isPalindrome  and I will give it some simple example", "So let's do abba", "That should be a palindrome  and it is", "I'm going to ask if my colleague John Guttag has a last name that is a", "palindrome", "And the answer is close  but not quite", "If he changes his name  which he will not do  to Guttug  it is a palindrome", "And finally  just as one last example  let's look at Able", "was I ere I saw Elba", "And that is also a palindrome", "And this is doing exactly the kinds of things we would have expected", "Now this is a nice example of a broader kind of problem", "This is  as some of the other things have been  is an example of what we", "call a divide and conquer algorithm", "And that kind of approach says  to solve a hard problem  we can do that", "by breaking it into a set of sub problems", "more than one", "with the property that the sub problems are easier to solve than", "the original one", "Either because they are a smaller version of the same problem  or they", "may just be an easier sub problem to solve", "And that the solutions of the sub problems can be combined to solve", "the original", "In the case of testing palindromes  I'm checking two things", "And these are tests on the first and last character and a simpler version", "of the same problem", "And the answer to both of those combines together to give me the", "answer to the overall problem", "We're going to come back to these ideas of divide and conquer", "algorithms later on", "They are an incredibly powerful tool that we're going to use in many places", "to solve interesting and challenging problems"], "--7OF8BOElA": ["ERIC GRIMSON  Before we leave the topic of complexity  I", "want to do one last thing", "I want to give you a visual way of getting a sense of how", "different these different complexity classes are", "Because you might say  does it really matter if our code is", "quadratic verses linear  or log linear versus linear  or", "linear versus log", "And of course it depends on the size of the problem  of", "the particular instance of the problem", "But for large scale problems  the complexity of the worst", "case can make a really big difference  and I want to give", "you a sense of that", "So just to do that  let's take a look", "What's the difference between a constant logarithm and a", "logarithmic one", "So what I've graphed here is the amount of time it takes", "for an algorithm and this is constant that has   steps", "versus a logarithmic algorithm that has only", "step within its loop", "And notice  it takes an argument of size almost", "before the logarithmic algorithm actually", "catches up to the constant one", "Of course  if the log algorithm had   steps  it", "would scale up beyond this", "But this is really a way of saying  log algorithms grow", "incredibly slowly in complexity  and therefore they", "are really powerful", "And in many cases  they're almost as good as a constant", "time algorithm", "Log grows slowly", "Log algorithms are great things if you can find them", "They're not easy to find  but when they are", "they are really great", "OK", "Now let's move up that chain", "What about the difference between a logarithmic", "algorithm and a linear one", "Well  this difference is big", "That blue line at the bottom is a logarithmic algorithm  or", "a logarithmic function  if you like  and the green line  of", "course  is the linear one", "And you can see that the linear one starts to very", "rapidly outstrip the logarithmic one", "And again  the obvious observation here is that", "logarithmic clearly is better for large scale problems than", "linear ones", "Doesn't imply linear is bad", "it just says that log grows so much more slowly", "If we can find a log algorithm  we", "would really like one", "Let's move up the chain", "Linear verses log linear", "And of course  we know that they're going to get worse", "But here you can see that it doesn't grow as badly as you", "might have expected", "There's the linear algorithm in blue  down here  this one", "Here's log linear one", "And it's growing  but the growth isn't horrible", "And as a consequence  what this says is that while log n", "may grow slowly  when it's multiplied by linear factors", "the growth is much more than just the pure linear  but", "they're still quite valuable  because the growth isn't", "getting badly out of hand", "All right", "So we're seeing each one of these things has a little bit", "more of a growth", "Let's look at another one here", "Log linear versus quadratic", "Here you can see that the growth is actually going up", "much more rapidly", "Quadratic is really starting to skyrocket", "And again  the log linear one looks like it's almost flat", "compared to it", "And again  the observation here is that quadratic is", "often a problem", "Some problems are inherently quadratic  but if it's", "possible  we always want to look for a", "more efficient solution", "And we're going to see that we're going to regularly see", "quadratic problems  so this is an issue", "If we can find a log linear one  we'd like that solution", "And then the final comparison kind of is mind blowing", "Exponential algorithms are incredibly expensive", "In fact  here's a plot over here of an exponential versus", "a quadratic one  and you can't even see the graph because the", "exponential one is tucked right along this graph here", "blown up really fast", "So if I replot this on a log scale which makes the", "exponential one now linear  you can see how much better", "the quadratic one is", "And this is why that's a big difference", "As I said earlier  there's a big difference", "between n   and   n", "n grows really fast compared to n", "And this is just a visual way of reminding you of that", "If you can  you want to avoid an", "exponential class algorithm", "Even a quadratic one is going to be better by a long shot", "for any reasonable size problem", "So these little graphs just give you a way of visualizing", "the differences between the different classes of", "algorithms", "And throughout the rest of the subject  we're going to come", "back to talk about different classes of algorithms and what", "their costs are"], "CsQrTLde-dM": ["We're getting a sense now of how functions capture", "modularity for us", "They capture this notion of an abstraction", "that we can use it", "And we're using this environment idea to help us", "understand how parameters get passed around  how they get", "bound  how they get used", "And we've seen we can have local bindings for names of", "variables that are different from global bindings", "And the system doesn't get confused", "Let's do another example to look at what happens when we", "have multiple function calls", "And so over here  I've got a simple little example", "I'm going to define square", "That's a very handy little procedure", "It says  given something  let me multiply it by itself", "Return that value", "And then I'm going to write a somewhat", "strange little procedure", "I'm going to call it twoPower", "And the idea is I'm going to take two numbers  x and n", "And I'm going to raise x to the n th power  where n is", "itself a power of", "And I'm going to do it with a simple loop", "And the loop says  as long as n is bigger than    I'm going", "to take the current value of x  square it  and re bind x to", "that value", "And I'm going to take the current value of n  do the", "integer division with    which of course is", "going to lose n a remainder", "But since n is a power of    you're just going to reduce it", "to the simpler power of   and re bind n to that value", "So I'm going to square n and reduce n by a factor of", "And it's a little bit like saying x to the n is the same", "as x squared to the n    which is the same as x squared", "squared to the n", "And it's just giving me a quick way of doing that", "computation", "When I'm done with the loop  I'll just return", "the value of x", "OK", "I want to see what happens when I run this", "So I can certainly load that", "And if I go over here to IDLE  I've got those functions  and", "I've loaded them in", "First of all  I can certainly do square", "If I square    I get back    And if I square  actually", "something else  I get back appropriate things", "And then twoPower", "If I wanted to do this  I could do a twoPower of  for", "example    to the  th", "And it gives me back   to the  th power", "Sort of what I'd expect", "What I'd like to know  though  is if I again  as before  if I", "set up x to have some value like    and I set n to be some", "value of    and I now call twoPower of   to the  th I", "should still get", "I'm sorry", "I didn't give it the right answer", "Let me give you twoPower of   to the  th", "I should get back the same value", "And we've seen that before", "We're not going to get confused by the bindings", "But we've got multiple procedures going on", "So let's look at what happens", "So if I evaluate in Python these two procedure", "definitions  they create for me bindings of the name", "square  and the name  power   And they're both to", "procedures  which is great", "I'm gong to stress again  the body of the", "procedure is just text", "There are no substitutions in for x or n there", "I'm simply creating them as text", "And I have now done a local binding for x to", "and n equal to", "So at this stage in the computation", "this is what I have", "OK", "Just like before", "Now  let's move on a step", "Let's look at what happens if I were to call twoPower with", "arguments   and", "And to be very careful about it  evaluating twoPower gets", "the binding of twoPower  which is this procedure", "And that invocation creates a new frame", "It's going to inherit from where the procedure says it", "should inherit from  the place where it was created", "And inside of that frame  I'm going to take", "and I've got a bug on this slide", "So that should really be an n", "I'm going to take the parameters x and n", "And I'm going to bind them to the values of the arguments", "that were passed in", "Technically  those are evaluated up in the global", "environment as   and", "But I've now got a binding of x and n   sorry about that", "bug   to   and", "And now I'm ready to start doing the computation", "Because relative to this frame  I'm going to", "evaluate this body", "OK", "So I move on  and I've got the same bug", "We'll make that an n", "What do I have here", "It says   let's go through the while loop", "While n is bigger than    which it is  first thing I'm", "going to do is I'm going to square x", "Ah", "Remember  I'm in this frame", "And I say  what's the value of square", "So I need to add something here", "I don't have a binding for square in this frame", "But because it inherits from this global frame  I can find", "a binding up there", "So if there's not something locally here  I basically go", "up and look for the binding up there", "So square is itself a procedure", "Aha", "That says  create a new frame", "this is coming from the invocation of square", "in which I take the formal parameter for that procedure", "And yes  it's x once again", "And I create a binding of x there to the", "value I have here", "Remember  I was asking for the square of x in this frame", "So that binding becomes the binding", "for x inside of square", "And then relative to this frame  I", "actually evaluate square", "It says  take the value of x  multiply it by", "itself  and return it", "I know there's a lot going on  but it's important to see how", "those different frames come up", "I've got a frame coming from calling square", "It is being called with the value   as the", "local binding for x", "I multiply it by itself and I return it", "And that  of course  is going to give me a", "And that's what I get", "I get a binding of x equal to", "This frame is now going to go away because I", "no longer need it", "It came around   it was around because I had square", "And there's my bug", "And the other piece  it says  is now take n  which was", "and rebind it to be n divided by", "So I've now got a new local frame here", "Notice this is capturing a computation", "I've gone from   to the  th  to   to the  th", "Cool", "That's what I'd like", "Let's see what happens", "I go back around that while loop", "OK", "There's my bug  that's n", "n is still bigger than", "So what does it say to do", "It says  get square  Which I find by going up and finding", "that binding", "Create the frame", "And notice again  it's bound by where that says", "it should be bound", "And inside of there  this procedure object says  bind x", "to the value past in  which was", "It's getting that value of   from here", "And relative to that  execute square  which multiplies x by", "itself and returns", "And that's going to be what that gets bound to", "And then I'm going to take n and reduce it by", "So in fact  when I get to this stage  I now have a binding", "locally here for x of   and n of", "And you can see it's doing the competition I'd like", "This frame again is going to go away because it was what I", "used when I did that previous call to square", "So what I want you to see is that each call to each", "procedure creates its own frame", "It inherits from the environment where the", "procedure said it should", "And locally  I'm still keeping track of this", "So if I  in fact  go one more round around  again  I'm going", "to come to square here", "It calls square one more time", "That binding of x comes from what the square procedure", "should say", "The value passed in is the value passed in from where I'm", "doing the computation", "I do the squaring", "And I get one more stage", "And of course  now when I go around to the while loop  n is", "no longer bigger than", "And I'm just going to return the value of x", "And remember  this computation is taking place here", "And so the right value of x gets returned  which is", "And it gets printed out", "I understand there were a lot of frames going on", "But mechanically  you can see that those rules exactly", "describe it", "Each local procedure has a local computation involving x", "And in fact  one of the things you can see now is that this", "clears up that potential confusion about who's dealing", "with which version of what parameter", "So let's capture that", "Notice how each call to square created a new frame with the", "local binding for x for square", "The value of x in the global environment was never confused", "with the value that was being used for square or the value", "that was being used inside that iterative", "loop inside of twoPower", "That value of the call to square is different from that", "binding  in fact  for the value inside of twoPower", "So each one of those was kept separate", "And as a consequence  these rules make it clear that we", "can mechanically keep track of the right value", "And the other thing this does is it lets us go back to that", "earlier issue  which is  can I reuse the same variable name", "So I can  in fact  have the same variable name in", "different procedures", "Because the rules for invoking the procedure keep track of", "which value matters", "If this is confusing to you  walk through an example again", "just to see for yourself how each procedure call creates", "that local context  that lexical scoping that captures", "what versions of the parameters are important to", "each computation"]}